/*
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

import * as components from "../components";
import * as z from "zod";

/**
 * The type of record, it could be one of the valid DNS records.
 */
export enum CreateRecordRequestBodyDnsRequest10Type {
    A = "A",
    Aaaa = "AAAA",
    Alias = "ALIAS",
    Caa = "CAA",
    Cname = "CNAME",
    Https = "HTTPS",
    Mx = "MX",
    Srv = "SRV",
    Txt = "TXT",
    Ns = "NS",
}

export type RequestBodyHttps = {
    priority: number | null;
    target: string;
    params?: string | undefined;
};

export type Ten = {
    /**
     * A subdomain name or an empty string for the root domain.
     */
    name: string;
    /**
     * The type of record, it could be one of the valid DNS records.
     */
    type: CreateRecordRequestBodyDnsRequest10Type;
    /**
     * The TTL value. Must be a number between 60 and 2147483647. Default value is 60.
     */
    ttl?: number | undefined;
    https: RequestBodyHttps;
    /**
     * A comment to add context on what this DNS record is for
     */
    comment?: string | undefined;
};

/**
 * The type of record, it could be one of the valid DNS records.
 */
export enum CreateRecordRequestBodyDnsRequest9Type {
    A = "A",
    Aaaa = "AAAA",
    Alias = "ALIAS",
    Caa = "CAA",
    Cname = "CNAME",
    Https = "HTTPS",
    Mx = "MX",
    Srv = "SRV",
    Txt = "TXT",
    Ns = "NS",
}

export type Nine = {
    /**
     * A subdomain name.
     */
    name: string;
    /**
     * The type of record, it could be one of the valid DNS records.
     */
    type: CreateRecordRequestBodyDnsRequest9Type;
    /**
     * The TTL value. Must be a number between 60 and 2147483647. Default value is 60.
     */
    ttl?: number | undefined;
    /**
     * An NS domain value.
     */
    value?: string | undefined;
    /**
     * A comment to add context on what this DNS record is for
     */
    comment?: string | undefined;
};

/**
 * The type of record, it could be one of the valid DNS records.
 */
export enum CreateRecordRequestBodyDnsRequest8Type {
    A = "A",
    Aaaa = "AAAA",
    Alias = "ALIAS",
    Caa = "CAA",
    Cname = "CNAME",
    Https = "HTTPS",
    Mx = "MX",
    Srv = "SRV",
    Txt = "TXT",
    Ns = "NS",
}

export type Eight = {
    /**
     * A subdomain name or an empty string for the root domain.
     */
    name: string;
    /**
     * The type of record, it could be one of the valid DNS records.
     */
    type: CreateRecordRequestBodyDnsRequest8Type;
    /**
     * The TTL value. Must be a number between 60 and 2147483647. Default value is 60.
     */
    ttl?: number | undefined;
    /**
     * A TXT record containing arbitrary text.
     */
    value: string;
    /**
     * A comment to add context on what this DNS record is for
     */
    comment?: string | undefined;
};

/**
 * The type of record, it could be one of the valid DNS records.
 */
export enum CreateRecordRequestBodyDnsRequest7Type {
    A = "A",
    Aaaa = "AAAA",
    Alias = "ALIAS",
    Caa = "CAA",
    Cname = "CNAME",
    Https = "HTTPS",
    Mx = "MX",
    Srv = "SRV",
    Txt = "TXT",
    Ns = "NS",
}

export type RequestBodySrv = {
    priority: number | null;
    weight: number | null;
    port: number | null;
    target: string;
};

export type Seven = {
    /**
     * A subdomain name or an empty string for the root domain.
     */
    name: string;
    /**
     * The type of record, it could be one of the valid DNS records.
     */
    type: CreateRecordRequestBodyDnsRequest7Type;
    /**
     * The TTL value. Must be a number between 60 and 2147483647. Default value is 60.
     */
    ttl?: number | undefined;
    srv: RequestBodySrv;
    /**
     * A comment to add context on what this DNS record is for
     */
    comment?: string | undefined;
};

/**
 * The type of record, it could be one of the valid DNS records.
 */
export enum CreateRecordRequestBodyDnsRequest6Type {
    A = "A",
    Aaaa = "AAAA",
    Alias = "ALIAS",
    Caa = "CAA",
    Cname = "CNAME",
    Https = "HTTPS",
    Mx = "MX",
    Srv = "SRV",
    Txt = "TXT",
    Ns = "NS",
}

export type Six = {
    /**
     * A subdomain name or an empty string for the root domain.
     */
    name: string;
    /**
     * The type of record, it could be one of the valid DNS records.
     */
    type: CreateRecordRequestBodyDnsRequest6Type;
    /**
     * The TTL value. Must be a number between 60 and 2147483647. Default value is 60.
     */
    ttl?: number | undefined;
    /**
     * An MX record specifying the mail server responsible for accepting messages on behalf of the domain name.
     */
    value: string;
    mxPriority: number;
    /**
     * A comment to add context on what this DNS record is for
     */
    comment?: string | undefined;
};

/**
 * The type of record, it could be one of the valid DNS records.
 */
export enum CreateRecordRequestBodyDnsRequestType {
    A = "A",
    Aaaa = "AAAA",
    Alias = "ALIAS",
    Caa = "CAA",
    Cname = "CNAME",
    Https = "HTTPS",
    Mx = "MX",
    Srv = "SRV",
    Txt = "TXT",
    Ns = "NS",
}

export type Five = {
    /**
     * A subdomain name or an empty string for the root domain.
     */
    name: string;
    /**
     * The type of record, it could be one of the valid DNS records.
     */
    type: CreateRecordRequestBodyDnsRequestType;
    /**
     * The TTL value. Must be a number between 60 and 2147483647. Default value is 60.
     */
    ttl?: number | undefined;
    /**
     * A CNAME record mapping to another domain name.
     */
    value?: string | undefined;
    /**
     * A comment to add context on what this DNS record is for
     */
    comment?: string | undefined;
};

/**
 * The type of record, it could be one of the valid DNS records.
 */
export enum CreateRecordRequestBodyDnsType {
    A = "A",
    Aaaa = "AAAA",
    Alias = "ALIAS",
    Caa = "CAA",
    Cname = "CNAME",
    Https = "HTTPS",
    Mx = "MX",
    Srv = "SRV",
    Txt = "TXT",
    Ns = "NS",
}

export type Four = {
    /**
     * A subdomain name or an empty string for the root domain.
     */
    name: string;
    /**
     * The type of record, it could be one of the valid DNS records.
     */
    type: CreateRecordRequestBodyDnsType;
    /**
     * The TTL value. Must be a number between 60 and 2147483647. Default value is 60.
     */
    ttl?: number | undefined;
    /**
     * A CAA record to specify which Certificate Authorities (CAs) are allowed to issue certificates for the domain.
     */
    value: string;
    /**
     * A comment to add context on what this DNS record is for
     */
    comment?: string | undefined;
};

/**
 * The type of record, it could be one of the valid DNS records.
 */
export enum CreateRecordRequestBodyType {
    A = "A",
    Aaaa = "AAAA",
    Alias = "ALIAS",
    Caa = "CAA",
    Cname = "CNAME",
    Https = "HTTPS",
    Mx = "MX",
    Srv = "SRV",
    Txt = "TXT",
    Ns = "NS",
}

export type Three = {
    /**
     * A subdomain name or an empty string for the root domain.
     */
    name: string;
    /**
     * The type of record, it could be one of the valid DNS records.
     */
    type: CreateRecordRequestBodyType;
    /**
     * The TTL value. Must be a number between 60 and 2147483647. Default value is 60.
     */
    ttl?: number | undefined;
    /**
     * An ALIAS virtual record pointing to a hostname resolved to an A record on server side.
     */
    value: string;
    /**
     * A comment to add context on what this DNS record is for
     */
    comment?: string | undefined;
};

/**
 * The type of record, it could be one of the valid DNS records.
 */
export enum RequestBodyType {
    A = "A",
    Aaaa = "AAAA",
    Alias = "ALIAS",
    Caa = "CAA",
    Cname = "CNAME",
    Https = "HTTPS",
    Mx = "MX",
    Srv = "SRV",
    Txt = "TXT",
    Ns = "NS",
}

export type Two = {
    /**
     * A subdomain name or an empty string for the root domain.
     */
    name: string;
    /**
     * The type of record, it could be one of the valid DNS records.
     */
    type: RequestBodyType;
    /**
     * The TTL value. Must be a number between 60 and 2147483647. Default value is 60.
     */
    ttl?: number | undefined;
    /**
     * An AAAA record pointing to an IPv6 address.
     */
    value: string;
    /**
     * A comment to add context on what this DNS record is for
     */
    comment?: string | undefined;
};

/**
 * The type of record, it could be one of the valid DNS records.
 */
export enum CreateRecordRequestBodyDnsRequest1Type {
    A = "A",
    Aaaa = "AAAA",
    Alias = "ALIAS",
    Caa = "CAA",
    Cname = "CNAME",
    Https = "HTTPS",
    Mx = "MX",
    Srv = "SRV",
    Txt = "TXT",
    Ns = "NS",
}

export type One = {
    /**
     * A subdomain name or an empty string for the root domain.
     */
    name: string;
    /**
     * The type of record, it could be one of the valid DNS records.
     */
    type: CreateRecordRequestBodyDnsRequest1Type;
    /**
     * The TTL value. Must be a number between 60 and 2147483647. Default value is 60.
     */
    ttl?: number | undefined;
    /**
     * The record value must be a valid IPv4 address.
     */
    value: string;
    /**
     * A comment to add context on what this DNS record is for
     */
    comment?: string | undefined;
};

export type CreateRecordRequestBody =
    | One
    | Two
    | Three
    | Four
    | Five
    | Seven
    | Eight
    | Nine
    | Ten
    | Six;

export type CreateRecordRequest = {
    /**
     * The domain used to create the DNS record.
     */
    domain: string;
    /**
     * The Team identifier to perform the request on behalf of.
     */
    teamId?: string | undefined;
    /**
     * The Team slug to perform the request on behalf of.
     */
    slug?: string | undefined;
    requestBody?: One | Two | Three | Four | Five | Seven | Eight | Nine | Ten | Six | undefined;
};

export type CreateRecordResponseBody2 = {
    /**
     * The id of the newly created DNS record
     */
    uid: string;
};

export type ResponseBody1 = {
    uid: string;
    updated: number;
};

/**
 * Successful response showing the uid of the newly created DNS record.
 */
export type CreateRecordResponseBody = CreateRecordResponseBody2 | ResponseBody1;

export type CreateRecordResponse = {
    httpMeta: components.HTTPMetadata;
    /**
     * Successful response showing the uid of the newly created DNS record.
     */
    oneOf?: CreateRecordResponseBody2 | ResponseBody1 | undefined;
};

/** @internal */
export namespace CreateRecordRequestBodyDnsRequest10Type$ {
    export const inboundSchema = z.nativeEnum(CreateRecordRequestBodyDnsRequest10Type);
    export const outboundSchema = inboundSchema;
}

/** @internal */
export namespace RequestBodyHttps$ {
    export const inboundSchema: z.ZodType<RequestBodyHttps, z.ZodTypeDef, unknown> = z
        .object({
            priority: z.nullable(z.number()),
            target: z.string(),
            params: z.string().optional(),
        })
        .transform((v) => {
            return {
                priority: v.priority,
                target: v.target,
                ...(v.params === undefined ? null : { params: v.params }),
            };
        });

    export type Outbound = {
        priority: number | null;
        target: string;
        params?: string | undefined;
    };

    export const outboundSchema: z.ZodType<Outbound, z.ZodTypeDef, RequestBodyHttps> = z
        .object({
            priority: z.nullable(z.number()),
            target: z.string(),
            params: z.string().optional(),
        })
        .transform((v) => {
            return {
                priority: v.priority,
                target: v.target,
                ...(v.params === undefined ? null : { params: v.params }),
            };
        });
}

/** @internal */
export namespace Ten$ {
    export const inboundSchema: z.ZodType<Ten, z.ZodTypeDef, unknown> = z
        .object({
            name: z.string(),
            type: CreateRecordRequestBodyDnsRequest10Type$.inboundSchema,
            ttl: z.number().optional(),
            https: z.lazy(() => RequestBodyHttps$.inboundSchema),
            comment: z.string().optional(),
        })
        .transform((v) => {
            return {
                name: v.name,
                type: v.type,
                ...(v.ttl === undefined ? null : { ttl: v.ttl }),
                https: v.https,
                ...(v.comment === undefined ? null : { comment: v.comment }),
            };
        });

    export type Outbound = {
        name: string;
        type: string;
        ttl?: number | undefined;
        https: RequestBodyHttps$.Outbound;
        comment?: string | undefined;
    };

    export const outboundSchema: z.ZodType<Outbound, z.ZodTypeDef, Ten> = z
        .object({
            name: z.string(),
            type: CreateRecordRequestBodyDnsRequest10Type$.outboundSchema,
            ttl: z.number().optional(),
            https: z.lazy(() => RequestBodyHttps$.outboundSchema),
            comment: z.string().optional(),
        })
        .transform((v) => {
            return {
                name: v.name,
                type: v.type,
                ...(v.ttl === undefined ? null : { ttl: v.ttl }),
                https: v.https,
                ...(v.comment === undefined ? null : { comment: v.comment }),
            };
        });
}

/** @internal */
export namespace CreateRecordRequestBodyDnsRequest9Type$ {
    export const inboundSchema = z.nativeEnum(CreateRecordRequestBodyDnsRequest9Type);
    export const outboundSchema = inboundSchema;
}

/** @internal */
export namespace Nine$ {
    export const inboundSchema: z.ZodType<Nine, z.ZodTypeDef, unknown> = z
        .object({
            name: z.string(),
            type: CreateRecordRequestBodyDnsRequest9Type$.inboundSchema,
            ttl: z.number().optional(),
            value: z.string().optional(),
            comment: z.string().optional(),
        })
        .transform((v) => {
            return {
                name: v.name,
                type: v.type,
                ...(v.ttl === undefined ? null : { ttl: v.ttl }),
                ...(v.value === undefined ? null : { value: v.value }),
                ...(v.comment === undefined ? null : { comment: v.comment }),
            };
        });

    export type Outbound = {
        name: string;
        type: string;
        ttl?: number | undefined;
        value?: string | undefined;
        comment?: string | undefined;
    };

    export const outboundSchema: z.ZodType<Outbound, z.ZodTypeDef, Nine> = z
        .object({
            name: z.string(),
            type: CreateRecordRequestBodyDnsRequest9Type$.outboundSchema,
            ttl: z.number().optional(),
            value: z.string().optional(),
            comment: z.string().optional(),
        })
        .transform((v) => {
            return {
                name: v.name,
                type: v.type,
                ...(v.ttl === undefined ? null : { ttl: v.ttl }),
                ...(v.value === undefined ? null : { value: v.value }),
                ...(v.comment === undefined ? null : { comment: v.comment }),
            };
        });
}

/** @internal */
export namespace CreateRecordRequestBodyDnsRequest8Type$ {
    export const inboundSchema = z.nativeEnum(CreateRecordRequestBodyDnsRequest8Type);
    export const outboundSchema = inboundSchema;
}

/** @internal */
export namespace Eight$ {
    export const inboundSchema: z.ZodType<Eight, z.ZodTypeDef, unknown> = z
        .object({
            name: z.string(),
            type: CreateRecordRequestBodyDnsRequest8Type$.inboundSchema,
            ttl: z.number().optional(),
            value: z.string(),
            comment: z.string().optional(),
        })
        .transform((v) => {
            return {
                name: v.name,
                type: v.type,
                ...(v.ttl === undefined ? null : { ttl: v.ttl }),
                value: v.value,
                ...(v.comment === undefined ? null : { comment: v.comment }),
            };
        });

    export type Outbound = {
        name: string;
        type: string;
        ttl?: number | undefined;
        value: string;
        comment?: string | undefined;
    };

    export const outboundSchema: z.ZodType<Outbound, z.ZodTypeDef, Eight> = z
        .object({
            name: z.string(),
            type: CreateRecordRequestBodyDnsRequest8Type$.outboundSchema,
            ttl: z.number().optional(),
            value: z.string(),
            comment: z.string().optional(),
        })
        .transform((v) => {
            return {
                name: v.name,
                type: v.type,
                ...(v.ttl === undefined ? null : { ttl: v.ttl }),
                value: v.value,
                ...(v.comment === undefined ? null : { comment: v.comment }),
            };
        });
}

/** @internal */
export namespace CreateRecordRequestBodyDnsRequest7Type$ {
    export const inboundSchema = z.nativeEnum(CreateRecordRequestBodyDnsRequest7Type);
    export const outboundSchema = inboundSchema;
}

/** @internal */
export namespace RequestBodySrv$ {
    export const inboundSchema: z.ZodType<RequestBodySrv, z.ZodTypeDef, unknown> = z
        .object({
            priority: z.nullable(z.number()),
            weight: z.nullable(z.number()),
            port: z.nullable(z.number()),
            target: z.string(),
        })
        .transform((v) => {
            return {
                priority: v.priority,
                weight: v.weight,
                port: v.port,
                target: v.target,
            };
        });

    export type Outbound = {
        priority: number | null;
        weight: number | null;
        port: number | null;
        target: string;
    };

    export const outboundSchema: z.ZodType<Outbound, z.ZodTypeDef, RequestBodySrv> = z
        .object({
            priority: z.nullable(z.number()),
            weight: z.nullable(z.number()),
            port: z.nullable(z.number()),
            target: z.string(),
        })
        .transform((v) => {
            return {
                priority: v.priority,
                weight: v.weight,
                port: v.port,
                target: v.target,
            };
        });
}

/** @internal */
export namespace Seven$ {
    export const inboundSchema: z.ZodType<Seven, z.ZodTypeDef, unknown> = z
        .object({
            name: z.string(),
            type: CreateRecordRequestBodyDnsRequest7Type$.inboundSchema,
            ttl: z.number().optional(),
            srv: z.lazy(() => RequestBodySrv$.inboundSchema),
            comment: z.string().optional(),
        })
        .transform((v) => {
            return {
                name: v.name,
                type: v.type,
                ...(v.ttl === undefined ? null : { ttl: v.ttl }),
                srv: v.srv,
                ...(v.comment === undefined ? null : { comment: v.comment }),
            };
        });

    export type Outbound = {
        name: string;
        type: string;
        ttl?: number | undefined;
        srv: RequestBodySrv$.Outbound;
        comment?: string | undefined;
    };

    export const outboundSchema: z.ZodType<Outbound, z.ZodTypeDef, Seven> = z
        .object({
            name: z.string(),
            type: CreateRecordRequestBodyDnsRequest7Type$.outboundSchema,
            ttl: z.number().optional(),
            srv: z.lazy(() => RequestBodySrv$.outboundSchema),
            comment: z.string().optional(),
        })
        .transform((v) => {
            return {
                name: v.name,
                type: v.type,
                ...(v.ttl === undefined ? null : { ttl: v.ttl }),
                srv: v.srv,
                ...(v.comment === undefined ? null : { comment: v.comment }),
            };
        });
}

/** @internal */
export namespace CreateRecordRequestBodyDnsRequest6Type$ {
    export const inboundSchema = z.nativeEnum(CreateRecordRequestBodyDnsRequest6Type);
    export const outboundSchema = inboundSchema;
}

/** @internal */
export namespace Six$ {
    export const inboundSchema: z.ZodType<Six, z.ZodTypeDef, unknown> = z
        .object({
            name: z.string(),
            type: CreateRecordRequestBodyDnsRequest6Type$.inboundSchema,
            ttl: z.number().optional(),
            value: z.string(),
            mxPriority: z.number(),
            comment: z.string().optional(),
        })
        .transform((v) => {
            return {
                name: v.name,
                type: v.type,
                ...(v.ttl === undefined ? null : { ttl: v.ttl }),
                value: v.value,
                mxPriority: v.mxPriority,
                ...(v.comment === undefined ? null : { comment: v.comment }),
            };
        });

    export type Outbound = {
        name: string;
        type: string;
        ttl?: number | undefined;
        value: string;
        mxPriority: number;
        comment?: string | undefined;
    };

    export const outboundSchema: z.ZodType<Outbound, z.ZodTypeDef, Six> = z
        .object({
            name: z.string(),
            type: CreateRecordRequestBodyDnsRequest6Type$.outboundSchema,
            ttl: z.number().optional(),
            value: z.string(),
            mxPriority: z.number(),
            comment: z.string().optional(),
        })
        .transform((v) => {
            return {
                name: v.name,
                type: v.type,
                ...(v.ttl === undefined ? null : { ttl: v.ttl }),
                value: v.value,
                mxPriority: v.mxPriority,
                ...(v.comment === undefined ? null : { comment: v.comment }),
            };
        });
}

/** @internal */
export namespace CreateRecordRequestBodyDnsRequestType$ {
    export const inboundSchema = z.nativeEnum(CreateRecordRequestBodyDnsRequestType);
    export const outboundSchema = inboundSchema;
}

/** @internal */
export namespace Five$ {
    export const inboundSchema: z.ZodType<Five, z.ZodTypeDef, unknown> = z
        .object({
            name: z.string(),
            type: CreateRecordRequestBodyDnsRequestType$.inboundSchema,
            ttl: z.number().optional(),
            value: z.string().optional(),
            comment: z.string().optional(),
        })
        .transform((v) => {
            return {
                name: v.name,
                type: v.type,
                ...(v.ttl === undefined ? null : { ttl: v.ttl }),
                ...(v.value === undefined ? null : { value: v.value }),
                ...(v.comment === undefined ? null : { comment: v.comment }),
            };
        });

    export type Outbound = {
        name: string;
        type: string;
        ttl?: number | undefined;
        value?: string | undefined;
        comment?: string | undefined;
    };

    export const outboundSchema: z.ZodType<Outbound, z.ZodTypeDef, Five> = z
        .object({
            name: z.string(),
            type: CreateRecordRequestBodyDnsRequestType$.outboundSchema,
            ttl: z.number().optional(),
            value: z.string().optional(),
            comment: z.string().optional(),
        })
        .transform((v) => {
            return {
                name: v.name,
                type: v.type,
                ...(v.ttl === undefined ? null : { ttl: v.ttl }),
                ...(v.value === undefined ? null : { value: v.value }),
                ...(v.comment === undefined ? null : { comment: v.comment }),
            };
        });
}

/** @internal */
export namespace CreateRecordRequestBodyDnsType$ {
    export const inboundSchema = z.nativeEnum(CreateRecordRequestBodyDnsType);
    export const outboundSchema = inboundSchema;
}

/** @internal */
export namespace Four$ {
    export const inboundSchema: z.ZodType<Four, z.ZodTypeDef, unknown> = z
        .object({
            name: z.string(),
            type: CreateRecordRequestBodyDnsType$.inboundSchema,
            ttl: z.number().optional(),
            value: z.string(),
            comment: z.string().optional(),
        })
        .transform((v) => {
            return {
                name: v.name,
                type: v.type,
                ...(v.ttl === undefined ? null : { ttl: v.ttl }),
                value: v.value,
                ...(v.comment === undefined ? null : { comment: v.comment }),
            };
        });

    export type Outbound = {
        name: string;
        type: string;
        ttl?: number | undefined;
        value: string;
        comment?: string | undefined;
    };

    export const outboundSchema: z.ZodType<Outbound, z.ZodTypeDef, Four> = z
        .object({
            name: z.string(),
            type: CreateRecordRequestBodyDnsType$.outboundSchema,
            ttl: z.number().optional(),
            value: z.string(),
            comment: z.string().optional(),
        })
        .transform((v) => {
            return {
                name: v.name,
                type: v.type,
                ...(v.ttl === undefined ? null : { ttl: v.ttl }),
                value: v.value,
                ...(v.comment === undefined ? null : { comment: v.comment }),
            };
        });
}

/** @internal */
export namespace CreateRecordRequestBodyType$ {
    export const inboundSchema = z.nativeEnum(CreateRecordRequestBodyType);
    export const outboundSchema = inboundSchema;
}

/** @internal */
export namespace Three$ {
    export const inboundSchema: z.ZodType<Three, z.ZodTypeDef, unknown> = z
        .object({
            name: z.string(),
            type: CreateRecordRequestBodyType$.inboundSchema,
            ttl: z.number().optional(),
            value: z.string(),
            comment: z.string().optional(),
        })
        .transform((v) => {
            return {
                name: v.name,
                type: v.type,
                ...(v.ttl === undefined ? null : { ttl: v.ttl }),
                value: v.value,
                ...(v.comment === undefined ? null : { comment: v.comment }),
            };
        });

    export type Outbound = {
        name: string;
        type: string;
        ttl?: number | undefined;
        value: string;
        comment?: string | undefined;
    };

    export const outboundSchema: z.ZodType<Outbound, z.ZodTypeDef, Three> = z
        .object({
            name: z.string(),
            type: CreateRecordRequestBodyType$.outboundSchema,
            ttl: z.number().optional(),
            value: z.string(),
            comment: z.string().optional(),
        })
        .transform((v) => {
            return {
                name: v.name,
                type: v.type,
                ...(v.ttl === undefined ? null : { ttl: v.ttl }),
                value: v.value,
                ...(v.comment === undefined ? null : { comment: v.comment }),
            };
        });
}

/** @internal */
export namespace RequestBodyType$ {
    export const inboundSchema = z.nativeEnum(RequestBodyType);
    export const outboundSchema = inboundSchema;
}

/** @internal */
export namespace Two$ {
    export const inboundSchema: z.ZodType<Two, z.ZodTypeDef, unknown> = z
        .object({
            name: z.string(),
            type: RequestBodyType$.inboundSchema,
            ttl: z.number().optional(),
            value: z.string(),
            comment: z.string().optional(),
        })
        .transform((v) => {
            return {
                name: v.name,
                type: v.type,
                ...(v.ttl === undefined ? null : { ttl: v.ttl }),
                value: v.value,
                ...(v.comment === undefined ? null : { comment: v.comment }),
            };
        });

    export type Outbound = {
        name: string;
        type: string;
        ttl?: number | undefined;
        value: string;
        comment?: string | undefined;
    };

    export const outboundSchema: z.ZodType<Outbound, z.ZodTypeDef, Two> = z
        .object({
            name: z.string(),
            type: RequestBodyType$.outboundSchema,
            ttl: z.number().optional(),
            value: z.string(),
            comment: z.string().optional(),
        })
        .transform((v) => {
            return {
                name: v.name,
                type: v.type,
                ...(v.ttl === undefined ? null : { ttl: v.ttl }),
                value: v.value,
                ...(v.comment === undefined ? null : { comment: v.comment }),
            };
        });
}

/** @internal */
export namespace CreateRecordRequestBodyDnsRequest1Type$ {
    export const inboundSchema = z.nativeEnum(CreateRecordRequestBodyDnsRequest1Type);
    export const outboundSchema = inboundSchema;
}

/** @internal */
export namespace One$ {
    export const inboundSchema: z.ZodType<One, z.ZodTypeDef, unknown> = z
        .object({
            name: z.string(),
            type: CreateRecordRequestBodyDnsRequest1Type$.inboundSchema,
            ttl: z.number().optional(),
            value: z.string(),
            comment: z.string().optional(),
        })
        .transform((v) => {
            return {
                name: v.name,
                type: v.type,
                ...(v.ttl === undefined ? null : { ttl: v.ttl }),
                value: v.value,
                ...(v.comment === undefined ? null : { comment: v.comment }),
            };
        });

    export type Outbound = {
        name: string;
        type: string;
        ttl?: number | undefined;
        value: string;
        comment?: string | undefined;
    };

    export const outboundSchema: z.ZodType<Outbound, z.ZodTypeDef, One> = z
        .object({
            name: z.string(),
            type: CreateRecordRequestBodyDnsRequest1Type$.outboundSchema,
            ttl: z.number().optional(),
            value: z.string(),
            comment: z.string().optional(),
        })
        .transform((v) => {
            return {
                name: v.name,
                type: v.type,
                ...(v.ttl === undefined ? null : { ttl: v.ttl }),
                value: v.value,
                ...(v.comment === undefined ? null : { comment: v.comment }),
            };
        });
}

/** @internal */
export namespace CreateRecordRequestBody$ {
    export const inboundSchema: z.ZodType<CreateRecordRequestBody, z.ZodTypeDef, unknown> = z.union(
        [
            z.lazy(() => One$.inboundSchema),
            z.lazy(() => Two$.inboundSchema),
            z.lazy(() => Three$.inboundSchema),
            z.lazy(() => Four$.inboundSchema),
            z.lazy(() => Five$.inboundSchema),
            z.lazy(() => Seven$.inboundSchema),
            z.lazy(() => Eight$.inboundSchema),
            z.lazy(() => Nine$.inboundSchema),
            z.lazy(() => Ten$.inboundSchema),
            z.lazy(() => Six$.inboundSchema),
        ]
    );

    export type Outbound =
        | One$.Outbound
        | Two$.Outbound
        | Three$.Outbound
        | Four$.Outbound
        | Five$.Outbound
        | Seven$.Outbound
        | Eight$.Outbound
        | Nine$.Outbound
        | Ten$.Outbound
        | Six$.Outbound;
    export const outboundSchema: z.ZodType<Outbound, z.ZodTypeDef, CreateRecordRequestBody> =
        z.union([
            z.lazy(() => One$.outboundSchema),
            z.lazy(() => Two$.outboundSchema),
            z.lazy(() => Three$.outboundSchema),
            z.lazy(() => Four$.outboundSchema),
            z.lazy(() => Five$.outboundSchema),
            z.lazy(() => Seven$.outboundSchema),
            z.lazy(() => Eight$.outboundSchema),
            z.lazy(() => Nine$.outboundSchema),
            z.lazy(() => Ten$.outboundSchema),
            z.lazy(() => Six$.outboundSchema),
        ]);
}

/** @internal */
export namespace CreateRecordRequest$ {
    export const inboundSchema: z.ZodType<CreateRecordRequest, z.ZodTypeDef, unknown> = z
        .object({
            domain: z.string(),
            teamId: z.string().optional(),
            slug: z.string().optional(),
            RequestBody: z
                .union([
                    z.lazy(() => One$.inboundSchema),
                    z.lazy(() => Two$.inboundSchema),
                    z.lazy(() => Three$.inboundSchema),
                    z.lazy(() => Four$.inboundSchema),
                    z.lazy(() => Five$.inboundSchema),
                    z.lazy(() => Seven$.inboundSchema),
                    z.lazy(() => Eight$.inboundSchema),
                    z.lazy(() => Nine$.inboundSchema),
                    z.lazy(() => Ten$.inboundSchema),
                    z.lazy(() => Six$.inboundSchema),
                ])
                .optional(),
        })
        .transform((v) => {
            return {
                domain: v.domain,
                ...(v.teamId === undefined ? null : { teamId: v.teamId }),
                ...(v.slug === undefined ? null : { slug: v.slug }),
                ...(v.RequestBody === undefined ? null : { requestBody: v.RequestBody }),
            };
        });

    export type Outbound = {
        domain: string;
        teamId?: string | undefined;
        slug?: string | undefined;
        RequestBody?:
            | One$.Outbound
            | Two$.Outbound
            | Three$.Outbound
            | Four$.Outbound
            | Five$.Outbound
            | Seven$.Outbound
            | Eight$.Outbound
            | Nine$.Outbound
            | Ten$.Outbound
            | Six$.Outbound
            | undefined;
    };

    export const outboundSchema: z.ZodType<Outbound, z.ZodTypeDef, CreateRecordRequest> = z
        .object({
            domain: z.string(),
            teamId: z.string().optional(),
            slug: z.string().optional(),
            requestBody: z
                .union([
                    z.lazy(() => One$.outboundSchema),
                    z.lazy(() => Two$.outboundSchema),
                    z.lazy(() => Three$.outboundSchema),
                    z.lazy(() => Four$.outboundSchema),
                    z.lazy(() => Five$.outboundSchema),
                    z.lazy(() => Seven$.outboundSchema),
                    z.lazy(() => Eight$.outboundSchema),
                    z.lazy(() => Nine$.outboundSchema),
                    z.lazy(() => Ten$.outboundSchema),
                    z.lazy(() => Six$.outboundSchema),
                ])
                .optional(),
        })
        .transform((v) => {
            return {
                domain: v.domain,
                ...(v.teamId === undefined ? null : { teamId: v.teamId }),
                ...(v.slug === undefined ? null : { slug: v.slug }),
                ...(v.requestBody === undefined ? null : { RequestBody: v.requestBody }),
            };
        });
}

/** @internal */
export namespace CreateRecordResponseBody2$ {
    export const inboundSchema: z.ZodType<CreateRecordResponseBody2, z.ZodTypeDef, unknown> = z
        .object({
            uid: z.string(),
        })
        .transform((v) => {
            return {
                uid: v.uid,
            };
        });

    export type Outbound = {
        uid: string;
    };

    export const outboundSchema: z.ZodType<Outbound, z.ZodTypeDef, CreateRecordResponseBody2> = z
        .object({
            uid: z.string(),
        })
        .transform((v) => {
            return {
                uid: v.uid,
            };
        });
}

/** @internal */
export namespace ResponseBody1$ {
    export const inboundSchema: z.ZodType<ResponseBody1, z.ZodTypeDef, unknown> = z
        .object({
            uid: z.string(),
            updated: z.number(),
        })
        .transform((v) => {
            return {
                uid: v.uid,
                updated: v.updated,
            };
        });

    export type Outbound = {
        uid: string;
        updated: number;
    };

    export const outboundSchema: z.ZodType<Outbound, z.ZodTypeDef, ResponseBody1> = z
        .object({
            uid: z.string(),
            updated: z.number(),
        })
        .transform((v) => {
            return {
                uid: v.uid,
                updated: v.updated,
            };
        });
}

/** @internal */
export namespace CreateRecordResponseBody$ {
    export const inboundSchema: z.ZodType<CreateRecordResponseBody, z.ZodTypeDef, unknown> =
        z.union([
            z.lazy(() => CreateRecordResponseBody2$.inboundSchema),
            z.lazy(() => ResponseBody1$.inboundSchema),
        ]);

    export type Outbound = CreateRecordResponseBody2$.Outbound | ResponseBody1$.Outbound;
    export const outboundSchema: z.ZodType<Outbound, z.ZodTypeDef, CreateRecordResponseBody> =
        z.union([
            z.lazy(() => CreateRecordResponseBody2$.outboundSchema),
            z.lazy(() => ResponseBody1$.outboundSchema),
        ]);
}

/** @internal */
export namespace CreateRecordResponse$ {
    export const inboundSchema: z.ZodType<CreateRecordResponse, z.ZodTypeDef, unknown> = z
        .object({
            HttpMeta: components.HTTPMetadata$.inboundSchema,
            oneOf: z
                .union([
                    z.lazy(() => CreateRecordResponseBody2$.inboundSchema),
                    z.lazy(() => ResponseBody1$.inboundSchema),
                ])
                .optional(),
        })
        .transform((v) => {
            return {
                httpMeta: v.HttpMeta,
                ...(v.oneOf === undefined ? null : { oneOf: v.oneOf }),
            };
        });

    export type Outbound = {
        HttpMeta: components.HTTPMetadata$.Outbound;
        oneOf?: CreateRecordResponseBody2$.Outbound | ResponseBody1$.Outbound | undefined;
    };

    export const outboundSchema: z.ZodType<Outbound, z.ZodTypeDef, CreateRecordResponse> = z
        .object({
            httpMeta: components.HTTPMetadata$.outboundSchema,
            oneOf: z
                .union([
                    z.lazy(() => CreateRecordResponseBody2$.outboundSchema),
                    z.lazy(() => ResponseBody1$.outboundSchema),
                ])
                .optional(),
        })
        .transform((v) => {
            return {
                HttpMeta: v.httpMeta,
                ...(v.oneOf === undefined ? null : { oneOf: v.oneOf }),
            };
        });
}
