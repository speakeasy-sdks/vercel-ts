/*
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

import * as components from "../components";
import * as z from "zod";

export type GetConfigurationRequest = {
    /**
     * ID of the configuration to check
     */
    id: string;
    /**
     * The Team identifier to perform the request on behalf of.
     */
    teamId?: string | undefined;
    /**
     * The Team slug to perform the request on behalf of.
     */
    slug?: string | undefined;
};

/**
 * A string representing the permission for projects. Possible values are `all` or `selected`.
 */
export enum ProjectSelection {
    Selected = "selected",
    All = "all",
}

/**
 * Source defines where the configuration was installed from. It is used to analyze user engagement for integration installations in product metrics.
 */
export enum GetConfigurationResponseBodyIntegrationsSource {
    Marketplace = "marketplace",
    DeployButton = "deploy-button",
    External = "external",
}

export enum GetConfigurationResponseBodyIntegrationsType {
    IntegrationConfiguration = "integration-configuration",
}

export enum GetConfigurationResponseBodyIntegrationsAdded {
    ReadIntegrationConfiguration = "read:integration-configuration",
    ReadWriteIntegrationConfiguration = "read-write:integration-configuration",
    ReadDeployment = "read:deployment",
    ReadWriteDeployment = "read-write:deployment",
    ReadWriteDeploymentCheck = "read-write:deployment-check",
    ReadProject = "read:project",
    ReadWriteProject = "read-write:project",
    ReadWriteProjectEnvVars = "read-write:project-env-vars",
    ReadWriteGlobalProjectEnvVars = "read-write:global-project-env-vars",
    ReadTeam = "read:team",
    ReadUser = "read:user",
    ReadWriteLogDrain = "read-write:log-drain",
    ReadDomain = "read:domain",
    ReadWriteDomain = "read-write:domain",
    ReadWriteEdgeConfig = "read-write:edge-config",
    ReadWriteOtelEndpoint = "read-write:otel-endpoint",
    ReadMonitoring = "read:monitoring",
    ReadWriteIntegrationResource = "read-write:integration-resource",
}

export enum GetConfigurationResponseBodyIntegrationsUpgraded {
    ReadIntegrationConfiguration = "read:integration-configuration",
    ReadWriteIntegrationConfiguration = "read-write:integration-configuration",
    ReadDeployment = "read:deployment",
    ReadWriteDeployment = "read-write:deployment",
    ReadWriteDeploymentCheck = "read-write:deployment-check",
    ReadProject = "read:project",
    ReadWriteProject = "read-write:project",
    ReadWriteProjectEnvVars = "read-write:project-env-vars",
    ReadWriteGlobalProjectEnvVars = "read-write:global-project-env-vars",
    ReadTeam = "read:team",
    ReadUser = "read:user",
    ReadWriteLogDrain = "read-write:log-drain",
    ReadDomain = "read:domain",
    ReadWriteDomain = "read-write:domain",
    ReadWriteEdgeConfig = "read-write:edge-config",
    ReadWriteOtelEndpoint = "read-write:otel-endpoint",
    ReadMonitoring = "read:monitoring",
    ReadWriteIntegrationResource = "read-write:integration-resource",
}

export type GetConfigurationResponseBodyIntegrationsScopes = {
    added: Array<GetConfigurationResponseBodyIntegrationsAdded>;
    upgraded: Array<GetConfigurationResponseBodyIntegrationsUpgraded>;
};

export type GetConfigurationResponseBodyIntegrationsScopesQueue = {
    scopes: GetConfigurationResponseBodyIntegrationsScopes;
    note: string;
    requestedAt: number;
    confirmedAt?: number | undefined;
};

export enum GetConfigurationResponseBodyIntegrationsDisabledReason {
    DisabledByOwner = "disabled-by-owner",
    FeatureNotAvailable = "feature-not-available",
    DisabledByAdmin = "disabled-by-admin",
    OriginalOwnerLeftTheTeam = "original-owner-left-the-team",
}

/**
 * Defines the installation type. - 'external' integrations are installed via the existing integrations flow - 'marketplace' integrations are natively installed: - when accepting the TOS of a partner during the store creation process - if undefined, assume 'external'
 */
export enum GetConfigurationResponseBodyIntegrationsInstallationType {
    Marketplace = "marketplace",
    External = "external",
}

export type ResponseBody2 = {
    /**
     * A string representing the permission for projects. Possible values are `all` or `selected`.
     */
    projectSelection: ProjectSelection;
    /**
     * When a configuration is limited to access certain projects, this will contain each of the project ID it is allowed to access. If it is not defined, the configuration has full access.
     */
    projects?: Array<string> | undefined;
    /**
     * A timestamp that tells you when the configuration was installed successfully
     */
    completedAt?: number | undefined;
    /**
     * A timestamp that tells you when the configuration was created
     */
    createdAt: number;
    /**
     * The unique identifier of the configuration
     */
    id: string;
    /**
     * The unique identifier of the app the configuration was created for
     */
    integrationId: string;
    /**
     * The user or team ID that owns the configuration
     */
    ownerId: string;
    /**
     * Source defines where the configuration was installed from. It is used to analyze user engagement for integration installations in product metrics.
     */
    source?: GetConfigurationResponseBodyIntegrationsSource | undefined;
    removedLogDrainsAt?: number | undefined;
    removedProjectEnvsAt?: number | undefined;
    removedTokensAt?: number | undefined;
    removedWebhooksAt?: number | undefined;
    /**
     * The slug of the integration the configuration is created for.
     */
    slug: string;
    /**
     * When the configuration was created for a team, this will show the ID of the team.
     */
    teamId?: string | null | undefined;
    type: GetConfigurationResponseBodyIntegrationsType;
    /**
     * A timestamp that tells you when the configuration was updated.
     */
    updatedAt: number;
    /**
     * The ID of the user that created the configuration.
     */
    userId: string;
    /**
     * The resources that are allowed to be accessed by the configuration.
     */
    scopes: Array<string>;
    scopesQueue?: Array<GetConfigurationResponseBodyIntegrationsScopesQueue> | undefined;
    /**
     * A timestamp that tells you when the configuration was disabled. Note: Configurations can be disabled when the associated user loses access to a team. They do not function during this time until the configuration is 'transferred', meaning the associated user is changed to one with access to the team.
     */
    disabledAt?: number | undefined;
    /**
     * A timestamp that tells you when the configuration was updated.
     */
    deletedAt?: number | null | undefined;
    disabledReason?: GetConfigurationResponseBodyIntegrationsDisabledReason | undefined;
    /**
     * A timestamp that tells you when the configuration was migrated as part of the Northstar migration. In the future, if we allow integration configurations to be transferred between teams, this field should be cleared upon transfer.
     */
    northstarMigratedAt?: number | undefined;
    /**
     * Defines the installation type. - 'external' integrations are installed via the existing integrations flow - 'marketplace' integrations are natively installed: - when accepting the TOS of a partner during the store creation process - if undefined, assume 'external'
     */
    installationType?: GetConfigurationResponseBodyIntegrationsInstallationType | undefined;
    canConfigureOpenTelemetry?: boolean | undefined;
};

/**
 * Source defines where the configuration was installed from. It is used to analyze user engagement for integration installations in product metrics.
 */
export enum GetConfigurationResponseBodySource {
    Marketplace = "marketplace",
    DeployButton = "deploy-button",
    External = "external",
}

export enum GetConfigurationResponseBodyType {
    IntegrationConfiguration = "integration-configuration",
}

export enum GetConfigurationResponseBodyAdded {
    ReadIntegrationConfiguration = "read:integration-configuration",
    ReadWriteIntegrationConfiguration = "read-write:integration-configuration",
    ReadDeployment = "read:deployment",
    ReadWriteDeployment = "read-write:deployment",
    ReadWriteDeploymentCheck = "read-write:deployment-check",
    ReadProject = "read:project",
    ReadWriteProject = "read-write:project",
    ReadWriteProjectEnvVars = "read-write:project-env-vars",
    ReadWriteGlobalProjectEnvVars = "read-write:global-project-env-vars",
    ReadTeam = "read:team",
    ReadUser = "read:user",
    ReadWriteLogDrain = "read-write:log-drain",
    ReadDomain = "read:domain",
    ReadWriteDomain = "read-write:domain",
    ReadWriteEdgeConfig = "read-write:edge-config",
    ReadWriteOtelEndpoint = "read-write:otel-endpoint",
    ReadMonitoring = "read:monitoring",
    ReadWriteIntegrationResource = "read-write:integration-resource",
}

export enum GetConfigurationResponseBodyUpgraded {
    ReadIntegrationConfiguration = "read:integration-configuration",
    ReadWriteIntegrationConfiguration = "read-write:integration-configuration",
    ReadDeployment = "read:deployment",
    ReadWriteDeployment = "read-write:deployment",
    ReadWriteDeploymentCheck = "read-write:deployment-check",
    ReadProject = "read:project",
    ReadWriteProject = "read-write:project",
    ReadWriteProjectEnvVars = "read-write:project-env-vars",
    ReadWriteGlobalProjectEnvVars = "read-write:global-project-env-vars",
    ReadTeam = "read:team",
    ReadUser = "read:user",
    ReadWriteLogDrain = "read-write:log-drain",
    ReadDomain = "read:domain",
    ReadWriteDomain = "read-write:domain",
    ReadWriteEdgeConfig = "read-write:edge-config",
    ReadWriteOtelEndpoint = "read-write:otel-endpoint",
    ReadMonitoring = "read:monitoring",
    ReadWriteIntegrationResource = "read-write:integration-resource",
}

export type GetConfigurationResponseBodyScopes = {
    added: Array<GetConfigurationResponseBodyAdded>;
    upgraded: Array<GetConfigurationResponseBodyUpgraded>;
};

export type GetConfigurationResponseBodyScopesQueue = {
    scopes: GetConfigurationResponseBodyScopes;
    note: string;
    requestedAt: number;
    confirmedAt?: number | undefined;
};

export enum GetConfigurationResponseBodyDisabledReason {
    DisabledByOwner = "disabled-by-owner",
    FeatureNotAvailable = "feature-not-available",
    DisabledByAdmin = "disabled-by-admin",
    OriginalOwnerLeftTheTeam = "original-owner-left-the-team",
}

/**
 * Defines the installation type. - 'external' integrations are installed via the existing integrations flow - 'marketplace' integrations are natively installed: - when accepting the TOS of a partner during the store creation process - if undefined, assume 'external'
 */
export enum GetConfigurationResponseBodyInstallationType {
    Marketplace = "marketplace",
    External = "external",
}

/**
 * The configuration with the provided id
 */
export type ResponseBody1 = {
    /**
     * A timestamp that tells you when the configuration was installed successfully
     */
    completedAt?: number | undefined;
    /**
     * A timestamp that tells you when the configuration was created
     */
    createdAt: number;
    /**
     * The unique identifier of the configuration
     */
    id: string;
    /**
     * The unique identifier of the app the configuration was created for
     */
    integrationId: string;
    /**
     * The user or team ID that owns the configuration
     */
    ownerId: string;
    /**
     * When a configuration is limited to access certain projects, this will contain each of the project ID it is allowed to access. If it is not defined, the configuration has full access.
     */
    projects?: Array<string> | undefined;
    /**
     * Source defines where the configuration was installed from. It is used to analyze user engagement for integration installations in product metrics.
     */
    source?: GetConfigurationResponseBodySource | undefined;
    removedLogDrainsAt?: number | undefined;
    removedProjectEnvsAt?: number | undefined;
    removedTokensAt?: number | undefined;
    removedWebhooksAt?: number | undefined;
    /**
     * The slug of the integration the configuration is created for.
     */
    slug: string;
    /**
     * When the configuration was created for a team, this will show the ID of the team.
     */
    teamId?: string | null | undefined;
    type: GetConfigurationResponseBodyType;
    /**
     * A timestamp that tells you when the configuration was updated.
     */
    updatedAt: number;
    /**
     * The ID of the user that created the configuration.
     */
    userId: string;
    /**
     * The resources that are allowed to be accessed by the configuration.
     */
    scopes: Array<string>;
    scopesQueue?: Array<GetConfigurationResponseBodyScopesQueue> | undefined;
    /**
     * A timestamp that tells you when the configuration was disabled. Note: Configurations can be disabled when the associated user loses access to a team. They do not function during this time until the configuration is 'transferred', meaning the associated user is changed to one with access to the team.
     */
    disabledAt?: number | undefined;
    /**
     * A timestamp that tells you when the configuration was updated.
     */
    deletedAt?: number | null | undefined;
    disabledReason?: GetConfigurationResponseBodyDisabledReason | undefined;
    /**
     * A timestamp that tells you when the configuration was migrated as part of the Northstar migration. In the future, if we allow integration configurations to be transferred between teams, this field should be cleared upon transfer.
     */
    northstarMigratedAt?: number | undefined;
    /**
     * Defines the installation type. - 'external' integrations are installed via the existing integrations flow - 'marketplace' integrations are natively installed: - when accepting the TOS of a partner during the store creation process - if undefined, assume 'external'
     */
    installationType?: GetConfigurationResponseBodyInstallationType | undefined;
};

/**
 * The configuration with the provided id
 */
export type GetConfigurationResponseBody = ResponseBody1 | ResponseBody2;

export type GetConfigurationResponse = {
    httpMeta: components.HTTPMetadata;
    /**
     * The configuration with the provided id
     */
    oneOf?: ResponseBody1 | ResponseBody2 | undefined;
};

/** @internal */
export namespace GetConfigurationRequest$ {
    export const inboundSchema: z.ZodType<GetConfigurationRequest, z.ZodTypeDef, unknown> = z
        .object({
            id: z.string(),
            teamId: z.string().optional(),
            slug: z.string().optional(),
        })
        .transform((v) => {
            return {
                id: v.id,
                ...(v.teamId === undefined ? null : { teamId: v.teamId }),
                ...(v.slug === undefined ? null : { slug: v.slug }),
            };
        });

    export type Outbound = {
        id: string;
        teamId?: string | undefined;
        slug?: string | undefined;
    };

    export const outboundSchema: z.ZodType<Outbound, z.ZodTypeDef, GetConfigurationRequest> = z
        .object({
            id: z.string(),
            teamId: z.string().optional(),
            slug: z.string().optional(),
        })
        .transform((v) => {
            return {
                id: v.id,
                ...(v.teamId === undefined ? null : { teamId: v.teamId }),
                ...(v.slug === undefined ? null : { slug: v.slug }),
            };
        });
}

/** @internal */
export namespace ProjectSelection$ {
    export const inboundSchema = z.nativeEnum(ProjectSelection);
    export const outboundSchema = inboundSchema;
}

/** @internal */
export namespace GetConfigurationResponseBodyIntegrationsSource$ {
    export const inboundSchema = z.nativeEnum(GetConfigurationResponseBodyIntegrationsSource);
    export const outboundSchema = inboundSchema;
}

/** @internal */
export namespace GetConfigurationResponseBodyIntegrationsType$ {
    export const inboundSchema = z.nativeEnum(GetConfigurationResponseBodyIntegrationsType);
    export const outboundSchema = inboundSchema;
}

/** @internal */
export namespace GetConfigurationResponseBodyIntegrationsAdded$ {
    export const inboundSchema = z.nativeEnum(GetConfigurationResponseBodyIntegrationsAdded);
    export const outboundSchema = inboundSchema;
}

/** @internal */
export namespace GetConfigurationResponseBodyIntegrationsUpgraded$ {
    export const inboundSchema = z.nativeEnum(GetConfigurationResponseBodyIntegrationsUpgraded);
    export const outboundSchema = inboundSchema;
}

/** @internal */
export namespace GetConfigurationResponseBodyIntegrationsScopes$ {
    export const inboundSchema: z.ZodType<
        GetConfigurationResponseBodyIntegrationsScopes,
        z.ZodTypeDef,
        unknown
    > = z
        .object({
            added: z.array(GetConfigurationResponseBodyIntegrationsAdded$.inboundSchema),
            upgraded: z.array(GetConfigurationResponseBodyIntegrationsUpgraded$.inboundSchema),
        })
        .transform((v) => {
            return {
                added: v.added,
                upgraded: v.upgraded,
            };
        });

    export type Outbound = {
        added: Array<string>;
        upgraded: Array<string>;
    };

    export const outboundSchema: z.ZodType<
        Outbound,
        z.ZodTypeDef,
        GetConfigurationResponseBodyIntegrationsScopes
    > = z
        .object({
            added: z.array(GetConfigurationResponseBodyIntegrationsAdded$.outboundSchema),
            upgraded: z.array(GetConfigurationResponseBodyIntegrationsUpgraded$.outboundSchema),
        })
        .transform((v) => {
            return {
                added: v.added,
                upgraded: v.upgraded,
            };
        });
}

/** @internal */
export namespace GetConfigurationResponseBodyIntegrationsScopesQueue$ {
    export const inboundSchema: z.ZodType<
        GetConfigurationResponseBodyIntegrationsScopesQueue,
        z.ZodTypeDef,
        unknown
    > = z
        .object({
            scopes: z.lazy(() => GetConfigurationResponseBodyIntegrationsScopes$.inboundSchema),
            note: z.string(),
            requestedAt: z.number(),
            confirmedAt: z.number().optional(),
        })
        .transform((v) => {
            return {
                scopes: v.scopes,
                note: v.note,
                requestedAt: v.requestedAt,
                ...(v.confirmedAt === undefined ? null : { confirmedAt: v.confirmedAt }),
            };
        });

    export type Outbound = {
        scopes: GetConfigurationResponseBodyIntegrationsScopes$.Outbound;
        note: string;
        requestedAt: number;
        confirmedAt?: number | undefined;
    };

    export const outboundSchema: z.ZodType<
        Outbound,
        z.ZodTypeDef,
        GetConfigurationResponseBodyIntegrationsScopesQueue
    > = z
        .object({
            scopes: z.lazy(() => GetConfigurationResponseBodyIntegrationsScopes$.outboundSchema),
            note: z.string(),
            requestedAt: z.number(),
            confirmedAt: z.number().optional(),
        })
        .transform((v) => {
            return {
                scopes: v.scopes,
                note: v.note,
                requestedAt: v.requestedAt,
                ...(v.confirmedAt === undefined ? null : { confirmedAt: v.confirmedAt }),
            };
        });
}

/** @internal */
export namespace GetConfigurationResponseBodyIntegrationsDisabledReason$ {
    export const inboundSchema = z.nativeEnum(
        GetConfigurationResponseBodyIntegrationsDisabledReason
    );
    export const outboundSchema = inboundSchema;
}

/** @internal */
export namespace GetConfigurationResponseBodyIntegrationsInstallationType$ {
    export const inboundSchema = z.nativeEnum(
        GetConfigurationResponseBodyIntegrationsInstallationType
    );
    export const outboundSchema = inboundSchema;
}

/** @internal */
export namespace ResponseBody2$ {
    export const inboundSchema: z.ZodType<ResponseBody2, z.ZodTypeDef, unknown> = z
        .object({
            projectSelection: ProjectSelection$.inboundSchema,
            projects: z.array(z.string()).optional(),
            completedAt: z.number().optional(),
            createdAt: z.number(),
            id: z.string(),
            integrationId: z.string(),
            ownerId: z.string(),
            source: GetConfigurationResponseBodyIntegrationsSource$.inboundSchema.optional(),
            removedLogDrainsAt: z.number().optional(),
            removedProjectEnvsAt: z.number().optional(),
            removedTokensAt: z.number().optional(),
            removedWebhooksAt: z.number().optional(),
            slug: z.string(),
            teamId: z.nullable(z.string()).optional(),
            type: GetConfigurationResponseBodyIntegrationsType$.inboundSchema,
            updatedAt: z.number(),
            userId: z.string(),
            scopes: z.array(z.string()),
            scopesQueue: z
                .array(
                    z.lazy(() => GetConfigurationResponseBodyIntegrationsScopesQueue$.inboundSchema)
                )
                .optional(),
            disabledAt: z.number().optional(),
            deletedAt: z.nullable(z.number()).optional(),
            disabledReason:
                GetConfigurationResponseBodyIntegrationsDisabledReason$.inboundSchema.optional(),
            northstarMigratedAt: z.number().optional(),
            installationType:
                GetConfigurationResponseBodyIntegrationsInstallationType$.inboundSchema.optional(),
            canConfigureOpenTelemetry: z.boolean().optional(),
        })
        .transform((v) => {
            return {
                projectSelection: v.projectSelection,
                ...(v.projects === undefined ? null : { projects: v.projects }),
                ...(v.completedAt === undefined ? null : { completedAt: v.completedAt }),
                createdAt: v.createdAt,
                id: v.id,
                integrationId: v.integrationId,
                ownerId: v.ownerId,
                ...(v.source === undefined ? null : { source: v.source }),
                ...(v.removedLogDrainsAt === undefined
                    ? null
                    : { removedLogDrainsAt: v.removedLogDrainsAt }),
                ...(v.removedProjectEnvsAt === undefined
                    ? null
                    : { removedProjectEnvsAt: v.removedProjectEnvsAt }),
                ...(v.removedTokensAt === undefined
                    ? null
                    : { removedTokensAt: v.removedTokensAt }),
                ...(v.removedWebhooksAt === undefined
                    ? null
                    : { removedWebhooksAt: v.removedWebhooksAt }),
                slug: v.slug,
                ...(v.teamId === undefined ? null : { teamId: v.teamId }),
                type: v.type,
                updatedAt: v.updatedAt,
                userId: v.userId,
                scopes: v.scopes,
                ...(v.scopesQueue === undefined ? null : { scopesQueue: v.scopesQueue }),
                ...(v.disabledAt === undefined ? null : { disabledAt: v.disabledAt }),
                ...(v.deletedAt === undefined ? null : { deletedAt: v.deletedAt }),
                ...(v.disabledReason === undefined ? null : { disabledReason: v.disabledReason }),
                ...(v.northstarMigratedAt === undefined
                    ? null
                    : { northstarMigratedAt: v.northstarMigratedAt }),
                ...(v.installationType === undefined
                    ? null
                    : { installationType: v.installationType }),
                ...(v.canConfigureOpenTelemetry === undefined
                    ? null
                    : { canConfigureOpenTelemetry: v.canConfigureOpenTelemetry }),
            };
        });

    export type Outbound = {
        projectSelection: string;
        projects?: Array<string> | undefined;
        completedAt?: number | undefined;
        createdAt: number;
        id: string;
        integrationId: string;
        ownerId: string;
        source?: string | undefined;
        removedLogDrainsAt?: number | undefined;
        removedProjectEnvsAt?: number | undefined;
        removedTokensAt?: number | undefined;
        removedWebhooksAt?: number | undefined;
        slug: string;
        teamId?: string | null | undefined;
        type: string;
        updatedAt: number;
        userId: string;
        scopes: Array<string>;
        scopesQueue?:
            | Array<GetConfigurationResponseBodyIntegrationsScopesQueue$.Outbound>
            | undefined;
        disabledAt?: number | undefined;
        deletedAt?: number | null | undefined;
        disabledReason?: string | undefined;
        northstarMigratedAt?: number | undefined;
        installationType?: string | undefined;
        canConfigureOpenTelemetry?: boolean | undefined;
    };

    export const outboundSchema: z.ZodType<Outbound, z.ZodTypeDef, ResponseBody2> = z
        .object({
            projectSelection: ProjectSelection$.outboundSchema,
            projects: z.array(z.string()).optional(),
            completedAt: z.number().optional(),
            createdAt: z.number(),
            id: z.string(),
            integrationId: z.string(),
            ownerId: z.string(),
            source: GetConfigurationResponseBodyIntegrationsSource$.outboundSchema.optional(),
            removedLogDrainsAt: z.number().optional(),
            removedProjectEnvsAt: z.number().optional(),
            removedTokensAt: z.number().optional(),
            removedWebhooksAt: z.number().optional(),
            slug: z.string(),
            teamId: z.nullable(z.string()).optional(),
            type: GetConfigurationResponseBodyIntegrationsType$.outboundSchema,
            updatedAt: z.number(),
            userId: z.string(),
            scopes: z.array(z.string()),
            scopesQueue: z
                .array(
                    z.lazy(
                        () => GetConfigurationResponseBodyIntegrationsScopesQueue$.outboundSchema
                    )
                )
                .optional(),
            disabledAt: z.number().optional(),
            deletedAt: z.nullable(z.number()).optional(),
            disabledReason:
                GetConfigurationResponseBodyIntegrationsDisabledReason$.outboundSchema.optional(),
            northstarMigratedAt: z.number().optional(),
            installationType:
                GetConfigurationResponseBodyIntegrationsInstallationType$.outboundSchema.optional(),
            canConfigureOpenTelemetry: z.boolean().optional(),
        })
        .transform((v) => {
            return {
                projectSelection: v.projectSelection,
                ...(v.projects === undefined ? null : { projects: v.projects }),
                ...(v.completedAt === undefined ? null : { completedAt: v.completedAt }),
                createdAt: v.createdAt,
                id: v.id,
                integrationId: v.integrationId,
                ownerId: v.ownerId,
                ...(v.source === undefined ? null : { source: v.source }),
                ...(v.removedLogDrainsAt === undefined
                    ? null
                    : { removedLogDrainsAt: v.removedLogDrainsAt }),
                ...(v.removedProjectEnvsAt === undefined
                    ? null
                    : { removedProjectEnvsAt: v.removedProjectEnvsAt }),
                ...(v.removedTokensAt === undefined
                    ? null
                    : { removedTokensAt: v.removedTokensAt }),
                ...(v.removedWebhooksAt === undefined
                    ? null
                    : { removedWebhooksAt: v.removedWebhooksAt }),
                slug: v.slug,
                ...(v.teamId === undefined ? null : { teamId: v.teamId }),
                type: v.type,
                updatedAt: v.updatedAt,
                userId: v.userId,
                scopes: v.scopes,
                ...(v.scopesQueue === undefined ? null : { scopesQueue: v.scopesQueue }),
                ...(v.disabledAt === undefined ? null : { disabledAt: v.disabledAt }),
                ...(v.deletedAt === undefined ? null : { deletedAt: v.deletedAt }),
                ...(v.disabledReason === undefined ? null : { disabledReason: v.disabledReason }),
                ...(v.northstarMigratedAt === undefined
                    ? null
                    : { northstarMigratedAt: v.northstarMigratedAt }),
                ...(v.installationType === undefined
                    ? null
                    : { installationType: v.installationType }),
                ...(v.canConfigureOpenTelemetry === undefined
                    ? null
                    : { canConfigureOpenTelemetry: v.canConfigureOpenTelemetry }),
            };
        });
}

/** @internal */
export namespace GetConfigurationResponseBodySource$ {
    export const inboundSchema = z.nativeEnum(GetConfigurationResponseBodySource);
    export const outboundSchema = inboundSchema;
}

/** @internal */
export namespace GetConfigurationResponseBodyType$ {
    export const inboundSchema = z.nativeEnum(GetConfigurationResponseBodyType);
    export const outboundSchema = inboundSchema;
}

/** @internal */
export namespace GetConfigurationResponseBodyAdded$ {
    export const inboundSchema = z.nativeEnum(GetConfigurationResponseBodyAdded);
    export const outboundSchema = inboundSchema;
}

/** @internal */
export namespace GetConfigurationResponseBodyUpgraded$ {
    export const inboundSchema = z.nativeEnum(GetConfigurationResponseBodyUpgraded);
    export const outboundSchema = inboundSchema;
}

/** @internal */
export namespace GetConfigurationResponseBodyScopes$ {
    export const inboundSchema: z.ZodType<
        GetConfigurationResponseBodyScopes,
        z.ZodTypeDef,
        unknown
    > = z
        .object({
            added: z.array(GetConfigurationResponseBodyAdded$.inboundSchema),
            upgraded: z.array(GetConfigurationResponseBodyUpgraded$.inboundSchema),
        })
        .transform((v) => {
            return {
                added: v.added,
                upgraded: v.upgraded,
            };
        });

    export type Outbound = {
        added: Array<string>;
        upgraded: Array<string>;
    };

    export const outboundSchema: z.ZodType<
        Outbound,
        z.ZodTypeDef,
        GetConfigurationResponseBodyScopes
    > = z
        .object({
            added: z.array(GetConfigurationResponseBodyAdded$.outboundSchema),
            upgraded: z.array(GetConfigurationResponseBodyUpgraded$.outboundSchema),
        })
        .transform((v) => {
            return {
                added: v.added,
                upgraded: v.upgraded,
            };
        });
}

/** @internal */
export namespace GetConfigurationResponseBodyScopesQueue$ {
    export const inboundSchema: z.ZodType<
        GetConfigurationResponseBodyScopesQueue,
        z.ZodTypeDef,
        unknown
    > = z
        .object({
            scopes: z.lazy(() => GetConfigurationResponseBodyScopes$.inboundSchema),
            note: z.string(),
            requestedAt: z.number(),
            confirmedAt: z.number().optional(),
        })
        .transform((v) => {
            return {
                scopes: v.scopes,
                note: v.note,
                requestedAt: v.requestedAt,
                ...(v.confirmedAt === undefined ? null : { confirmedAt: v.confirmedAt }),
            };
        });

    export type Outbound = {
        scopes: GetConfigurationResponseBodyScopes$.Outbound;
        note: string;
        requestedAt: number;
        confirmedAt?: number | undefined;
    };

    export const outboundSchema: z.ZodType<
        Outbound,
        z.ZodTypeDef,
        GetConfigurationResponseBodyScopesQueue
    > = z
        .object({
            scopes: z.lazy(() => GetConfigurationResponseBodyScopes$.outboundSchema),
            note: z.string(),
            requestedAt: z.number(),
            confirmedAt: z.number().optional(),
        })
        .transform((v) => {
            return {
                scopes: v.scopes,
                note: v.note,
                requestedAt: v.requestedAt,
                ...(v.confirmedAt === undefined ? null : { confirmedAt: v.confirmedAt }),
            };
        });
}

/** @internal */
export namespace GetConfigurationResponseBodyDisabledReason$ {
    export const inboundSchema = z.nativeEnum(GetConfigurationResponseBodyDisabledReason);
    export const outboundSchema = inboundSchema;
}

/** @internal */
export namespace GetConfigurationResponseBodyInstallationType$ {
    export const inboundSchema = z.nativeEnum(GetConfigurationResponseBodyInstallationType);
    export const outboundSchema = inboundSchema;
}

/** @internal */
export namespace ResponseBody1$ {
    export const inboundSchema: z.ZodType<ResponseBody1, z.ZodTypeDef, unknown> = z
        .object({
            completedAt: z.number().optional(),
            createdAt: z.number(),
            id: z.string(),
            integrationId: z.string(),
            ownerId: z.string(),
            projects: z.array(z.string()).optional(),
            source: GetConfigurationResponseBodySource$.inboundSchema.optional(),
            removedLogDrainsAt: z.number().optional(),
            removedProjectEnvsAt: z.number().optional(),
            removedTokensAt: z.number().optional(),
            removedWebhooksAt: z.number().optional(),
            slug: z.string(),
            teamId: z.nullable(z.string()).optional(),
            type: GetConfigurationResponseBodyType$.inboundSchema,
            updatedAt: z.number(),
            userId: z.string(),
            scopes: z.array(z.string()),
            scopesQueue: z
                .array(z.lazy(() => GetConfigurationResponseBodyScopesQueue$.inboundSchema))
                .optional(),
            disabledAt: z.number().optional(),
            deletedAt: z.nullable(z.number()).optional(),
            disabledReason: GetConfigurationResponseBodyDisabledReason$.inboundSchema.optional(),
            northstarMigratedAt: z.number().optional(),
            installationType:
                GetConfigurationResponseBodyInstallationType$.inboundSchema.optional(),
        })
        .transform((v) => {
            return {
                ...(v.completedAt === undefined ? null : { completedAt: v.completedAt }),
                createdAt: v.createdAt,
                id: v.id,
                integrationId: v.integrationId,
                ownerId: v.ownerId,
                ...(v.projects === undefined ? null : { projects: v.projects }),
                ...(v.source === undefined ? null : { source: v.source }),
                ...(v.removedLogDrainsAt === undefined
                    ? null
                    : { removedLogDrainsAt: v.removedLogDrainsAt }),
                ...(v.removedProjectEnvsAt === undefined
                    ? null
                    : { removedProjectEnvsAt: v.removedProjectEnvsAt }),
                ...(v.removedTokensAt === undefined
                    ? null
                    : { removedTokensAt: v.removedTokensAt }),
                ...(v.removedWebhooksAt === undefined
                    ? null
                    : { removedWebhooksAt: v.removedWebhooksAt }),
                slug: v.slug,
                ...(v.teamId === undefined ? null : { teamId: v.teamId }),
                type: v.type,
                updatedAt: v.updatedAt,
                userId: v.userId,
                scopes: v.scopes,
                ...(v.scopesQueue === undefined ? null : { scopesQueue: v.scopesQueue }),
                ...(v.disabledAt === undefined ? null : { disabledAt: v.disabledAt }),
                ...(v.deletedAt === undefined ? null : { deletedAt: v.deletedAt }),
                ...(v.disabledReason === undefined ? null : { disabledReason: v.disabledReason }),
                ...(v.northstarMigratedAt === undefined
                    ? null
                    : { northstarMigratedAt: v.northstarMigratedAt }),
                ...(v.installationType === undefined
                    ? null
                    : { installationType: v.installationType }),
            };
        });

    export type Outbound = {
        completedAt?: number | undefined;
        createdAt: number;
        id: string;
        integrationId: string;
        ownerId: string;
        projects?: Array<string> | undefined;
        source?: string | undefined;
        removedLogDrainsAt?: number | undefined;
        removedProjectEnvsAt?: number | undefined;
        removedTokensAt?: number | undefined;
        removedWebhooksAt?: number | undefined;
        slug: string;
        teamId?: string | null | undefined;
        type: string;
        updatedAt: number;
        userId: string;
        scopes: Array<string>;
        scopesQueue?: Array<GetConfigurationResponseBodyScopesQueue$.Outbound> | undefined;
        disabledAt?: number | undefined;
        deletedAt?: number | null | undefined;
        disabledReason?: string | undefined;
        northstarMigratedAt?: number | undefined;
        installationType?: string | undefined;
    };

    export const outboundSchema: z.ZodType<Outbound, z.ZodTypeDef, ResponseBody1> = z
        .object({
            completedAt: z.number().optional(),
            createdAt: z.number(),
            id: z.string(),
            integrationId: z.string(),
            ownerId: z.string(),
            projects: z.array(z.string()).optional(),
            source: GetConfigurationResponseBodySource$.outboundSchema.optional(),
            removedLogDrainsAt: z.number().optional(),
            removedProjectEnvsAt: z.number().optional(),
            removedTokensAt: z.number().optional(),
            removedWebhooksAt: z.number().optional(),
            slug: z.string(),
            teamId: z.nullable(z.string()).optional(),
            type: GetConfigurationResponseBodyType$.outboundSchema,
            updatedAt: z.number(),
            userId: z.string(),
            scopes: z.array(z.string()),
            scopesQueue: z
                .array(z.lazy(() => GetConfigurationResponseBodyScopesQueue$.outboundSchema))
                .optional(),
            disabledAt: z.number().optional(),
            deletedAt: z.nullable(z.number()).optional(),
            disabledReason: GetConfigurationResponseBodyDisabledReason$.outboundSchema.optional(),
            northstarMigratedAt: z.number().optional(),
            installationType:
                GetConfigurationResponseBodyInstallationType$.outboundSchema.optional(),
        })
        .transform((v) => {
            return {
                ...(v.completedAt === undefined ? null : { completedAt: v.completedAt }),
                createdAt: v.createdAt,
                id: v.id,
                integrationId: v.integrationId,
                ownerId: v.ownerId,
                ...(v.projects === undefined ? null : { projects: v.projects }),
                ...(v.source === undefined ? null : { source: v.source }),
                ...(v.removedLogDrainsAt === undefined
                    ? null
                    : { removedLogDrainsAt: v.removedLogDrainsAt }),
                ...(v.removedProjectEnvsAt === undefined
                    ? null
                    : { removedProjectEnvsAt: v.removedProjectEnvsAt }),
                ...(v.removedTokensAt === undefined
                    ? null
                    : { removedTokensAt: v.removedTokensAt }),
                ...(v.removedWebhooksAt === undefined
                    ? null
                    : { removedWebhooksAt: v.removedWebhooksAt }),
                slug: v.slug,
                ...(v.teamId === undefined ? null : { teamId: v.teamId }),
                type: v.type,
                updatedAt: v.updatedAt,
                userId: v.userId,
                scopes: v.scopes,
                ...(v.scopesQueue === undefined ? null : { scopesQueue: v.scopesQueue }),
                ...(v.disabledAt === undefined ? null : { disabledAt: v.disabledAt }),
                ...(v.deletedAt === undefined ? null : { deletedAt: v.deletedAt }),
                ...(v.disabledReason === undefined ? null : { disabledReason: v.disabledReason }),
                ...(v.northstarMigratedAt === undefined
                    ? null
                    : { northstarMigratedAt: v.northstarMigratedAt }),
                ...(v.installationType === undefined
                    ? null
                    : { installationType: v.installationType }),
            };
        });
}

/** @internal */
export namespace GetConfigurationResponseBody$ {
    export const inboundSchema: z.ZodType<GetConfigurationResponseBody, z.ZodTypeDef, unknown> =
        z.union([
            z.lazy(() => ResponseBody1$.inboundSchema),
            z.lazy(() => ResponseBody2$.inboundSchema),
        ]);

    export type Outbound = ResponseBody1$.Outbound | ResponseBody2$.Outbound;
    export const outboundSchema: z.ZodType<Outbound, z.ZodTypeDef, GetConfigurationResponseBody> =
        z.union([
            z.lazy(() => ResponseBody1$.outboundSchema),
            z.lazy(() => ResponseBody2$.outboundSchema),
        ]);
}

/** @internal */
export namespace GetConfigurationResponse$ {
    export const inboundSchema: z.ZodType<GetConfigurationResponse, z.ZodTypeDef, unknown> = z
        .object({
            HttpMeta: components.HTTPMetadata$.inboundSchema,
            oneOf: z
                .union([
                    z.lazy(() => ResponseBody1$.inboundSchema),
                    z.lazy(() => ResponseBody2$.inboundSchema),
                ])
                .optional(),
        })
        .transform((v) => {
            return {
                httpMeta: v.HttpMeta,
                ...(v.oneOf === undefined ? null : { oneOf: v.oneOf }),
            };
        });

    export type Outbound = {
        HttpMeta: components.HTTPMetadata$.Outbound;
        oneOf?: ResponseBody1$.Outbound | ResponseBody2$.Outbound | undefined;
    };

    export const outboundSchema: z.ZodType<Outbound, z.ZodTypeDef, GetConfigurationResponse> = z
        .object({
            httpMeta: components.HTTPMetadata$.outboundSchema,
            oneOf: z
                .union([
                    z.lazy(() => ResponseBody1$.outboundSchema),
                    z.lazy(() => ResponseBody2$.outboundSchema),
                ])
                .optional(),
        })
        .transform((v) => {
            return {
                HttpMeta: v.httpMeta,
                ...(v.oneOf === undefined ? null : { oneOf: v.oneOf }),
            };
        });
}
