/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import { VercelCore } from "../core.js";
import {
    encodeFormQuery as encodeFormQuery$,
    encodeSimple as encodeSimple$,
} from "../lib/encodings.js";
import * as m$ from "../lib/matchers.js";
import * as schemas$ from "../lib/schemas.js";
import { RequestOptions } from "../lib/sdks.js";
import { extractSecurity, resolveGlobalSecurity } from "../lib/security.js";
import { pathToFunc } from "../lib/url.js";
import {
    GetDeploymentEventsRequest,
    GetDeploymentEventsRequest$outboundSchema,
    GetDeploymentEventsResponse,
    GetDeploymentEventsResponse$inboundSchema,
} from "../models/getdeploymenteventsop.js";
import {
    ConnectionError,
    InvalidRequestError,
    RequestAbortedError,
    RequestTimeoutError,
    UnexpectedClientError,
} from "../models/httpclienterrors.js";
import { SDKError } from "../models/sdkerror.js";
import { SDKValidationError } from "../models/sdkvalidationerror.js";
import { Result } from "../types/fp.js";

export enum GetDeploymentEventsAcceptEnum {
    applicationJson = "application/json",
    applicationStreamPlusJson = "application/stream+json",
}

/**
 * Get deployment events
 *
 * @remarks
 * Get the build logs of a deployment by deployment ID and build ID. It can work as an infinite stream of logs or as a JSON endpoint depending on the input parameters.
 */
export async function deploymentsGetDeploymentEvents(
    client$: VercelCore,
    request: GetDeploymentEventsRequest,
    options?: RequestOptions & { acceptHeaderOverride?: GetDeploymentEventsAcceptEnum }
): Promise<
    Result<
        GetDeploymentEventsResponse,
        | SDKError
        | SDKValidationError
        | UnexpectedClientError
        | InvalidRequestError
        | RequestAbortedError
        | RequestTimeoutError
        | ConnectionError
    >
> {
    const input$ = request;

    const parsed$ = schemas$.safeParse(
        input$,
        (value$) => GetDeploymentEventsRequest$outboundSchema.parse(value$),
        "Input validation failed"
    );
    if (!parsed$.ok) {
        return parsed$;
    }
    const payload$ = parsed$.value;
    const body$ = null;

    const pathParams$ = {
        idOrUrl: encodeSimple$("idOrUrl", payload$.idOrUrl, {
            explode: false,
            charEncoding: "percent",
        }),
    };

    const path$ = pathToFunc("/v2/deployments/{idOrUrl}/events")(pathParams$);

    const query$ = encodeFormQuery$({
        builds: payload$.builds,
        delimiter: payload$.delimiter,
        direction: payload$.direction,
        follow: payload$.follow,
        limit: payload$.limit,
        name: payload$.name,
        since: payload$.since,
        slug: payload$.slug,
        statusCode: payload$.statusCode,
        teamId: payload$.teamId,
        until: payload$.until,
    });

    const headers$ = new Headers({
        Accept:
            options?.acceptHeaderOverride || "application/json;q=1, application/stream+json;q=0",
    });

    const security$ = await extractSecurity(client$.options$.security);
    const context = {
        operationID: "getDeploymentEvents",
        oAuth2Scopes: [],
        securitySource: client$.options$.security,
    };
    const securitySettings$ = resolveGlobalSecurity(security$);

    const requestRes = client$.createRequest$(
        context,
        {
            security: securitySettings$,
            method: "GET",
            path: path$,
            headers: headers$,
            query: query$,
            body: body$,
            timeoutMs: options?.timeoutMs || client$.options$.timeoutMs || -1,
        },
        options
    );
    if (!requestRes.ok) {
        return requestRes;
    }
    const request$ = requestRes.value;

    const doResult = await client$.do$(request$, {
        context,
        errorCodes: ["400", "401", "403", "404", "4XX", "5XX"],
        retryConfig: options?.retries || client$.options$.retryConfig,
        retryCodes: options?.retryCodes || ["429", "500", "502", "503", "504"],
    });
    if (!doResult.ok) {
        return doResult;
    }
    const response = doResult.value;

    const [result$] = await m$.match<
        GetDeploymentEventsResponse,
        | SDKError
        | SDKValidationError
        | UnexpectedClientError
        | InvalidRequestError
        | RequestAbortedError
        | RequestTimeoutError
        | ConnectionError
    >(
        m$.json(200, GetDeploymentEventsResponse$inboundSchema),
        m$.json(200, GetDeploymentEventsResponse$inboundSchema, {
            ctype: "application/stream+json",
        }),
        m$.fail([400, 401, 403, 404, "4XX", "5XX"])
    )(response);
    if (!result$.ok) {
        return result$;
    }

    return result$;
}
