/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import { edgeConfigCreate } from "../funcs/edgeConfigCreate.js";
import { edgeConfigCreateTokenMetaData } from "../funcs/edgeConfigCreateTokenMetaData.js";
import { edgeConfigDelete } from "../funcs/edgeConfigDelete.js";
import { edgeConfigDeleteSchema } from "../funcs/edgeConfigDeleteSchema.js";
import { edgeConfigDeleteTokens } from "../funcs/edgeConfigDeleteTokens.js";
import { edgeConfigGet } from "../funcs/edgeConfigGet.js";
import { edgeConfigGetItem } from "../funcs/edgeConfigGetItem.js";
import { edgeConfigGetSchema } from "../funcs/edgeConfigGetSchema.js";
import { edgeConfigGetTokenMetaData } from "../funcs/edgeConfigGetTokenMetaData.js";
import { edgeConfigList } from "../funcs/edgeConfigList.js";
import { edgeConfigListItems } from "../funcs/edgeConfigListItems.js";
import { edgeConfigListTokens } from "../funcs/edgeConfigListTokens.js";
import { edgeConfigUpdate } from "../funcs/edgeConfigUpdate.js";
import { edgeConfigUpdateSchema } from "../funcs/edgeConfigUpdateSchema.js";
import { ClientSDK, RequestOptions } from "../lib/sdks.js";
import {
    CreateEdgeConfigRequestBody,
    CreateEdgeConfigResponseBody,
} from "../models/createedgeconfigop.js";
import {
    CreateEdgeConfigTokenRequestBody,
    CreateEdgeConfigTokenResponseBody,
} from "../models/createedgeconfigtokenop.js";
import { DeleteTokensRequestBody } from "../models/deletetokensop.js";
import { EdgeConfigToken } from "../models/edgeconfigtoken.js";
import { GetEdgeConfigResponseBody } from "../models/getedgeconfigop.js";
import { GetEdgeConfigSchemaResponseBody } from "../models/getedgeconfigschemaop.js";
import { GetEdgeConfigsResponseBody } from "../models/getedgeconfigsop.js";
import {
    PatchEdgeConfigSchemaRequest,
    PatchEdgeConfigSchemaResponseBody,
} from "../models/patchedgeconfigschemaop.js";
import {
    UpdateEdgeConfigRequestBody,
    UpdateEdgeConfigResponseBody,
} from "../models/updateedgeconfigop.js";
import { unwrapAsync } from "../types/fp.js";

export class EdgeConfig extends ClientSDK {
    /**
     * Get Edge Configs
     *
     * @remarks
     * Returns all Edge Configs.
     */
    async list(
        teamId?: string | undefined,
        slug?: string | undefined,
        options?: RequestOptions
    ): Promise<GetEdgeConfigsResponseBody> {
        return unwrapAsync(edgeConfigList(this, teamId, slug, options));
    }

    /**
     * Create an Edge Config
     *
     * @remarks
     * Creates an Edge Config.
     */
    async create(
        teamId?: string | undefined,
        slug?: string | undefined,
        requestBody?: CreateEdgeConfigRequestBody | undefined,
        options?: RequestOptions
    ): Promise<CreateEdgeConfigResponseBody> {
        return unwrapAsync(edgeConfigCreate(this, teamId, slug, requestBody, options));
    }

    /**
     * Get an Edge Config
     *
     * @remarks
     * Returns an Edge Config.
     */
    async get(
        edgeConfigId: string,
        teamId?: string | undefined,
        slug?: string | undefined,
        options?: RequestOptions
    ): Promise<GetEdgeConfigResponseBody> {
        return unwrapAsync(edgeConfigGet(this, edgeConfigId, teamId, slug, options));
    }

    /**
     * Update an Edge Config
     *
     * @remarks
     * Updates an Edge Config.
     */
    async update(
        edgeConfigId: string,
        teamId?: string | undefined,
        slug?: string | undefined,
        requestBody?: UpdateEdgeConfigRequestBody | undefined,
        options?: RequestOptions
    ): Promise<UpdateEdgeConfigResponseBody> {
        return unwrapAsync(
            edgeConfigUpdate(this, edgeConfigId, teamId, slug, requestBody, options)
        );
    }

    /**
     * Delete an Edge Config
     *
     * @remarks
     * Delete an Edge Config by id.
     */
    async delete(
        edgeConfigId: string,
        teamId?: string | undefined,
        slug?: string | undefined,
        options?: RequestOptions
    ): Promise<void> {
        return unwrapAsync(edgeConfigDelete(this, edgeConfigId, teamId, slug, options));
    }

    /**
     * Get Edge Config items
     *
     * @remarks
     * Returns all items of an Edge Config.
     */
    async listItems(
        edgeConfigId: string,
        teamId?: string | undefined,
        slug?: string | undefined,
        options?: RequestOptions
    ): Promise<void> {
        return unwrapAsync(edgeConfigListItems(this, edgeConfigId, teamId, slug, options));
    }

    /**
     * Get Edge Config schema
     *
     * @remarks
     * Returns the schema of an Edge Config.
     */
    async getSchema(
        edgeConfigId: string,
        teamId?: string | undefined,
        slug?: string | undefined,
        options?: RequestOptions
    ): Promise<GetEdgeConfigSchemaResponseBody> {
        return unwrapAsync(edgeConfigGetSchema(this, edgeConfigId, teamId, slug, options));
    }

    /**
     * Update Edge Config schema
     *
     * @remarks
     * Update an Edge Config's schema.
     */
    async updateSchema(
        request: PatchEdgeConfigSchemaRequest,
        options?: RequestOptions
    ): Promise<PatchEdgeConfigSchemaResponseBody> {
        return unwrapAsync(edgeConfigUpdateSchema(this, request, options));
    }

    /**
     * Delete an Edge Config's schema
     *
     * @remarks
     * Deletes the schema of existing Edge Config.
     */
    async deleteSchema(
        edgeConfigId: string,
        teamId?: string | undefined,
        slug?: string | undefined,
        options?: RequestOptions
    ): Promise<void> {
        return unwrapAsync(edgeConfigDeleteSchema(this, edgeConfigId, teamId, slug, options));
    }

    /**
     * Get an Edge Config item
     *
     * @remarks
     * Returns a specific Edge Config Item.
     */
    async getItem(
        edgeConfigId: string,
        edgeConfigItemKey: string,
        teamId?: string | undefined,
        slug?: string | undefined,
        options?: RequestOptions
    ): Promise<void> {
        return unwrapAsync(
            edgeConfigGetItem(this, edgeConfigId, edgeConfigItemKey, teamId, slug, options)
        );
    }

    /**
     * Get all tokens of an Edge Config
     *
     * @remarks
     * Returns all tokens of an Edge Config.
     */
    async listTokens(
        edgeConfigId: string,
        teamId?: string | undefined,
        slug?: string | undefined,
        options?: RequestOptions
    ): Promise<EdgeConfigToken> {
        return unwrapAsync(edgeConfigListTokens(this, edgeConfigId, teamId, slug, options));
    }

    /**
     * Delete one or more Edge Config tokens
     *
     * @remarks
     * Deletes one or more tokens of an existing Edge Config.
     */
    async deleteTokens(
        edgeConfigId: string,
        teamId?: string | undefined,
        slug?: string | undefined,
        requestBody?: DeleteTokensRequestBody | undefined,
        options?: RequestOptions
    ): Promise<void> {
        return unwrapAsync(
            edgeConfigDeleteTokens(this, edgeConfigId, teamId, slug, requestBody, options)
        );
    }

    /**
     * Get Edge Config token meta data
     *
     * @remarks
     * Return meta data about an Edge Config token.
     */
    async getTokenMetaData(
        edgeConfigId: string,
        token: string,
        teamId?: string | undefined,
        slug?: string | undefined,
        options?: RequestOptions
    ): Promise<EdgeConfigToken> {
        return unwrapAsync(
            edgeConfigGetTokenMetaData(this, edgeConfigId, token, teamId, slug, options)
        );
    }

    /**
     * Create an Edge Config token
     *
     * @remarks
     * Adds a token to an existing Edge Config.
     */
    async createTokenMetaData(
        edgeConfigId: string,
        teamId?: string | undefined,
        slug?: string | undefined,
        requestBody?: CreateEdgeConfigTokenRequestBody | undefined,
        options?: RequestOptions
    ): Promise<CreateEdgeConfigTokenResponseBody> {
        return unwrapAsync(
            edgeConfigCreateTokenMetaData(this, edgeConfigId, teamId, slug, requestBody, options)
        );
    }
}
