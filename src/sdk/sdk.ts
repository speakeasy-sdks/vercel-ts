/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import { getDeploymentBuilds } from "../funcs/getDeploymentBuilds.js";
import { purgeDataCache } from "../funcs/purgeDataCache.js";
import { updateBillingSettings } from "../funcs/updateBillingSettings.js";
import { ClientSDK, RequestOptions } from "../lib/sdks.js";
import { GetDeploymentBuildsResponseBody } from "../models/getdeploymentbuildsop.js";
import {
    UpdateBillingSettingsRequestBody,
    UpdateBillingSettingsResponseBody,
} from "../models/updatebillingsettingsop.js";
import { unwrapAsync } from "../types/fp.js";
import { Aliases } from "./aliases.js";
import { Artifacts } from "./artifacts.js";
import { Authentication } from "./authentication.js";
import { Certs } from "./certs.js";
import { Checks } from "./checks.js";
import { Deployments } from "./deployments.js";
import { Dns } from "./dns.js";
import { Domains } from "./domains.js";
import { EdgeConfig } from "./edgeconfig.js";
import { Integrations } from "./integrations.js";
import { LogDrains } from "./logdrains.js";
import { ProjectMembers } from "./projectmembers.js";
import { Projects } from "./projects.js";
import { Secrets } from "./secrets.js";
import { Teams } from "./teams.js";
import { User } from "./user.js";
import { Webhooks } from "./webhooks.js";

export class Vercel extends ClientSDK {
    private _artifacts?: Artifacts;
    get artifacts(): Artifacts {
        return (this._artifacts ??= new Artifacts(this.options$));
    }

    private _checks?: Checks;
    get checks(): Checks {
        return (this._checks ??= new Checks(this.options$));
    }

    private _projects?: Projects;
    get projects(): Projects {
        return (this._projects ??= new Projects(this.options$));
    }

    private _deployments?: Deployments;
    get deployments(): Deployments {
        return (this._deployments ??= new Deployments(this.options$));
    }

    private _domains?: Domains;
    get domains(): Domains {
        return (this._domains ??= new Domains(this.options$));
    }

    private _dns?: Dns;
    get dns(): Dns {
        return (this._dns ??= new Dns(this.options$));
    }

    private _edgeConfig?: EdgeConfig;
    get edgeConfig(): EdgeConfig {
        return (this._edgeConfig ??= new EdgeConfig(this.options$));
    }

    private _user?: User;
    get user(): User {
        return (this._user ??= new User(this.options$));
    }

    private _integrations?: Integrations;
    get integrations(): Integrations {
        return (this._integrations ??= new Integrations(this.options$));
    }

    private _logDrains?: LogDrains;
    get logDrains(): LogDrains {
        return (this._logDrains ??= new LogDrains(this.options$));
    }

    private _projectMembers?: ProjectMembers;
    get projectMembers(): ProjectMembers {
        return (this._projectMembers ??= new ProjectMembers(this.options$));
    }

    private _teams?: Teams;
    get teams(): Teams {
        return (this._teams ??= new Teams(this.options$));
    }

    private _authentication?: Authentication;
    get authentication(): Authentication {
        return (this._authentication ??= new Authentication(this.options$));
    }

    private _webhooks?: Webhooks;
    get webhooks(): Webhooks {
        return (this._webhooks ??= new Webhooks(this.options$));
    }

    private _aliases?: Aliases;
    get aliases(): Aliases {
        return (this._aliases ??= new Aliases(this.options$));
    }

    private _certs?: Certs;
    get certs(): Certs {
        return (this._certs ??= new Certs(this.options$));
    }

    private _secrets?: Secrets;
    get secrets(): Secrets {
        return (this._secrets ??= new Secrets(this.options$));
    }

    /**
     * Retrieves the list of builds given their deployment's unique identifier. No longer listed as public API as of May 2023.
     */
    async getDeploymentBuilds(
        deploymentId: string,
        options?: RequestOptions
    ): Promise<GetDeploymentBuildsResponseBody> {
        return unwrapAsync(getDeploymentBuilds(this, deploymentId, options));
    }

    async purgeDataCache(projectIdOrName: string, options?: RequestOptions): Promise<void> {
        return unwrapAsync(purgeDataCache(this, projectIdOrName, options));
    }

    async updateBillingSettings(
        request?: UpdateBillingSettingsRequestBody | undefined,
        options?: RequestOptions
    ): Promise<UpdateBillingSettingsResponseBody> {
        return unwrapAsync(updateBillingSettings(this, request, options));
    }
}
