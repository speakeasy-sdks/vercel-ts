/*
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

import { SDKHooks } from "../hooks/hooks.js";
import { SDKOptions, serverURLFromOptions } from "../lib/config.js";
import {
    encodeFormQuery as encodeFormQuery$,
    encodeJSON as encodeJSON$,
    encodeSimple as encodeSimple$,
} from "../lib/encodings.js";
import { HTTPClient } from "../lib/http.js";
import * as schemas$ from "../lib/schemas.js";
import { ClientSDK, RequestOptions } from "../lib/sdks.js";
import * as models from "../models/index.js";
import { Aliases } from "./aliases.js";
import { Artifacts } from "./artifacts.js";
import { Authentication } from "./authentication.js";
import { Certs } from "./certs.js";
import { Checks } from "./checks.js";
import { Deployments } from "./deployments.js";
import { Dns } from "./dns.js";
import { Domains } from "./domains.js";
import { EdgeConfig } from "./edgeconfig.js";
import { Integrations } from "./integrations.js";
import { LogDrains } from "./logdrains.js";
import { ProjectMembers } from "./projectmembers.js";
import { Projects } from "./projects.js";
import { Secrets } from "./secrets.js";
import { Teams } from "./teams.js";
import { User } from "./user.js";
import { Webhooks } from "./webhooks.js";
import * as z from "zod";

export class Vercel extends ClientSDK {
    private readonly options$: SDKOptions & { hooks?: SDKHooks };

    constructor(options: SDKOptions = {}) {
        const opt = options as unknown;
        let hooks: SDKHooks;
        if (
            typeof opt === "object" &&
            opt != null &&
            "hooks" in opt &&
            opt.hooks instanceof SDKHooks
        ) {
            hooks = opt.hooks;
        } else {
            hooks = new SDKHooks();
        }

        super({
            client: options.httpClient || new HTTPClient(),
            baseURL: serverURLFromOptions(options),
            hooks,
        });

        this.options$ = { ...options, hooks };
        void this.options$;
    }

    private _artifacts?: Artifacts;
    get artifacts(): Artifacts {
        return (this._artifacts ??= new Artifacts(this.options$));
    }

    private _checks?: Checks;
    get checks(): Checks {
        return (this._checks ??= new Checks(this.options$));
    }

    private _projects?: Projects;
    get projects(): Projects {
        return (this._projects ??= new Projects(this.options$));
    }

    private _deployments?: Deployments;
    get deployments(): Deployments {
        return (this._deployments ??= new Deployments(this.options$));
    }

    private _domains?: Domains;
    get domains(): Domains {
        return (this._domains ??= new Domains(this.options$));
    }

    private _dns?: Dns;
    get dns(): Dns {
        return (this._dns ??= new Dns(this.options$));
    }

    private _edgeConfig?: EdgeConfig;
    get edgeConfig(): EdgeConfig {
        return (this._edgeConfig ??= new EdgeConfig(this.options$));
    }

    private _user?: User;
    get user(): User {
        return (this._user ??= new User(this.options$));
    }

    private _integrations?: Integrations;
    get integrations(): Integrations {
        return (this._integrations ??= new Integrations(this.options$));
    }

    private _logDrains?: LogDrains;
    get logDrains(): LogDrains {
        return (this._logDrains ??= new LogDrains(this.options$));
    }

    private _projectMembers?: ProjectMembers;
    get projectMembers(): ProjectMembers {
        return (this._projectMembers ??= new ProjectMembers(this.options$));
    }

    private _teams?: Teams;
    get teams(): Teams {
        return (this._teams ??= new Teams(this.options$));
    }

    private _authentication?: Authentication;
    get authentication(): Authentication {
        return (this._authentication ??= new Authentication(this.options$));
    }

    private _webhooks?: Webhooks;
    get webhooks(): Webhooks {
        return (this._webhooks ??= new Webhooks(this.options$));
    }

    private _aliases?: Aliases;
    get aliases(): Aliases {
        return (this._aliases ??= new Aliases(this.options$));
    }

    private _certs?: Certs;
    get certs(): Certs {
        return (this._certs ??= new Certs(this.options$));
    }

    private _secrets?: Secrets;
    get secrets(): Secrets {
        return (this._secrets ??= new Secrets(this.options$));
    }

    /**
     * Retrieves the list of builds given their deployment's unique identifier. No longer listed as public API as of May 2023.
     */
    async getDeploymentBuilds(
        deploymentId: string,
        options?: RequestOptions
    ): Promise<models.GetDeploymentBuildsResponseBody> {
        const input$: models.GetDeploymentBuildsRequest = {
            deploymentId: deploymentId,
        };

        const payload$ = schemas$.parse(
            input$,
            (value$) => models.GetDeploymentBuildsRequest$outboundSchema.parse(value$),
            "Input validation failed"
        );
        const body$ = null;

        const pathParams$ = {
            deploymentId: encodeSimple$("deploymentId", payload$.deploymentId, {
                explode: false,
                charEncoding: "percent",
            }),
        };
        const path$ = this.templateURLComponent("/deployments/{deploymentId}/builds")(pathParams$);

        const query$ = "";

        const headers$ = new Headers({
            Accept: "application/json",
        });

        const context = {
            operationID: "getDeploymentBuilds",
            oAuth2Scopes: [],
            securitySource: null,
        };

        const request$ = this.createRequest$(
            context,
            {
                method: "GET",
                path: path$,
                headers: headers$,
                query: query$,
                body: body$,
                timeoutMs: options?.timeoutMs || this.options$.timeoutMs || -1,
            },
            options
        );

        const response = await this.do$(request$, {
            context,
            errorCodes: ["400", "401", "403", "404", "4XX", "5XX"],
            retryConfig: options?.retries || this.options$.retryConfig,
            retryCodes: options?.retryCodes || ["429", "500", "502", "503", "504"],
        });

        const [result$] = await this.matcher<models.GetDeploymentBuildsResponseBody>()
            .json(200, models.GetDeploymentBuildsResponseBody$inboundSchema)
            .fail([400, 401, 403, 404, "4XX", "5XX"])
            .match(response);

        return result$;
    }

    async purgeDataCache(projectIdOrName: string, options?: RequestOptions): Promise<void> {
        const input$: models.PurgeDataCacheRequest = {
            projectIdOrName: projectIdOrName,
        };

        const payload$ = schemas$.parse(
            input$,
            (value$) => models.PurgeDataCacheRequest$outboundSchema.parse(value$),
            "Input validation failed"
        );
        const body$ = null;

        const path$ = this.templateURLComponent("/data-cache/purge-all")();

        const query$ = encodeFormQuery$({
            projectIdOrName: payload$.projectIdOrName,
        });

        const headers$ = new Headers({
            Accept: "*/*",
        });

        const context = { operationID: "purgeDataCache", oAuth2Scopes: [], securitySource: null };

        const request$ = this.createRequest$(
            context,
            {
                method: "DELETE",
                path: path$,
                headers: headers$,
                query: query$,
                body: body$,
                timeoutMs: options?.timeoutMs || this.options$.timeoutMs || -1,
            },
            options
        );

        const response = await this.do$(request$, {
            context,
            errorCodes: ["400", "401", "403", "404", "4XX", "5XX"],
            retryConfig: options?.retries || this.options$.retryConfig,
            retryCodes: options?.retryCodes || ["429", "500", "502", "503", "504"],
        });

        const [result$] = await this.matcher<void>()
            .void(200, z.void())
            .fail([400, 401, 403, 404, "4XX", "5XX"])
            .match(response);

        return result$;
    }

    async updateBillingSettings(
        request?: models.UpdateBillingSettingsRequestBody | undefined,
        options?: RequestOptions
    ): Promise<models.UpdateBillingSettingsResponseBody> {
        const input$ = request;

        const payload$ = schemas$.parse(
            input$,
            (value$) =>
                models.UpdateBillingSettingsRequestBody$outboundSchema.optional().parse(value$),
            "Input validation failed"
        );
        const body$ =
            payload$ === undefined ? null : encodeJSON$("body", payload$, { explode: true });

        const path$ = this.templateURLComponent("/data-cache/billing-settings")();

        const query$ = "";

        const headers$ = new Headers({
            "Content-Type": "application/json",
            Accept: "application/json",
        });

        const context = {
            operationID: "updateBillingSettings",
            oAuth2Scopes: [],
            securitySource: null,
        };

        const request$ = this.createRequest$(
            context,
            {
                method: "PATCH",
                path: path$,
                headers: headers$,
                query: query$,
                body: body$,
                timeoutMs: options?.timeoutMs || this.options$.timeoutMs || -1,
            },
            options
        );

        const response = await this.do$(request$, {
            context,
            errorCodes: ["400", "401", "403", "404", "4XX", "5XX"],
            retryConfig: options?.retries || this.options$.retryConfig,
            retryCodes: options?.retryCodes || ["429", "500", "502", "503", "504"],
        });

        const [result$] = await this.matcher<models.UpdateBillingSettingsResponseBody>()
            .json(200, models.UpdateBillingSettingsResponseBody$inboundSchema)
            .fail([400, 401, 403, 404, "4XX", "5XX"])
            .match(response);

        return result$;
    }
}
