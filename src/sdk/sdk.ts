/*
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

import { SDKHooks } from "../hooks";
import { SDK_METADATA, SDKOptions, serverURLFromOptions } from "../lib/config";
import * as enc$ from "../lib/encodings";
import { HTTPClient } from "../lib/http";
import * as schemas$ from "../lib/schemas";
import { ClientSDK, RequestOptions } from "../lib/sdks";
import * as models from "../models";
import { Aliases } from "./aliases";
import { Artifacts } from "./artifacts";
import { Authentication } from "./authentication";
import { Certs } from "./certs";
import { Checks } from "./checks";
import { Deployments } from "./deployments";
import { Dns } from "./dns";
import { Domains } from "./domains";
import { EdgeConfig } from "./edgeconfig";
import { Integrations } from "./integrations";
import { LogDrains } from "./logdrains";
import { ProjectMembers } from "./projectmembers";
import { Projects } from "./projects";
import { Secrets } from "./secrets";
import { Teams } from "./teams";
import { User } from "./user";
import { Webhooks } from "./webhooks";

export class Vercel extends ClientSDK {
    private readonly options$: SDKOptions & { hooks?: SDKHooks };

    constructor(options: SDKOptions = {}) {
        const opt = options as unknown;
        let hooks: SDKHooks;
        if (
            typeof opt === "object" &&
            opt != null &&
            "hooks" in opt &&
            opt.hooks instanceof SDKHooks
        ) {
            hooks = opt.hooks;
        } else {
            hooks = new SDKHooks();
        }

        super({
            client: options.httpClient || new HTTPClient(),
            baseURL: serverURLFromOptions(options),
            hooks,
        });

        this.options$ = { ...options, hooks };
        void this.options$;
    }

    private _artifacts?: Artifacts;
    get artifacts(): Artifacts {
        return (this._artifacts ??= new Artifacts(this.options$));
    }

    private _checks?: Checks;
    get checks(): Checks {
        return (this._checks ??= new Checks(this.options$));
    }

    private _projects?: Projects;
    get projects(): Projects {
        return (this._projects ??= new Projects(this.options$));
    }

    private _deployments?: Deployments;
    get deployments(): Deployments {
        return (this._deployments ??= new Deployments(this.options$));
    }

    private _domains?: Domains;
    get domains(): Domains {
        return (this._domains ??= new Domains(this.options$));
    }

    private _dns?: Dns;
    get dns(): Dns {
        return (this._dns ??= new Dns(this.options$));
    }

    private _edgeConfig?: EdgeConfig;
    get edgeConfig(): EdgeConfig {
        return (this._edgeConfig ??= new EdgeConfig(this.options$));
    }

    private _user?: User;
    get user(): User {
        return (this._user ??= new User(this.options$));
    }

    private _integrations?: Integrations;
    get integrations(): Integrations {
        return (this._integrations ??= new Integrations(this.options$));
    }

    private _logDrains?: LogDrains;
    get logDrains(): LogDrains {
        return (this._logDrains ??= new LogDrains(this.options$));
    }

    private _projectMembers?: ProjectMembers;
    get projectMembers(): ProjectMembers {
        return (this._projectMembers ??= new ProjectMembers(this.options$));
    }

    private _teams?: Teams;
    get teams(): Teams {
        return (this._teams ??= new Teams(this.options$));
    }

    private _authentication?: Authentication;
    get authentication(): Authentication {
        return (this._authentication ??= new Authentication(this.options$));
    }

    private _webhooks?: Webhooks;
    get webhooks(): Webhooks {
        return (this._webhooks ??= new Webhooks(this.options$));
    }

    private _aliases?: Aliases;
    get aliases(): Aliases {
        return (this._aliases ??= new Aliases(this.options$));
    }

    private _certs?: Certs;
    get certs(): Certs {
        return (this._certs ??= new Certs(this.options$));
    }

    private _secrets?: Secrets;
    get secrets(): Secrets {
        return (this._secrets ??= new Secrets(this.options$));
    }

    /**
     * Retrieves the list of builds given their deployment's unique identifier. No longer listed as public API as of May 2023.
     */
    async getDeploymentBuilds(
        deploymentId: string,
        options?: RequestOptions
    ): Promise<models.GetDeploymentBuildsResponse> {
        const input$: models.GetDeploymentBuildsRequest = {
            deploymentId: deploymentId,
        };
        const headers$ = new Headers();
        headers$.set("user-agent", SDK_METADATA.userAgent);
        headers$.set("Accept", "application/json");

        const payload$ = schemas$.parse(
            input$,
            (value$) => models.GetDeploymentBuildsRequest$.outboundSchema.parse(value$),
            "Input validation failed"
        );
        const body$ = null;

        const pathParams$ = {
            deploymentId: enc$.encodeSimple("deploymentId", payload$.deploymentId, {
                explode: false,
                charEncoding: "percent",
            }),
        };
        const path$ = this.templateURLComponent("/deployments/{deploymentId}/builds")(pathParams$);

        const query$ = "";

        const context = {
            operationID: "getDeploymentBuilds",
            oAuth2Scopes: [],
            securitySource: null,
        };

        const doOptions = { context, errorCodes: ["400", "401", "403", "404", "4XX", "5XX"] };
        const request$ = this.createRequest$(
            context,
            { method: "GET", path: path$, headers: headers$, query: query$, body: body$ },
            options
        );

        const response = await this.do$(request$, doOptions);

        const responseFields$ = {
            HttpMeta: {
                Response: response,
                Request: request$,
            },
        };

        if (this.matchResponse(response, 200, "application/json")) {
            const responseBody = await response.json();
            const result = schemas$.parse(
                responseBody,
                (val$) => {
                    return models.GetDeploymentBuildsResponse$.inboundSchema.parse({
                        ...responseFields$,
                        object: val$,
                    });
                },
                "Response validation failed"
            );
            return result;
        } else {
            throw new models.SDKError("Unexpected API response status or content-type", {
                response,
                request: request$,
            });
        }
    }

    async purgeDataCache(
        projectIdOrName: string,
        options?: RequestOptions
    ): Promise<models.PurgeDataCacheResponse> {
        const input$: models.PurgeDataCacheRequest = {
            projectIdOrName: projectIdOrName,
        };
        const headers$ = new Headers();
        headers$.set("user-agent", SDK_METADATA.userAgent);
        headers$.set("Accept", "*/*");

        const payload$ = schemas$.parse(
            input$,
            (value$) => models.PurgeDataCacheRequest$.outboundSchema.parse(value$),
            "Input validation failed"
        );
        const body$ = null;

        const path$ = this.templateURLComponent("/data-cache/purge-all")();

        const query$ = [
            enc$.encodeForm("projectIdOrName", payload$.projectIdOrName, {
                explode: true,
                charEncoding: "percent",
            }),
        ]
            .filter(Boolean)
            .join("&");

        const context = { operationID: "purgeDataCache", oAuth2Scopes: [], securitySource: null };

        const doOptions = { context, errorCodes: ["400", "401", "403", "404", "4XX", "5XX"] };
        const request$ = this.createRequest$(
            context,
            { method: "DELETE", path: path$, headers: headers$, query: query$, body: body$ },
            options
        );

        const response = await this.do$(request$, doOptions);

        const responseFields$ = {
            HttpMeta: {
                Response: response,
                Request: request$,
            },
        };

        if (this.matchStatusCode(response, 200)) {
            // fallthrough
        } else {
            throw new models.SDKError("Unexpected API response status or content-type", {
                response,
                request: request$,
            });
        }

        return schemas$.parse(
            undefined,
            () => models.PurgeDataCacheResponse$.inboundSchema.parse(responseFields$),
            "Response validation failed"
        );
    }

    async updateBillingSettings(
        request?: models.UpdateBillingSettingsRequestBody | undefined,
        options?: RequestOptions
    ): Promise<models.UpdateBillingSettingsResponse> {
        const input$ = request;
        const headers$ = new Headers();
        headers$.set("user-agent", SDK_METADATA.userAgent);
        headers$.set("Content-Type", "application/json");
        headers$.set("Accept", "application/json");

        const payload$ = schemas$.parse(
            input$,
            (value$) =>
                models.UpdateBillingSettingsRequestBody$.outboundSchema.optional().parse(value$),
            "Input validation failed"
        );
        const body$ =
            payload$ === undefined ? null : enc$.encodeJSON("body", payload$, { explode: true });

        const path$ = this.templateURLComponent("/data-cache/billing-settings")();

        const query$ = "";

        const context = {
            operationID: "updateBillingSettings",
            oAuth2Scopes: [],
            securitySource: null,
        };

        const doOptions = { context, errorCodes: ["400", "401", "403", "404", "4XX", "5XX"] };
        const request$ = this.createRequest$(
            context,
            { method: "PATCH", path: path$, headers: headers$, query: query$, body: body$ },
            options
        );

        const response = await this.do$(request$, doOptions);

        const responseFields$ = {
            HttpMeta: {
                Response: response,
                Request: request$,
            },
        };

        if (this.matchResponse(response, 200, "application/json")) {
            const responseBody = await response.json();
            const result = schemas$.parse(
                responseBody,
                (val$) => {
                    return models.UpdateBillingSettingsResponse$.inboundSchema.parse({
                        ...responseFields$,
                        object: val$,
                    });
                },
                "Response validation failed"
            );
            return result;
        } else {
            throw new models.SDKError("Unexpected API response status or content-type", {
                response,
                request: request$,
            });
        }
    }
}
