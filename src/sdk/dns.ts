/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import { dnsCreate } from "../funcs/dnsCreate.js";
import { dnsGet } from "../funcs/dnsGet.js";
import { dnsRemove } from "../funcs/dnsRemove.js";
import { dnsUpdate } from "../funcs/dnsUpdate.js";
import { ClientSDK, RequestOptions } from "../lib/sdks.js";
import { CreateRecordRequestBody, CreateRecordResponseBody } from "../models/createrecordop.js";
import { GetRecordsRequest, GetRecordsResponseBody } from "../models/getrecordsop.js";
import { RemoveRecordResponseBody } from "../models/removerecordop.js";
import { UpdateRecordRequestBody, UpdateRecordResponseBody } from "../models/updaterecordop.js";
import { unwrapAsync } from "../types/fp.js";

export class Dns extends ClientSDK {
    /**
     * List existing DNS records
     *
     * @remarks
     * Retrieves a list of DNS records created for a domain name. By default it returns 20 records if no limit is provided. The rest can be retrieved using the pagination options.
     */
    async get(
        request: GetRecordsRequest,
        options?: RequestOptions
    ): Promise<GetRecordsResponseBody> {
        return unwrapAsync(dnsGet(this, request, options));
    }

    /**
     * Create a DNS record
     *
     * @remarks
     * Creates a DNS record for a domain.
     */
    async create(
        domain: string,
        teamId?: string | undefined,
        slug?: string | undefined,
        requestBody?: CreateRecordRequestBody | undefined,
        options?: RequestOptions
    ): Promise<CreateRecordResponseBody> {
        return unwrapAsync(dnsCreate(this, domain, teamId, slug, requestBody, options));
    }

    /**
     * Update an existing DNS record
     *
     * @remarks
     * Updates an existing DNS record for a domain name.
     */
    async update(
        recordId: string,
        teamId?: string | undefined,
        slug?: string | undefined,
        requestBody?: UpdateRecordRequestBody | undefined,
        options?: RequestOptions
    ): Promise<UpdateRecordResponseBody> {
        return unwrapAsync(dnsUpdate(this, recordId, teamId, slug, requestBody, options));
    }

    /**
     * Delete a DNS record
     *
     * @remarks
     * Removes an existing DNS record from a domain name.
     */
    async remove(
        domain: string,
        recordId: string,
        teamId?: string | undefined,
        slug?: string | undefined,
        options?: RequestOptions
    ): Promise<RemoveRecordResponseBody> {
        return unwrapAsync(dnsRemove(this, domain, recordId, teamId, slug, options));
    }
}
