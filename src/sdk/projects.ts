/*
 * Code generated by Speakeasy (https://speakeasyapi.com). DO NOT EDIT.
 */

import { SDKHooks } from "../hooks/hooks.js";
import { SDKOptions, serverURLFromOptions } from "../lib/config.js";
import {
    encodeFormQuery as encodeFormQuery$,
    encodeJSON as encodeJSON$,
    encodeSimple as encodeSimple$,
} from "../lib/encodings.js";
import { HTTPClient } from "../lib/http.js";
import * as schemas$ from "../lib/schemas.js";
import { ClientSDK, RequestOptions } from "../lib/sdks.js";
import * as models from "../models/index.js";
import * as z from "zod";

export class Projects extends ClientSDK {
    private readonly options$: SDKOptions & { hooks?: SDKHooks };

    constructor(options: SDKOptions = {}) {
        const opt = options as unknown;
        let hooks: SDKHooks;
        if (
            typeof opt === "object" &&
            opt != null &&
            "hooks" in opt &&
            opt.hooks instanceof SDKHooks
        ) {
            hooks = opt.hooks;
        } else {
            hooks = new SDKHooks();
        }

        super({
            client: options.httpClient || new HTTPClient(),
            baseURL: serverURLFromOptions(options),
            hooks,
        });

        this.options$ = { ...options, hooks };
        void this.options$;
    }

    /**
     * Update the data cache feature
     *
     * @remarks
     * Update the data cache feature on a project.
     */
    async updateProjectDataCache(
        projectId: string,
        teamId?: string | undefined,
        slug?: string | undefined,
        requestBody?: models.UpdateProjectDataCacheRequestBody | undefined,
        options?: RequestOptions
    ): Promise<models.UpdateProjectDataCacheResponseBody> {
        const input$: models.UpdateProjectDataCacheRequest = {
            projectId: projectId,
            teamId: teamId,
            slug: slug,
            requestBody: requestBody,
        };

        const payload$ = schemas$.parse(
            input$,
            (value$) => models.UpdateProjectDataCacheRequest$outboundSchema.parse(value$),
            "Input validation failed"
        );
        const body$ = encodeJSON$("body", payload$.RequestBody, { explode: true });

        const pathParams$ = {
            projectId: encodeSimple$("projectId", payload$.projectId, {
                explode: false,
                charEncoding: "percent",
            }),
        };
        const path$ = this.templateURLComponent("/v1/data-cache/projects/{projectId}")(pathParams$);

        const query$ = encodeFormQuery$({
            slug: payload$.slug,
            teamId: payload$.teamId,
        });

        const headers$ = new Headers({
            "Content-Type": "application/json",
            Accept: "application/json",
        });

        const security$ =
            typeof this.options$.security === "function"
                ? await this.options$.security()
                : this.options$.security;

        const context = {
            operationID: "updateProjectDataCache",
            oAuth2Scopes: [],
            securitySource: this.options$.security,
        };
        const securitySettings$ = this.resolveGlobalSecurity(security$);

        const request$ = this.createRequest$(
            context,
            {
                security: securitySettings$,
                method: "PATCH",
                path: path$,
                headers: headers$,
                query: query$,
                body: body$,
                timeoutMs: options?.timeoutMs || this.options$.timeoutMs || -1,
            },
            options
        );

        const response = await this.do$(request$, {
            context,
            errorCodes: ["400", "401", "403", "404", "4XX", "5XX"],
            retryConfig: options?.retries || this.options$.retryConfig,
            retryCodes: options?.retryCodes || ["429", "500", "502", "503", "504"],
        });

        const [result$] = await this.matcher<models.UpdateProjectDataCacheResponseBody>()
            .json(200, models.UpdateProjectDataCacheResponseBody$inboundSchema)
            .fail([400, 401, 403, 404, "4XX", "5XX"])
            .match(response);

        return result$;
    }

    /**
     * Retrieve a list of projects
     *
     * @remarks
     * Allows to retrieve the list of projects of the authenticated user or team. The list will be paginated and the provided query parameters allow filtering the returned projects.
     */
    async get(
        request?: models.GetProjectsRequest | undefined,
        options?: RequestOptions
    ): Promise<models.GetProjectsResponseBody> {
        const input$ = typeof request === "undefined" ? {} : request;

        const payload$ = schemas$.parse(
            input$,
            (value$) => models.GetProjectsRequest$outboundSchema.parse(value$),
            "Input validation failed"
        );
        const body$ = null;

        const path$ = this.templateURLComponent("/v9/projects")();

        const query$ = encodeFormQuery$({
            deprecated: payload$.deprecated,
            edgeConfigId: payload$.edgeConfigId,
            edgeConfigTokenId: payload$.edgeConfigTokenId,
            excludeRepos: payload$.excludeRepos,
            from: payload$.from,
            gitForkProtection: payload$.gitForkProtection,
            limit: payload$.limit,
            repo: payload$.repo,
            repoId: payload$.repoId,
            repoUrl: payload$.repoUrl,
            search: payload$.search,
            slug: payload$.slug,
            teamId: payload$.teamId,
        });

        const headers$ = new Headers({
            Accept: "application/json",
        });

        const security$ =
            typeof this.options$.security === "function"
                ? await this.options$.security()
                : this.options$.security;

        const context = {
            operationID: "getProjects",
            oAuth2Scopes: [],
            securitySource: this.options$.security,
        };
        const securitySettings$ = this.resolveGlobalSecurity(security$);

        const request$ = this.createRequest$(
            context,
            {
                security: securitySettings$,
                method: "GET",
                path: path$,
                headers: headers$,
                query: query$,
                body: body$,
                timeoutMs: options?.timeoutMs || this.options$.timeoutMs || -1,
            },
            options
        );

        const response = await this.do$(request$, {
            context,
            errorCodes: ["400", "401", "403", "4XX", "5XX"],
            retryConfig: options?.retries || this.options$.retryConfig,
            retryCodes: options?.retryCodes || ["429", "500", "502", "503", "504"],
        });

        const [result$] = await this.matcher<models.GetProjectsResponseBody>()
            .json(200, models.GetProjectsResponseBody$inboundSchema)
            .fail([400, 401, 403, "4XX", "5XX"])
            .match(response);

        return result$;
    }

    /**
     * Create a new project
     *
     * @remarks
     * Allows to create a new project with the provided configuration. It only requires the project `name` but more configuration can be provided to override the defaults.
     */
    async create(
        teamId?: string | undefined,
        slug?: string | undefined,
        requestBody?: models.CreateProjectRequestBody | undefined,
        options?: RequestOptions
    ): Promise<models.CreateProjectResponseBody> {
        const input$: models.CreateProjectRequest = {
            teamId: teamId,
            slug: slug,
            requestBody: requestBody,
        };

        const payload$ = schemas$.parse(
            input$,
            (value$) => models.CreateProjectRequest$outboundSchema.parse(value$),
            "Input validation failed"
        );
        const body$ = encodeJSON$("body", payload$.RequestBody, { explode: true });

        const path$ = this.templateURLComponent("/v10/projects")();

        const query$ = encodeFormQuery$({
            slug: payload$.slug,
            teamId: payload$.teamId,
        });

        const headers$ = new Headers({
            "Content-Type": "application/json",
            Accept: "application/json",
        });

        const security$ =
            typeof this.options$.security === "function"
                ? await this.options$.security()
                : this.options$.security;

        const context = {
            operationID: "createProject",
            oAuth2Scopes: [],
            securitySource: this.options$.security,
        };
        const securitySettings$ = this.resolveGlobalSecurity(security$);

        const request$ = this.createRequest$(
            context,
            {
                security: securitySettings$,
                method: "POST",
                path: path$,
                headers: headers$,
                query: query$,
                body: body$,
                timeoutMs: options?.timeoutMs || this.options$.timeoutMs || -1,
            },
            options
        );

        const response = await this.do$(request$, {
            context,
            errorCodes: ["400", "401", "402", "403", "409", "4XX", "5XX"],
            retryConfig: options?.retries || this.options$.retryConfig,
            retryCodes: options?.retryCodes || ["429", "500", "502", "503", "504"],
        });

        const [result$] = await this.matcher<models.CreateProjectResponseBody>()
            .json(200, models.CreateProjectResponseBody$inboundSchema)
            .fail([400, 401, 402, 403, 409, "4XX", "5XX"])
            .match(response);

        return result$;
    }

    /**
     * Update an existing project
     *
     * @remarks
     * Update the fields of a project using either its `name` or `id`.
     */
    async update(
        idOrName: string,
        teamId?: string | undefined,
        slug?: string | undefined,
        requestBody?: models.UpdateProjectRequestBody | undefined,
        options?: RequestOptions
    ): Promise<models.UpdateProjectResponseBody> {
        const input$: models.UpdateProjectRequest = {
            idOrName: idOrName,
            teamId: teamId,
            slug: slug,
            requestBody: requestBody,
        };

        const payload$ = schemas$.parse(
            input$,
            (value$) => models.UpdateProjectRequest$outboundSchema.parse(value$),
            "Input validation failed"
        );
        const body$ = encodeJSON$("body", payload$.RequestBody, { explode: true });

        const pathParams$ = {
            idOrName: encodeSimple$("idOrName", payload$.idOrName, {
                explode: false,
                charEncoding: "percent",
            }),
        };
        const path$ = this.templateURLComponent("/v9/projects/{idOrName}")(pathParams$);

        const query$ = encodeFormQuery$({
            slug: payload$.slug,
            teamId: payload$.teamId,
        });

        const headers$ = new Headers({
            "Content-Type": "application/json",
            Accept: "application/json",
        });

        const security$ =
            typeof this.options$.security === "function"
                ? await this.options$.security()
                : this.options$.security;

        const context = {
            operationID: "updateProject",
            oAuth2Scopes: [],
            securitySource: this.options$.security,
        };
        const securitySettings$ = this.resolveGlobalSecurity(security$);

        const request$ = this.createRequest$(
            context,
            {
                security: securitySettings$,
                method: "PATCH",
                path: path$,
                headers: headers$,
                query: query$,
                body: body$,
                timeoutMs: options?.timeoutMs || this.options$.timeoutMs || -1,
            },
            options
        );

        const response = await this.do$(request$, {
            context,
            errorCodes: ["400", "401", "402", "403", "409", "428", "4XX", "5XX"],
            retryConfig: options?.retries || this.options$.retryConfig,
            retryCodes: options?.retryCodes || ["429", "500", "502", "503", "504"],
        });

        const [result$] = await this.matcher<models.UpdateProjectResponseBody>()
            .json(200, models.UpdateProjectResponseBody$inboundSchema)
            .fail([400, 401, 402, 403, 409, 428, "4XX", "5XX"])
            .match(response);

        return result$;
    }

    /**
     * Delete a Project
     *
     * @remarks
     * Delete a specific project by passing either the project `id` or `name` in the URL.
     */
    async delete(
        idOrName: string,
        teamId?: string | undefined,
        slug?: string | undefined,
        options?: RequestOptions
    ): Promise<void> {
        const input$: models.DeleteProjectRequest = {
            idOrName: idOrName,
            teamId: teamId,
            slug: slug,
        };

        const payload$ = schemas$.parse(
            input$,
            (value$) => models.DeleteProjectRequest$outboundSchema.parse(value$),
            "Input validation failed"
        );
        const body$ = null;

        const pathParams$ = {
            idOrName: encodeSimple$("idOrName", payload$.idOrName, {
                explode: false,
                charEncoding: "percent",
            }),
        };
        const path$ = this.templateURLComponent("/v9/projects/{idOrName}")(pathParams$);

        const query$ = encodeFormQuery$({
            slug: payload$.slug,
            teamId: payload$.teamId,
        });

        const headers$ = new Headers({
            Accept: "*/*",
        });

        const security$ =
            typeof this.options$.security === "function"
                ? await this.options$.security()
                : this.options$.security;

        const context = {
            operationID: "deleteProject",
            oAuth2Scopes: [],
            securitySource: this.options$.security,
        };
        const securitySettings$ = this.resolveGlobalSecurity(security$);

        const request$ = this.createRequest$(
            context,
            {
                security: securitySettings$,
                method: "DELETE",
                path: path$,
                headers: headers$,
                query: query$,
                body: body$,
                timeoutMs: options?.timeoutMs || this.options$.timeoutMs || -1,
            },
            options
        );

        const response = await this.do$(request$, {
            context,
            errorCodes: ["400", "401", "403", "409", "4XX", "5XX"],
            retryConfig: options?.retries || this.options$.retryConfig,
            retryCodes: options?.retryCodes || ["429", "500", "502", "503", "504"],
        });

        const [result$] = await this.matcher<void>()
            .void(204, z.void())
            .fail([400, 401, 403, 409, "4XX", "5XX"])
            .match(response);

        return result$;
    }

    /**
     * Get a project domain
     *
     * @remarks
     * Get project domain by project id/name and domain name.
     */
    async getDomain(
        idOrName: string,
        domain: string,
        teamId?: string | undefined,
        slug?: string | undefined,
        options?: RequestOptions
    ): Promise<models.GetProjectDomainResponseBody> {
        const input$: models.GetProjectDomainRequest = {
            idOrName: idOrName,
            domain: domain,
            teamId: teamId,
            slug: slug,
        };

        const payload$ = schemas$.parse(
            input$,
            (value$) => models.GetProjectDomainRequest$outboundSchema.parse(value$),
            "Input validation failed"
        );
        const body$ = null;

        const pathParams$ = {
            domain: encodeSimple$("domain", payload$.domain, {
                explode: false,
                charEncoding: "percent",
            }),
            idOrName: encodeSimple$("idOrName", payload$.idOrName, {
                explode: false,
                charEncoding: "percent",
            }),
        };
        const path$ = this.templateURLComponent("/v9/projects/{idOrName}/domains/{domain}")(
            pathParams$
        );

        const query$ = encodeFormQuery$({
            slug: payload$.slug,
            teamId: payload$.teamId,
        });

        const headers$ = new Headers({
            Accept: "application/json",
        });

        const security$ =
            typeof this.options$.security === "function"
                ? await this.options$.security()
                : this.options$.security;

        const context = {
            operationID: "getProjectDomain",
            oAuth2Scopes: [],
            securitySource: this.options$.security,
        };
        const securitySettings$ = this.resolveGlobalSecurity(security$);

        const request$ = this.createRequest$(
            context,
            {
                security: securitySettings$,
                method: "GET",
                path: path$,
                headers: headers$,
                query: query$,
                body: body$,
                timeoutMs: options?.timeoutMs || this.options$.timeoutMs || -1,
            },
            options
        );

        const response = await this.do$(request$, {
            context,
            errorCodes: ["400", "401", "403", "4XX", "5XX"],
            retryConfig: options?.retries || this.options$.retryConfig,
            retryCodes: options?.retryCodes || ["429", "500", "502", "503", "504"],
        });

        const [result$] = await this.matcher<models.GetProjectDomainResponseBody>()
            .json(200, models.GetProjectDomainResponseBody$inboundSchema)
            .fail([400, 401, 403, "4XX", "5XX"])
            .match(response);

        return result$;
    }

    /**
     * Update a project domain
     *
     * @remarks
     * Update a project domain's configuration, including the name, git branch and redirect of the domain.
     */
    async updateDomain(
        request: models.UpdateProjectDomainRequest,
        options?: RequestOptions
    ): Promise<models.UpdateProjectDomainResponseBody> {
        const input$ = request;

        const payload$ = schemas$.parse(
            input$,
            (value$) => models.UpdateProjectDomainRequest$outboundSchema.parse(value$),
            "Input validation failed"
        );
        const body$ = encodeJSON$("body", payload$.RequestBody, { explode: true });

        const pathParams$ = {
            domain: encodeSimple$("domain", payload$.domain, {
                explode: false,
                charEncoding: "percent",
            }),
            idOrName: encodeSimple$("idOrName", payload$.idOrName, {
                explode: false,
                charEncoding: "percent",
            }),
        };
        const path$ = this.templateURLComponent("/v9/projects/{idOrName}/domains/{domain}")(
            pathParams$
        );

        const query$ = encodeFormQuery$({
            slug: payload$.slug,
            teamId: payload$.teamId,
        });

        const headers$ = new Headers({
            "Content-Type": "application/json",
            Accept: "application/json",
        });

        const security$ =
            typeof this.options$.security === "function"
                ? await this.options$.security()
                : this.options$.security;

        const context = {
            operationID: "updateProjectDomain",
            oAuth2Scopes: [],
            securitySource: this.options$.security,
        };
        const securitySettings$ = this.resolveGlobalSecurity(security$);

        const request$ = this.createRequest$(
            context,
            {
                security: securitySettings$,
                method: "PATCH",
                path: path$,
                headers: headers$,
                query: query$,
                body: body$,
                timeoutMs: options?.timeoutMs || this.options$.timeoutMs || -1,
            },
            options
        );

        const response = await this.do$(request$, {
            context,
            errorCodes: ["400", "401", "403", "409", "4XX", "5XX"],
            retryConfig: options?.retries || this.options$.retryConfig,
            retryCodes: options?.retryCodes || ["429", "500", "502", "503", "504"],
        });

        const [result$] = await this.matcher<models.UpdateProjectDomainResponseBody>()
            .json(200, models.UpdateProjectDomainResponseBody$inboundSchema)
            .fail([400, 401, 403, 409, "4XX", "5XX"])
            .match(response);

        return result$;
    }

    /**
     * Remove a domain from a project
     *
     * @remarks
     * Remove a domain from a project by passing the domain name and by specifying the project by either passing the project `id` or `name` in the URL.
     */
    async removeDomain(
        idOrName: string,
        domain: string,
        teamId?: string | undefined,
        slug?: string | undefined,
        options?: RequestOptions
    ): Promise<models.RemoveProjectDomainResponseBody> {
        const input$: models.RemoveProjectDomainRequest = {
            idOrName: idOrName,
            domain: domain,
            teamId: teamId,
            slug: slug,
        };

        const payload$ = schemas$.parse(
            input$,
            (value$) => models.RemoveProjectDomainRequest$outboundSchema.parse(value$),
            "Input validation failed"
        );
        const body$ = null;

        const pathParams$ = {
            domain: encodeSimple$("domain", payload$.domain, {
                explode: false,
                charEncoding: "percent",
            }),
            idOrName: encodeSimple$("idOrName", payload$.idOrName, {
                explode: false,
                charEncoding: "percent",
            }),
        };
        const path$ = this.templateURLComponent("/v9/projects/{idOrName}/domains/{domain}")(
            pathParams$
        );

        const query$ = encodeFormQuery$({
            slug: payload$.slug,
            teamId: payload$.teamId,
        });

        const headers$ = new Headers({
            Accept: "application/json",
        });

        const security$ =
            typeof this.options$.security === "function"
                ? await this.options$.security()
                : this.options$.security;

        const context = {
            operationID: "removeProjectDomain",
            oAuth2Scopes: [],
            securitySource: this.options$.security,
        };
        const securitySettings$ = this.resolveGlobalSecurity(security$);

        const request$ = this.createRequest$(
            context,
            {
                security: securitySettings$,
                method: "DELETE",
                path: path$,
                headers: headers$,
                query: query$,
                body: body$,
                timeoutMs: options?.timeoutMs || this.options$.timeoutMs || -1,
            },
            options
        );

        const response = await this.do$(request$, {
            context,
            errorCodes: ["400", "401", "403", "404", "409", "4XX", "5XX"],
            retryConfig: options?.retries || this.options$.retryConfig,
            retryCodes: options?.retryCodes || ["429", "500", "502", "503", "504"],
        });

        const [result$] = await this.matcher<models.RemoveProjectDomainResponseBody>()
            .json(200, models.RemoveProjectDomainResponseBody$inboundSchema)
            .fail([400, 401, 403, 404, 409, "4XX", "5XX"])
            .match(response);

        return result$;
    }

    /**
     * Add a domain to a project
     *
     * @remarks
     * Add a domain to the project by passing its domain name and by specifying the project by either passing the project `id` or `name` in the URL. If the domain is not yet verified to be used on this project, the request will return `verified = false`, and the domain will need to be verified according to the `verification` challenge via `POST /projects/:idOrName/domains/:domain/verify`. If the domain already exists on the project, the request will fail with a `400` status code.
     */
    async addDomain(
        idOrName: string,
        teamId?: string | undefined,
        slug?: string | undefined,
        requestBody?: models.AddProjectDomainRequestBody | undefined,
        options?: RequestOptions
    ): Promise<models.AddProjectDomainResponseBody> {
        const input$: models.AddProjectDomainRequest = {
            idOrName: idOrName,
            teamId: teamId,
            slug: slug,
            requestBody: requestBody,
        };

        const payload$ = schemas$.parse(
            input$,
            (value$) => models.AddProjectDomainRequest$outboundSchema.parse(value$),
            "Input validation failed"
        );
        const body$ = encodeJSON$("body", payload$.RequestBody, { explode: true });

        const pathParams$ = {
            idOrName: encodeSimple$("idOrName", payload$.idOrName, {
                explode: false,
                charEncoding: "percent",
            }),
        };
        const path$ = this.templateURLComponent("/v10/projects/{idOrName}/domains")(pathParams$);

        const query$ = encodeFormQuery$({
            slug: payload$.slug,
            teamId: payload$.teamId,
        });

        const headers$ = new Headers({
            "Content-Type": "application/json",
            Accept: "application/json",
        });

        const security$ =
            typeof this.options$.security === "function"
                ? await this.options$.security()
                : this.options$.security;

        const context = {
            operationID: "addProjectDomain",
            oAuth2Scopes: [],
            securitySource: this.options$.security,
        };
        const securitySettings$ = this.resolveGlobalSecurity(security$);

        const request$ = this.createRequest$(
            context,
            {
                security: securitySettings$,
                method: "POST",
                path: path$,
                headers: headers$,
                query: query$,
                body: body$,
                timeoutMs: options?.timeoutMs || this.options$.timeoutMs || -1,
            },
            options
        );

        const response = await this.do$(request$, {
            context,
            errorCodes: ["400", "401", "402", "403", "409", "4XX", "5XX"],
            retryConfig: options?.retries || this.options$.retryConfig,
            retryCodes: options?.retryCodes || ["429", "500", "502", "503", "504"],
        });

        const [result$] = await this.matcher<models.AddProjectDomainResponseBody>()
            .json(200, models.AddProjectDomainResponseBody$inboundSchema)
            .fail([400, 401, 402, 403, 409, "4XX", "5XX"])
            .match(response);

        return result$;
    }

    /**
     * Verify project domain
     *
     * @remarks
     * Attempts to verify a project domain with `verified = false` by checking the correctness of the project domain's `verification` challenge.
     */
    async verifyDomain(
        idOrName: string,
        domain: string,
        teamId?: string | undefined,
        slug?: string | undefined,
        options?: RequestOptions
    ): Promise<models.VerifyProjectDomainResponseBody> {
        const input$: models.VerifyProjectDomainRequest = {
            idOrName: idOrName,
            domain: domain,
            teamId: teamId,
            slug: slug,
        };

        const payload$ = schemas$.parse(
            input$,
            (value$) => models.VerifyProjectDomainRequest$outboundSchema.parse(value$),
            "Input validation failed"
        );
        const body$ = null;

        const pathParams$ = {
            domain: encodeSimple$("domain", payload$.domain, {
                explode: false,
                charEncoding: "percent",
            }),
            idOrName: encodeSimple$("idOrName", payload$.idOrName, {
                explode: false,
                charEncoding: "percent",
            }),
        };
        const path$ = this.templateURLComponent("/v9/projects/{idOrName}/domains/{domain}/verify")(
            pathParams$
        );

        const query$ = encodeFormQuery$({
            slug: payload$.slug,
            teamId: payload$.teamId,
        });

        const headers$ = new Headers({
            Accept: "application/json",
        });

        const security$ =
            typeof this.options$.security === "function"
                ? await this.options$.security()
                : this.options$.security;

        const context = {
            operationID: "verifyProjectDomain",
            oAuth2Scopes: [],
            securitySource: this.options$.security,
        };
        const securitySettings$ = this.resolveGlobalSecurity(security$);

        const request$ = this.createRequest$(
            context,
            {
                security: securitySettings$,
                method: "POST",
                path: path$,
                headers: headers$,
                query: query$,
                body: body$,
                timeoutMs: options?.timeoutMs || this.options$.timeoutMs || -1,
            },
            options
        );

        const response = await this.do$(request$, {
            context,
            errorCodes: ["400", "401", "403", "4XX", "5XX"],
            retryConfig: options?.retries || this.options$.retryConfig,
            retryCodes: options?.retryCodes || ["429", "500", "502", "503", "504"],
        });

        const [result$] = await this.matcher<models.VerifyProjectDomainResponseBody>()
            .json(200, models.VerifyProjectDomainResponseBody$inboundSchema)
            .fail([400, 401, 403, "4XX", "5XX"])
            .match(response);

        return result$;
    }

    /**
     * Retrieve the environment variables of a project by id or name
     *
     * @remarks
     * Retrieve the environment variables for a given project by passing either the project `id` or `name` in the URL.
     */
    async filterEnvs(
        request: models.FilterProjectEnvsRequest,
        options?: RequestOptions
    ): Promise<models.FilterProjectEnvsResponseBody> {
        const input$ = request;

        const payload$ = schemas$.parse(
            input$,
            (value$) => models.FilterProjectEnvsRequest$outboundSchema.parse(value$),
            "Input validation failed"
        );
        const body$ = null;

        const pathParams$ = {
            idOrName: encodeSimple$("idOrName", payload$.idOrName, {
                explode: false,
                charEncoding: "percent",
            }),
        };
        const path$ = this.templateURLComponent("/v9/projects/{idOrName}/env")(pathParams$);

        const query$ = encodeFormQuery$({
            customEnvironmentId: payload$.customEnvironmentId,
            decrypt: payload$.decrypt,
            gitBranch: payload$.gitBranch,
            slug: payload$.slug,
            source: payload$.source,
            teamId: payload$.teamId,
        });

        const headers$ = new Headers({
            Accept: "application/json",
        });

        const security$ =
            typeof this.options$.security === "function"
                ? await this.options$.security()
                : this.options$.security;

        const context = {
            operationID: "filterProjectEnvs",
            oAuth2Scopes: [],
            securitySource: this.options$.security,
        };
        const securitySettings$ = this.resolveGlobalSecurity(security$);

        const request$ = this.createRequest$(
            context,
            {
                security: securitySettings$,
                method: "GET",
                path: path$,
                headers: headers$,
                query: query$,
                body: body$,
                timeoutMs: options?.timeoutMs || this.options$.timeoutMs || -1,
            },
            options
        );

        const response = await this.do$(request$, {
            context,
            errorCodes: ["400", "401", "403", "4XX", "5XX"],
            retryConfig: options?.retries || this.options$.retryConfig,
            retryCodes: options?.retryCodes || ["429", "500", "502", "503", "504"],
        });

        const [result$] = await this.matcher<models.FilterProjectEnvsResponseBody>()
            .json(200, models.FilterProjectEnvsResponseBody$inboundSchema)
            .fail([400, 401, 403, "4XX", "5XX"])
            .match(response);

        return result$;
    }

    /**
     * Retrieve the decrypted value of an environment variable of a project by id
     *
     * @remarks
     * Retrieve the environment variable for a given project.
     */
    async getEnv(
        idOrName: string,
        id: string,
        teamId?: string | undefined,
        slug?: string | undefined,
        options?: RequestOptions
    ): Promise<models.GetProjectEnvResponseBody> {
        const input$: models.GetProjectEnvRequest = {
            idOrName: idOrName,
            id: id,
            teamId: teamId,
            slug: slug,
        };

        const payload$ = schemas$.parse(
            input$,
            (value$) => models.GetProjectEnvRequest$outboundSchema.parse(value$),
            "Input validation failed"
        );
        const body$ = null;

        const pathParams$ = {
            id: encodeSimple$("id", payload$.id, { explode: false, charEncoding: "percent" }),
            idOrName: encodeSimple$("idOrName", payload$.idOrName, {
                explode: false,
                charEncoding: "percent",
            }),
        };
        const path$ = this.templateURLComponent("/v1/projects/{idOrName}/env/{id}")(pathParams$);

        const query$ = encodeFormQuery$({
            slug: payload$.slug,
            teamId: payload$.teamId,
        });

        const headers$ = new Headers({
            Accept: "application/json",
        });

        const security$ =
            typeof this.options$.security === "function"
                ? await this.options$.security()
                : this.options$.security;

        const context = {
            operationID: "getProjectEnv",
            oAuth2Scopes: [],
            securitySource: this.options$.security,
        };
        const securitySettings$ = this.resolveGlobalSecurity(security$);

        const request$ = this.createRequest$(
            context,
            {
                security: securitySettings$,
                method: "GET",
                path: path$,
                headers: headers$,
                query: query$,
                body: body$,
                timeoutMs: options?.timeoutMs || this.options$.timeoutMs || -1,
            },
            options
        );

        const response = await this.do$(request$, {
            context,
            errorCodes: ["400", "401", "403", "4XX", "5XX"],
            retryConfig: options?.retries || this.options$.retryConfig,
            retryCodes: options?.retryCodes || ["429", "500", "502", "503", "504"],
        });

        const [result$] = await this.matcher<models.GetProjectEnvResponseBody>()
            .json(200, models.GetProjectEnvResponseBody$inboundSchema)
            .fail([400, 401, 403, "4XX", "5XX"])
            .match(response);

        return result$;
    }

    /**
     * Create one or more environment variables
     *
     * @remarks
     * Create one ore more environment variables for a project by passing its `key`, `value`, `type` and `target` and by specifying the project by either passing the project `id` or `name` in the URL.
     */
    async createEnv(
        request: models.CreateProjectEnvRequest,
        options?: RequestOptions
    ): Promise<models.CreateProjectEnvResponseBody> {
        const input$ = request;

        const payload$ = schemas$.parse(
            input$,
            (value$) => models.CreateProjectEnvRequest$outboundSchema.parse(value$),
            "Input validation failed"
        );
        const body$ = encodeJSON$("body", payload$.RequestBody, { explode: true });

        const pathParams$ = {
            idOrName: encodeSimple$("idOrName", payload$.idOrName, {
                explode: false,
                charEncoding: "percent",
            }),
        };
        const path$ = this.templateURLComponent("/v10/projects/{idOrName}/env")(pathParams$);

        const query$ = encodeFormQuery$({
            slug: payload$.slug,
            teamId: payload$.teamId,
            upsert: payload$.upsert,
        });

        const headers$ = new Headers({
            "Content-Type": "application/json",
            Accept: "application/json",
        });

        const security$ =
            typeof this.options$.security === "function"
                ? await this.options$.security()
                : this.options$.security;

        const context = {
            operationID: "createProjectEnv",
            oAuth2Scopes: [],
            securitySource: this.options$.security,
        };
        const securitySettings$ = this.resolveGlobalSecurity(security$);

        const request$ = this.createRequest$(
            context,
            {
                security: securitySettings$,
                method: "POST",
                path: path$,
                headers: headers$,
                query: query$,
                body: body$,
                timeoutMs: options?.timeoutMs || this.options$.timeoutMs || -1,
            },
            options
        );

        const response = await this.do$(request$, {
            context,
            errorCodes: ["400", "401", "402", "403", "409", "4XX", "5XX"],
            retryConfig: options?.retries || this.options$.retryConfig,
            retryCodes: options?.retryCodes || ["429", "500", "502", "503", "504"],
        });

        const [result$] = await this.matcher<models.CreateProjectEnvResponseBody>()
            .json(201, models.CreateProjectEnvResponseBody$inboundSchema)
            .fail([400, 401, 402, 403, 409, "4XX", "5XX"])
            .match(response);

        return result$;
    }

    /**
     * Remove an environment variable
     *
     * @remarks
     * Delete a specific environment variable for a given project by passing the environment variable identifier and either passing the project `id` or `name` in the URL.
     */
    async removeEnv(
        request: models.RemoveProjectEnvRequest,
        options?: RequestOptions
    ): Promise<models.RemoveProjectEnvResponseBody> {
        const input$ = request;

        const payload$ = schemas$.parse(
            input$,
            (value$) => models.RemoveProjectEnvRequest$outboundSchema.parse(value$),
            "Input validation failed"
        );
        const body$ = null;

        const pathParams$ = {
            id: encodeSimple$("id", payload$.id, { explode: false, charEncoding: "percent" }),
            idOrName: encodeSimple$("idOrName", payload$.idOrName, {
                explode: false,
                charEncoding: "percent",
            }),
        };
        const path$ = this.templateURLComponent("/v9/projects/{idOrName}/env/{id}")(pathParams$);

        const query$ = encodeFormQuery$({
            customEnvironmentId: payload$.customEnvironmentId,
            slug: payload$.slug,
            teamId: payload$.teamId,
        });

        const headers$ = new Headers({
            Accept: "application/json",
        });

        const security$ =
            typeof this.options$.security === "function"
                ? await this.options$.security()
                : this.options$.security;

        const context = {
            operationID: "removeProjectEnv",
            oAuth2Scopes: [],
            securitySource: this.options$.security,
        };
        const securitySettings$ = this.resolveGlobalSecurity(security$);

        const request$ = this.createRequest$(
            context,
            {
                security: securitySettings$,
                method: "DELETE",
                path: path$,
                headers: headers$,
                query: query$,
                body: body$,
                timeoutMs: options?.timeoutMs || this.options$.timeoutMs || -1,
            },
            options
        );

        const response = await this.do$(request$, {
            context,
            errorCodes: ["400", "401", "403", "404", "409", "4XX", "5XX"],
            retryConfig: options?.retries || this.options$.retryConfig,
            retryCodes: options?.retryCodes || ["429", "500", "502", "503", "504"],
        });

        const [result$] = await this.matcher<models.RemoveProjectEnvResponseBody>()
            .json(200, models.RemoveProjectEnvResponseBody$inboundSchema)
            .fail([400, 401, 403, 404, 409, "4XX", "5XX"])
            .match(response);

        return result$;
    }

    /**
     * Edit an environment variable
     *
     * @remarks
     * Edit a specific environment variable for a given project by passing the environment variable identifier and either passing the project `id` or `name` in the URL.
     */
    async editEnv(
        request: models.EditProjectEnvRequest,
        options?: RequestOptions
    ): Promise<models.EditProjectEnvResponseBody> {
        const input$ = request;

        const payload$ = schemas$.parse(
            input$,
            (value$) => models.EditProjectEnvRequest$outboundSchema.parse(value$),
            "Input validation failed"
        );
        const body$ = encodeJSON$("body", payload$.RequestBody, { explode: true });

        const pathParams$ = {
            id: encodeSimple$("id", payload$.id, { explode: false, charEncoding: "percent" }),
            idOrName: encodeSimple$("idOrName", payload$.idOrName, {
                explode: false,
                charEncoding: "percent",
            }),
        };
        const path$ = this.templateURLComponent("/v9/projects/{idOrName}/env/{id}")(pathParams$);

        const query$ = encodeFormQuery$({
            slug: payload$.slug,
            teamId: payload$.teamId,
        });

        const headers$ = new Headers({
            "Content-Type": "application/json",
            Accept: "application/json",
        });

        const security$ =
            typeof this.options$.security === "function"
                ? await this.options$.security()
                : this.options$.security;

        const context = {
            operationID: "editProjectEnv",
            oAuth2Scopes: [],
            securitySource: this.options$.security,
        };
        const securitySettings$ = this.resolveGlobalSecurity(security$);

        const request$ = this.createRequest$(
            context,
            {
                security: securitySettings$,
                method: "PATCH",
                path: path$,
                headers: headers$,
                query: query$,
                body: body$,
                timeoutMs: options?.timeoutMs || this.options$.timeoutMs || -1,
            },
            options
        );

        const response = await this.do$(request$, {
            context,
            errorCodes: ["400", "401", "403", "409", "4XX", "5XX"],
            retryConfig: options?.retries || this.options$.retryConfig,
            retryCodes: options?.retryCodes || ["429", "500", "502", "503", "504"],
        });

        const [result$] = await this.matcher<models.EditProjectEnvResponseBody>()
            .json(200, models.EditProjectEnvResponseBody$inboundSchema)
            .fail([400, 401, 403, 409, "4XX", "5XX"])
            .match(response);

        return result$;
    }

    /**
     * Points all production domains for a project to the given deploy
     *
     * @remarks
     * Allows users to promote a deployment to production. Note: This does NOT rebuild the deployment. If you need that, then call create-deployments endpoint.
     */
    async requestPromote(
        projectId: string,
        deploymentId: string,
        teamId?: string | undefined,
        slug?: string | undefined,
        options?: RequestOptions
    ): Promise<void> {
        const input$: models.RequestPromoteRequest = {
            projectId: projectId,
            deploymentId: deploymentId,
            teamId: teamId,
            slug: slug,
        };

        const payload$ = schemas$.parse(
            input$,
            (value$) => models.RequestPromoteRequest$outboundSchema.parse(value$),
            "Input validation failed"
        );
        const body$ = null;

        const pathParams$ = {
            deploymentId: encodeSimple$("deploymentId", payload$.deploymentId, {
                explode: false,
                charEncoding: "percent",
            }),
            projectId: encodeSimple$("projectId", payload$.projectId, {
                explode: false,
                charEncoding: "percent",
            }),
        };
        const path$ = this.templateURLComponent("/v10/projects/{projectId}/promote/{deploymentId}")(
            pathParams$
        );

        const query$ = encodeFormQuery$({
            slug: payload$.slug,
            teamId: payload$.teamId,
        });

        const headers$ = new Headers({
            Accept: "*/*",
        });

        const security$ =
            typeof this.options$.security === "function"
                ? await this.options$.security()
                : this.options$.security;

        const context = {
            operationID: "requestPromote",
            oAuth2Scopes: [],
            securitySource: this.options$.security,
        };
        const securitySettings$ = this.resolveGlobalSecurity(security$);

        const request$ = this.createRequest$(
            context,
            {
                security: securitySettings$,
                method: "POST",
                path: path$,
                headers: headers$,
                query: query$,
                body: body$,
                timeoutMs: options?.timeoutMs || this.options$.timeoutMs || -1,
            },
            options
        );

        const response = await this.do$(request$, {
            context,
            errorCodes: ["400", "401", "403", "409", "4XX", "5XX"],
            retryConfig: options?.retries || this.options$.retryConfig,
            retryCodes: options?.retryCodes || ["429", "500", "502", "503", "504"],
        });

        const [result$] = await this.matcher<void>()
            .void(201, z.void())
            .fail([400, 401, 403, 409, "4XX", "5XX"])
            .match(response);

        return result$;
    }

    /**
     * Gets a list of aliases with status for the current promote
     *
     * @remarks
     * Get a list of aliases related to the last promote request with their mapping status
     */
    async getRequestPromoteAliases(
        request: models.GetEequestPromoteAliasesRequest,
        options?: RequestOptions
    ): Promise<models.GetEequestPromoteAliasesResponseBody> {
        const input$ = request;

        const payload$ = schemas$.parse(
            input$,
            (value$) => models.GetEequestPromoteAliasesRequest$outboundSchema.parse(value$),
            "Input validation failed"
        );
        const body$ = null;

        const pathParams$ = {
            projectId: encodeSimple$("projectId", payload$.projectId, {
                explode: false,
                charEncoding: "percent",
            }),
        };
        const path$ = this.templateURLComponent("/v1/projects/{projectId}/promote/aliases")(
            pathParams$
        );

        const query$ = encodeFormQuery$({
            failedOnly: payload$.failedOnly,
            limit: payload$.limit,
            since: payload$.since,
            slug: payload$.slug,
            teamId: payload$.teamId,
            until: payload$.until,
        });

        const headers$ = new Headers({
            Accept: "application/json",
        });

        const security$ =
            typeof this.options$.security === "function"
                ? await this.options$.security()
                : this.options$.security;

        const context = {
            operationID: "getEequestPromoteAliases",
            oAuth2Scopes: [],
            securitySource: this.options$.security,
        };
        const securitySettings$ = this.resolveGlobalSecurity(security$);

        const request$ = this.createRequest$(
            context,
            {
                security: securitySettings$,
                method: "GET",
                path: path$,
                headers: headers$,
                query: query$,
                body: body$,
                timeoutMs: options?.timeoutMs || this.options$.timeoutMs || -1,
            },
            options
        );

        const response = await this.do$(request$, {
            context,
            errorCodes: ["400", "401", "403", "404", "4XX", "5XX"],
            retryConfig: options?.retries || this.options$.retryConfig,
            retryCodes: options?.retryCodes || ["429", "500", "502", "503", "504"],
        });

        const [result$] = await this.matcher<models.GetEequestPromoteAliasesResponseBody>()
            .json(200, models.GetEequestPromoteAliasesResponseBody$inboundSchema)
            .fail([400, 401, 403, 404, "4XX", "5XX"])
            .match(response);

        return result$;
    }

    /**
     * Pause a project
     *
     * @remarks
     * Pause a project by passing its project `id` in the URL. If the project does not exist given the id then the request will fail with 400 status code. If the project disables auto assigning custom production domains and blocks the active Production Deployment then the request will return with 200 status code.
     */
    async pause(
        projectId: string,
        teamId?: string | undefined,
        slug?: string | undefined,
        options?: RequestOptions
    ): Promise<void> {
        const input$: models.PauseProjectRequest = {
            projectId: projectId,
            teamId: teamId,
            slug: slug,
        };

        const payload$ = schemas$.parse(
            input$,
            (value$) => models.PauseProjectRequest$outboundSchema.parse(value$),
            "Input validation failed"
        );
        const body$ = null;

        const pathParams$ = {
            projectId: encodeSimple$("projectId", payload$.projectId, {
                explode: false,
                charEncoding: "percent",
            }),
        };
        const path$ = this.templateURLComponent("/v1/projects/{projectId}/pause")(pathParams$);

        const query$ = encodeFormQuery$({
            slug: payload$.slug,
            teamId: payload$.teamId,
        });

        const headers$ = new Headers({
            Accept: "*/*",
        });

        const security$ =
            typeof this.options$.security === "function"
                ? await this.options$.security()
                : this.options$.security;

        const context = {
            operationID: "pauseProject",
            oAuth2Scopes: [],
            securitySource: this.options$.security,
        };
        const securitySettings$ = this.resolveGlobalSecurity(security$);

        const request$ = this.createRequest$(
            context,
            {
                security: securitySettings$,
                method: "POST",
                path: path$,
                headers: headers$,
                query: query$,
                body: body$,
                timeoutMs: options?.timeoutMs || this.options$.timeoutMs || -1,
            },
            options
        );

        const response = await this.do$(request$, {
            context,
            errorCodes: ["400", "401", "402", "403", "4XX", "500", "5XX"],
            retryConfig: options?.retries || this.options$.retryConfig,
            retryCodes: options?.retryCodes || ["429", "500", "502", "503", "504"],
        });

        const [result$] = await this.matcher<void>()
            .void(200, z.void())
            .fail([400, 401, 402, 403, "4XX", 500, "5XX"])
            .match(response);

        return result$;
    }

    /**
     * Unpause a project
     *
     * @remarks
     * Unpause a project by passing its project `id` in the URL. If the project does not exist given the id then the request will fail with 400 status code. If the project enables auto assigning custom production domains and unblocks the active Production Deployment then the request will return with 200 status code.
     */
    async unpause(
        projectId: string,
        teamId?: string | undefined,
        slug?: string | undefined,
        options?: RequestOptions
    ): Promise<void> {
        const input$: models.UnpauseProjectRequest = {
            projectId: projectId,
            teamId: teamId,
            slug: slug,
        };

        const payload$ = schemas$.parse(
            input$,
            (value$) => models.UnpauseProjectRequest$outboundSchema.parse(value$),
            "Input validation failed"
        );
        const body$ = null;

        const pathParams$ = {
            projectId: encodeSimple$("projectId", payload$.projectId, {
                explode: false,
                charEncoding: "percent",
            }),
        };
        const path$ = this.templateURLComponent("/v1/projects/{projectId}/unpause")(pathParams$);

        const query$ = encodeFormQuery$({
            slug: payload$.slug,
            teamId: payload$.teamId,
        });

        const headers$ = new Headers({
            Accept: "*/*",
        });

        const security$ =
            typeof this.options$.security === "function"
                ? await this.options$.security()
                : this.options$.security;

        const context = {
            operationID: "unpauseProject",
            oAuth2Scopes: [],
            securitySource: this.options$.security,
        };
        const securitySettings$ = this.resolveGlobalSecurity(security$);

        const request$ = this.createRequest$(
            context,
            {
                security: securitySettings$,
                method: "POST",
                path: path$,
                headers: headers$,
                query: query$,
                body: body$,
                timeoutMs: options?.timeoutMs || this.options$.timeoutMs || -1,
            },
            options
        );

        const response = await this.do$(request$, {
            context,
            errorCodes: ["400", "401", "403", "4XX", "500", "5XX"],
            retryConfig: options?.retries || this.options$.retryConfig,
            retryCodes: options?.retryCodes || ["429", "500", "502", "503", "504"],
        });

        const [result$] = await this.matcher<void>()
            .void(200, z.void())
            .fail([400, 401, 403, "4XX", 500, "5XX"])
            .match(response);

        return result$;
    }
}
