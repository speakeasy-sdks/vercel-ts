/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import { projectsAddDomain } from "../funcs/projectsAddDomain.js";
import { projectsCreate } from "../funcs/projectsCreate.js";
import { projectsCreateEnv } from "../funcs/projectsCreateEnv.js";
import { projectsDelete } from "../funcs/projectsDelete.js";
import { projectsEditEnv } from "../funcs/projectsEditEnv.js";
import { projectsFilterEnvs } from "../funcs/projectsFilterEnvs.js";
import { projectsGet } from "../funcs/projectsGet.js";
import { projectsGetDomain } from "../funcs/projectsGetDomain.js";
import { projectsGetEnv } from "../funcs/projectsGetEnv.js";
import { projectsGetRequestPromoteAliases } from "../funcs/projectsGetRequestPromoteAliases.js";
import { projectsPause } from "../funcs/projectsPause.js";
import { projectsRemoveDomain } from "../funcs/projectsRemoveDomain.js";
import { projectsRemoveEnv } from "../funcs/projectsRemoveEnv.js";
import { projectsRequestPromote } from "../funcs/projectsRequestPromote.js";
import { projectsUnpause } from "../funcs/projectsUnpause.js";
import { projectsUpdate } from "../funcs/projectsUpdate.js";
import { projectsUpdateDomain } from "../funcs/projectsUpdateDomain.js";
import { projectsUpdateProjectDataCache } from "../funcs/projectsUpdateProjectDataCache.js";
import { projectsVerifyDomain } from "../funcs/projectsVerifyDomain.js";
import { ClientSDK, RequestOptions } from "../lib/sdks.js";
import {
    AddProjectDomainRequestBody,
    AddProjectDomainResponseBody,
} from "../models/addprojectdomainop.js";
import {
    CreateProjectEnvRequest,
    CreateProjectEnvResponseBody,
} from "../models/createprojectenvop.js";
import { CreateProjectRequestBody, CreateProjectResponseBody } from "../models/createprojectop.js";
import { EditProjectEnvRequest, EditProjectEnvResponseBody } from "../models/editprojectenvop.js";
import {
    FilterProjectEnvsRequest,
    FilterProjectEnvsResponseBody,
} from "../models/filterprojectenvsop.js";
import {
    GetEequestPromoteAliasesRequest,
    GetEequestPromoteAliasesResponseBody,
} from "../models/geteequestpromotealiasesop.js";
import { GetProjectDomainResponseBody } from "../models/getprojectdomainop.js";
import { GetProjectEnvResponseBody } from "../models/getprojectenvop.js";
import { GetProjectsRequest, GetProjectsResponseBody } from "../models/getprojectsop.js";
import { RemoveProjectDomainResponseBody } from "../models/removeprojectdomainop.js";
import {
    RemoveProjectEnvRequest,
    RemoveProjectEnvResponseBody,
} from "../models/removeprojectenvop.js";
import {
    UpdateProjectDataCacheRequestBody,
    UpdateProjectDataCacheResponseBody,
} from "../models/updateprojectdatacacheop.js";
import {
    UpdateProjectDomainRequest,
    UpdateProjectDomainResponseBody,
} from "../models/updateprojectdomainop.js";
import { UpdateProjectRequestBody, UpdateProjectResponseBody } from "../models/updateprojectop.js";
import { VerifyProjectDomainResponseBody } from "../models/verifyprojectdomainop.js";
import { unwrapAsync } from "../types/fp.js";

export class Projects extends ClientSDK {
    /**
     * Update the data cache feature
     *
     * @remarks
     * Update the data cache feature on a project.
     */
    async updateProjectDataCache(
        projectId: string,
        teamId?: string | undefined,
        slug?: string | undefined,
        requestBody?: UpdateProjectDataCacheRequestBody | undefined,
        options?: RequestOptions
    ): Promise<UpdateProjectDataCacheResponseBody> {
        return unwrapAsync(
            projectsUpdateProjectDataCache(this, projectId, teamId, slug, requestBody, options)
        );
    }

    /**
     * Retrieve a list of projects
     *
     * @remarks
     * Allows to retrieve the list of projects of the authenticated user or team. The list will be paginated and the provided query parameters allow filtering the returned projects.
     */
    async get(
        request?: GetProjectsRequest | undefined,
        options?: RequestOptions
    ): Promise<GetProjectsResponseBody> {
        return unwrapAsync(projectsGet(this, request, options));
    }

    /**
     * Create a new project
     *
     * @remarks
     * Allows to create a new project with the provided configuration. It only requires the project `name` but more configuration can be provided to override the defaults.
     */
    async create(
        teamId?: string | undefined,
        slug?: string | undefined,
        requestBody?: CreateProjectRequestBody | undefined,
        options?: RequestOptions
    ): Promise<CreateProjectResponseBody> {
        return unwrapAsync(projectsCreate(this, teamId, slug, requestBody, options));
    }

    /**
     * Update an existing project
     *
     * @remarks
     * Update the fields of a project using either its `name` or `id`.
     */
    async update(
        idOrName: string,
        teamId?: string | undefined,
        slug?: string | undefined,
        requestBody?: UpdateProjectRequestBody | undefined,
        options?: RequestOptions
    ): Promise<UpdateProjectResponseBody> {
        return unwrapAsync(projectsUpdate(this, idOrName, teamId, slug, requestBody, options));
    }

    /**
     * Delete a Project
     *
     * @remarks
     * Delete a specific project by passing either the project `id` or `name` in the URL.
     */
    async delete(
        idOrName: string,
        teamId?: string | undefined,
        slug?: string | undefined,
        options?: RequestOptions
    ): Promise<void> {
        return unwrapAsync(projectsDelete(this, idOrName, teamId, slug, options));
    }

    /**
     * Get a project domain
     *
     * @remarks
     * Get project domain by project id/name and domain name.
     */
    async getDomain(
        idOrName: string,
        domain: string,
        teamId?: string | undefined,
        slug?: string | undefined,
        options?: RequestOptions
    ): Promise<GetProjectDomainResponseBody> {
        return unwrapAsync(projectsGetDomain(this, idOrName, domain, teamId, slug, options));
    }

    /**
     * Update a project domain
     *
     * @remarks
     * Update a project domain's configuration, including the name, git branch and redirect of the domain.
     */
    async updateDomain(
        request: UpdateProjectDomainRequest,
        options?: RequestOptions
    ): Promise<UpdateProjectDomainResponseBody> {
        return unwrapAsync(projectsUpdateDomain(this, request, options));
    }

    /**
     * Remove a domain from a project
     *
     * @remarks
     * Remove a domain from a project by passing the domain name and by specifying the project by either passing the project `id` or `name` in the URL.
     */
    async removeDomain(
        idOrName: string,
        domain: string,
        teamId?: string | undefined,
        slug?: string | undefined,
        options?: RequestOptions
    ): Promise<RemoveProjectDomainResponseBody> {
        return unwrapAsync(projectsRemoveDomain(this, idOrName, domain, teamId, slug, options));
    }

    /**
     * Add a domain to a project
     *
     * @remarks
     * Add a domain to the project by passing its domain name and by specifying the project by either passing the project `id` or `name` in the URL. If the domain is not yet verified to be used on this project, the request will return `verified = false`, and the domain will need to be verified according to the `verification` challenge via `POST /projects/:idOrName/domains/:domain/verify`. If the domain already exists on the project, the request will fail with a `400` status code.
     */
    async addDomain(
        idOrName: string,
        teamId?: string | undefined,
        slug?: string | undefined,
        requestBody?: AddProjectDomainRequestBody | undefined,
        options?: RequestOptions
    ): Promise<AddProjectDomainResponseBody> {
        return unwrapAsync(projectsAddDomain(this, idOrName, teamId, slug, requestBody, options));
    }

    /**
     * Verify project domain
     *
     * @remarks
     * Attempts to verify a project domain with `verified = false` by checking the correctness of the project domain's `verification` challenge.
     */
    async verifyDomain(
        idOrName: string,
        domain: string,
        teamId?: string | undefined,
        slug?: string | undefined,
        options?: RequestOptions
    ): Promise<VerifyProjectDomainResponseBody> {
        return unwrapAsync(projectsVerifyDomain(this, idOrName, domain, teamId, slug, options));
    }

    /**
     * Retrieve the environment variables of a project by id or name
     *
     * @remarks
     * Retrieve the environment variables for a given project by passing either the project `id` or `name` in the URL.
     */
    async filterEnvs(
        request: FilterProjectEnvsRequest,
        options?: RequestOptions
    ): Promise<FilterProjectEnvsResponseBody> {
        return unwrapAsync(projectsFilterEnvs(this, request, options));
    }

    /**
     * Retrieve the decrypted value of an environment variable of a project by id
     *
     * @remarks
     * Retrieve the environment variable for a given project.
     */
    async getEnv(
        idOrName: string,
        id: string,
        teamId?: string | undefined,
        slug?: string | undefined,
        options?: RequestOptions
    ): Promise<GetProjectEnvResponseBody> {
        return unwrapAsync(projectsGetEnv(this, idOrName, id, teamId, slug, options));
    }

    /**
     * Create one or more environment variables
     *
     * @remarks
     * Create one ore more environment variables for a project by passing its `key`, `value`, `type` and `target` and by specifying the project by either passing the project `id` or `name` in the URL.
     */
    async createEnv(
        request: CreateProjectEnvRequest,
        options?: RequestOptions
    ): Promise<CreateProjectEnvResponseBody> {
        return unwrapAsync(projectsCreateEnv(this, request, options));
    }

    /**
     * Remove an environment variable
     *
     * @remarks
     * Delete a specific environment variable for a given project by passing the environment variable identifier and either passing the project `id` or `name` in the URL.
     */
    async removeEnv(
        request: RemoveProjectEnvRequest,
        options?: RequestOptions
    ): Promise<RemoveProjectEnvResponseBody> {
        return unwrapAsync(projectsRemoveEnv(this, request, options));
    }

    /**
     * Edit an environment variable
     *
     * @remarks
     * Edit a specific environment variable for a given project by passing the environment variable identifier and either passing the project `id` or `name` in the URL.
     */
    async editEnv(
        request: EditProjectEnvRequest,
        options?: RequestOptions
    ): Promise<EditProjectEnvResponseBody> {
        return unwrapAsync(projectsEditEnv(this, request, options));
    }

    /**
     * Points all production domains for a project to the given deploy
     *
     * @remarks
     * Allows users to promote a deployment to production. Note: This does NOT rebuild the deployment. If you need that, then call create-deployments endpoint.
     */
    async requestPromote(
        projectId: string,
        deploymentId: string,
        teamId?: string | undefined,
        slug?: string | undefined,
        options?: RequestOptions
    ): Promise<void> {
        return unwrapAsync(
            projectsRequestPromote(this, projectId, deploymentId, teamId, slug, options)
        );
    }

    /**
     * Gets a list of aliases with status for the current promote
     *
     * @remarks
     * Get a list of aliases related to the last promote request with their mapping status
     */
    async getRequestPromoteAliases(
        request: GetEequestPromoteAliasesRequest,
        options?: RequestOptions
    ): Promise<GetEequestPromoteAliasesResponseBody> {
        return unwrapAsync(projectsGetRequestPromoteAliases(this, request, options));
    }

    /**
     * Pause a project
     *
     * @remarks
     * Pause a project by passing its project `id` in the URL. If the project does not exist given the id then the request will fail with 400 status code. If the project disables auto assigning custom production domains and blocks the active Production Deployment then the request will return with 200 status code.
     */
    async pause(
        projectId: string,
        teamId?: string | undefined,
        slug?: string | undefined,
        options?: RequestOptions
    ): Promise<void> {
        return unwrapAsync(projectsPause(this, projectId, teamId, slug, options));
    }

    /**
     * Unpause a project
     *
     * @remarks
     * Unpause a project by passing its project `id` in the URL. If the project does not exist given the id then the request will fail with 400 status code. If the project enables auto assigning custom production domains and unblocks the active Production Deployment then the request will return with 200 status code.
     */
    async unpause(
        projectId: string,
        teamId?: string | undefined,
        slug?: string | undefined,
        options?: RequestOptions
    ): Promise<void> {
        return unwrapAsync(projectsUnpause(this, projectId, teamId, slug, options));
    }
}
