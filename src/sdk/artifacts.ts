/*
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

import { SDKHooks } from "../hooks/hooks.js";
import { SDK_METADATA, SDKOptions, serverURLFromOptions } from "../lib/config.js";
import {
    encodeFormQuery as encodeFormQuery$,
    encodeJSON as encodeJSON$,
    encodeSimple as encodeSimple$,
} from "../lib/encodings.js";
import { HTTPClient } from "../lib/http.js";
import * as schemas$ from "../lib/schemas.js";
import { ClientSDK, RequestOptions } from "../lib/sdks.js";
import * as models from "../models/index.js";
import * as z from "zod";

export class Artifacts extends ClientSDK {
    private readonly options$: SDKOptions & { hooks?: SDKHooks };

    constructor(options: SDKOptions = {}) {
        const opt = options as unknown;
        let hooks: SDKHooks;
        if (
            typeof opt === "object" &&
            opt != null &&
            "hooks" in opt &&
            opt.hooks instanceof SDKHooks
        ) {
            hooks = opt.hooks;
        } else {
            hooks = new SDKHooks();
        }

        super({
            client: options.httpClient || new HTTPClient(),
            baseURL: serverURLFromOptions(options),
            hooks,
        });

        this.options$ = { ...options, hooks };
        void this.options$;
    }

    /**
     * Record an artifacts cache usage event
     *
     * @remarks
     * Records an artifacts cache usage event. The body of this request is an array of cache usage events. The supported event types are `HIT` and `MISS`. The source is either `LOCAL` the cache event was on the users filesystem cache or `REMOTE` if the cache event is for a remote cache. When the event is a `HIT` the request also accepts a number `duration` which is the time taken to generate the artifact in the cache.
     */
    async recordEvents(
        request: models.RecordEventsRequest,
        options?: RequestOptions
    ): Promise<void> {
        const input$ = typeof request === "undefined" ? {} : request;
        const headers$ = new Headers();
        headers$.set("user-agent", SDK_METADATA.userAgent);
        headers$.set("Content-Type", "application/json");
        headers$.set("Accept", "*/*");

        const payload$ = schemas$.parse(
            input$,
            (value$) => models.RecordEventsRequest$.outboundSchema.parse(value$),
            "Input validation failed"
        );
        const body$ = encodeJSON$("body", payload$.RequestBody, { explode: true });

        const path$ = this.templateURLComponent("/v8/artifacts/events")();

        const query$ = encodeFormQuery$({
            slug: payload$.slug,
            teamId: payload$.teamId,
        });

        headers$.set(
            "x-artifact-client-ci",
            encodeSimple$("x-artifact-client-ci", payload$["x-artifact-client-ci"], {
                explode: false,
                charEncoding: "none",
            })
        );
        headers$.set(
            "x-artifact-client-interactive",
            encodeSimple$(
                "x-artifact-client-interactive",
                payload$["x-artifact-client-interactive"],
                { explode: false, charEncoding: "none" }
            )
        );

        const security$ =
            typeof this.options$.security === "function"
                ? await this.options$.security()
                : this.options$.security;

        const context = {
            operationID: "recordEvents",
            oAuth2Scopes: [],
            securitySource: this.options$.security,
        };
        const securitySettings$ = this.resolveGlobalSecurity(security$);

        const doOptions = { context, errorCodes: ["400", "401", "402", "403", "4XX", "5XX"] };
        const request$ = this.createRequest$(
            context,
            {
                security: securitySettings$,
                method: "POST",
                path: path$,
                headers: headers$,
                query: query$,
                body: body$,
            },
            options
        );

        const response = await this.do$(request$, doOptions);

        const [result$] = await this.matcher<void>()
            .void(200, z.void())
            .fail([400, 401, 402, 403, "4XX", "5XX"])
            .match(response);

        return result$;
    }

    /**
     * Get status of Remote Caching for this principal
     *
     * @remarks
     * Check the status of Remote Caching for this principal. Returns a JSON-encoded status indicating if Remote Caching is enabled, disabled, or disabled due to usage limits.
     */
    async status(
        teamId?: string | undefined,
        slug?: string | undefined,
        options?: RequestOptions
    ): Promise<models.StatusResponseBody> {
        const input$: models.StatusRequest = {
            teamId: teamId,
            slug: slug,
        };
        const headers$ = new Headers();
        headers$.set("user-agent", SDK_METADATA.userAgent);
        headers$.set("Accept", "application/json");

        const payload$ = schemas$.parse(
            input$,
            (value$) => models.StatusRequest$.outboundSchema.parse(value$),
            "Input validation failed"
        );
        const body$ = null;

        const path$ = this.templateURLComponent("/v8/artifacts/status")();

        const query$ = encodeFormQuery$({
            slug: payload$.slug,
            teamId: payload$.teamId,
        });

        const security$ =
            typeof this.options$.security === "function"
                ? await this.options$.security()
                : this.options$.security;

        const context = {
            operationID: "status",
            oAuth2Scopes: [],
            securitySource: this.options$.security,
        };
        const securitySettings$ = this.resolveGlobalSecurity(security$);

        const doOptions = { context, errorCodes: ["400", "401", "402", "403", "4XX", "5XX"] };
        const request$ = this.createRequest$(
            context,
            {
                security: securitySettings$,
                method: "GET",
                path: path$,
                headers: headers$,
                query: query$,
                body: body$,
            },
            options
        );

        const response = await this.do$(request$, doOptions);

        const [result$] = await this.matcher<models.StatusResponseBody>()
            .json(200, models.StatusResponseBody$)
            .fail([400, 401, 402, 403, "4XX", "5XX"])
            .match(response);

        return result$;
    }

    /**
     * Upload a cache artifact
     *
     * @remarks
     * Uploads a cache artifact identified by the `hash` specified on the path. The cache artifact can then be downloaded with the provided `hash`.
     */
    async upload(
        request: models.UploadArtifactRequest,
        options?: RequestOptions
    ): Promise<models.UploadArtifactResponseBody> {
        const input$ = request;
        const headers$ = new Headers();
        headers$.set("user-agent", SDK_METADATA.userAgent);
        headers$.set("Content-Type", "application/octet-stream");
        headers$.set("Accept", "application/json");

        const payload$ = schemas$.parse(
            input$,
            (value$) => models.UploadArtifactRequest$.outboundSchema.parse(value$),
            "Input validation failed"
        );
        const body$ = payload$.RequestBody;

        const pathParams$ = {
            hash: encodeSimple$("hash", payload$.hash, { explode: false, charEncoding: "percent" }),
        };
        const path$ = this.templateURLComponent("/v8/artifacts/{hash}")(pathParams$);

        const query$ = encodeFormQuery$({
            slug: payload$.slug,
            teamId: payload$.teamId,
        });

        headers$.set(
            "Content-Length",
            encodeSimple$("Content-Length", payload$["Content-Length"], {
                explode: false,
                charEncoding: "none",
            })
        );
        headers$.set(
            "x-artifact-client-ci",
            encodeSimple$("x-artifact-client-ci", payload$["x-artifact-client-ci"], {
                explode: false,
                charEncoding: "none",
            })
        );
        headers$.set(
            "x-artifact-client-interactive",
            encodeSimple$(
                "x-artifact-client-interactive",
                payload$["x-artifact-client-interactive"],
                { explode: false, charEncoding: "none" }
            )
        );
        headers$.set(
            "x-artifact-duration",
            encodeSimple$("x-artifact-duration", payload$["x-artifact-duration"], {
                explode: false,
                charEncoding: "none",
            })
        );
        headers$.set(
            "x-artifact-tag",
            encodeSimple$("x-artifact-tag", payload$["x-artifact-tag"], {
                explode: false,
                charEncoding: "none",
            })
        );

        const security$ =
            typeof this.options$.security === "function"
                ? await this.options$.security()
                : this.options$.security;

        const context = {
            operationID: "uploadArtifact",
            oAuth2Scopes: [],
            securitySource: this.options$.security,
        };
        const securitySettings$ = this.resolveGlobalSecurity(security$);

        const doOptions = { context, errorCodes: ["400", "401", "402", "403", "4XX", "5XX"] };
        const request$ = this.createRequest$(
            context,
            {
                security: securitySettings$,
                method: "PUT",
                path: path$,
                headers: headers$,
                query: query$,
                body: body$,
            },
            options
        );

        const response = await this.do$(request$, doOptions);

        const [result$] = await this.matcher<models.UploadArtifactResponseBody>()
            .json(202, models.UploadArtifactResponseBody$)
            .fail([400, 401, 402, 403, "4XX", "5XX"])
            .match(response);

        return result$;
    }

    /**
     * Download a cache artifact
     *
     * @remarks
     * Downloads a cache artifact indentified by its `hash` specified on the request path. The artifact is downloaded as an octet-stream. The client should verify the content-length header and response body.
     */
    async download(
        request: models.DownloadArtifactRequest,
        options?: RequestOptions
    ): Promise<ReadableStream<Uint8Array>> {
        const input$ = request;
        const headers$ = new Headers();
        headers$.set("user-agent", SDK_METADATA.userAgent);
        headers$.set("Accept", "application/json");

        const payload$ = schemas$.parse(
            input$,
            (value$) => models.DownloadArtifactRequest$.outboundSchema.parse(value$),
            "Input validation failed"
        );
        const body$ = null;

        const pathParams$ = {
            hash: encodeSimple$("hash", payload$.hash, { explode: false, charEncoding: "percent" }),
        };
        const path$ = this.templateURLComponent("/v8/artifacts/{hash}")(pathParams$);

        const query$ = encodeFormQuery$({
            slug: payload$.slug,
            teamId: payload$.teamId,
        });

        headers$.set(
            "x-artifact-client-ci",
            encodeSimple$("x-artifact-client-ci", payload$["x-artifact-client-ci"], {
                explode: false,
                charEncoding: "none",
            })
        );
        headers$.set(
            "x-artifact-client-interactive",
            encodeSimple$(
                "x-artifact-client-interactive",
                payload$["x-artifact-client-interactive"],
                { explode: false, charEncoding: "none" }
            )
        );

        const security$ =
            typeof this.options$.security === "function"
                ? await this.options$.security()
                : this.options$.security;

        const context = {
            operationID: "downloadArtifact",
            oAuth2Scopes: [],
            securitySource: this.options$.security,
        };
        const securitySettings$ = this.resolveGlobalSecurity(security$);

        const doOptions = {
            context,
            errorCodes: ["400", "401", "402", "403", "404", "4XX", "5XX"],
        };
        const request$ = this.createRequest$(
            context,
            {
                security: securitySettings$,
                method: "GET",
                path: path$,
                headers: headers$,
                query: query$,
                body: body$,
            },
            options
        );

        const response = await this.do$(request$, doOptions);

        const [result$] = await this.matcher<ReadableStream<Uint8Array>>()
            .stream(200, z.instanceof(ReadableStream<Uint8Array>), { ctype: "application/json" })
            .fail([400, 401, 402, 403, 404, "4XX", "5XX"])
            .match(response);

        return result$;
    }

    /**
     * Check if a cache artifact exists
     *
     * @remarks
     * Check that a cache artifact with the given `hash` exists. This request returns response headers only and is equivalent to a `GET` request to this endpoint where the response contains no body.
     */
    async exists(
        hash: string,
        teamId?: string | undefined,
        slug?: string | undefined,
        options?: RequestOptions
    ): Promise<void> {
        const input$: models.ArtifactExistsRequest = {
            hash: hash,
            teamId: teamId,
            slug: slug,
        };
        const headers$ = new Headers();
        headers$.set("user-agent", SDK_METADATA.userAgent);
        headers$.set("Accept", "*/*");

        const payload$ = schemas$.parse(
            input$,
            (value$) => models.ArtifactExistsRequest$.outboundSchema.parse(value$),
            "Input validation failed"
        );
        const body$ = null;

        const pathParams$ = {
            hash: encodeSimple$("hash", payload$.hash, { explode: false, charEncoding: "percent" }),
        };
        const path$ = this.templateURLComponent("/v8/artifacts/{hash}")(pathParams$);

        const query$ = encodeFormQuery$({
            slug: payload$.slug,
            teamId: payload$.teamId,
        });

        const security$ =
            typeof this.options$.security === "function"
                ? await this.options$.security()
                : this.options$.security;

        const context = {
            operationID: "artifactExists",
            oAuth2Scopes: [],
            securitySource: this.options$.security,
        };
        const securitySettings$ = this.resolveGlobalSecurity(security$);

        const doOptions = {
            context,
            errorCodes: ["400", "401", "402", "403", "404", "4XX", "5XX"],
        };
        const request$ = this.createRequest$(
            context,
            {
                security: securitySettings$,
                method: "HEAD",
                path: path$,
                headers: headers$,
                query: query$,
                body: body$,
            },
            options
        );

        const response = await this.do$(request$, doOptions);

        const [result$] = await this.matcher<void>()
            .void(200, z.void())
            .fail([400, 401, 402, 403, 404, "4XX", "5XX"])
            .match(response);

        return result$;
    }

    /**
     * Query information about an artifact
     *
     * @remarks
     * Query information about an array of artifacts.
     */
    async query(
        teamId?: string | undefined,
        slug?: string | undefined,
        requestBody?: models.ArtifactQueryRequestBody | undefined,
        options?: RequestOptions
    ): Promise<{ [k: string]: models.ResponseBody }> {
        const input$: models.ArtifactQueryRequest = {
            teamId: teamId,
            slug: slug,
            requestBody: requestBody,
        };
        const headers$ = new Headers();
        headers$.set("user-agent", SDK_METADATA.userAgent);
        headers$.set("Content-Type", "application/json");
        headers$.set("Accept", "application/json");

        const payload$ = schemas$.parse(
            input$,
            (value$) => models.ArtifactQueryRequest$.outboundSchema.parse(value$),
            "Input validation failed"
        );
        const body$ = encodeJSON$("body", payload$.RequestBody, { explode: true });

        const path$ = this.templateURLComponent("/v8/artifacts")();

        const query$ = encodeFormQuery$({
            slug: payload$.slug,
            teamId: payload$.teamId,
        });

        const security$ =
            typeof this.options$.security === "function"
                ? await this.options$.security()
                : this.options$.security;

        const context = {
            operationID: "artifactQuery",
            oAuth2Scopes: [],
            securitySource: this.options$.security,
        };
        const securitySettings$ = this.resolveGlobalSecurity(security$);

        const doOptions = { context, errorCodes: ["400", "401", "402", "403", "4XX", "5XX"] };
        const request$ = this.createRequest$(
            context,
            {
                security: securitySettings$,
                method: "POST",
                path: path$,
                headers: headers$,
                query: query$,
                body: body$,
            },
            options
        );

        const response = await this.do$(request$, doOptions);

        const [result$] = await this.matcher<{ [k: string]: models.ResponseBody }>()
            .json(200, z.record(models.ResponseBody$.inboundSchema))
            .fail([400, 401, 402, 403, "4XX", "5XX"])
            .match(response);

        return result$;
    }
}
