/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import { domainsBuy } from "../funcs/domainsBuy.js";
import { domainsCheckPrice } from "../funcs/domainsCheckPrice.js";
import { domainsCheckStatus } from "../funcs/domainsCheckStatus.js";
import { domainsCreateOrTransferDomain } from "../funcs/domainsCreateOrTransferDomain.js";
import { domainsDelete } from "../funcs/domainsDelete.js";
import { domainsGetConfig } from "../funcs/domainsGetConfig.js";
import { domainsGetDomain } from "../funcs/domainsGetDomain.js";
import { domainsGetTransfer } from "../funcs/domainsGetTransfer.js";
import { domainsList } from "../funcs/domainsList.js";
import { domainsUpdate } from "../funcs/domainsUpdate.js";
import { ClientSDK, RequestOptions } from "../lib/sdks.js";
import { BuyDomainRequestBody, BuyDomainResponse } from "../models/buydomainop.js";
import { CheckDomainPriceResponseBody, QueryParamType } from "../models/checkdomainpriceop.js";
import { CheckDomainStatusResponseBody } from "../models/checkdomainstatusop.js";
import {
    CreateOrTransferDomainRequestBody,
    CreateOrTransferDomainResponseBody,
} from "../models/createortransferdomainop.js";
import { DeleteDomainResponseBody } from "../models/deletedomainop.js";
import { GetDomainConfigResponseBody, Strict } from "../models/getdomainconfigop.js";
import { GetDomainResponseBody } from "../models/getdomainop.js";
import { GetDomainsRequest, GetDomainsResponseBody } from "../models/getdomainsop.js";
import { GetDomainTransferResponseBody } from "../models/getdomaintransferop.js";
import { PatchDomainRequestBody, PatchDomainResponseBody } from "../models/patchdomainop.js";
import { unwrapAsync } from "../types/fp.js";

export class Domains extends ClientSDK {
    /**
     * Purchase a domain
     *
     * @remarks
     * Allows to purchase the specified domain.
     */
    async buy(
        teamId?: string | undefined,
        slug?: string | undefined,
        requestBody?: BuyDomainRequestBody | undefined,
        options?: RequestOptions
    ): Promise<BuyDomainResponse> {
        return unwrapAsync(domainsBuy(this, teamId, slug, requestBody, options));
    }

    /**
     * Check the price for a domain
     *
     * @remarks
     * Check the price to purchase a domain and how long a single purchase period is.
     */
    async checkPrice(
        name: string,
        type?: QueryParamType | undefined,
        teamId?: string | undefined,
        slug?: string | undefined,
        options?: RequestOptions
    ): Promise<CheckDomainPriceResponseBody> {
        return unwrapAsync(domainsCheckPrice(this, name, type, teamId, slug, options));
    }

    /**
     * Check a Domain Availability
     *
     * @remarks
     * Check if a domain name is available for purchase.
     */
    async checkStatus(
        name: string,
        teamId?: string | undefined,
        slug?: string | undefined,
        options?: RequestOptions
    ): Promise<CheckDomainStatusResponseBody> {
        return unwrapAsync(domainsCheckStatus(this, name, teamId, slug, options));
    }

    /**
     * Get domain transfer info.
     *
     * @remarks
     * Fetch domain transfer availability or transfer status if a transfer is in progress.
     */
    async getTransfer(
        domain: string,
        teamId?: string | undefined,
        slug?: string | undefined,
        options?: RequestOptions
    ): Promise<GetDomainTransferResponseBody> {
        return unwrapAsync(domainsGetTransfer(this, domain, teamId, slug, options));
    }

    /**
     * Get a Domain's configuration
     *
     * @remarks
     * Get a Domain's configuration.
     */
    async getConfig(
        domain: string,
        strict?: Strict | undefined,
        teamId?: string | undefined,
        slug?: string | undefined,
        options?: RequestOptions
    ): Promise<GetDomainConfigResponseBody> {
        return unwrapAsync(domainsGetConfig(this, domain, strict, teamId, slug, options));
    }

    /**
     * Get Information for a Single Domain
     *
     * @remarks
     * Get information for a single domain in an account or team.
     */
    async getDomain(
        domain: string,
        teamId?: string | undefined,
        slug?: string | undefined,
        options?: RequestOptions
    ): Promise<GetDomainResponseBody> {
        return unwrapAsync(domainsGetDomain(this, domain, teamId, slug, options));
    }

    /**
     * List all the domains
     *
     * @remarks
     * Retrieves a list of domains registered for the authenticated user or team. By default it returns the last 20 domains if no limit is provided.
     */
    async list(
        request?: GetDomainsRequest | undefined,
        options?: RequestOptions
    ): Promise<GetDomainsResponseBody> {
        return unwrapAsync(domainsList(this, request, options));
    }

    /**
     * Register or transfer-in a new Domain
     *
     * @remarks
     * This endpoint is used for adding a new apex domain name with Vercel for the authenticating user. Can also be used for initiating a domain transfer request from an external Registrar to Vercel.
     */
    async createOrTransferDomain(
        teamId?: string | undefined,
        slug?: string | undefined,
        requestBody?: CreateOrTransferDomainRequestBody | undefined,
        options?: RequestOptions
    ): Promise<CreateOrTransferDomainResponseBody> {
        return unwrapAsync(domainsCreateOrTransferDomain(this, teamId, slug, requestBody, options));
    }

    /**
     * Update or move apex domain
     *
     * @remarks
     * Update or move apex domain.
     */
    async update(
        domain: string,
        teamId?: string | undefined,
        slug?: string | undefined,
        requestBody?: PatchDomainRequestBody | undefined,
        options?: RequestOptions
    ): Promise<PatchDomainResponseBody> {
        return unwrapAsync(domainsUpdate(this, domain, teamId, slug, requestBody, options));
    }

    /**
     * Remove a domain by name
     *
     * @remarks
     * Delete a previously registered domain name from Vercel. Deleting a domain will automatically remove any associated aliases.
     */
    async delete(
        domain: string,
        teamId?: string | undefined,
        slug?: string | undefined,
        options?: RequestOptions
    ): Promise<DeleteDomainResponseBody> {
        return unwrapAsync(domainsDelete(this, domain, teamId, slug, options));
    }
}
