/*
 * Code generated by Speakeasy (https://speakeasyapi.com). DO NOT EDIT.
 */

import { SDKHooks } from "../hooks/hooks.js";
import { SDKOptions, serverURLFromOptions } from "../lib/config.js";
import {
    encodeFormQuery as encodeFormQuery$,
    encodeJSON as encodeJSON$,
    encodeSimple as encodeSimple$,
} from "../lib/encodings.js";
import { HTTPClient } from "../lib/http.js";
import * as schemas$ from "../lib/schemas.js";
import { ClientSDK, RequestOptions } from "../lib/sdks.js";
import * as models from "../models/index.js";

export class Authentication extends ClientSDK {
    private readonly options$: SDKOptions & { hooks?: SDKHooks };

    constructor(options: SDKOptions = {}) {
        const opt = options as unknown;
        let hooks: SDKHooks;
        if (
            typeof opt === "object" &&
            opt != null &&
            "hooks" in opt &&
            opt.hooks instanceof SDKHooks
        ) {
            hooks = opt.hooks;
        } else {
            hooks = new SDKHooks();
        }

        super({
            client: options.httpClient || new HTTPClient(),
            baseURL: serverURLFromOptions(options),
            hooks,
        });

        this.options$ = { ...options, hooks };
        void this.options$;
    }

    /**
     * List Auth Tokens
     *
     * @remarks
     * Retrieve a list of the current User's authentication tokens.
     */
    async listTokens(options?: RequestOptions): Promise<models.ListAuthTokensResponseBody> {
        const path$ = this.templateURLComponent("/v5/user/tokens")();

        const query$ = "";

        const headers$ = new Headers({
            Accept: "application/json",
        });

        const security$ =
            typeof this.options$.security === "function"
                ? await this.options$.security()
                : this.options$.security;

        const context = {
            operationID: "listAuthTokens",
            oAuth2Scopes: [],
            securitySource: this.options$.security,
        };
        const securitySettings$ = this.resolveGlobalSecurity(security$);

        const request$ = this.createRequest$(
            context,
            {
                security: securitySettings$,
                method: "GET",
                path: path$,
                headers: headers$,
                query: query$,
                timeoutMs: options?.timeoutMs || this.options$.timeoutMs || -1,
            },
            options
        );

        const response = await this.do$(request$, {
            context,
            errorCodes: ["400", "401", "403", "4XX", "5XX"],
            retryConfig: options?.retries || this.options$.retryConfig,
            retryCodes: options?.retryCodes || ["429", "500", "502", "503", "504"],
        });

        const [result$] = await this.matcher<models.ListAuthTokensResponseBody>()
            .json(200, models.ListAuthTokensResponseBody$inboundSchema)
            .fail([400, 401, 403, "4XX", "5XX"])
            .match(response);

        return result$;
    }

    /**
     * Create an Auth Token
     *
     * @remarks
     * Creates and returns a new authentication token for the currently authenticated User. The `bearerToken` property is only provided once, in the response body, so be sure to save it on the client for use with API requests.
     */
    async createToken(
        teamId?: string | undefined,
        slug?: string | undefined,
        requestBody?: models.CreateAuthTokenRequestBody | undefined,
        options?: RequestOptions
    ): Promise<models.CreateAuthTokenResponseBody> {
        const input$: models.CreateAuthTokenRequest = {
            teamId: teamId,
            slug: slug,
            requestBody: requestBody,
        };

        const payload$ = schemas$.parse(
            input$,
            (value$) => models.CreateAuthTokenRequest$outboundSchema.parse(value$),
            "Input validation failed"
        );
        const body$ = encodeJSON$("body", payload$.RequestBody, { explode: true });

        const path$ = this.templateURLComponent("/v3/user/tokens")();

        const query$ = encodeFormQuery$({
            slug: payload$.slug,
            teamId: payload$.teamId,
        });

        const headers$ = new Headers({
            "Content-Type": "application/json",
            Accept: "application/json",
        });

        const security$ =
            typeof this.options$.security === "function"
                ? await this.options$.security()
                : this.options$.security;

        const context = {
            operationID: "createAuthToken",
            oAuth2Scopes: [],
            securitySource: this.options$.security,
        };
        const securitySettings$ = this.resolveGlobalSecurity(security$);

        const request$ = this.createRequest$(
            context,
            {
                security: securitySettings$,
                method: "POST",
                path: path$,
                headers: headers$,
                query: query$,
                body: body$,
                timeoutMs: options?.timeoutMs || this.options$.timeoutMs || -1,
            },
            options
        );

        const response = await this.do$(request$, {
            context,
            errorCodes: ["400", "401", "403", "404", "4XX", "5XX"],
            retryConfig: options?.retries || this.options$.retryConfig,
            retryCodes: options?.retryCodes || ["429", "500", "502", "503", "504"],
        });

        const [result$] = await this.matcher<models.CreateAuthTokenResponseBody>()
            .json(200, models.CreateAuthTokenResponseBody$inboundSchema)
            .fail([400, 401, 403, 404, "4XX", "5XX"])
            .match(response);

        return result$;
    }

    /**
     * Get Auth Token Metadata
     *
     * @remarks
     * Retrieve metadata about an authentication token belonging to the currently authenticated User.
     */
    async getAuthToken(
        tokenId: string,
        options?: RequestOptions
    ): Promise<models.GetAuthTokenResponseBody> {
        const input$: models.GetAuthTokenRequest = {
            tokenId: tokenId,
        };

        const payload$ = schemas$.parse(
            input$,
            (value$) => models.GetAuthTokenRequest$outboundSchema.parse(value$),
            "Input validation failed"
        );
        const body$ = null;

        const pathParams$ = {
            tokenId: encodeSimple$("tokenId", payload$.tokenId, {
                explode: false,
                charEncoding: "percent",
            }),
        };
        const path$ = this.templateURLComponent("/v5/user/tokens/{tokenId}")(pathParams$);

        const query$ = "";

        const headers$ = new Headers({
            Accept: "application/json",
        });

        const security$ =
            typeof this.options$.security === "function"
                ? await this.options$.security()
                : this.options$.security;

        const context = {
            operationID: "getAuthToken",
            oAuth2Scopes: [],
            securitySource: this.options$.security,
        };
        const securitySettings$ = this.resolveGlobalSecurity(security$);

        const request$ = this.createRequest$(
            context,
            {
                security: securitySettings$,
                method: "GET",
                path: path$,
                headers: headers$,
                query: query$,
                body: body$,
                timeoutMs: options?.timeoutMs || this.options$.timeoutMs || -1,
            },
            options
        );

        const response = await this.do$(request$, {
            context,
            errorCodes: ["400", "403", "404", "4XX", "5XX"],
            retryConfig: options?.retries || this.options$.retryConfig,
            retryCodes: options?.retryCodes || ["429", "500", "502", "503", "504"],
        });

        const [result$] = await this.matcher<models.GetAuthTokenResponseBody>()
            .json(200, models.GetAuthTokenResponseBody$inboundSchema)
            .fail([400, 403, 404, "4XX", "5XX"])
            .match(response);

        return result$;
    }

    /**
     * Delete an authentication token
     *
     * @remarks
     * Invalidate an authentication token, such that it will no longer be valid for future HTTP requests.
     */
    async deleteToken(
        tokenId: string,
        options?: RequestOptions
    ): Promise<models.DeleteAuthTokenResponseBody> {
        const input$: models.DeleteAuthTokenRequest = {
            tokenId: tokenId,
        };

        const payload$ = schemas$.parse(
            input$,
            (value$) => models.DeleteAuthTokenRequest$outboundSchema.parse(value$),
            "Input validation failed"
        );
        const body$ = null;

        const pathParams$ = {
            tokenId: encodeSimple$("tokenId", payload$.tokenId, {
                explode: false,
                charEncoding: "percent",
            }),
        };
        const path$ = this.templateURLComponent("/v3/user/tokens/{tokenId}")(pathParams$);

        const query$ = "";

        const headers$ = new Headers({
            Accept: "application/json",
        });

        const security$ =
            typeof this.options$.security === "function"
                ? await this.options$.security()
                : this.options$.security;

        const context = {
            operationID: "deleteAuthToken",
            oAuth2Scopes: [],
            securitySource: this.options$.security,
        };
        const securitySettings$ = this.resolveGlobalSecurity(security$);

        const request$ = this.createRequest$(
            context,
            {
                security: securitySettings$,
                method: "DELETE",
                path: path$,
                headers: headers$,
                query: query$,
                body: body$,
                timeoutMs: options?.timeoutMs || this.options$.timeoutMs || -1,
            },
            options
        );

        const response = await this.do$(request$, {
            context,
            errorCodes: ["400", "401", "403", "404", "4XX", "5XX"],
            retryConfig: options?.retries || this.options$.retryConfig,
            retryCodes: options?.retryCodes || ["429", "500", "502", "503", "504"],
        });

        const [result$] = await this.matcher<models.DeleteAuthTokenResponseBody>()
            .json(200, models.DeleteAuthTokenResponseBody$inboundSchema)
            .fail([400, 401, 403, 404, "4XX", "5XX"])
            .match(response);

        return result$;
    }

    /**
     * Verify a login request to get an authentication token
     *
     * @remarks
     * Verify the user accepted the login request and get a authentication token. The user email address and the token received after requesting the login must be added to the URL as a query string with the names `email` and `token`.
     */
    async verifyToken(
        request: models.VerifyTokenRequest,
        options?: RequestOptions
    ): Promise<models.VerifyTokenResponseBody> {
        const input$ = request;

        const payload$ = schemas$.parse(
            input$,
            (value$) => models.VerifyTokenRequest$outboundSchema.parse(value$),
            "Input validation failed"
        );
        const body$ = null;

        const path$ = this.templateURLComponent("/registration/verify")();

        const query$ = encodeFormQuery$({
            email: payload$.email,
            landingPage: payload$.landingPage,
            oppId: payload$.oppId,
            pageBeforeConversionPage: payload$.pageBeforeConversionPage,
            sessionReferrer: payload$.sessionReferrer,
            ssoUserId: payload$.ssoUserId,
            teamName: payload$.teamName,
            teamPlan: payload$.teamPlan,
            teamSlug: payload$.teamSlug,
            token: payload$.token,
            tokenName: payload$.tokenName,
            utmCampaign: payload$.utmCampaign,
            utmMedium: payload$.utmMedium,
            utmSource: payload$.utmSource,
            utmTerm: payload$.utmTerm,
        });

        const headers$ = new Headers({
            Accept: "application/json",
        });

        const context = { operationID: "verifyToken", oAuth2Scopes: [], securitySource: null };

        const request$ = this.createRequest$(
            context,
            {
                method: "GET",
                path: path$,
                headers: headers$,
                query: query$,
                body: body$,
                timeoutMs: options?.timeoutMs || this.options$.timeoutMs || -1,
            },
            options
        );

        const response = await this.do$(request$, {
            context,
            errorCodes: ["400", "403", "404", "4XX", "5XX"],
            retryConfig: options?.retries || this.options$.retryConfig,
            retryCodes: options?.retryCodes || ["429", "500", "502", "503", "504"],
        });

        const [result$] = await this.matcher<models.VerifyTokenResponseBody>()
            .json(200, models.VerifyTokenResponseBody$inboundSchema)
            .fail([400, 403, 404, "4XX", "5XX"])
            .match(response);

        return result$;
    }

    /**
     * Login with email
     *
     * @remarks
     * Request a new login for a user to get a token. This will respond with a verification token and send an email to confirm the request. Once confirmed you can use the verification token to get an authentication token.
     */
    async emailLogin(
        request?: models.EmailLoginRequestBody | undefined,
        options?: RequestOptions
    ): Promise<models.EmailLoginResponseBody> {
        const input$ = request;

        const payload$ = schemas$.parse(
            input$,
            (value$) => models.EmailLoginRequestBody$outboundSchema.optional().parse(value$),
            "Input validation failed"
        );
        const body$ =
            payload$ === undefined ? null : encodeJSON$("body", payload$, { explode: true });

        const path$ = this.templateURLComponent("/registration")();

        const query$ = "";

        const headers$ = new Headers({
            "Content-Type": "application/json",
            Accept: "application/json",
        });

        const context = { operationID: "emailLogin", oAuth2Scopes: [], securitySource: null };

        const request$ = this.createRequest$(
            context,
            {
                method: "POST",
                path: path$,
                headers: headers$,
                query: query$,
                body: body$,
                timeoutMs: options?.timeoutMs || this.options$.timeoutMs || -1,
            },
            options
        );

        const response = await this.do$(request$, {
            context,
            errorCodes: ["400", "4XX", "5XX"],
            retryConfig: options?.retries || this.options$.retryConfig,
            retryCodes: options?.retryCodes || ["429", "500", "502", "503", "504"],
        });

        const [result$] = await this.matcher<models.EmailLoginResponseBody>()
            .json(200, models.EmailLoginResponseBody$inboundSchema)
            .fail([400, "4XX", "5XX"])
            .match(response);

        return result$;
    }
}
