/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import { authenticationCreateToken } from "../funcs/authenticationCreateToken.js";
import { authenticationDeleteToken } from "../funcs/authenticationDeleteToken.js";
import { authenticationEmailLogin } from "../funcs/authenticationEmailLogin.js";
import { authenticationGetAuthToken } from "../funcs/authenticationGetAuthToken.js";
import { authenticationListTokens } from "../funcs/authenticationListTokens.js";
import { authenticationVerifyToken } from "../funcs/authenticationVerifyToken.js";
import { ClientSDK, RequestOptions } from "../lib/sdks.js";
import {
    CreateAuthTokenRequestBody,
    CreateAuthTokenResponseBody,
} from "../models/createauthtokenop.js";
import { DeleteAuthTokenResponseBody } from "../models/deleteauthtokenop.js";
import { EmailLoginRequestBody, EmailLoginResponseBody } from "../models/emailloginop.js";
import { GetAuthTokenResponseBody } from "../models/getauthtokenop.js";
import { ListAuthTokensResponseBody } from "../models/listauthtokensop.js";
import { VerifyTokenRequest, VerifyTokenResponseBody } from "../models/verifytokenop.js";
import { unwrapAsync } from "../types/fp.js";

export class Authentication extends ClientSDK {
    /**
     * List Auth Tokens
     *
     * @remarks
     * Retrieve a list of the current User's authentication tokens.
     */
    async listTokens(options?: RequestOptions): Promise<ListAuthTokensResponseBody> {
        return unwrapAsync(authenticationListTokens(this, options));
    }

    /**
     * Create an Auth Token
     *
     * @remarks
     * Creates and returns a new authentication token for the currently authenticated User. The `bearerToken` property is only provided once, in the response body, so be sure to save it on the client for use with API requests.
     */
    async createToken(
        teamId?: string | undefined,
        slug?: string | undefined,
        requestBody?: CreateAuthTokenRequestBody | undefined,
        options?: RequestOptions
    ): Promise<CreateAuthTokenResponseBody> {
        return unwrapAsync(authenticationCreateToken(this, teamId, slug, requestBody, options));
    }

    /**
     * Get Auth Token Metadata
     *
     * @remarks
     * Retrieve metadata about an authentication token belonging to the currently authenticated User.
     */
    async getAuthToken(
        tokenId: string,
        options?: RequestOptions
    ): Promise<GetAuthTokenResponseBody> {
        return unwrapAsync(authenticationGetAuthToken(this, tokenId, options));
    }

    /**
     * Delete an authentication token
     *
     * @remarks
     * Invalidate an authentication token, such that it will no longer be valid for future HTTP requests.
     */
    async deleteToken(
        tokenId: string,
        options?: RequestOptions
    ): Promise<DeleteAuthTokenResponseBody> {
        return unwrapAsync(authenticationDeleteToken(this, tokenId, options));
    }

    /**
     * Verify a login request to get an authentication token
     *
     * @remarks
     * Verify the user accepted the login request and get a authentication token. The user email address and the token received after requesting the login must be added to the URL as a query string with the names `email` and `token`.
     */
    async verifyToken(
        request: VerifyTokenRequest,
        options?: RequestOptions
    ): Promise<VerifyTokenResponseBody> {
        return unwrapAsync(authenticationVerifyToken(this, request, options));
    }

    /**
     * Login with email
     *
     * @remarks
     * Request a new login for a user to get a token. This will respond with a verification token and send an email to confirm the request. Once confirmed you can use the verification token to get an authentication token.
     */
    async emailLogin(
        request?: EmailLoginRequestBody | undefined,
        options?: RequestOptions
    ): Promise<EmailLoginResponseBody> {
        return unwrapAsync(authenticationEmailLogin(this, request, options));
    }
}
