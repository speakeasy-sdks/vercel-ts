/*
 * Code generated by Speakeasy (https://speakeasyapi.com). DO NOT EDIT.
 */

import { remap as remap$ } from "../lib/primitives.js";
import * as z from "zod";

export type ArtifactQueryRequestBody = {
    /**
     * artifact hashes
     */
    hashes: Array<string>;
};

export type ArtifactQueryRequest = {
    /**
     * The Team identifier to perform the request on behalf of.
     */
    teamId?: string | undefined;
    /**
     * The Team slug to perform the request on behalf of.
     */
    slug?: string | undefined;
    requestBody?: ArtifactQueryRequestBody | undefined;
};

export type ErrorT = {
    message: string;
};

export type ArtifactQueryResponseBody2 = {
    error: ErrorT;
};

export type ArtifactQueryResponseBody1 = {
    size: number;
    taskDurationMs: number;
    tag?: string | undefined;
};

export type ResponseBody = ArtifactQueryResponseBody2 | ArtifactQueryResponseBody1;

/** @internal */
export const ArtifactQueryRequestBody$inboundSchema: z.ZodType<
    ArtifactQueryRequestBody,
    z.ZodTypeDef,
    unknown
> = z.object({
    hashes: z.array(z.string()),
});

/** @internal */
export type ArtifactQueryRequestBody$Outbound = {
    hashes: Array<string>;
};

/** @internal */
export const ArtifactQueryRequestBody$outboundSchema: z.ZodType<
    ArtifactQueryRequestBody$Outbound,
    z.ZodTypeDef,
    ArtifactQueryRequestBody
> = z.object({
    hashes: z.array(z.string()),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace ArtifactQueryRequestBody$ {
    /** @deprecated use `ArtifactQueryRequestBody$inboundSchema` instead. */
    export const inboundSchema = ArtifactQueryRequestBody$inboundSchema;
    /** @deprecated use `ArtifactQueryRequestBody$outboundSchema` instead. */
    export const outboundSchema = ArtifactQueryRequestBody$outboundSchema;
    /** @deprecated use `ArtifactQueryRequestBody$Outbound` instead. */
    export type Outbound = ArtifactQueryRequestBody$Outbound;
}

/** @internal */
export const ArtifactQueryRequest$inboundSchema: z.ZodType<
    ArtifactQueryRequest,
    z.ZodTypeDef,
    unknown
> = z
    .object({
        teamId: z.string().optional(),
        slug: z.string().optional(),
        RequestBody: z.lazy(() => ArtifactQueryRequestBody$inboundSchema).optional(),
    })
    .transform((v) => {
        return remap$(v, {
            RequestBody: "requestBody",
        });
    });

/** @internal */
export type ArtifactQueryRequest$Outbound = {
    teamId?: string | undefined;
    slug?: string | undefined;
    RequestBody?: ArtifactQueryRequestBody$Outbound | undefined;
};

/** @internal */
export const ArtifactQueryRequest$outboundSchema: z.ZodType<
    ArtifactQueryRequest$Outbound,
    z.ZodTypeDef,
    ArtifactQueryRequest
> = z
    .object({
        teamId: z.string().optional(),
        slug: z.string().optional(),
        requestBody: z.lazy(() => ArtifactQueryRequestBody$outboundSchema).optional(),
    })
    .transform((v) => {
        return remap$(v, {
            requestBody: "RequestBody",
        });
    });

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace ArtifactQueryRequest$ {
    /** @deprecated use `ArtifactQueryRequest$inboundSchema` instead. */
    export const inboundSchema = ArtifactQueryRequest$inboundSchema;
    /** @deprecated use `ArtifactQueryRequest$outboundSchema` instead. */
    export const outboundSchema = ArtifactQueryRequest$outboundSchema;
    /** @deprecated use `ArtifactQueryRequest$Outbound` instead. */
    export type Outbound = ArtifactQueryRequest$Outbound;
}

/** @internal */
export const ErrorT$inboundSchema: z.ZodType<ErrorT, z.ZodTypeDef, unknown> = z.object({
    message: z.string(),
});

/** @internal */
export type ErrorT$Outbound = {
    message: string;
};

/** @internal */
export const ErrorT$outboundSchema: z.ZodType<ErrorT$Outbound, z.ZodTypeDef, ErrorT> = z.object({
    message: z.string(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace ErrorT$ {
    /** @deprecated use `ErrorT$inboundSchema` instead. */
    export const inboundSchema = ErrorT$inboundSchema;
    /** @deprecated use `ErrorT$outboundSchema` instead. */
    export const outboundSchema = ErrorT$outboundSchema;
    /** @deprecated use `ErrorT$Outbound` instead. */
    export type Outbound = ErrorT$Outbound;
}

/** @internal */
export const ArtifactQueryResponseBody2$inboundSchema: z.ZodType<
    ArtifactQueryResponseBody2,
    z.ZodTypeDef,
    unknown
> = z.object({
    error: z.lazy(() => ErrorT$inboundSchema),
});

/** @internal */
export type ArtifactQueryResponseBody2$Outbound = {
    error: ErrorT$Outbound;
};

/** @internal */
export const ArtifactQueryResponseBody2$outboundSchema: z.ZodType<
    ArtifactQueryResponseBody2$Outbound,
    z.ZodTypeDef,
    ArtifactQueryResponseBody2
> = z.object({
    error: z.lazy(() => ErrorT$outboundSchema),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace ArtifactQueryResponseBody2$ {
    /** @deprecated use `ArtifactQueryResponseBody2$inboundSchema` instead. */
    export const inboundSchema = ArtifactQueryResponseBody2$inboundSchema;
    /** @deprecated use `ArtifactQueryResponseBody2$outboundSchema` instead. */
    export const outboundSchema = ArtifactQueryResponseBody2$outboundSchema;
    /** @deprecated use `ArtifactQueryResponseBody2$Outbound` instead. */
    export type Outbound = ArtifactQueryResponseBody2$Outbound;
}

/** @internal */
export const ArtifactQueryResponseBody1$inboundSchema: z.ZodType<
    ArtifactQueryResponseBody1,
    z.ZodTypeDef,
    unknown
> = z.object({
    size: z.number(),
    taskDurationMs: z.number(),
    tag: z.string().optional(),
});

/** @internal */
export type ArtifactQueryResponseBody1$Outbound = {
    size: number;
    taskDurationMs: number;
    tag?: string | undefined;
};

/** @internal */
export const ArtifactQueryResponseBody1$outboundSchema: z.ZodType<
    ArtifactQueryResponseBody1$Outbound,
    z.ZodTypeDef,
    ArtifactQueryResponseBody1
> = z.object({
    size: z.number(),
    taskDurationMs: z.number(),
    tag: z.string().optional(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace ArtifactQueryResponseBody1$ {
    /** @deprecated use `ArtifactQueryResponseBody1$inboundSchema` instead. */
    export const inboundSchema = ArtifactQueryResponseBody1$inboundSchema;
    /** @deprecated use `ArtifactQueryResponseBody1$outboundSchema` instead. */
    export const outboundSchema = ArtifactQueryResponseBody1$outboundSchema;
    /** @deprecated use `ArtifactQueryResponseBody1$Outbound` instead. */
    export type Outbound = ArtifactQueryResponseBody1$Outbound;
}

/** @internal */
export const ResponseBody$inboundSchema: z.ZodType<ResponseBody, z.ZodTypeDef, unknown> = z.union([
    z.lazy(() => ArtifactQueryResponseBody2$inboundSchema),
    z.lazy(() => ArtifactQueryResponseBody1$inboundSchema),
]);

/** @internal */
export type ResponseBody$Outbound =
    | ArtifactQueryResponseBody2$Outbound
    | ArtifactQueryResponseBody1$Outbound;

/** @internal */
export const ResponseBody$outboundSchema: z.ZodType<
    ResponseBody$Outbound,
    z.ZodTypeDef,
    ResponseBody
> = z.union([
    z.lazy(() => ArtifactQueryResponseBody2$outboundSchema),
    z.lazy(() => ArtifactQueryResponseBody1$outboundSchema),
]);

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace ResponseBody$ {
    /** @deprecated use `ResponseBody$inboundSchema` instead. */
    export const inboundSchema = ResponseBody$inboundSchema;
    /** @deprecated use `ResponseBody$outboundSchema` instead. */
    export const outboundSchema = ResponseBody$outboundSchema;
    /** @deprecated use `ResponseBody$Outbound` instead. */
    export type Outbound = ResponseBody$Outbound;
}
