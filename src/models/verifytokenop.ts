/*
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

import * as z from "zod";

/**
 * The plan for this user's team (pro or hobby).
 */
export enum TeamPlan {
    Pro = "pro",
    Hobby = "hobby",
}

export type VerifyTokenRequest = {
    /**
     * Email to verify the login.
     */
    email?: string | undefined;
    /**
     * The token returned when the login was requested.
     */
    token: string;
    /**
     * The desired name for the token. It will be displayed on the user account details.
     */
    tokenName?: string | undefined;
    /**
     * The SAML Profile ID, when connecting a SAML Profile to a Team member for the first time.
     */
    ssoUserId?: string | undefined;
    /**
     * The name of this user's team.
     */
    teamName?: string | undefined;
    /**
     * The slug for this user's team.
     */
    teamSlug?: string | undefined;
    /**
     * The plan for this user's team (pro or hobby).
     */
    teamPlan?: TeamPlan | undefined;
    /**
     * Referrer to the session.
     */
    sessionReferrer?: string | undefined;
    /**
     * The page on which the user started their session.
     */
    landingPage?: string | undefined;
    /**
     * The page that sent the user to the signup page.
     */
    pageBeforeConversionPage?: string | undefined;
    utmSource?: string | undefined;
    utmMedium?: string | undefined;
    utmCampaign?: string | undefined;
    utmTerm?: string | undefined;
    oppId?: string | undefined;
};

/**
 * The verification was successful.
 */
export type VerifyTokenResponseBody = {
    /**
     * The user authentication token that can be used to perform API requests.
     */
    token: string;
    /**
     * Email address of the authenticated user.
     */
    email: string;
    /**
     * When completing SAML Single Sign-On authentication, this will be the ID of the Team that was authenticated for.
     */
    teamId?: string | undefined;
};

/** @internal */
export namespace TeamPlan$ {
    export const inboundSchema: z.ZodNativeEnum<typeof TeamPlan> = z.nativeEnum(TeamPlan);
    export const outboundSchema: z.ZodNativeEnum<typeof TeamPlan> = inboundSchema;
}

/** @internal */
export namespace VerifyTokenRequest$ {
    export const inboundSchema: z.ZodType<VerifyTokenRequest, z.ZodTypeDef, unknown> = z.object({
        email: z.string().optional(),
        token: z.string(),
        tokenName: z.string().optional(),
        ssoUserId: z.string().optional(),
        teamName: z.string().optional(),
        teamSlug: z.string().optional(),
        teamPlan: TeamPlan$.inboundSchema.optional(),
        sessionReferrer: z.string().optional(),
        landingPage: z.string().optional(),
        pageBeforeConversionPage: z.string().optional(),
        utmSource: z.string().optional(),
        utmMedium: z.string().optional(),
        utmCampaign: z.string().optional(),
        utmTerm: z.string().optional(),
        oppId: z.string().optional(),
    });

    export type Outbound = {
        email?: string | undefined;
        token: string;
        tokenName?: string | undefined;
        ssoUserId?: string | undefined;
        teamName?: string | undefined;
        teamSlug?: string | undefined;
        teamPlan?: string | undefined;
        sessionReferrer?: string | undefined;
        landingPage?: string | undefined;
        pageBeforeConversionPage?: string | undefined;
        utmSource?: string | undefined;
        utmMedium?: string | undefined;
        utmCampaign?: string | undefined;
        utmTerm?: string | undefined;
        oppId?: string | undefined;
    };

    export const outboundSchema: z.ZodType<Outbound, z.ZodTypeDef, VerifyTokenRequest> = z.object({
        email: z.string().optional(),
        token: z.string(),
        tokenName: z.string().optional(),
        ssoUserId: z.string().optional(),
        teamName: z.string().optional(),
        teamSlug: z.string().optional(),
        teamPlan: TeamPlan$.outboundSchema.optional(),
        sessionReferrer: z.string().optional(),
        landingPage: z.string().optional(),
        pageBeforeConversionPage: z.string().optional(),
        utmSource: z.string().optional(),
        utmMedium: z.string().optional(),
        utmCampaign: z.string().optional(),
        utmTerm: z.string().optional(),
        oppId: z.string().optional(),
    });
}

/** @internal */
export namespace VerifyTokenResponseBody$ {
    export const inboundSchema: z.ZodType<VerifyTokenResponseBody, z.ZodTypeDef, unknown> =
        z.object({
            token: z.string(),
            email: z.string(),
            teamId: z.string().optional(),
        });

    export type Outbound = {
        token: string;
        email: string;
        teamId?: string | undefined;
    };

    export const outboundSchema: z.ZodType<Outbound, z.ZodTypeDef, VerifyTokenResponseBody> =
        z.object({
            token: z.string(),
            email: z.string(),
            teamId: z.string().optional(),
        });
}
