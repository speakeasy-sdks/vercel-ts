/*
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

import * as z from "zod";

export type VerifyProjectDomainRequest = {
    /**
     * The unique project identifier or the project name
     */
    idOrName: string;
    /**
     * The domain name you want to verify
     */
    domain: string;
    /**
     * The Team identifier to perform the request on behalf of.
     */
    teamId?: string | undefined;
    /**
     * The Team slug to perform the request on behalf of.
     */
    slug?: string | undefined;
};

/**
 * A list of verification challenges, one of which must be completed to verify the domain for use on the project. After the challenge is complete `POST /projects/:idOrName/domains/:domain/verify` to verify the domain. Possible challenges: - If `verification.type = TXT` the `verification.domain` will be checked for a TXT record matching `verification.value`.
 */
export type VerifyProjectDomainVerification = {
    type: string;
    domain: string;
    value: string;
    reason: string;
};

/**
 * The project domain was verified successfully
 *
 * @remarks
 * Domain is already verified
 */
export type VerifyProjectDomainResponseBody = {
    name: string;
    apexName: string;
    projectId: string;
    redirect?: string | null | undefined;
    redirectStatusCode?: number | null | undefined;
    gitBranch?: string | null | undefined;
    customEnvironmentId?: string | null | undefined;
    updatedAt?: number | undefined;
    createdAt?: number | undefined;
    /**
     * `true` if the domain is verified for use with the project. If `false` it will not be used as an alias on this project until the challenge in `verification` is completed.
     */
    verified: boolean;
    /**
     * A list of verification challenges, one of which must be completed to verify the domain for use on the project. After the challenge is complete `POST /projects/:idOrName/domains/:domain/verify` to verify the domain. Possible challenges: - If `verification.type = TXT` the `verification.domain` will be checked for a TXT record matching `verification.value`.
     */
    verification?: Array<VerifyProjectDomainVerification> | undefined;
};

/** @internal */
export namespace VerifyProjectDomainRequest$ {
    export const inboundSchema: z.ZodType<VerifyProjectDomainRequest, z.ZodTypeDef, unknown> = z
        .object({
            idOrName: z.string(),
            domain: z.string(),
            teamId: z.string().optional(),
            slug: z.string().optional(),
        })
        .transform((v) => {
            return {
                idOrName: v.idOrName,
                domain: v.domain,
                ...(v.teamId === undefined ? null : { teamId: v.teamId }),
                ...(v.slug === undefined ? null : { slug: v.slug }),
            };
        });

    export type Outbound = {
        idOrName: string;
        domain: string;
        teamId?: string | undefined;
        slug?: string | undefined;
    };

    export const outboundSchema: z.ZodType<Outbound, z.ZodTypeDef, VerifyProjectDomainRequest> = z
        .object({
            idOrName: z.string(),
            domain: z.string(),
            teamId: z.string().optional(),
            slug: z.string().optional(),
        })
        .transform((v) => {
            return {
                idOrName: v.idOrName,
                domain: v.domain,
                ...(v.teamId === undefined ? null : { teamId: v.teamId }),
                ...(v.slug === undefined ? null : { slug: v.slug }),
            };
        });
}

/** @internal */
export namespace VerifyProjectDomainVerification$ {
    export const inboundSchema: z.ZodType<VerifyProjectDomainVerification, z.ZodTypeDef, unknown> =
        z
            .object({
                type: z.string(),
                domain: z.string(),
                value: z.string(),
                reason: z.string(),
            })
            .transform((v) => {
                return {
                    type: v.type,
                    domain: v.domain,
                    value: v.value,
                    reason: v.reason,
                };
            });

    export type Outbound = {
        type: string;
        domain: string;
        value: string;
        reason: string;
    };

    export const outboundSchema: z.ZodType<
        Outbound,
        z.ZodTypeDef,
        VerifyProjectDomainVerification
    > = z
        .object({
            type: z.string(),
            domain: z.string(),
            value: z.string(),
            reason: z.string(),
        })
        .transform((v) => {
            return {
                type: v.type,
                domain: v.domain,
                value: v.value,
                reason: v.reason,
            };
        });
}

/** @internal */
export namespace VerifyProjectDomainResponseBody$ {
    export const inboundSchema: z.ZodType<VerifyProjectDomainResponseBody, z.ZodTypeDef, unknown> =
        z
            .object({
                name: z.string(),
                apexName: z.string(),
                projectId: z.string(),
                redirect: z.nullable(z.string()).optional(),
                redirectStatusCode: z.nullable(z.number()).optional(),
                gitBranch: z.nullable(z.string()).optional(),
                customEnvironmentId: z.nullable(z.string()).optional(),
                updatedAt: z.number().optional(),
                createdAt: z.number().optional(),
                verified: z.boolean(),
                verification: z
                    .array(z.lazy(() => VerifyProjectDomainVerification$.inboundSchema))
                    .optional(),
            })
            .transform((v) => {
                return {
                    name: v.name,
                    apexName: v.apexName,
                    projectId: v.projectId,
                    ...(v.redirect === undefined ? null : { redirect: v.redirect }),
                    ...(v.redirectStatusCode === undefined
                        ? null
                        : { redirectStatusCode: v.redirectStatusCode }),
                    ...(v.gitBranch === undefined ? null : { gitBranch: v.gitBranch }),
                    ...(v.customEnvironmentId === undefined
                        ? null
                        : { customEnvironmentId: v.customEnvironmentId }),
                    ...(v.updatedAt === undefined ? null : { updatedAt: v.updatedAt }),
                    ...(v.createdAt === undefined ? null : { createdAt: v.createdAt }),
                    verified: v.verified,
                    ...(v.verification === undefined ? null : { verification: v.verification }),
                };
            });

    export type Outbound = {
        name: string;
        apexName: string;
        projectId: string;
        redirect?: string | null | undefined;
        redirectStatusCode?: number | null | undefined;
        gitBranch?: string | null | undefined;
        customEnvironmentId?: string | null | undefined;
        updatedAt?: number | undefined;
        createdAt?: number | undefined;
        verified: boolean;
        verification?: Array<VerifyProjectDomainVerification$.Outbound> | undefined;
    };

    export const outboundSchema: z.ZodType<
        Outbound,
        z.ZodTypeDef,
        VerifyProjectDomainResponseBody
    > = z
        .object({
            name: z.string(),
            apexName: z.string(),
            projectId: z.string(),
            redirect: z.nullable(z.string()).optional(),
            redirectStatusCode: z.nullable(z.number()).optional(),
            gitBranch: z.nullable(z.string()).optional(),
            customEnvironmentId: z.nullable(z.string()).optional(),
            updatedAt: z.number().optional(),
            createdAt: z.number().optional(),
            verified: z.boolean(),
            verification: z
                .array(z.lazy(() => VerifyProjectDomainVerification$.outboundSchema))
                .optional(),
        })
        .transform((v) => {
            return {
                name: v.name,
                apexName: v.apexName,
                projectId: v.projectId,
                ...(v.redirect === undefined ? null : { redirect: v.redirect }),
                ...(v.redirectStatusCode === undefined
                    ? null
                    : { redirectStatusCode: v.redirectStatusCode }),
                ...(v.gitBranch === undefined ? null : { gitBranch: v.gitBranch }),
                ...(v.customEnvironmentId === undefined
                    ? null
                    : { customEnvironmentId: v.customEnvironmentId }),
                ...(v.updatedAt === undefined ? null : { updatedAt: v.updatedAt }),
                ...(v.createdAt === undefined ? null : { createdAt: v.createdAt }),
                verified: v.verified,
                ...(v.verification === undefined ? null : { verification: v.verification }),
            };
        });
}
