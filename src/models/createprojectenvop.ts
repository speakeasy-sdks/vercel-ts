/*
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

import { remap as remap$ } from "../lib/primitives.js";
import * as z from "zod";

/**
 * The type of environment variable
 */
export enum CreateProjectEnvRequestBodyProjectsType {
    System = "system",
    Secret = "secret",
    Encrypted = "encrypted",
    Plain = "plain",
    Sensitive = "sensitive",
}

export enum CreateProjectEnvRequestBodyTarget {
    Production = "production",
    Preview = "preview",
    Development = "development",
}

export type CreateProjectEnvRequestBody2 = {
    /**
     * The name of the environment variable
     */
    key: string;
    /**
     * The value of the environment variable
     */
    value: string;
    /**
     * The type of environment variable
     */
    type: CreateProjectEnvRequestBodyProjectsType;
    /**
     * The target environment of the environment variable
     */
    target: Array<CreateProjectEnvRequestBodyTarget>;
    /**
     * If defined, the git branch of the environment variable (must have target=preview)
     */
    gitBranch?: string | null | undefined;
    /**
     * A comment to add context on what this environment variable is for
     */
    comment?: string | undefined;
    customEnvironmentId?: string | undefined;
};

/**
 * The type of environment variable
 */
export enum CreateProjectEnvRequestBodyType {
    System = "system",
    Secret = "secret",
    Encrypted = "encrypted",
    Plain = "plain",
    Sensitive = "sensitive",
}

export enum RequestBodyTarget {
    Production = "production",
    Preview = "preview",
    Development = "development",
}

export type CreateProjectEnvRequestBody1 = {
    /**
     * The name of the environment variable
     */
    key: string;
    /**
     * The value of the environment variable
     */
    value: string;
    /**
     * The type of environment variable
     */
    type: CreateProjectEnvRequestBodyType;
    /**
     * The target environment of the environment variable
     */
    target: Array<RequestBodyTarget>;
    /**
     * If defined, the git branch of the environment variable (must have target=preview)
     */
    gitBranch?: string | null | undefined;
    /**
     * A comment to add context on what this environment variable is for
     */
    comment?: string | undefined;
    customEnvironmentId?: string | undefined;
};

export type CreateProjectEnvRequestBody =
    | CreateProjectEnvRequestBody1
    | Array<CreateProjectEnvRequestBody2>;

export type CreateProjectEnvRequest = {
    /**
     * The unique project identifier or the project name
     */
    idOrName: string;
    /**
     * Allow override of environment variable if it already exists
     */
    upsert?: string | undefined;
    /**
     * The Team identifier to perform the request on behalf of.
     */
    teamId?: string | undefined;
    /**
     * The Team slug to perform the request on behalf of.
     */
    slug?: string | undefined;
    requestBody?: CreateProjectEnvRequestBody1 | Array<CreateProjectEnvRequestBody2> | undefined;
};

export enum CreateProjectEnvTargetProjects2 {
    Production = "production",
    Preview = "preview",
    Development = "development",
}

export enum CreateProjectEnvTargetProjects1 {
    Production = "production",
    Preview = "preview",
    Development = "development",
}

export type CreateProjectEnvCreatedTarget =
    | Array<CreateProjectEnvTargetProjects1>
    | CreateProjectEnvTargetProjects2;

export enum CreateProjectEnvCreatedType {
    System = "system",
    Encrypted = "encrypted",
    Plain = "plain",
    Sensitive = "sensitive",
    Secret = "secret",
}

export enum CreateProjectEnvContentHintProjectsResponse201ApplicationJSONResponseBodyCreated214Type {
    IntegrationStoreSecret = "integration-store-secret",
}

export type CreateProjectEnvContentHintProjects14 = {
    type: CreateProjectEnvContentHintProjectsResponse201ApplicationJSONResponseBodyCreated214Type;
    storeId: string;
};

export enum CreateProjectEnvContentHintProjectsResponse201ApplicationJSONResponseBodyCreated213Type {
    PostgresUrlNoSsl = "postgres-url-no-ssl",
}

export type CreateProjectEnvContentHintProjects13 = {
    type: CreateProjectEnvContentHintProjectsResponse201ApplicationJSONResponseBodyCreated213Type;
    storeId: string;
};

export enum CreateProjectEnvContentHintProjectsResponse201ApplicationJSONResponseBodyCreated212Type {
    PostgresDatabase = "postgres-database",
}

export type CreateProjectEnvContentHintProjects12 = {
    type: CreateProjectEnvContentHintProjectsResponse201ApplicationJSONResponseBodyCreated212Type;
    storeId: string;
};

export enum CreateProjectEnvContentHintProjectsResponse201ApplicationJSONResponseBodyCreated211Type {
    PostgresPassword = "postgres-password",
}

export type CreateProjectEnvContentHintProjects11 = {
    type: CreateProjectEnvContentHintProjectsResponse201ApplicationJSONResponseBodyCreated211Type;
    storeId: string;
};

export enum CreateProjectEnvContentHintProjectsResponse201ApplicationJSONResponseBodyCreated210Type {
    PostgresHost = "postgres-host",
}

export type CreateProjectEnvContentHintProjects10 = {
    type: CreateProjectEnvContentHintProjectsResponse201ApplicationJSONResponseBodyCreated210Type;
    storeId: string;
};

export enum CreateProjectEnvContentHintProjectsResponse201ApplicationJSONResponseBodyCreated29Type {
    PostgresUser = "postgres-user",
}

export type CreateProjectEnvContentHintProjects9 = {
    type: CreateProjectEnvContentHintProjectsResponse201ApplicationJSONResponseBodyCreated29Type;
    storeId: string;
};

export enum CreateProjectEnvContentHintProjectsResponse201ApplicationJSONResponseBodyCreated28Type {
    PostgresPrismaUrl = "postgres-prisma-url",
}

export type CreateProjectEnvContentHintProjects8 = {
    type: CreateProjectEnvContentHintProjectsResponse201ApplicationJSONResponseBodyCreated28Type;
    storeId: string;
};

export enum CreateProjectEnvContentHintProjectsResponse201ApplicationJSONResponseBodyCreated27Type {
    PostgresUrlNonPooling = "postgres-url-non-pooling",
}

export type CreateProjectEnvContentHintProjects7 = {
    type: CreateProjectEnvContentHintProjectsResponse201ApplicationJSONResponseBodyCreated27Type;
    storeId: string;
};

export enum CreateProjectEnvContentHintProjectsResponse201ApplicationJSONResponseBodyCreated26Type {
    PostgresUrl = "postgres-url",
}

export type CreateProjectEnvContentHintProjects6 = {
    type: CreateProjectEnvContentHintProjectsResponse201ApplicationJSONResponseBodyCreated26Type;
    storeId: string;
};

export enum CreateProjectEnvContentHintProjectsResponse201ApplicationJSONResponseBodyCreated25Type {
    BlobReadWriteToken = "blob-read-write-token",
}

export type CreateProjectEnvContentHintProjects5 = {
    type: CreateProjectEnvContentHintProjectsResponse201ApplicationJSONResponseBodyCreated25Type;
    storeId: string;
};

export enum CreateProjectEnvContentHintProjectsResponse201ApplicationJSONResponseBodyCreated24Type {
    RedisRestApiReadOnlyToken = "redis-rest-api-read-only-token",
}

export type CreateProjectEnvContentHintProjects4 = {
    type: CreateProjectEnvContentHintProjectsResponse201ApplicationJSONResponseBodyCreated24Type;
    storeId: string;
};

export enum CreateProjectEnvContentHintProjectsResponse201ApplicationJSONResponseBodyCreated23Type {
    RedisRestApiToken = "redis-rest-api-token",
}

export type CreateProjectEnvContentHintProjects3 = {
    type: CreateProjectEnvContentHintProjectsResponse201ApplicationJSONResponseBodyCreated23Type;
    storeId: string;
};

export enum CreateProjectEnvContentHintProjectsResponse201ApplicationJSONResponseBodyCreated22Type {
    RedisRestApiUrl = "redis-rest-api-url",
}

export type CreateProjectEnvContentHintProjects2 = {
    type: CreateProjectEnvContentHintProjectsResponse201ApplicationJSONResponseBodyCreated22Type;
    storeId: string;
};

export enum CreateProjectEnvContentHintProjectsResponse201ApplicationJSONResponseBodyCreated2Type {
    RedisUrl = "redis-url",
}

export type CreateProjectEnvContentHintProjects1 = {
    type: CreateProjectEnvContentHintProjectsResponse201ApplicationJSONResponseBodyCreated2Type;
    storeId: string;
};

export type CreateProjectEnvCreatedContentHint =
    | CreateProjectEnvContentHintProjects1
    | CreateProjectEnvContentHintProjects2
    | CreateProjectEnvContentHintProjects3
    | CreateProjectEnvContentHintProjects4
    | CreateProjectEnvContentHintProjects5
    | CreateProjectEnvContentHintProjects6
    | CreateProjectEnvContentHintProjects7
    | CreateProjectEnvContentHintProjects8
    | CreateProjectEnvContentHintProjects9
    | CreateProjectEnvContentHintProjects10
    | CreateProjectEnvContentHintProjects11
    | CreateProjectEnvContentHintProjects12
    | CreateProjectEnvContentHintProjects13
    | CreateProjectEnvContentHintProjects14;

export enum CreateProjectEnvCreatedProjectsResponseType {
    FlagsSecret = "flags-secret",
}

/**
 * Similar to `contentHints`, but should not be exposed to the user.
 */
export type CreateProjectEnvCreatedInternalContentHint = {
    type: CreateProjectEnvCreatedProjectsResponseType;
    /**
     * Contains the `value` of the env variable, encrypted with a special key to make decryption possible in the subscriber Lambda.
     */
    encryptedValue: string;
};

export type Created2 = {
    target?: Array<CreateProjectEnvTargetProjects1> | CreateProjectEnvTargetProjects2 | undefined;
    type?: CreateProjectEnvCreatedType | undefined;
    id?: string | undefined;
    key?: string | undefined;
    value?: string | undefined;
    configurationId?: string | null | undefined;
    createdAt?: number | undefined;
    updatedAt?: number | undefined;
    createdBy?: string | null | undefined;
    updatedBy?: string | null | undefined;
    gitBranch?: string | undefined;
    edgeConfigId?: string | null | undefined;
    edgeConfigTokenId?: string | null | undefined;
    contentHint?:
        | CreateProjectEnvContentHintProjects1
        | CreateProjectEnvContentHintProjects2
        | CreateProjectEnvContentHintProjects3
        | CreateProjectEnvContentHintProjects4
        | CreateProjectEnvContentHintProjects5
        | CreateProjectEnvContentHintProjects6
        | CreateProjectEnvContentHintProjects7
        | CreateProjectEnvContentHintProjects8
        | CreateProjectEnvContentHintProjects9
        | CreateProjectEnvContentHintProjects10
        | CreateProjectEnvContentHintProjects11
        | CreateProjectEnvContentHintProjects12
        | CreateProjectEnvContentHintProjects13
        | CreateProjectEnvContentHintProjects14
        | null
        | undefined;
    /**
     * Similar to `contentHints`, but should not be exposed to the user.
     */
    internalContentHint?: CreateProjectEnvCreatedInternalContentHint | null | undefined;
    /**
     * Whether `value` is decrypted.
     */
    decrypted?: boolean | undefined;
    comment?: string | undefined;
    customEnvironmentId?: string | undefined;
    system?: boolean | undefined;
};

export enum CreateProjectEnvTarget2 {
    Production = "production",
    Preview = "preview",
    Development = "development",
}

export enum CreateProjectEnvTarget1 {
    Production = "production",
    Preview = "preview",
    Development = "development",
}

export type CreatedTarget = Array<CreateProjectEnvTarget1> | CreateProjectEnvTarget2;

export enum CreatedType {
    System = "system",
    Encrypted = "encrypted",
    Plain = "plain",
    Sensitive = "sensitive",
    Secret = "secret",
}

export enum CreateProjectEnvContentHintProjectsResponse201ApplicationJSONResponseBodyCreated114Type {
    IntegrationStoreSecret = "integration-store-secret",
}

export type CreateProjectEnvContentHint14 = {
    type: CreateProjectEnvContentHintProjectsResponse201ApplicationJSONResponseBodyCreated114Type;
    storeId: string;
};

export enum CreateProjectEnvContentHintProjectsResponse201ApplicationJSONResponseBodyCreated113Type {
    PostgresUrlNoSsl = "postgres-url-no-ssl",
}

export type CreateProjectEnvContentHint13 = {
    type: CreateProjectEnvContentHintProjectsResponse201ApplicationJSONResponseBodyCreated113Type;
    storeId: string;
};

export enum CreateProjectEnvContentHintProjectsResponse201ApplicationJSONResponseBodyCreated112Type {
    PostgresDatabase = "postgres-database",
}

export type CreateProjectEnvContentHint12 = {
    type: CreateProjectEnvContentHintProjectsResponse201ApplicationJSONResponseBodyCreated112Type;
    storeId: string;
};

export enum CreateProjectEnvContentHintProjectsResponse201ApplicationJSONResponseBodyCreated111Type {
    PostgresPassword = "postgres-password",
}

export type CreateProjectEnvContentHint11 = {
    type: CreateProjectEnvContentHintProjectsResponse201ApplicationJSONResponseBodyCreated111Type;
    storeId: string;
};

export enum CreateProjectEnvContentHintProjectsResponse201ApplicationJSONResponseBodyCreated110Type {
    PostgresHost = "postgres-host",
}

export type CreateProjectEnvContentHint10 = {
    type: CreateProjectEnvContentHintProjectsResponse201ApplicationJSONResponseBodyCreated110Type;
    storeId: string;
};

export enum CreateProjectEnvContentHintProjectsResponse201ApplicationJSONResponseBodyCreated19Type {
    PostgresUser = "postgres-user",
}

export type CreateProjectEnvContentHint9 = {
    type: CreateProjectEnvContentHintProjectsResponse201ApplicationJSONResponseBodyCreated19Type;
    storeId: string;
};

export enum CreateProjectEnvContentHintProjectsResponse201ApplicationJSONResponseBodyCreated1Type {
    PostgresPrismaUrl = "postgres-prisma-url",
}

export type CreateProjectEnvContentHint8 = {
    type: CreateProjectEnvContentHintProjectsResponse201ApplicationJSONResponseBodyCreated1Type;
    storeId: string;
};

export enum CreateProjectEnvContentHintProjectsResponse201ApplicationJSONResponseBodyCreatedType {
    PostgresUrlNonPooling = "postgres-url-non-pooling",
}

export type CreateProjectEnvContentHint7 = {
    type: CreateProjectEnvContentHintProjectsResponse201ApplicationJSONResponseBodyCreatedType;
    storeId: string;
};

export enum CreateProjectEnvContentHintProjectsResponse201ApplicationJSONResponseBodyType {
    PostgresUrl = "postgres-url",
}

export type CreateProjectEnvContentHint6 = {
    type: CreateProjectEnvContentHintProjectsResponse201ApplicationJSONResponseBodyType;
    storeId: string;
};

export enum CreateProjectEnvContentHintProjectsResponse201ApplicationJSONType {
    BlobReadWriteToken = "blob-read-write-token",
}

export type CreateProjectEnvContentHint5 = {
    type: CreateProjectEnvContentHintProjectsResponse201ApplicationJSONType;
    storeId: string;
};

export enum CreateProjectEnvContentHintProjectsResponse201Type {
    RedisRestApiReadOnlyToken = "redis-rest-api-read-only-token",
}

export type CreateProjectEnvContentHint4 = {
    type: CreateProjectEnvContentHintProjectsResponse201Type;
    storeId: string;
};

export enum CreateProjectEnvContentHintProjectsResponseType {
    RedisRestApiToken = "redis-rest-api-token",
}

export type CreateProjectEnvContentHint3 = {
    type: CreateProjectEnvContentHintProjectsResponseType;
    storeId: string;
};

export enum CreateProjectEnvContentHintProjectsType {
    RedisRestApiUrl = "redis-rest-api-url",
}

export type CreateProjectEnvContentHint2 = {
    type: CreateProjectEnvContentHintProjectsType;
    storeId: string;
};

export enum CreateProjectEnvContentHintType {
    RedisUrl = "redis-url",
}

export type CreateProjectEnvContentHint1 = {
    type: CreateProjectEnvContentHintType;
    storeId: string;
};

export type CreatedContentHint =
    | CreateProjectEnvContentHint1
    | CreateProjectEnvContentHint2
    | CreateProjectEnvContentHint3
    | CreateProjectEnvContentHint4
    | CreateProjectEnvContentHint5
    | CreateProjectEnvContentHint6
    | CreateProjectEnvContentHint7
    | CreateProjectEnvContentHint8
    | CreateProjectEnvContentHint9
    | CreateProjectEnvContentHint10
    | CreateProjectEnvContentHint11
    | CreateProjectEnvContentHint12
    | CreateProjectEnvContentHint13
    | CreateProjectEnvContentHint14;

export enum CreateProjectEnvCreatedProjectsType {
    FlagsSecret = "flags-secret",
}

/**
 * Similar to `contentHints`, but should not be exposed to the user.
 */
export type CreatedInternalContentHint = {
    type: CreateProjectEnvCreatedProjectsType;
    /**
     * Contains the `value` of the env variable, encrypted with a special key to make decryption possible in the subscriber Lambda.
     */
    encryptedValue: string;
};

export type Created1 = {
    target?: Array<CreateProjectEnvTarget1> | CreateProjectEnvTarget2 | undefined;
    type?: CreatedType | undefined;
    id?: string | undefined;
    key?: string | undefined;
    value?: string | undefined;
    configurationId?: string | null | undefined;
    createdAt?: number | undefined;
    updatedAt?: number | undefined;
    createdBy?: string | null | undefined;
    updatedBy?: string | null | undefined;
    gitBranch?: string | undefined;
    edgeConfigId?: string | null | undefined;
    edgeConfigTokenId?: string | null | undefined;
    contentHint?:
        | CreateProjectEnvContentHint1
        | CreateProjectEnvContentHint2
        | CreateProjectEnvContentHint3
        | CreateProjectEnvContentHint4
        | CreateProjectEnvContentHint5
        | CreateProjectEnvContentHint6
        | CreateProjectEnvContentHint7
        | CreateProjectEnvContentHint8
        | CreateProjectEnvContentHint9
        | CreateProjectEnvContentHint10
        | CreateProjectEnvContentHint11
        | CreateProjectEnvContentHint12
        | CreateProjectEnvContentHint13
        | CreateProjectEnvContentHint14
        | null
        | undefined;
    /**
     * Similar to `contentHints`, but should not be exposed to the user.
     */
    internalContentHint?: CreatedInternalContentHint | null | undefined;
    /**
     * Whether `value` is decrypted.
     */
    decrypted?: boolean | undefined;
    comment?: string | undefined;
    customEnvironmentId?: string | undefined;
    system?: boolean | undefined;
};

export type Created = Created1 | Array<Created2>;

export enum Value2 {
    Production = "production",
    Preview = "preview",
    Development = "development",
}

export type CreateProjectEnvValue = string | Array<Value2>;

export enum CreateProjectEnvTargetProjectsResponse2 {
    Production = "production",
    Preview = "preview",
    Development = "development",
}

export enum CreateProjectEnvTargetProjectsResponse1 {
    Production = "production",
    Preview = "preview",
    Development = "development",
}

export type CreateProjectEnvTarget =
    | Array<CreateProjectEnvTargetProjectsResponse1>
    | CreateProjectEnvTargetProjectsResponse2;

export type CreateProjectEnvError = {
    code: string;
    message: string;
    key?: string | undefined;
    envVarId?: string | undefined;
    envVarKey?: string | undefined;
    action?: string | undefined;
    link?: string | undefined;
    value?: string | Array<Value2> | undefined;
    gitBranch?: string | undefined;
    target?:
        | Array<CreateProjectEnvTargetProjectsResponse1>
        | CreateProjectEnvTargetProjectsResponse2
        | undefined;
    project?: string | undefined;
};

export type Failed = {
    error: CreateProjectEnvError;
};

/**
 * The environment variable was created successfully
 */
export type CreateProjectEnvResponseBody = {
    created: Created1 | Array<Created2>;
    failed: Array<Failed>;
};

/** @internal */
export namespace CreateProjectEnvRequestBodyProjectsType$ {
    export const inboundSchema: z.ZodNativeEnum<typeof CreateProjectEnvRequestBodyProjectsType> =
        z.nativeEnum(CreateProjectEnvRequestBodyProjectsType);
    export const outboundSchema: z.ZodNativeEnum<typeof CreateProjectEnvRequestBodyProjectsType> =
        inboundSchema;
}

/** @internal */
export namespace CreateProjectEnvRequestBodyTarget$ {
    export const inboundSchema: z.ZodNativeEnum<typeof CreateProjectEnvRequestBodyTarget> =
        z.nativeEnum(CreateProjectEnvRequestBodyTarget);
    export const outboundSchema: z.ZodNativeEnum<typeof CreateProjectEnvRequestBodyTarget> =
        inboundSchema;
}

/** @internal */
export namespace CreateProjectEnvRequestBody2$ {
    export const inboundSchema: z.ZodType<CreateProjectEnvRequestBody2, z.ZodTypeDef, unknown> =
        z.object({
            key: z.string(),
            value: z.string(),
            type: CreateProjectEnvRequestBodyProjectsType$.inboundSchema,
            target: z.array(CreateProjectEnvRequestBodyTarget$.inboundSchema),
            gitBranch: z.nullable(z.string()).optional(),
            comment: z.string().optional(),
            customEnvironmentId: z.string().optional(),
        });

    export type Outbound = {
        key: string;
        value: string;
        type: string;
        target: Array<string>;
        gitBranch?: string | null | undefined;
        comment?: string | undefined;
        customEnvironmentId?: string | undefined;
    };

    export const outboundSchema: z.ZodType<Outbound, z.ZodTypeDef, CreateProjectEnvRequestBody2> =
        z.object({
            key: z.string(),
            value: z.string(),
            type: CreateProjectEnvRequestBodyProjectsType$.outboundSchema,
            target: z.array(CreateProjectEnvRequestBodyTarget$.outboundSchema),
            gitBranch: z.nullable(z.string()).optional(),
            comment: z.string().optional(),
            customEnvironmentId: z.string().optional(),
        });
}

/** @internal */
export namespace CreateProjectEnvRequestBodyType$ {
    export const inboundSchema: z.ZodNativeEnum<typeof CreateProjectEnvRequestBodyType> =
        z.nativeEnum(CreateProjectEnvRequestBodyType);
    export const outboundSchema: z.ZodNativeEnum<typeof CreateProjectEnvRequestBodyType> =
        inboundSchema;
}

/** @internal */
export namespace RequestBodyTarget$ {
    export const inboundSchema: z.ZodNativeEnum<typeof RequestBodyTarget> =
        z.nativeEnum(RequestBodyTarget);
    export const outboundSchema: z.ZodNativeEnum<typeof RequestBodyTarget> = inboundSchema;
}

/** @internal */
export namespace CreateProjectEnvRequestBody1$ {
    export const inboundSchema: z.ZodType<CreateProjectEnvRequestBody1, z.ZodTypeDef, unknown> =
        z.object({
            key: z.string(),
            value: z.string(),
            type: CreateProjectEnvRequestBodyType$.inboundSchema,
            target: z.array(RequestBodyTarget$.inboundSchema),
            gitBranch: z.nullable(z.string()).optional(),
            comment: z.string().optional(),
            customEnvironmentId: z.string().optional(),
        });

    export type Outbound = {
        key: string;
        value: string;
        type: string;
        target: Array<string>;
        gitBranch?: string | null | undefined;
        comment?: string | undefined;
        customEnvironmentId?: string | undefined;
    };

    export const outboundSchema: z.ZodType<Outbound, z.ZodTypeDef, CreateProjectEnvRequestBody1> =
        z.object({
            key: z.string(),
            value: z.string(),
            type: CreateProjectEnvRequestBodyType$.outboundSchema,
            target: z.array(RequestBodyTarget$.outboundSchema),
            gitBranch: z.nullable(z.string()).optional(),
            comment: z.string().optional(),
            customEnvironmentId: z.string().optional(),
        });
}

/** @internal */
export namespace CreateProjectEnvRequestBody$ {
    export const inboundSchema: z.ZodType<CreateProjectEnvRequestBody, z.ZodTypeDef, unknown> =
        z.union([
            z.lazy(() => CreateProjectEnvRequestBody1$.inboundSchema),
            z.array(z.lazy(() => CreateProjectEnvRequestBody2$.inboundSchema)),
        ]);

    export type Outbound =
        | CreateProjectEnvRequestBody1$.Outbound
        | Array<CreateProjectEnvRequestBody2$.Outbound>;
    export const outboundSchema: z.ZodType<Outbound, z.ZodTypeDef, CreateProjectEnvRequestBody> =
        z.union([
            z.lazy(() => CreateProjectEnvRequestBody1$.outboundSchema),
            z.array(z.lazy(() => CreateProjectEnvRequestBody2$.outboundSchema)),
        ]);
}

/** @internal */
export namespace CreateProjectEnvRequest$ {
    export const inboundSchema: z.ZodType<CreateProjectEnvRequest, z.ZodTypeDef, unknown> = z
        .object({
            idOrName: z.string(),
            upsert: z.string().optional(),
            teamId: z.string().optional(),
            slug: z.string().optional(),
            RequestBody: z
                .union([
                    z.lazy(() => CreateProjectEnvRequestBody1$.inboundSchema),
                    z.array(z.lazy(() => CreateProjectEnvRequestBody2$.inboundSchema)),
                ])
                .optional(),
        })
        .transform((v) => {
            return remap$(v, {
                RequestBody: "requestBody",
            });
        });

    export type Outbound = {
        idOrName: string;
        upsert?: string | undefined;
        teamId?: string | undefined;
        slug?: string | undefined;
        RequestBody?:
            | CreateProjectEnvRequestBody1$.Outbound
            | Array<CreateProjectEnvRequestBody2$.Outbound>
            | undefined;
    };

    export const outboundSchema: z.ZodType<Outbound, z.ZodTypeDef, CreateProjectEnvRequest> = z
        .object({
            idOrName: z.string(),
            upsert: z.string().optional(),
            teamId: z.string().optional(),
            slug: z.string().optional(),
            requestBody: z
                .union([
                    z.lazy(() => CreateProjectEnvRequestBody1$.outboundSchema),
                    z.array(z.lazy(() => CreateProjectEnvRequestBody2$.outboundSchema)),
                ])
                .optional(),
        })
        .transform((v) => {
            return remap$(v, {
                requestBody: "RequestBody",
            });
        });
}

/** @internal */
export namespace CreateProjectEnvTargetProjects2$ {
    export const inboundSchema: z.ZodNativeEnum<typeof CreateProjectEnvTargetProjects2> =
        z.nativeEnum(CreateProjectEnvTargetProjects2);
    export const outboundSchema: z.ZodNativeEnum<typeof CreateProjectEnvTargetProjects2> =
        inboundSchema;
}

/** @internal */
export namespace CreateProjectEnvTargetProjects1$ {
    export const inboundSchema: z.ZodNativeEnum<typeof CreateProjectEnvTargetProjects1> =
        z.nativeEnum(CreateProjectEnvTargetProjects1);
    export const outboundSchema: z.ZodNativeEnum<typeof CreateProjectEnvTargetProjects1> =
        inboundSchema;
}

/** @internal */
export namespace CreateProjectEnvCreatedTarget$ {
    export const inboundSchema: z.ZodType<CreateProjectEnvCreatedTarget, z.ZodTypeDef, unknown> =
        z.union([
            z.array(CreateProjectEnvTargetProjects1$.inboundSchema),
            CreateProjectEnvTargetProjects2$.inboundSchema,
        ]);

    export type Outbound = Array<string> | string;
    export const outboundSchema: z.ZodType<Outbound, z.ZodTypeDef, CreateProjectEnvCreatedTarget> =
        z.union([
            z.array(CreateProjectEnvTargetProjects1$.outboundSchema),
            CreateProjectEnvTargetProjects2$.outboundSchema,
        ]);
}

/** @internal */
export namespace CreateProjectEnvCreatedType$ {
    export const inboundSchema: z.ZodNativeEnum<typeof CreateProjectEnvCreatedType> = z.nativeEnum(
        CreateProjectEnvCreatedType
    );
    export const outboundSchema: z.ZodNativeEnum<typeof CreateProjectEnvCreatedType> =
        inboundSchema;
}

/** @internal */
export namespace CreateProjectEnvContentHintProjectsResponse201ApplicationJSONResponseBodyCreated214Type$ {
    export const inboundSchema: z.ZodNativeEnum<
        typeof CreateProjectEnvContentHintProjectsResponse201ApplicationJSONResponseBodyCreated214Type
    > = z.nativeEnum(
        CreateProjectEnvContentHintProjectsResponse201ApplicationJSONResponseBodyCreated214Type
    );
    export const outboundSchema: z.ZodNativeEnum<
        typeof CreateProjectEnvContentHintProjectsResponse201ApplicationJSONResponseBodyCreated214Type
    > = inboundSchema;
}

/** @internal */
export namespace CreateProjectEnvContentHintProjects14$ {
    export const inboundSchema: z.ZodType<
        CreateProjectEnvContentHintProjects14,
        z.ZodTypeDef,
        unknown
    > = z.object({
        type: CreateProjectEnvContentHintProjectsResponse201ApplicationJSONResponseBodyCreated214Type$.inboundSchema,
        storeId: z.string(),
    });

    export type Outbound = {
        type: string;
        storeId: string;
    };

    export const outboundSchema: z.ZodType<
        Outbound,
        z.ZodTypeDef,
        CreateProjectEnvContentHintProjects14
    > = z.object({
        type: CreateProjectEnvContentHintProjectsResponse201ApplicationJSONResponseBodyCreated214Type$.outboundSchema,
        storeId: z.string(),
    });
}

/** @internal */
export namespace CreateProjectEnvContentHintProjectsResponse201ApplicationJSONResponseBodyCreated213Type$ {
    export const inboundSchema: z.ZodNativeEnum<
        typeof CreateProjectEnvContentHintProjectsResponse201ApplicationJSONResponseBodyCreated213Type
    > = z.nativeEnum(
        CreateProjectEnvContentHintProjectsResponse201ApplicationJSONResponseBodyCreated213Type
    );
    export const outboundSchema: z.ZodNativeEnum<
        typeof CreateProjectEnvContentHintProjectsResponse201ApplicationJSONResponseBodyCreated213Type
    > = inboundSchema;
}

/** @internal */
export namespace CreateProjectEnvContentHintProjects13$ {
    export const inboundSchema: z.ZodType<
        CreateProjectEnvContentHintProjects13,
        z.ZodTypeDef,
        unknown
    > = z.object({
        type: CreateProjectEnvContentHintProjectsResponse201ApplicationJSONResponseBodyCreated213Type$.inboundSchema,
        storeId: z.string(),
    });

    export type Outbound = {
        type: string;
        storeId: string;
    };

    export const outboundSchema: z.ZodType<
        Outbound,
        z.ZodTypeDef,
        CreateProjectEnvContentHintProjects13
    > = z.object({
        type: CreateProjectEnvContentHintProjectsResponse201ApplicationJSONResponseBodyCreated213Type$.outboundSchema,
        storeId: z.string(),
    });
}

/** @internal */
export namespace CreateProjectEnvContentHintProjectsResponse201ApplicationJSONResponseBodyCreated212Type$ {
    export const inboundSchema: z.ZodNativeEnum<
        typeof CreateProjectEnvContentHintProjectsResponse201ApplicationJSONResponseBodyCreated212Type
    > = z.nativeEnum(
        CreateProjectEnvContentHintProjectsResponse201ApplicationJSONResponseBodyCreated212Type
    );
    export const outboundSchema: z.ZodNativeEnum<
        typeof CreateProjectEnvContentHintProjectsResponse201ApplicationJSONResponseBodyCreated212Type
    > = inboundSchema;
}

/** @internal */
export namespace CreateProjectEnvContentHintProjects12$ {
    export const inboundSchema: z.ZodType<
        CreateProjectEnvContentHintProjects12,
        z.ZodTypeDef,
        unknown
    > = z.object({
        type: CreateProjectEnvContentHintProjectsResponse201ApplicationJSONResponseBodyCreated212Type$.inboundSchema,
        storeId: z.string(),
    });

    export type Outbound = {
        type: string;
        storeId: string;
    };

    export const outboundSchema: z.ZodType<
        Outbound,
        z.ZodTypeDef,
        CreateProjectEnvContentHintProjects12
    > = z.object({
        type: CreateProjectEnvContentHintProjectsResponse201ApplicationJSONResponseBodyCreated212Type$.outboundSchema,
        storeId: z.string(),
    });
}

/** @internal */
export namespace CreateProjectEnvContentHintProjectsResponse201ApplicationJSONResponseBodyCreated211Type$ {
    export const inboundSchema: z.ZodNativeEnum<
        typeof CreateProjectEnvContentHintProjectsResponse201ApplicationJSONResponseBodyCreated211Type
    > = z.nativeEnum(
        CreateProjectEnvContentHintProjectsResponse201ApplicationJSONResponseBodyCreated211Type
    );
    export const outboundSchema: z.ZodNativeEnum<
        typeof CreateProjectEnvContentHintProjectsResponse201ApplicationJSONResponseBodyCreated211Type
    > = inboundSchema;
}

/** @internal */
export namespace CreateProjectEnvContentHintProjects11$ {
    export const inboundSchema: z.ZodType<
        CreateProjectEnvContentHintProjects11,
        z.ZodTypeDef,
        unknown
    > = z.object({
        type: CreateProjectEnvContentHintProjectsResponse201ApplicationJSONResponseBodyCreated211Type$.inboundSchema,
        storeId: z.string(),
    });

    export type Outbound = {
        type: string;
        storeId: string;
    };

    export const outboundSchema: z.ZodType<
        Outbound,
        z.ZodTypeDef,
        CreateProjectEnvContentHintProjects11
    > = z.object({
        type: CreateProjectEnvContentHintProjectsResponse201ApplicationJSONResponseBodyCreated211Type$.outboundSchema,
        storeId: z.string(),
    });
}

/** @internal */
export namespace CreateProjectEnvContentHintProjectsResponse201ApplicationJSONResponseBodyCreated210Type$ {
    export const inboundSchema: z.ZodNativeEnum<
        typeof CreateProjectEnvContentHintProjectsResponse201ApplicationJSONResponseBodyCreated210Type
    > = z.nativeEnum(
        CreateProjectEnvContentHintProjectsResponse201ApplicationJSONResponseBodyCreated210Type
    );
    export const outboundSchema: z.ZodNativeEnum<
        typeof CreateProjectEnvContentHintProjectsResponse201ApplicationJSONResponseBodyCreated210Type
    > = inboundSchema;
}

/** @internal */
export namespace CreateProjectEnvContentHintProjects10$ {
    export const inboundSchema: z.ZodType<
        CreateProjectEnvContentHintProjects10,
        z.ZodTypeDef,
        unknown
    > = z.object({
        type: CreateProjectEnvContentHintProjectsResponse201ApplicationJSONResponseBodyCreated210Type$.inboundSchema,
        storeId: z.string(),
    });

    export type Outbound = {
        type: string;
        storeId: string;
    };

    export const outboundSchema: z.ZodType<
        Outbound,
        z.ZodTypeDef,
        CreateProjectEnvContentHintProjects10
    > = z.object({
        type: CreateProjectEnvContentHintProjectsResponse201ApplicationJSONResponseBodyCreated210Type$.outboundSchema,
        storeId: z.string(),
    });
}

/** @internal */
export namespace CreateProjectEnvContentHintProjectsResponse201ApplicationJSONResponseBodyCreated29Type$ {
    export const inboundSchema: z.ZodNativeEnum<
        typeof CreateProjectEnvContentHintProjectsResponse201ApplicationJSONResponseBodyCreated29Type
    > = z.nativeEnum(
        CreateProjectEnvContentHintProjectsResponse201ApplicationJSONResponseBodyCreated29Type
    );
    export const outboundSchema: z.ZodNativeEnum<
        typeof CreateProjectEnvContentHintProjectsResponse201ApplicationJSONResponseBodyCreated29Type
    > = inboundSchema;
}

/** @internal */
export namespace CreateProjectEnvContentHintProjects9$ {
    export const inboundSchema: z.ZodType<
        CreateProjectEnvContentHintProjects9,
        z.ZodTypeDef,
        unknown
    > = z.object({
        type: CreateProjectEnvContentHintProjectsResponse201ApplicationJSONResponseBodyCreated29Type$.inboundSchema,
        storeId: z.string(),
    });

    export type Outbound = {
        type: string;
        storeId: string;
    };

    export const outboundSchema: z.ZodType<
        Outbound,
        z.ZodTypeDef,
        CreateProjectEnvContentHintProjects9
    > = z.object({
        type: CreateProjectEnvContentHintProjectsResponse201ApplicationJSONResponseBodyCreated29Type$.outboundSchema,
        storeId: z.string(),
    });
}

/** @internal */
export namespace CreateProjectEnvContentHintProjectsResponse201ApplicationJSONResponseBodyCreated28Type$ {
    export const inboundSchema: z.ZodNativeEnum<
        typeof CreateProjectEnvContentHintProjectsResponse201ApplicationJSONResponseBodyCreated28Type
    > = z.nativeEnum(
        CreateProjectEnvContentHintProjectsResponse201ApplicationJSONResponseBodyCreated28Type
    );
    export const outboundSchema: z.ZodNativeEnum<
        typeof CreateProjectEnvContentHintProjectsResponse201ApplicationJSONResponseBodyCreated28Type
    > = inboundSchema;
}

/** @internal */
export namespace CreateProjectEnvContentHintProjects8$ {
    export const inboundSchema: z.ZodType<
        CreateProjectEnvContentHintProjects8,
        z.ZodTypeDef,
        unknown
    > = z.object({
        type: CreateProjectEnvContentHintProjectsResponse201ApplicationJSONResponseBodyCreated28Type$.inboundSchema,
        storeId: z.string(),
    });

    export type Outbound = {
        type: string;
        storeId: string;
    };

    export const outboundSchema: z.ZodType<
        Outbound,
        z.ZodTypeDef,
        CreateProjectEnvContentHintProjects8
    > = z.object({
        type: CreateProjectEnvContentHintProjectsResponse201ApplicationJSONResponseBodyCreated28Type$.outboundSchema,
        storeId: z.string(),
    });
}

/** @internal */
export namespace CreateProjectEnvContentHintProjectsResponse201ApplicationJSONResponseBodyCreated27Type$ {
    export const inboundSchema: z.ZodNativeEnum<
        typeof CreateProjectEnvContentHintProjectsResponse201ApplicationJSONResponseBodyCreated27Type
    > = z.nativeEnum(
        CreateProjectEnvContentHintProjectsResponse201ApplicationJSONResponseBodyCreated27Type
    );
    export const outboundSchema: z.ZodNativeEnum<
        typeof CreateProjectEnvContentHintProjectsResponse201ApplicationJSONResponseBodyCreated27Type
    > = inboundSchema;
}

/** @internal */
export namespace CreateProjectEnvContentHintProjects7$ {
    export const inboundSchema: z.ZodType<
        CreateProjectEnvContentHintProjects7,
        z.ZodTypeDef,
        unknown
    > = z.object({
        type: CreateProjectEnvContentHintProjectsResponse201ApplicationJSONResponseBodyCreated27Type$.inboundSchema,
        storeId: z.string(),
    });

    export type Outbound = {
        type: string;
        storeId: string;
    };

    export const outboundSchema: z.ZodType<
        Outbound,
        z.ZodTypeDef,
        CreateProjectEnvContentHintProjects7
    > = z.object({
        type: CreateProjectEnvContentHintProjectsResponse201ApplicationJSONResponseBodyCreated27Type$.outboundSchema,
        storeId: z.string(),
    });
}

/** @internal */
export namespace CreateProjectEnvContentHintProjectsResponse201ApplicationJSONResponseBodyCreated26Type$ {
    export const inboundSchema: z.ZodNativeEnum<
        typeof CreateProjectEnvContentHintProjectsResponse201ApplicationJSONResponseBodyCreated26Type
    > = z.nativeEnum(
        CreateProjectEnvContentHintProjectsResponse201ApplicationJSONResponseBodyCreated26Type
    );
    export const outboundSchema: z.ZodNativeEnum<
        typeof CreateProjectEnvContentHintProjectsResponse201ApplicationJSONResponseBodyCreated26Type
    > = inboundSchema;
}

/** @internal */
export namespace CreateProjectEnvContentHintProjects6$ {
    export const inboundSchema: z.ZodType<
        CreateProjectEnvContentHintProjects6,
        z.ZodTypeDef,
        unknown
    > = z.object({
        type: CreateProjectEnvContentHintProjectsResponse201ApplicationJSONResponseBodyCreated26Type$.inboundSchema,
        storeId: z.string(),
    });

    export type Outbound = {
        type: string;
        storeId: string;
    };

    export const outboundSchema: z.ZodType<
        Outbound,
        z.ZodTypeDef,
        CreateProjectEnvContentHintProjects6
    > = z.object({
        type: CreateProjectEnvContentHintProjectsResponse201ApplicationJSONResponseBodyCreated26Type$.outboundSchema,
        storeId: z.string(),
    });
}

/** @internal */
export namespace CreateProjectEnvContentHintProjectsResponse201ApplicationJSONResponseBodyCreated25Type$ {
    export const inboundSchema: z.ZodNativeEnum<
        typeof CreateProjectEnvContentHintProjectsResponse201ApplicationJSONResponseBodyCreated25Type
    > = z.nativeEnum(
        CreateProjectEnvContentHintProjectsResponse201ApplicationJSONResponseBodyCreated25Type
    );
    export const outboundSchema: z.ZodNativeEnum<
        typeof CreateProjectEnvContentHintProjectsResponse201ApplicationJSONResponseBodyCreated25Type
    > = inboundSchema;
}

/** @internal */
export namespace CreateProjectEnvContentHintProjects5$ {
    export const inboundSchema: z.ZodType<
        CreateProjectEnvContentHintProjects5,
        z.ZodTypeDef,
        unknown
    > = z.object({
        type: CreateProjectEnvContentHintProjectsResponse201ApplicationJSONResponseBodyCreated25Type$.inboundSchema,
        storeId: z.string(),
    });

    export type Outbound = {
        type: string;
        storeId: string;
    };

    export const outboundSchema: z.ZodType<
        Outbound,
        z.ZodTypeDef,
        CreateProjectEnvContentHintProjects5
    > = z.object({
        type: CreateProjectEnvContentHintProjectsResponse201ApplicationJSONResponseBodyCreated25Type$.outboundSchema,
        storeId: z.string(),
    });
}

/** @internal */
export namespace CreateProjectEnvContentHintProjectsResponse201ApplicationJSONResponseBodyCreated24Type$ {
    export const inboundSchema: z.ZodNativeEnum<
        typeof CreateProjectEnvContentHintProjectsResponse201ApplicationJSONResponseBodyCreated24Type
    > = z.nativeEnum(
        CreateProjectEnvContentHintProjectsResponse201ApplicationJSONResponseBodyCreated24Type
    );
    export const outboundSchema: z.ZodNativeEnum<
        typeof CreateProjectEnvContentHintProjectsResponse201ApplicationJSONResponseBodyCreated24Type
    > = inboundSchema;
}

/** @internal */
export namespace CreateProjectEnvContentHintProjects4$ {
    export const inboundSchema: z.ZodType<
        CreateProjectEnvContentHintProjects4,
        z.ZodTypeDef,
        unknown
    > = z.object({
        type: CreateProjectEnvContentHintProjectsResponse201ApplicationJSONResponseBodyCreated24Type$.inboundSchema,
        storeId: z.string(),
    });

    export type Outbound = {
        type: string;
        storeId: string;
    };

    export const outboundSchema: z.ZodType<
        Outbound,
        z.ZodTypeDef,
        CreateProjectEnvContentHintProjects4
    > = z.object({
        type: CreateProjectEnvContentHintProjectsResponse201ApplicationJSONResponseBodyCreated24Type$.outboundSchema,
        storeId: z.string(),
    });
}

/** @internal */
export namespace CreateProjectEnvContentHintProjectsResponse201ApplicationJSONResponseBodyCreated23Type$ {
    export const inboundSchema: z.ZodNativeEnum<
        typeof CreateProjectEnvContentHintProjectsResponse201ApplicationJSONResponseBodyCreated23Type
    > = z.nativeEnum(
        CreateProjectEnvContentHintProjectsResponse201ApplicationJSONResponseBodyCreated23Type
    );
    export const outboundSchema: z.ZodNativeEnum<
        typeof CreateProjectEnvContentHintProjectsResponse201ApplicationJSONResponseBodyCreated23Type
    > = inboundSchema;
}

/** @internal */
export namespace CreateProjectEnvContentHintProjects3$ {
    export const inboundSchema: z.ZodType<
        CreateProjectEnvContentHintProjects3,
        z.ZodTypeDef,
        unknown
    > = z.object({
        type: CreateProjectEnvContentHintProjectsResponse201ApplicationJSONResponseBodyCreated23Type$.inboundSchema,
        storeId: z.string(),
    });

    export type Outbound = {
        type: string;
        storeId: string;
    };

    export const outboundSchema: z.ZodType<
        Outbound,
        z.ZodTypeDef,
        CreateProjectEnvContentHintProjects3
    > = z.object({
        type: CreateProjectEnvContentHintProjectsResponse201ApplicationJSONResponseBodyCreated23Type$.outboundSchema,
        storeId: z.string(),
    });
}

/** @internal */
export namespace CreateProjectEnvContentHintProjectsResponse201ApplicationJSONResponseBodyCreated22Type$ {
    export const inboundSchema: z.ZodNativeEnum<
        typeof CreateProjectEnvContentHintProjectsResponse201ApplicationJSONResponseBodyCreated22Type
    > = z.nativeEnum(
        CreateProjectEnvContentHintProjectsResponse201ApplicationJSONResponseBodyCreated22Type
    );
    export const outboundSchema: z.ZodNativeEnum<
        typeof CreateProjectEnvContentHintProjectsResponse201ApplicationJSONResponseBodyCreated22Type
    > = inboundSchema;
}

/** @internal */
export namespace CreateProjectEnvContentHintProjects2$ {
    export const inboundSchema: z.ZodType<
        CreateProjectEnvContentHintProjects2,
        z.ZodTypeDef,
        unknown
    > = z.object({
        type: CreateProjectEnvContentHintProjectsResponse201ApplicationJSONResponseBodyCreated22Type$.inboundSchema,
        storeId: z.string(),
    });

    export type Outbound = {
        type: string;
        storeId: string;
    };

    export const outboundSchema: z.ZodType<
        Outbound,
        z.ZodTypeDef,
        CreateProjectEnvContentHintProjects2
    > = z.object({
        type: CreateProjectEnvContentHintProjectsResponse201ApplicationJSONResponseBodyCreated22Type$.outboundSchema,
        storeId: z.string(),
    });
}

/** @internal */
export namespace CreateProjectEnvContentHintProjectsResponse201ApplicationJSONResponseBodyCreated2Type$ {
    export const inboundSchema: z.ZodNativeEnum<
        typeof CreateProjectEnvContentHintProjectsResponse201ApplicationJSONResponseBodyCreated2Type
    > = z.nativeEnum(
        CreateProjectEnvContentHintProjectsResponse201ApplicationJSONResponseBodyCreated2Type
    );
    export const outboundSchema: z.ZodNativeEnum<
        typeof CreateProjectEnvContentHintProjectsResponse201ApplicationJSONResponseBodyCreated2Type
    > = inboundSchema;
}

/** @internal */
export namespace CreateProjectEnvContentHintProjects1$ {
    export const inboundSchema: z.ZodType<
        CreateProjectEnvContentHintProjects1,
        z.ZodTypeDef,
        unknown
    > = z.object({
        type: CreateProjectEnvContentHintProjectsResponse201ApplicationJSONResponseBodyCreated2Type$.inboundSchema,
        storeId: z.string(),
    });

    export type Outbound = {
        type: string;
        storeId: string;
    };

    export const outboundSchema: z.ZodType<
        Outbound,
        z.ZodTypeDef,
        CreateProjectEnvContentHintProjects1
    > = z.object({
        type: CreateProjectEnvContentHintProjectsResponse201ApplicationJSONResponseBodyCreated2Type$.outboundSchema,
        storeId: z.string(),
    });
}

/** @internal */
export namespace CreateProjectEnvCreatedContentHint$ {
    export const inboundSchema: z.ZodType<
        CreateProjectEnvCreatedContentHint,
        z.ZodTypeDef,
        unknown
    > = z.union([
        z.lazy(() => CreateProjectEnvContentHintProjects1$.inboundSchema),
        z.lazy(() => CreateProjectEnvContentHintProjects2$.inboundSchema),
        z.lazy(() => CreateProjectEnvContentHintProjects3$.inboundSchema),
        z.lazy(() => CreateProjectEnvContentHintProjects4$.inboundSchema),
        z.lazy(() => CreateProjectEnvContentHintProjects5$.inboundSchema),
        z.lazy(() => CreateProjectEnvContentHintProjects6$.inboundSchema),
        z.lazy(() => CreateProjectEnvContentHintProjects7$.inboundSchema),
        z.lazy(() => CreateProjectEnvContentHintProjects8$.inboundSchema),
        z.lazy(() => CreateProjectEnvContentHintProjects9$.inboundSchema),
        z.lazy(() => CreateProjectEnvContentHintProjects10$.inboundSchema),
        z.lazy(() => CreateProjectEnvContentHintProjects11$.inboundSchema),
        z.lazy(() => CreateProjectEnvContentHintProjects12$.inboundSchema),
        z.lazy(() => CreateProjectEnvContentHintProjects13$.inboundSchema),
        z.lazy(() => CreateProjectEnvContentHintProjects14$.inboundSchema),
    ]);

    export type Outbound =
        | CreateProjectEnvContentHintProjects1$.Outbound
        | CreateProjectEnvContentHintProjects2$.Outbound
        | CreateProjectEnvContentHintProjects3$.Outbound
        | CreateProjectEnvContentHintProjects4$.Outbound
        | CreateProjectEnvContentHintProjects5$.Outbound
        | CreateProjectEnvContentHintProjects6$.Outbound
        | CreateProjectEnvContentHintProjects7$.Outbound
        | CreateProjectEnvContentHintProjects8$.Outbound
        | CreateProjectEnvContentHintProjects9$.Outbound
        | CreateProjectEnvContentHintProjects10$.Outbound
        | CreateProjectEnvContentHintProjects11$.Outbound
        | CreateProjectEnvContentHintProjects12$.Outbound
        | CreateProjectEnvContentHintProjects13$.Outbound
        | CreateProjectEnvContentHintProjects14$.Outbound;
    export const outboundSchema: z.ZodType<
        Outbound,
        z.ZodTypeDef,
        CreateProjectEnvCreatedContentHint
    > = z.union([
        z.lazy(() => CreateProjectEnvContentHintProjects1$.outboundSchema),
        z.lazy(() => CreateProjectEnvContentHintProjects2$.outboundSchema),
        z.lazy(() => CreateProjectEnvContentHintProjects3$.outboundSchema),
        z.lazy(() => CreateProjectEnvContentHintProjects4$.outboundSchema),
        z.lazy(() => CreateProjectEnvContentHintProjects5$.outboundSchema),
        z.lazy(() => CreateProjectEnvContentHintProjects6$.outboundSchema),
        z.lazy(() => CreateProjectEnvContentHintProjects7$.outboundSchema),
        z.lazy(() => CreateProjectEnvContentHintProjects8$.outboundSchema),
        z.lazy(() => CreateProjectEnvContentHintProjects9$.outboundSchema),
        z.lazy(() => CreateProjectEnvContentHintProjects10$.outboundSchema),
        z.lazy(() => CreateProjectEnvContentHintProjects11$.outboundSchema),
        z.lazy(() => CreateProjectEnvContentHintProjects12$.outboundSchema),
        z.lazy(() => CreateProjectEnvContentHintProjects13$.outboundSchema),
        z.lazy(() => CreateProjectEnvContentHintProjects14$.outboundSchema),
    ]);
}

/** @internal */
export namespace CreateProjectEnvCreatedProjectsResponseType$ {
    export const inboundSchema: z.ZodNativeEnum<
        typeof CreateProjectEnvCreatedProjectsResponseType
    > = z.nativeEnum(CreateProjectEnvCreatedProjectsResponseType);
    export const outboundSchema: z.ZodNativeEnum<
        typeof CreateProjectEnvCreatedProjectsResponseType
    > = inboundSchema;
}

/** @internal */
export namespace CreateProjectEnvCreatedInternalContentHint$ {
    export const inboundSchema: z.ZodType<
        CreateProjectEnvCreatedInternalContentHint,
        z.ZodTypeDef,
        unknown
    > = z.object({
        type: CreateProjectEnvCreatedProjectsResponseType$.inboundSchema,
        encryptedValue: z.string(),
    });

    export type Outbound = {
        type: string;
        encryptedValue: string;
    };

    export const outboundSchema: z.ZodType<
        Outbound,
        z.ZodTypeDef,
        CreateProjectEnvCreatedInternalContentHint
    > = z.object({
        type: CreateProjectEnvCreatedProjectsResponseType$.outboundSchema,
        encryptedValue: z.string(),
    });
}

/** @internal */
export namespace Created2$ {
    export const inboundSchema: z.ZodType<Created2, z.ZodTypeDef, unknown> = z.object({
        target: z
            .union([
                z.array(CreateProjectEnvTargetProjects1$.inboundSchema),
                CreateProjectEnvTargetProjects2$.inboundSchema,
            ])
            .optional(),
        type: CreateProjectEnvCreatedType$.inboundSchema.optional(),
        id: z.string().optional(),
        key: z.string().optional(),
        value: z.string().optional(),
        configurationId: z.nullable(z.string()).optional(),
        createdAt: z.number().optional(),
        updatedAt: z.number().optional(),
        createdBy: z.nullable(z.string()).optional(),
        updatedBy: z.nullable(z.string()).optional(),
        gitBranch: z.string().optional(),
        edgeConfigId: z.nullable(z.string()).optional(),
        edgeConfigTokenId: z.nullable(z.string()).optional(),
        contentHint: z
            .nullable(
                z.union([
                    z.lazy(() => CreateProjectEnvContentHintProjects1$.inboundSchema),
                    z.lazy(() => CreateProjectEnvContentHintProjects2$.inboundSchema),
                    z.lazy(() => CreateProjectEnvContentHintProjects3$.inboundSchema),
                    z.lazy(() => CreateProjectEnvContentHintProjects4$.inboundSchema),
                    z.lazy(() => CreateProjectEnvContentHintProjects5$.inboundSchema),
                    z.lazy(() => CreateProjectEnvContentHintProjects6$.inboundSchema),
                    z.lazy(() => CreateProjectEnvContentHintProjects7$.inboundSchema),
                    z.lazy(() => CreateProjectEnvContentHintProjects8$.inboundSchema),
                    z.lazy(() => CreateProjectEnvContentHintProjects9$.inboundSchema),
                    z.lazy(() => CreateProjectEnvContentHintProjects10$.inboundSchema),
                    z.lazy(() => CreateProjectEnvContentHintProjects11$.inboundSchema),
                    z.lazy(() => CreateProjectEnvContentHintProjects12$.inboundSchema),
                    z.lazy(() => CreateProjectEnvContentHintProjects13$.inboundSchema),
                    z.lazy(() => CreateProjectEnvContentHintProjects14$.inboundSchema),
                ])
            )
            .optional(),
        internalContentHint: z
            .nullable(z.lazy(() => CreateProjectEnvCreatedInternalContentHint$.inboundSchema))
            .optional(),
        decrypted: z.boolean().optional(),
        comment: z.string().optional(),
        customEnvironmentId: z.string().optional(),
        system: z.boolean().optional(),
    });

    export type Outbound = {
        target?: Array<string> | string | undefined;
        type?: string | undefined;
        id?: string | undefined;
        key?: string | undefined;
        value?: string | undefined;
        configurationId?: string | null | undefined;
        createdAt?: number | undefined;
        updatedAt?: number | undefined;
        createdBy?: string | null | undefined;
        updatedBy?: string | null | undefined;
        gitBranch?: string | undefined;
        edgeConfigId?: string | null | undefined;
        edgeConfigTokenId?: string | null | undefined;
        contentHint?:
            | CreateProjectEnvContentHintProjects1$.Outbound
            | CreateProjectEnvContentHintProjects2$.Outbound
            | CreateProjectEnvContentHintProjects3$.Outbound
            | CreateProjectEnvContentHintProjects4$.Outbound
            | CreateProjectEnvContentHintProjects5$.Outbound
            | CreateProjectEnvContentHintProjects6$.Outbound
            | CreateProjectEnvContentHintProjects7$.Outbound
            | CreateProjectEnvContentHintProjects8$.Outbound
            | CreateProjectEnvContentHintProjects9$.Outbound
            | CreateProjectEnvContentHintProjects10$.Outbound
            | CreateProjectEnvContentHintProjects11$.Outbound
            | CreateProjectEnvContentHintProjects12$.Outbound
            | CreateProjectEnvContentHintProjects13$.Outbound
            | CreateProjectEnvContentHintProjects14$.Outbound
            | null
            | undefined;
        internalContentHint?:
            | CreateProjectEnvCreatedInternalContentHint$.Outbound
            | null
            | undefined;
        decrypted?: boolean | undefined;
        comment?: string | undefined;
        customEnvironmentId?: string | undefined;
        system?: boolean | undefined;
    };

    export const outboundSchema: z.ZodType<Outbound, z.ZodTypeDef, Created2> = z.object({
        target: z
            .union([
                z.array(CreateProjectEnvTargetProjects1$.outboundSchema),
                CreateProjectEnvTargetProjects2$.outboundSchema,
            ])
            .optional(),
        type: CreateProjectEnvCreatedType$.outboundSchema.optional(),
        id: z.string().optional(),
        key: z.string().optional(),
        value: z.string().optional(),
        configurationId: z.nullable(z.string()).optional(),
        createdAt: z.number().optional(),
        updatedAt: z.number().optional(),
        createdBy: z.nullable(z.string()).optional(),
        updatedBy: z.nullable(z.string()).optional(),
        gitBranch: z.string().optional(),
        edgeConfigId: z.nullable(z.string()).optional(),
        edgeConfigTokenId: z.nullable(z.string()).optional(),
        contentHint: z
            .nullable(
                z.union([
                    z.lazy(() => CreateProjectEnvContentHintProjects1$.outboundSchema),
                    z.lazy(() => CreateProjectEnvContentHintProjects2$.outboundSchema),
                    z.lazy(() => CreateProjectEnvContentHintProjects3$.outboundSchema),
                    z.lazy(() => CreateProjectEnvContentHintProjects4$.outboundSchema),
                    z.lazy(() => CreateProjectEnvContentHintProjects5$.outboundSchema),
                    z.lazy(() => CreateProjectEnvContentHintProjects6$.outboundSchema),
                    z.lazy(() => CreateProjectEnvContentHintProjects7$.outboundSchema),
                    z.lazy(() => CreateProjectEnvContentHintProjects8$.outboundSchema),
                    z.lazy(() => CreateProjectEnvContentHintProjects9$.outboundSchema),
                    z.lazy(() => CreateProjectEnvContentHintProjects10$.outboundSchema),
                    z.lazy(() => CreateProjectEnvContentHintProjects11$.outboundSchema),
                    z.lazy(() => CreateProjectEnvContentHintProjects12$.outboundSchema),
                    z.lazy(() => CreateProjectEnvContentHintProjects13$.outboundSchema),
                    z.lazy(() => CreateProjectEnvContentHintProjects14$.outboundSchema),
                ])
            )
            .optional(),
        internalContentHint: z
            .nullable(z.lazy(() => CreateProjectEnvCreatedInternalContentHint$.outboundSchema))
            .optional(),
        decrypted: z.boolean().optional(),
        comment: z.string().optional(),
        customEnvironmentId: z.string().optional(),
        system: z.boolean().optional(),
    });
}

/** @internal */
export namespace CreateProjectEnvTarget2$ {
    export const inboundSchema: z.ZodNativeEnum<typeof CreateProjectEnvTarget2> =
        z.nativeEnum(CreateProjectEnvTarget2);
    export const outboundSchema: z.ZodNativeEnum<typeof CreateProjectEnvTarget2> = inboundSchema;
}

/** @internal */
export namespace CreateProjectEnvTarget1$ {
    export const inboundSchema: z.ZodNativeEnum<typeof CreateProjectEnvTarget1> =
        z.nativeEnum(CreateProjectEnvTarget1);
    export const outboundSchema: z.ZodNativeEnum<typeof CreateProjectEnvTarget1> = inboundSchema;
}

/** @internal */
export namespace CreatedTarget$ {
    export const inboundSchema: z.ZodType<CreatedTarget, z.ZodTypeDef, unknown> = z.union([
        z.array(CreateProjectEnvTarget1$.inboundSchema),
        CreateProjectEnvTarget2$.inboundSchema,
    ]);

    export type Outbound = Array<string> | string;
    export const outboundSchema: z.ZodType<Outbound, z.ZodTypeDef, CreatedTarget> = z.union([
        z.array(CreateProjectEnvTarget1$.outboundSchema),
        CreateProjectEnvTarget2$.outboundSchema,
    ]);
}

/** @internal */
export namespace CreatedType$ {
    export const inboundSchema: z.ZodNativeEnum<typeof CreatedType> = z.nativeEnum(CreatedType);
    export const outboundSchema: z.ZodNativeEnum<typeof CreatedType> = inboundSchema;
}

/** @internal */
export namespace CreateProjectEnvContentHintProjectsResponse201ApplicationJSONResponseBodyCreated114Type$ {
    export const inboundSchema: z.ZodNativeEnum<
        typeof CreateProjectEnvContentHintProjectsResponse201ApplicationJSONResponseBodyCreated114Type
    > = z.nativeEnum(
        CreateProjectEnvContentHintProjectsResponse201ApplicationJSONResponseBodyCreated114Type
    );
    export const outboundSchema: z.ZodNativeEnum<
        typeof CreateProjectEnvContentHintProjectsResponse201ApplicationJSONResponseBodyCreated114Type
    > = inboundSchema;
}

/** @internal */
export namespace CreateProjectEnvContentHint14$ {
    export const inboundSchema: z.ZodType<CreateProjectEnvContentHint14, z.ZodTypeDef, unknown> =
        z.object({
            type: CreateProjectEnvContentHintProjectsResponse201ApplicationJSONResponseBodyCreated114Type$.inboundSchema,
            storeId: z.string(),
        });

    export type Outbound = {
        type: string;
        storeId: string;
    };

    export const outboundSchema: z.ZodType<Outbound, z.ZodTypeDef, CreateProjectEnvContentHint14> =
        z.object({
            type: CreateProjectEnvContentHintProjectsResponse201ApplicationJSONResponseBodyCreated114Type$.outboundSchema,
            storeId: z.string(),
        });
}

/** @internal */
export namespace CreateProjectEnvContentHintProjectsResponse201ApplicationJSONResponseBodyCreated113Type$ {
    export const inboundSchema: z.ZodNativeEnum<
        typeof CreateProjectEnvContentHintProjectsResponse201ApplicationJSONResponseBodyCreated113Type
    > = z.nativeEnum(
        CreateProjectEnvContentHintProjectsResponse201ApplicationJSONResponseBodyCreated113Type
    );
    export const outboundSchema: z.ZodNativeEnum<
        typeof CreateProjectEnvContentHintProjectsResponse201ApplicationJSONResponseBodyCreated113Type
    > = inboundSchema;
}

/** @internal */
export namespace CreateProjectEnvContentHint13$ {
    export const inboundSchema: z.ZodType<CreateProjectEnvContentHint13, z.ZodTypeDef, unknown> =
        z.object({
            type: CreateProjectEnvContentHintProjectsResponse201ApplicationJSONResponseBodyCreated113Type$.inboundSchema,
            storeId: z.string(),
        });

    export type Outbound = {
        type: string;
        storeId: string;
    };

    export const outboundSchema: z.ZodType<Outbound, z.ZodTypeDef, CreateProjectEnvContentHint13> =
        z.object({
            type: CreateProjectEnvContentHintProjectsResponse201ApplicationJSONResponseBodyCreated113Type$.outboundSchema,
            storeId: z.string(),
        });
}

/** @internal */
export namespace CreateProjectEnvContentHintProjectsResponse201ApplicationJSONResponseBodyCreated112Type$ {
    export const inboundSchema: z.ZodNativeEnum<
        typeof CreateProjectEnvContentHintProjectsResponse201ApplicationJSONResponseBodyCreated112Type
    > = z.nativeEnum(
        CreateProjectEnvContentHintProjectsResponse201ApplicationJSONResponseBodyCreated112Type
    );
    export const outboundSchema: z.ZodNativeEnum<
        typeof CreateProjectEnvContentHintProjectsResponse201ApplicationJSONResponseBodyCreated112Type
    > = inboundSchema;
}

/** @internal */
export namespace CreateProjectEnvContentHint12$ {
    export const inboundSchema: z.ZodType<CreateProjectEnvContentHint12, z.ZodTypeDef, unknown> =
        z.object({
            type: CreateProjectEnvContentHintProjectsResponse201ApplicationJSONResponseBodyCreated112Type$.inboundSchema,
            storeId: z.string(),
        });

    export type Outbound = {
        type: string;
        storeId: string;
    };

    export const outboundSchema: z.ZodType<Outbound, z.ZodTypeDef, CreateProjectEnvContentHint12> =
        z.object({
            type: CreateProjectEnvContentHintProjectsResponse201ApplicationJSONResponseBodyCreated112Type$.outboundSchema,
            storeId: z.string(),
        });
}

/** @internal */
export namespace CreateProjectEnvContentHintProjectsResponse201ApplicationJSONResponseBodyCreated111Type$ {
    export const inboundSchema: z.ZodNativeEnum<
        typeof CreateProjectEnvContentHintProjectsResponse201ApplicationJSONResponseBodyCreated111Type
    > = z.nativeEnum(
        CreateProjectEnvContentHintProjectsResponse201ApplicationJSONResponseBodyCreated111Type
    );
    export const outboundSchema: z.ZodNativeEnum<
        typeof CreateProjectEnvContentHintProjectsResponse201ApplicationJSONResponseBodyCreated111Type
    > = inboundSchema;
}

/** @internal */
export namespace CreateProjectEnvContentHint11$ {
    export const inboundSchema: z.ZodType<CreateProjectEnvContentHint11, z.ZodTypeDef, unknown> =
        z.object({
            type: CreateProjectEnvContentHintProjectsResponse201ApplicationJSONResponseBodyCreated111Type$.inboundSchema,
            storeId: z.string(),
        });

    export type Outbound = {
        type: string;
        storeId: string;
    };

    export const outboundSchema: z.ZodType<Outbound, z.ZodTypeDef, CreateProjectEnvContentHint11> =
        z.object({
            type: CreateProjectEnvContentHintProjectsResponse201ApplicationJSONResponseBodyCreated111Type$.outboundSchema,
            storeId: z.string(),
        });
}

/** @internal */
export namespace CreateProjectEnvContentHintProjectsResponse201ApplicationJSONResponseBodyCreated110Type$ {
    export const inboundSchema: z.ZodNativeEnum<
        typeof CreateProjectEnvContentHintProjectsResponse201ApplicationJSONResponseBodyCreated110Type
    > = z.nativeEnum(
        CreateProjectEnvContentHintProjectsResponse201ApplicationJSONResponseBodyCreated110Type
    );
    export const outboundSchema: z.ZodNativeEnum<
        typeof CreateProjectEnvContentHintProjectsResponse201ApplicationJSONResponseBodyCreated110Type
    > = inboundSchema;
}

/** @internal */
export namespace CreateProjectEnvContentHint10$ {
    export const inboundSchema: z.ZodType<CreateProjectEnvContentHint10, z.ZodTypeDef, unknown> =
        z.object({
            type: CreateProjectEnvContentHintProjectsResponse201ApplicationJSONResponseBodyCreated110Type$.inboundSchema,
            storeId: z.string(),
        });

    export type Outbound = {
        type: string;
        storeId: string;
    };

    export const outboundSchema: z.ZodType<Outbound, z.ZodTypeDef, CreateProjectEnvContentHint10> =
        z.object({
            type: CreateProjectEnvContentHintProjectsResponse201ApplicationJSONResponseBodyCreated110Type$.outboundSchema,
            storeId: z.string(),
        });
}

/** @internal */
export namespace CreateProjectEnvContentHintProjectsResponse201ApplicationJSONResponseBodyCreated19Type$ {
    export const inboundSchema: z.ZodNativeEnum<
        typeof CreateProjectEnvContentHintProjectsResponse201ApplicationJSONResponseBodyCreated19Type
    > = z.nativeEnum(
        CreateProjectEnvContentHintProjectsResponse201ApplicationJSONResponseBodyCreated19Type
    );
    export const outboundSchema: z.ZodNativeEnum<
        typeof CreateProjectEnvContentHintProjectsResponse201ApplicationJSONResponseBodyCreated19Type
    > = inboundSchema;
}

/** @internal */
export namespace CreateProjectEnvContentHint9$ {
    export const inboundSchema: z.ZodType<CreateProjectEnvContentHint9, z.ZodTypeDef, unknown> =
        z.object({
            type: CreateProjectEnvContentHintProjectsResponse201ApplicationJSONResponseBodyCreated19Type$.inboundSchema,
            storeId: z.string(),
        });

    export type Outbound = {
        type: string;
        storeId: string;
    };

    export const outboundSchema: z.ZodType<Outbound, z.ZodTypeDef, CreateProjectEnvContentHint9> =
        z.object({
            type: CreateProjectEnvContentHintProjectsResponse201ApplicationJSONResponseBodyCreated19Type$.outboundSchema,
            storeId: z.string(),
        });
}

/** @internal */
export namespace CreateProjectEnvContentHintProjectsResponse201ApplicationJSONResponseBodyCreated1Type$ {
    export const inboundSchema: z.ZodNativeEnum<
        typeof CreateProjectEnvContentHintProjectsResponse201ApplicationJSONResponseBodyCreated1Type
    > = z.nativeEnum(
        CreateProjectEnvContentHintProjectsResponse201ApplicationJSONResponseBodyCreated1Type
    );
    export const outboundSchema: z.ZodNativeEnum<
        typeof CreateProjectEnvContentHintProjectsResponse201ApplicationJSONResponseBodyCreated1Type
    > = inboundSchema;
}

/** @internal */
export namespace CreateProjectEnvContentHint8$ {
    export const inboundSchema: z.ZodType<CreateProjectEnvContentHint8, z.ZodTypeDef, unknown> =
        z.object({
            type: CreateProjectEnvContentHintProjectsResponse201ApplicationJSONResponseBodyCreated1Type$.inboundSchema,
            storeId: z.string(),
        });

    export type Outbound = {
        type: string;
        storeId: string;
    };

    export const outboundSchema: z.ZodType<Outbound, z.ZodTypeDef, CreateProjectEnvContentHint8> =
        z.object({
            type: CreateProjectEnvContentHintProjectsResponse201ApplicationJSONResponseBodyCreated1Type$.outboundSchema,
            storeId: z.string(),
        });
}

/** @internal */
export namespace CreateProjectEnvContentHintProjectsResponse201ApplicationJSONResponseBodyCreatedType$ {
    export const inboundSchema: z.ZodNativeEnum<
        typeof CreateProjectEnvContentHintProjectsResponse201ApplicationJSONResponseBodyCreatedType
    > = z.nativeEnum(
        CreateProjectEnvContentHintProjectsResponse201ApplicationJSONResponseBodyCreatedType
    );
    export const outboundSchema: z.ZodNativeEnum<
        typeof CreateProjectEnvContentHintProjectsResponse201ApplicationJSONResponseBodyCreatedType
    > = inboundSchema;
}

/** @internal */
export namespace CreateProjectEnvContentHint7$ {
    export const inboundSchema: z.ZodType<CreateProjectEnvContentHint7, z.ZodTypeDef, unknown> =
        z.object({
            type: CreateProjectEnvContentHintProjectsResponse201ApplicationJSONResponseBodyCreatedType$.inboundSchema,
            storeId: z.string(),
        });

    export type Outbound = {
        type: string;
        storeId: string;
    };

    export const outboundSchema: z.ZodType<Outbound, z.ZodTypeDef, CreateProjectEnvContentHint7> =
        z.object({
            type: CreateProjectEnvContentHintProjectsResponse201ApplicationJSONResponseBodyCreatedType$.outboundSchema,
            storeId: z.string(),
        });
}

/** @internal */
export namespace CreateProjectEnvContentHintProjectsResponse201ApplicationJSONResponseBodyType$ {
    export const inboundSchema: z.ZodNativeEnum<
        typeof CreateProjectEnvContentHintProjectsResponse201ApplicationJSONResponseBodyType
    > = z.nativeEnum(CreateProjectEnvContentHintProjectsResponse201ApplicationJSONResponseBodyType);
    export const outboundSchema: z.ZodNativeEnum<
        typeof CreateProjectEnvContentHintProjectsResponse201ApplicationJSONResponseBodyType
    > = inboundSchema;
}

/** @internal */
export namespace CreateProjectEnvContentHint6$ {
    export const inboundSchema: z.ZodType<CreateProjectEnvContentHint6, z.ZodTypeDef, unknown> =
        z.object({
            type: CreateProjectEnvContentHintProjectsResponse201ApplicationJSONResponseBodyType$.inboundSchema,
            storeId: z.string(),
        });

    export type Outbound = {
        type: string;
        storeId: string;
    };

    export const outboundSchema: z.ZodType<Outbound, z.ZodTypeDef, CreateProjectEnvContentHint6> =
        z.object({
            type: CreateProjectEnvContentHintProjectsResponse201ApplicationJSONResponseBodyType$.outboundSchema,
            storeId: z.string(),
        });
}

/** @internal */
export namespace CreateProjectEnvContentHintProjectsResponse201ApplicationJSONType$ {
    export const inboundSchema: z.ZodNativeEnum<
        typeof CreateProjectEnvContentHintProjectsResponse201ApplicationJSONType
    > = z.nativeEnum(CreateProjectEnvContentHintProjectsResponse201ApplicationJSONType);
    export const outboundSchema: z.ZodNativeEnum<
        typeof CreateProjectEnvContentHintProjectsResponse201ApplicationJSONType
    > = inboundSchema;
}

/** @internal */
export namespace CreateProjectEnvContentHint5$ {
    export const inboundSchema: z.ZodType<CreateProjectEnvContentHint5, z.ZodTypeDef, unknown> =
        z.object({
            type: CreateProjectEnvContentHintProjectsResponse201ApplicationJSONType$.inboundSchema,
            storeId: z.string(),
        });

    export type Outbound = {
        type: string;
        storeId: string;
    };

    export const outboundSchema: z.ZodType<Outbound, z.ZodTypeDef, CreateProjectEnvContentHint5> =
        z.object({
            type: CreateProjectEnvContentHintProjectsResponse201ApplicationJSONType$.outboundSchema,
            storeId: z.string(),
        });
}

/** @internal */
export namespace CreateProjectEnvContentHintProjectsResponse201Type$ {
    export const inboundSchema: z.ZodNativeEnum<
        typeof CreateProjectEnvContentHintProjectsResponse201Type
    > = z.nativeEnum(CreateProjectEnvContentHintProjectsResponse201Type);
    export const outboundSchema: z.ZodNativeEnum<
        typeof CreateProjectEnvContentHintProjectsResponse201Type
    > = inboundSchema;
}

/** @internal */
export namespace CreateProjectEnvContentHint4$ {
    export const inboundSchema: z.ZodType<CreateProjectEnvContentHint4, z.ZodTypeDef, unknown> =
        z.object({
            type: CreateProjectEnvContentHintProjectsResponse201Type$.inboundSchema,
            storeId: z.string(),
        });

    export type Outbound = {
        type: string;
        storeId: string;
    };

    export const outboundSchema: z.ZodType<Outbound, z.ZodTypeDef, CreateProjectEnvContentHint4> =
        z.object({
            type: CreateProjectEnvContentHintProjectsResponse201Type$.outboundSchema,
            storeId: z.string(),
        });
}

/** @internal */
export namespace CreateProjectEnvContentHintProjectsResponseType$ {
    export const inboundSchema: z.ZodNativeEnum<
        typeof CreateProjectEnvContentHintProjectsResponseType
    > = z.nativeEnum(CreateProjectEnvContentHintProjectsResponseType);
    export const outboundSchema: z.ZodNativeEnum<
        typeof CreateProjectEnvContentHintProjectsResponseType
    > = inboundSchema;
}

/** @internal */
export namespace CreateProjectEnvContentHint3$ {
    export const inboundSchema: z.ZodType<CreateProjectEnvContentHint3, z.ZodTypeDef, unknown> =
        z.object({
            type: CreateProjectEnvContentHintProjectsResponseType$.inboundSchema,
            storeId: z.string(),
        });

    export type Outbound = {
        type: string;
        storeId: string;
    };

    export const outboundSchema: z.ZodType<Outbound, z.ZodTypeDef, CreateProjectEnvContentHint3> =
        z.object({
            type: CreateProjectEnvContentHintProjectsResponseType$.outboundSchema,
            storeId: z.string(),
        });
}

/** @internal */
export namespace CreateProjectEnvContentHintProjectsType$ {
    export const inboundSchema: z.ZodNativeEnum<typeof CreateProjectEnvContentHintProjectsType> =
        z.nativeEnum(CreateProjectEnvContentHintProjectsType);
    export const outboundSchema: z.ZodNativeEnum<typeof CreateProjectEnvContentHintProjectsType> =
        inboundSchema;
}

/** @internal */
export namespace CreateProjectEnvContentHint2$ {
    export const inboundSchema: z.ZodType<CreateProjectEnvContentHint2, z.ZodTypeDef, unknown> =
        z.object({
            type: CreateProjectEnvContentHintProjectsType$.inboundSchema,
            storeId: z.string(),
        });

    export type Outbound = {
        type: string;
        storeId: string;
    };

    export const outboundSchema: z.ZodType<Outbound, z.ZodTypeDef, CreateProjectEnvContentHint2> =
        z.object({
            type: CreateProjectEnvContentHintProjectsType$.outboundSchema,
            storeId: z.string(),
        });
}

/** @internal */
export namespace CreateProjectEnvContentHintType$ {
    export const inboundSchema: z.ZodNativeEnum<typeof CreateProjectEnvContentHintType> =
        z.nativeEnum(CreateProjectEnvContentHintType);
    export const outboundSchema: z.ZodNativeEnum<typeof CreateProjectEnvContentHintType> =
        inboundSchema;
}

/** @internal */
export namespace CreateProjectEnvContentHint1$ {
    export const inboundSchema: z.ZodType<CreateProjectEnvContentHint1, z.ZodTypeDef, unknown> =
        z.object({
            type: CreateProjectEnvContentHintType$.inboundSchema,
            storeId: z.string(),
        });

    export type Outbound = {
        type: string;
        storeId: string;
    };

    export const outboundSchema: z.ZodType<Outbound, z.ZodTypeDef, CreateProjectEnvContentHint1> =
        z.object({
            type: CreateProjectEnvContentHintType$.outboundSchema,
            storeId: z.string(),
        });
}

/** @internal */
export namespace CreatedContentHint$ {
    export const inboundSchema: z.ZodType<CreatedContentHint, z.ZodTypeDef, unknown> = z.union([
        z.lazy(() => CreateProjectEnvContentHint1$.inboundSchema),
        z.lazy(() => CreateProjectEnvContentHint2$.inboundSchema),
        z.lazy(() => CreateProjectEnvContentHint3$.inboundSchema),
        z.lazy(() => CreateProjectEnvContentHint4$.inboundSchema),
        z.lazy(() => CreateProjectEnvContentHint5$.inboundSchema),
        z.lazy(() => CreateProjectEnvContentHint6$.inboundSchema),
        z.lazy(() => CreateProjectEnvContentHint7$.inboundSchema),
        z.lazy(() => CreateProjectEnvContentHint8$.inboundSchema),
        z.lazy(() => CreateProjectEnvContentHint9$.inboundSchema),
        z.lazy(() => CreateProjectEnvContentHint10$.inboundSchema),
        z.lazy(() => CreateProjectEnvContentHint11$.inboundSchema),
        z.lazy(() => CreateProjectEnvContentHint12$.inboundSchema),
        z.lazy(() => CreateProjectEnvContentHint13$.inboundSchema),
        z.lazy(() => CreateProjectEnvContentHint14$.inboundSchema),
    ]);

    export type Outbound =
        | CreateProjectEnvContentHint1$.Outbound
        | CreateProjectEnvContentHint2$.Outbound
        | CreateProjectEnvContentHint3$.Outbound
        | CreateProjectEnvContentHint4$.Outbound
        | CreateProjectEnvContentHint5$.Outbound
        | CreateProjectEnvContentHint6$.Outbound
        | CreateProjectEnvContentHint7$.Outbound
        | CreateProjectEnvContentHint8$.Outbound
        | CreateProjectEnvContentHint9$.Outbound
        | CreateProjectEnvContentHint10$.Outbound
        | CreateProjectEnvContentHint11$.Outbound
        | CreateProjectEnvContentHint12$.Outbound
        | CreateProjectEnvContentHint13$.Outbound
        | CreateProjectEnvContentHint14$.Outbound;
    export const outboundSchema: z.ZodType<Outbound, z.ZodTypeDef, CreatedContentHint> = z.union([
        z.lazy(() => CreateProjectEnvContentHint1$.outboundSchema),
        z.lazy(() => CreateProjectEnvContentHint2$.outboundSchema),
        z.lazy(() => CreateProjectEnvContentHint3$.outboundSchema),
        z.lazy(() => CreateProjectEnvContentHint4$.outboundSchema),
        z.lazy(() => CreateProjectEnvContentHint5$.outboundSchema),
        z.lazy(() => CreateProjectEnvContentHint6$.outboundSchema),
        z.lazy(() => CreateProjectEnvContentHint7$.outboundSchema),
        z.lazy(() => CreateProjectEnvContentHint8$.outboundSchema),
        z.lazy(() => CreateProjectEnvContentHint9$.outboundSchema),
        z.lazy(() => CreateProjectEnvContentHint10$.outboundSchema),
        z.lazy(() => CreateProjectEnvContentHint11$.outboundSchema),
        z.lazy(() => CreateProjectEnvContentHint12$.outboundSchema),
        z.lazy(() => CreateProjectEnvContentHint13$.outboundSchema),
        z.lazy(() => CreateProjectEnvContentHint14$.outboundSchema),
    ]);
}

/** @internal */
export namespace CreateProjectEnvCreatedProjectsType$ {
    export const inboundSchema: z.ZodNativeEnum<typeof CreateProjectEnvCreatedProjectsType> =
        z.nativeEnum(CreateProjectEnvCreatedProjectsType);
    export const outboundSchema: z.ZodNativeEnum<typeof CreateProjectEnvCreatedProjectsType> =
        inboundSchema;
}

/** @internal */
export namespace CreatedInternalContentHint$ {
    export const inboundSchema: z.ZodType<CreatedInternalContentHint, z.ZodTypeDef, unknown> =
        z.object({
            type: CreateProjectEnvCreatedProjectsType$.inboundSchema,
            encryptedValue: z.string(),
        });

    export type Outbound = {
        type: string;
        encryptedValue: string;
    };

    export const outboundSchema: z.ZodType<Outbound, z.ZodTypeDef, CreatedInternalContentHint> =
        z.object({
            type: CreateProjectEnvCreatedProjectsType$.outboundSchema,
            encryptedValue: z.string(),
        });
}

/** @internal */
export namespace Created1$ {
    export const inboundSchema: z.ZodType<Created1, z.ZodTypeDef, unknown> = z.object({
        target: z
            .union([
                z.array(CreateProjectEnvTarget1$.inboundSchema),
                CreateProjectEnvTarget2$.inboundSchema,
            ])
            .optional(),
        type: CreatedType$.inboundSchema.optional(),
        id: z.string().optional(),
        key: z.string().optional(),
        value: z.string().optional(),
        configurationId: z.nullable(z.string()).optional(),
        createdAt: z.number().optional(),
        updatedAt: z.number().optional(),
        createdBy: z.nullable(z.string()).optional(),
        updatedBy: z.nullable(z.string()).optional(),
        gitBranch: z.string().optional(),
        edgeConfigId: z.nullable(z.string()).optional(),
        edgeConfigTokenId: z.nullable(z.string()).optional(),
        contentHint: z
            .nullable(
                z.union([
                    z.lazy(() => CreateProjectEnvContentHint1$.inboundSchema),
                    z.lazy(() => CreateProjectEnvContentHint2$.inboundSchema),
                    z.lazy(() => CreateProjectEnvContentHint3$.inboundSchema),
                    z.lazy(() => CreateProjectEnvContentHint4$.inboundSchema),
                    z.lazy(() => CreateProjectEnvContentHint5$.inboundSchema),
                    z.lazy(() => CreateProjectEnvContentHint6$.inboundSchema),
                    z.lazy(() => CreateProjectEnvContentHint7$.inboundSchema),
                    z.lazy(() => CreateProjectEnvContentHint8$.inboundSchema),
                    z.lazy(() => CreateProjectEnvContentHint9$.inboundSchema),
                    z.lazy(() => CreateProjectEnvContentHint10$.inboundSchema),
                    z.lazy(() => CreateProjectEnvContentHint11$.inboundSchema),
                    z.lazy(() => CreateProjectEnvContentHint12$.inboundSchema),
                    z.lazy(() => CreateProjectEnvContentHint13$.inboundSchema),
                    z.lazy(() => CreateProjectEnvContentHint14$.inboundSchema),
                ])
            )
            .optional(),
        internalContentHint: z
            .nullable(z.lazy(() => CreatedInternalContentHint$.inboundSchema))
            .optional(),
        decrypted: z.boolean().optional(),
        comment: z.string().optional(),
        customEnvironmentId: z.string().optional(),
        system: z.boolean().optional(),
    });

    export type Outbound = {
        target?: Array<string> | string | undefined;
        type?: string | undefined;
        id?: string | undefined;
        key?: string | undefined;
        value?: string | undefined;
        configurationId?: string | null | undefined;
        createdAt?: number | undefined;
        updatedAt?: number | undefined;
        createdBy?: string | null | undefined;
        updatedBy?: string | null | undefined;
        gitBranch?: string | undefined;
        edgeConfigId?: string | null | undefined;
        edgeConfigTokenId?: string | null | undefined;
        contentHint?:
            | CreateProjectEnvContentHint1$.Outbound
            | CreateProjectEnvContentHint2$.Outbound
            | CreateProjectEnvContentHint3$.Outbound
            | CreateProjectEnvContentHint4$.Outbound
            | CreateProjectEnvContentHint5$.Outbound
            | CreateProjectEnvContentHint6$.Outbound
            | CreateProjectEnvContentHint7$.Outbound
            | CreateProjectEnvContentHint8$.Outbound
            | CreateProjectEnvContentHint9$.Outbound
            | CreateProjectEnvContentHint10$.Outbound
            | CreateProjectEnvContentHint11$.Outbound
            | CreateProjectEnvContentHint12$.Outbound
            | CreateProjectEnvContentHint13$.Outbound
            | CreateProjectEnvContentHint14$.Outbound
            | null
            | undefined;
        internalContentHint?: CreatedInternalContentHint$.Outbound | null | undefined;
        decrypted?: boolean | undefined;
        comment?: string | undefined;
        customEnvironmentId?: string | undefined;
        system?: boolean | undefined;
    };

    export const outboundSchema: z.ZodType<Outbound, z.ZodTypeDef, Created1> = z.object({
        target: z
            .union([
                z.array(CreateProjectEnvTarget1$.outboundSchema),
                CreateProjectEnvTarget2$.outboundSchema,
            ])
            .optional(),
        type: CreatedType$.outboundSchema.optional(),
        id: z.string().optional(),
        key: z.string().optional(),
        value: z.string().optional(),
        configurationId: z.nullable(z.string()).optional(),
        createdAt: z.number().optional(),
        updatedAt: z.number().optional(),
        createdBy: z.nullable(z.string()).optional(),
        updatedBy: z.nullable(z.string()).optional(),
        gitBranch: z.string().optional(),
        edgeConfigId: z.nullable(z.string()).optional(),
        edgeConfigTokenId: z.nullable(z.string()).optional(),
        contentHint: z
            .nullable(
                z.union([
                    z.lazy(() => CreateProjectEnvContentHint1$.outboundSchema),
                    z.lazy(() => CreateProjectEnvContentHint2$.outboundSchema),
                    z.lazy(() => CreateProjectEnvContentHint3$.outboundSchema),
                    z.lazy(() => CreateProjectEnvContentHint4$.outboundSchema),
                    z.lazy(() => CreateProjectEnvContentHint5$.outboundSchema),
                    z.lazy(() => CreateProjectEnvContentHint6$.outboundSchema),
                    z.lazy(() => CreateProjectEnvContentHint7$.outboundSchema),
                    z.lazy(() => CreateProjectEnvContentHint8$.outboundSchema),
                    z.lazy(() => CreateProjectEnvContentHint9$.outboundSchema),
                    z.lazy(() => CreateProjectEnvContentHint10$.outboundSchema),
                    z.lazy(() => CreateProjectEnvContentHint11$.outboundSchema),
                    z.lazy(() => CreateProjectEnvContentHint12$.outboundSchema),
                    z.lazy(() => CreateProjectEnvContentHint13$.outboundSchema),
                    z.lazy(() => CreateProjectEnvContentHint14$.outboundSchema),
                ])
            )
            .optional(),
        internalContentHint: z
            .nullable(z.lazy(() => CreatedInternalContentHint$.outboundSchema))
            .optional(),
        decrypted: z.boolean().optional(),
        comment: z.string().optional(),
        customEnvironmentId: z.string().optional(),
        system: z.boolean().optional(),
    });
}

/** @internal */
export namespace Created$ {
    export const inboundSchema: z.ZodType<Created, z.ZodTypeDef, unknown> = z.union([
        z.lazy(() => Created1$.inboundSchema),
        z.array(z.lazy(() => Created2$.inboundSchema)),
    ]);

    export type Outbound = Created1$.Outbound | Array<Created2$.Outbound>;
    export const outboundSchema: z.ZodType<Outbound, z.ZodTypeDef, Created> = z.union([
        z.lazy(() => Created1$.outboundSchema),
        z.array(z.lazy(() => Created2$.outboundSchema)),
    ]);
}

/** @internal */
export namespace Value2$ {
    export const inboundSchema: z.ZodNativeEnum<typeof Value2> = z.nativeEnum(Value2);
    export const outboundSchema: z.ZodNativeEnum<typeof Value2> = inboundSchema;
}

/** @internal */
export namespace CreateProjectEnvValue$ {
    export const inboundSchema: z.ZodType<CreateProjectEnvValue, z.ZodTypeDef, unknown> = z.union([
        z.string(),
        z.array(Value2$.inboundSchema),
    ]);

    export type Outbound = string | Array<string>;
    export const outboundSchema: z.ZodType<Outbound, z.ZodTypeDef, CreateProjectEnvValue> = z.union(
        [z.string(), z.array(Value2$.outboundSchema)]
    );
}

/** @internal */
export namespace CreateProjectEnvTargetProjectsResponse2$ {
    export const inboundSchema: z.ZodNativeEnum<typeof CreateProjectEnvTargetProjectsResponse2> =
        z.nativeEnum(CreateProjectEnvTargetProjectsResponse2);
    export const outboundSchema: z.ZodNativeEnum<typeof CreateProjectEnvTargetProjectsResponse2> =
        inboundSchema;
}

/** @internal */
export namespace CreateProjectEnvTargetProjectsResponse1$ {
    export const inboundSchema: z.ZodNativeEnum<typeof CreateProjectEnvTargetProjectsResponse1> =
        z.nativeEnum(CreateProjectEnvTargetProjectsResponse1);
    export const outboundSchema: z.ZodNativeEnum<typeof CreateProjectEnvTargetProjectsResponse1> =
        inboundSchema;
}

/** @internal */
export namespace CreateProjectEnvTarget$ {
    export const inboundSchema: z.ZodType<CreateProjectEnvTarget, z.ZodTypeDef, unknown> = z.union([
        z.array(CreateProjectEnvTargetProjectsResponse1$.inboundSchema),
        CreateProjectEnvTargetProjectsResponse2$.inboundSchema,
    ]);

    export type Outbound = Array<string> | string;
    export const outboundSchema: z.ZodType<Outbound, z.ZodTypeDef, CreateProjectEnvTarget> =
        z.union([
            z.array(CreateProjectEnvTargetProjectsResponse1$.outboundSchema),
            CreateProjectEnvTargetProjectsResponse2$.outboundSchema,
        ]);
}

/** @internal */
export namespace CreateProjectEnvError$ {
    export const inboundSchema: z.ZodType<CreateProjectEnvError, z.ZodTypeDef, unknown> = z.object({
        code: z.string(),
        message: z.string(),
        key: z.string().optional(),
        envVarId: z.string().optional(),
        envVarKey: z.string().optional(),
        action: z.string().optional(),
        link: z.string().optional(),
        value: z.union([z.string(), z.array(Value2$.inboundSchema)]).optional(),
        gitBranch: z.string().optional(),
        target: z
            .union([
                z.array(CreateProjectEnvTargetProjectsResponse1$.inboundSchema),
                CreateProjectEnvTargetProjectsResponse2$.inboundSchema,
            ])
            .optional(),
        project: z.string().optional(),
    });

    export type Outbound = {
        code: string;
        message: string;
        key?: string | undefined;
        envVarId?: string | undefined;
        envVarKey?: string | undefined;
        action?: string | undefined;
        link?: string | undefined;
        value?: string | Array<string> | undefined;
        gitBranch?: string | undefined;
        target?: Array<string> | string | undefined;
        project?: string | undefined;
    };

    export const outboundSchema: z.ZodType<Outbound, z.ZodTypeDef, CreateProjectEnvError> =
        z.object({
            code: z.string(),
            message: z.string(),
            key: z.string().optional(),
            envVarId: z.string().optional(),
            envVarKey: z.string().optional(),
            action: z.string().optional(),
            link: z.string().optional(),
            value: z.union([z.string(), z.array(Value2$.outboundSchema)]).optional(),
            gitBranch: z.string().optional(),
            target: z
                .union([
                    z.array(CreateProjectEnvTargetProjectsResponse1$.outboundSchema),
                    CreateProjectEnvTargetProjectsResponse2$.outboundSchema,
                ])
                .optional(),
            project: z.string().optional(),
        });
}

/** @internal */
export namespace Failed$ {
    export const inboundSchema: z.ZodType<Failed, z.ZodTypeDef, unknown> = z.object({
        error: z.lazy(() => CreateProjectEnvError$.inboundSchema),
    });

    export type Outbound = {
        error: CreateProjectEnvError$.Outbound;
    };

    export const outboundSchema: z.ZodType<Outbound, z.ZodTypeDef, Failed> = z.object({
        error: z.lazy(() => CreateProjectEnvError$.outboundSchema),
    });
}

/** @internal */
export namespace CreateProjectEnvResponseBody$ {
    export const inboundSchema: z.ZodType<CreateProjectEnvResponseBody, z.ZodTypeDef, unknown> =
        z.object({
            created: z.union([
                z.lazy(() => Created1$.inboundSchema),
                z.array(z.lazy(() => Created2$.inboundSchema)),
            ]),
            failed: z.array(z.lazy(() => Failed$.inboundSchema)),
        });

    export type Outbound = {
        created: Created1$.Outbound | Array<Created2$.Outbound>;
        failed: Array<Failed$.Outbound>;
    };

    export const outboundSchema: z.ZodType<Outbound, z.ZodTypeDef, CreateProjectEnvResponseBody> =
        z.object({
            created: z.union([
                z.lazy(() => Created1$.outboundSchema),
                z.array(z.lazy(() => Created2$.outboundSchema)),
            ]),
            failed: z.array(z.lazy(() => Failed$.outboundSchema)),
        });
}
