/*
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

import * as z from "zod";

/**
 * move-out
 */
export type PatchDomainRequestBody2 = {
    op?: string | undefined;
    /**
     * User or team to move domain to
     */
    destination?: string | undefined;
};

/**
 * update
 */
export type PatchDomainRequestBody1 = {
    op?: string | undefined;
    /**
     * Specifies whether domain should be renewed.
     */
    renew?: boolean | undefined;
    /**
     * The custom nameservers for this project.
     */
    customNameservers?: Array<string> | undefined;
    /**
     * Specifies whether this is a DNS zone that intends to use Vercel's nameservers.
     */
    zone?: boolean | undefined;
};

export type PatchDomainRequestBody = PatchDomainRequestBody2 | PatchDomainRequestBody1;

export type PatchDomainRequest = {
    domain: string;
    /**
     * The Team identifier to perform the request on behalf of.
     */
    teamId?: string | undefined;
    /**
     * The Team slug to perform the request on behalf of.
     */
    slug?: string | undefined;
    requestBody?: PatchDomainRequestBody2 | PatchDomainRequestBody1 | undefined;
};

export type PatchDomainResponseBody3 = {
    renew?: boolean | undefined;
    customNameservers?: Array<string> | undefined;
    zone?: boolean | undefined;
};

export type PatchDomainResponseBody2 = {
    moved: boolean;
    token: string;
};

export type PatchDomainResponseBody1 = {
    moved: boolean;
};

export type PatchDomainResponseBody =
    | PatchDomainResponseBody1
    | PatchDomainResponseBody2
    | PatchDomainResponseBody3;

/** @internal */
export namespace PatchDomainRequestBody2$ {
    export const inboundSchema: z.ZodType<PatchDomainRequestBody2, z.ZodTypeDef, unknown> = z
        .object({
            op: z.string().optional(),
            destination: z.string().optional(),
        })
        .transform((v) => {
            return {
                ...(v.op === undefined ? null : { op: v.op }),
                ...(v.destination === undefined ? null : { destination: v.destination }),
            };
        });

    export type Outbound = {
        op?: string | undefined;
        destination?: string | undefined;
    };

    export const outboundSchema: z.ZodType<Outbound, z.ZodTypeDef, PatchDomainRequestBody2> = z
        .object({
            op: z.string().optional(),
            destination: z.string().optional(),
        })
        .transform((v) => {
            return {
                ...(v.op === undefined ? null : { op: v.op }),
                ...(v.destination === undefined ? null : { destination: v.destination }),
            };
        });
}

/** @internal */
export namespace PatchDomainRequestBody1$ {
    export const inboundSchema: z.ZodType<PatchDomainRequestBody1, z.ZodTypeDef, unknown> = z
        .object({
            op: z.string().optional(),
            renew: z.boolean().optional(),
            customNameservers: z.array(z.string()).optional(),
            zone: z.boolean().optional(),
        })
        .transform((v) => {
            return {
                ...(v.op === undefined ? null : { op: v.op }),
                ...(v.renew === undefined ? null : { renew: v.renew }),
                ...(v.customNameservers === undefined
                    ? null
                    : { customNameservers: v.customNameservers }),
                ...(v.zone === undefined ? null : { zone: v.zone }),
            };
        });

    export type Outbound = {
        op?: string | undefined;
        renew?: boolean | undefined;
        customNameservers?: Array<string> | undefined;
        zone?: boolean | undefined;
    };

    export const outboundSchema: z.ZodType<Outbound, z.ZodTypeDef, PatchDomainRequestBody1> = z
        .object({
            op: z.string().optional(),
            renew: z.boolean().optional(),
            customNameservers: z.array(z.string()).optional(),
            zone: z.boolean().optional(),
        })
        .transform((v) => {
            return {
                ...(v.op === undefined ? null : { op: v.op }),
                ...(v.renew === undefined ? null : { renew: v.renew }),
                ...(v.customNameservers === undefined
                    ? null
                    : { customNameservers: v.customNameservers }),
                ...(v.zone === undefined ? null : { zone: v.zone }),
            };
        });
}

/** @internal */
export namespace PatchDomainRequestBody$ {
    export const inboundSchema: z.ZodType<PatchDomainRequestBody, z.ZodTypeDef, unknown> = z.union([
        z.lazy(() => PatchDomainRequestBody2$.inboundSchema),
        z.lazy(() => PatchDomainRequestBody1$.inboundSchema),
    ]);

    export type Outbound = PatchDomainRequestBody2$.Outbound | PatchDomainRequestBody1$.Outbound;
    export const outboundSchema: z.ZodType<Outbound, z.ZodTypeDef, PatchDomainRequestBody> =
        z.union([
            z.lazy(() => PatchDomainRequestBody2$.outboundSchema),
            z.lazy(() => PatchDomainRequestBody1$.outboundSchema),
        ]);
}

/** @internal */
export namespace PatchDomainRequest$ {
    export const inboundSchema: z.ZodType<PatchDomainRequest, z.ZodTypeDef, unknown> = z
        .object({
            domain: z.string(),
            teamId: z.string().optional(),
            slug: z.string().optional(),
            RequestBody: z
                .union([
                    z.lazy(() => PatchDomainRequestBody2$.inboundSchema),
                    z.lazy(() => PatchDomainRequestBody1$.inboundSchema),
                ])
                .optional(),
        })
        .transform((v) => {
            return {
                domain: v.domain,
                ...(v.teamId === undefined ? null : { teamId: v.teamId }),
                ...(v.slug === undefined ? null : { slug: v.slug }),
                ...(v.RequestBody === undefined ? null : { requestBody: v.RequestBody }),
            };
        });

    export type Outbound = {
        domain: string;
        teamId?: string | undefined;
        slug?: string | undefined;
        RequestBody?:
            | PatchDomainRequestBody2$.Outbound
            | PatchDomainRequestBody1$.Outbound
            | undefined;
    };

    export const outboundSchema: z.ZodType<Outbound, z.ZodTypeDef, PatchDomainRequest> = z
        .object({
            domain: z.string(),
            teamId: z.string().optional(),
            slug: z.string().optional(),
            requestBody: z
                .union([
                    z.lazy(() => PatchDomainRequestBody2$.outboundSchema),
                    z.lazy(() => PatchDomainRequestBody1$.outboundSchema),
                ])
                .optional(),
        })
        .transform((v) => {
            return {
                domain: v.domain,
                ...(v.teamId === undefined ? null : { teamId: v.teamId }),
                ...(v.slug === undefined ? null : { slug: v.slug }),
                ...(v.requestBody === undefined ? null : { RequestBody: v.requestBody }),
            };
        });
}

/** @internal */
export namespace PatchDomainResponseBody3$ {
    export const inboundSchema: z.ZodType<PatchDomainResponseBody3, z.ZodTypeDef, unknown> = z
        .object({
            renew: z.boolean().optional(),
            customNameservers: z.array(z.string()).optional(),
            zone: z.boolean().optional(),
        })
        .transform((v) => {
            return {
                ...(v.renew === undefined ? null : { renew: v.renew }),
                ...(v.customNameservers === undefined
                    ? null
                    : { customNameservers: v.customNameservers }),
                ...(v.zone === undefined ? null : { zone: v.zone }),
            };
        });

    export type Outbound = {
        renew?: boolean | undefined;
        customNameservers?: Array<string> | undefined;
        zone?: boolean | undefined;
    };

    export const outboundSchema: z.ZodType<Outbound, z.ZodTypeDef, PatchDomainResponseBody3> = z
        .object({
            renew: z.boolean().optional(),
            customNameservers: z.array(z.string()).optional(),
            zone: z.boolean().optional(),
        })
        .transform((v) => {
            return {
                ...(v.renew === undefined ? null : { renew: v.renew }),
                ...(v.customNameservers === undefined
                    ? null
                    : { customNameservers: v.customNameservers }),
                ...(v.zone === undefined ? null : { zone: v.zone }),
            };
        });
}

/** @internal */
export namespace PatchDomainResponseBody2$ {
    export const inboundSchema: z.ZodType<PatchDomainResponseBody2, z.ZodTypeDef, unknown> = z
        .object({
            moved: z.boolean(),
            token: z.string(),
        })
        .transform((v) => {
            return {
                moved: v.moved,
                token: v.token,
            };
        });

    export type Outbound = {
        moved: boolean;
        token: string;
    };

    export const outboundSchema: z.ZodType<Outbound, z.ZodTypeDef, PatchDomainResponseBody2> = z
        .object({
            moved: z.boolean(),
            token: z.string(),
        })
        .transform((v) => {
            return {
                moved: v.moved,
                token: v.token,
            };
        });
}

/** @internal */
export namespace PatchDomainResponseBody1$ {
    export const inboundSchema: z.ZodType<PatchDomainResponseBody1, z.ZodTypeDef, unknown> = z
        .object({
            moved: z.boolean(),
        })
        .transform((v) => {
            return {
                moved: v.moved,
            };
        });

    export type Outbound = {
        moved: boolean;
    };

    export const outboundSchema: z.ZodType<Outbound, z.ZodTypeDef, PatchDomainResponseBody1> = z
        .object({
            moved: z.boolean(),
        })
        .transform((v) => {
            return {
                moved: v.moved,
            };
        });
}

/** @internal */
export namespace PatchDomainResponseBody$ {
    export const inboundSchema: z.ZodType<PatchDomainResponseBody, z.ZodTypeDef, unknown> = z.union(
        [
            z.lazy(() => PatchDomainResponseBody1$.inboundSchema),
            z.lazy(() => PatchDomainResponseBody2$.inboundSchema),
            z.lazy(() => PatchDomainResponseBody3$.inboundSchema),
        ]
    );

    export type Outbound =
        | PatchDomainResponseBody1$.Outbound
        | PatchDomainResponseBody2$.Outbound
        | PatchDomainResponseBody3$.Outbound;
    export const outboundSchema: z.ZodType<Outbound, z.ZodTypeDef, PatchDomainResponseBody> =
        z.union([
            z.lazy(() => PatchDomainResponseBody1$.outboundSchema),
            z.lazy(() => PatchDomainResponseBody2$.outboundSchema),
            z.lazy(() => PatchDomainResponseBody3$.outboundSchema),
        ]);
}
