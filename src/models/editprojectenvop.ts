/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import { remap as remap$ } from "../lib/primitives.js";
import { ClosedEnum } from "../types/enums.js";
import * as z from "zod";

export const EditProjectEnvTarget = {
    Production: "production",
    Preview: "preview",
    Development: "development",
} as const;
export type EditProjectEnvTarget = ClosedEnum<typeof EditProjectEnvTarget>;

/**
 * The type of environment variable
 */
export const EditProjectEnvType = {
    System: "system",
    Secret: "secret",
    Encrypted: "encrypted",
    Plain: "plain",
    Sensitive: "sensitive",
} as const;
/**
 * The type of environment variable
 */
export type EditProjectEnvType = ClosedEnum<typeof EditProjectEnvType>;

export type EditProjectEnvRequestBody = {
    /**
     * The name of the environment variable
     */
    key?: string | undefined;
    /**
     * The target environment of the environment variable
     */
    target?: Array<EditProjectEnvTarget> | undefined;
    /**
     * If defined, the git branch of the environment variable (must have target=preview)
     */
    gitBranch?: string | null | undefined;
    /**
     * The type of environment variable
     */
    type?: EditProjectEnvType | undefined;
    /**
     * The value of the environment variable
     */
    value?: string | undefined;
    customEnvironmentId?: string | undefined;
    /**
     * A comment to add context on what this env var is for
     */
    comment?: string | undefined;
};

export type EditProjectEnvRequest = {
    /**
     * The unique project identifier or the project name
     */
    idOrName: string;
    /**
     * The unique environment variable identifier
     */
    id: string;
    /**
     * The Team identifier to perform the request on behalf of.
     */
    teamId?: string | undefined;
    /**
     * The Team slug to perform the request on behalf of.
     */
    slug?: string | undefined;
    requestBody?: EditProjectEnvRequestBody | undefined;
};

export const EditProjectEnvTarget2 = {
    Production: "production",
    Preview: "preview",
    Development: "development",
} as const;
export type EditProjectEnvTarget2 = ClosedEnum<typeof EditProjectEnvTarget2>;

export const EditProjectEnvTarget1 = {
    Production: "production",
    Preview: "preview",
    Development: "development",
} as const;
export type EditProjectEnvTarget1 = ClosedEnum<typeof EditProjectEnvTarget1>;

export type EditProjectEnvProjectsTarget = Array<EditProjectEnvTarget1> | EditProjectEnvTarget2;

export const EditProjectEnvProjectsType = {
    System: "system",
    Encrypted: "encrypted",
    Plain: "plain",
    Sensitive: "sensitive",
    Secret: "secret",
} as const;
export type EditProjectEnvProjectsType = ClosedEnum<typeof EditProjectEnvProjectsType>;

export const EditProjectEnvContentHintProjectsResponse200ApplicationJSONResponseBody14Type = {
    IntegrationStoreSecret: "integration-store-secret",
} as const;
export type EditProjectEnvContentHintProjectsResponse200ApplicationJSONResponseBody14Type =
    ClosedEnum<
        typeof EditProjectEnvContentHintProjectsResponse200ApplicationJSONResponseBody14Type
    >;

export type Fourteen = {
    type: EditProjectEnvContentHintProjectsResponse200ApplicationJSONResponseBody14Type;
    storeId: string;
};

export const EditProjectEnvContentHintProjectsResponse200ApplicationJSONResponseBody13Type = {
    PostgresUrlNoSsl: "postgres-url-no-ssl",
} as const;
export type EditProjectEnvContentHintProjectsResponse200ApplicationJSONResponseBody13Type =
    ClosedEnum<
        typeof EditProjectEnvContentHintProjectsResponse200ApplicationJSONResponseBody13Type
    >;

export type Thirteen = {
    type: EditProjectEnvContentHintProjectsResponse200ApplicationJSONResponseBody13Type;
    storeId: string;
};

export const EditProjectEnvContentHintProjectsResponse200ApplicationJSONResponseBody12Type = {
    PostgresDatabase: "postgres-database",
} as const;
export type EditProjectEnvContentHintProjectsResponse200ApplicationJSONResponseBody12Type =
    ClosedEnum<
        typeof EditProjectEnvContentHintProjectsResponse200ApplicationJSONResponseBody12Type
    >;

export type Twelve = {
    type: EditProjectEnvContentHintProjectsResponse200ApplicationJSONResponseBody12Type;
    storeId: string;
};

export const EditProjectEnvContentHintProjectsResponse200ApplicationJSONResponseBody11Type = {
    PostgresPassword: "postgres-password",
} as const;
export type EditProjectEnvContentHintProjectsResponse200ApplicationJSONResponseBody11Type =
    ClosedEnum<
        typeof EditProjectEnvContentHintProjectsResponse200ApplicationJSONResponseBody11Type
    >;

export type Eleven = {
    type: EditProjectEnvContentHintProjectsResponse200ApplicationJSONResponseBody11Type;
    storeId: string;
};

export const EditProjectEnvContentHintProjectsResponse200ApplicationJSONResponseBody10Type = {
    PostgresHost: "postgres-host",
} as const;
export type EditProjectEnvContentHintProjectsResponse200ApplicationJSONResponseBody10Type =
    ClosedEnum<
        typeof EditProjectEnvContentHintProjectsResponse200ApplicationJSONResponseBody10Type
    >;

export type ContentHint10 = {
    type: EditProjectEnvContentHintProjectsResponse200ApplicationJSONResponseBody10Type;
    storeId: string;
};

export const EditProjectEnvContentHintProjectsResponse200ApplicationJSONResponseBody9Type = {
    PostgresUser: "postgres-user",
} as const;
export type EditProjectEnvContentHintProjectsResponse200ApplicationJSONResponseBody9Type =
    ClosedEnum<typeof EditProjectEnvContentHintProjectsResponse200ApplicationJSONResponseBody9Type>;

export type ContentHint9 = {
    type: EditProjectEnvContentHintProjectsResponse200ApplicationJSONResponseBody9Type;
    storeId: string;
};

export const EditProjectEnvContentHintProjectsResponse200ApplicationJSONResponseBody8Type = {
    PostgresPrismaUrl: "postgres-prisma-url",
} as const;
export type EditProjectEnvContentHintProjectsResponse200ApplicationJSONResponseBody8Type =
    ClosedEnum<typeof EditProjectEnvContentHintProjectsResponse200ApplicationJSONResponseBody8Type>;

export type ContentHint8 = {
    type: EditProjectEnvContentHintProjectsResponse200ApplicationJSONResponseBody8Type;
    storeId: string;
};

export const EditProjectEnvContentHintProjectsResponse200ApplicationJSONResponseBodyType = {
    PostgresUrlNonPooling: "postgres-url-non-pooling",
} as const;
export type EditProjectEnvContentHintProjectsResponse200ApplicationJSONResponseBodyType =
    ClosedEnum<typeof EditProjectEnvContentHintProjectsResponse200ApplicationJSONResponseBodyType>;

export type ContentHint7 = {
    type: EditProjectEnvContentHintProjectsResponse200ApplicationJSONResponseBodyType;
    storeId: string;
};

export const EditProjectEnvContentHintProjectsResponse200ApplicationJSONType = {
    PostgresUrl: "postgres-url",
} as const;
export type EditProjectEnvContentHintProjectsResponse200ApplicationJSONType = ClosedEnum<
    typeof EditProjectEnvContentHintProjectsResponse200ApplicationJSONType
>;

export type ContentHint6 = {
    type: EditProjectEnvContentHintProjectsResponse200ApplicationJSONType;
    storeId: string;
};

export const EditProjectEnvContentHintProjectsResponse200Type = {
    BlobReadWriteToken: "blob-read-write-token",
} as const;
export type EditProjectEnvContentHintProjectsResponse200Type = ClosedEnum<
    typeof EditProjectEnvContentHintProjectsResponse200Type
>;

export type ContentHint5 = {
    type: EditProjectEnvContentHintProjectsResponse200Type;
    storeId: string;
};

export const EditProjectEnvContentHintProjectsResponseType = {
    RedisRestApiReadOnlyToken: "redis-rest-api-read-only-token",
} as const;
export type EditProjectEnvContentHintProjectsResponseType = ClosedEnum<
    typeof EditProjectEnvContentHintProjectsResponseType
>;

export type ContentHint4 = {
    type: EditProjectEnvContentHintProjectsResponseType;
    storeId: string;
};

export const EditProjectEnvContentHintProjectsType = {
    RedisRestApiToken: "redis-rest-api-token",
} as const;
export type EditProjectEnvContentHintProjectsType = ClosedEnum<
    typeof EditProjectEnvContentHintProjectsType
>;

export type ContentHint3 = {
    type: EditProjectEnvContentHintProjectsType;
    storeId: string;
};

export const EditProjectEnvContentHintType = {
    RedisRestApiUrl: "redis-rest-api-url",
} as const;
export type EditProjectEnvContentHintType = ClosedEnum<typeof EditProjectEnvContentHintType>;

export type ContentHint2 = {
    type: EditProjectEnvContentHintType;
    storeId: string;
};

export const ContentHintType = {
    RedisUrl: "redis-url",
} as const;
export type ContentHintType = ClosedEnum<typeof ContentHintType>;

export type ContentHint1 = {
    type: ContentHintType;
    storeId: string;
};

export type ContentHint =
    | ContentHint1
    | ContentHint2
    | ContentHint3
    | ContentHint4
    | ContentHint5
    | ContentHint6
    | ContentHint7
    | ContentHint8
    | ContentHint9
    | ContentHint10
    | Eleven
    | Twelve
    | Thirteen
    | Fourteen;

export const EditProjectEnvProjectsResponseType = {
    FlagsSecret: "flags-secret",
} as const;
export type EditProjectEnvProjectsResponseType = ClosedEnum<
    typeof EditProjectEnvProjectsResponseType
>;

/**
 * Similar to `contentHints`, but should not be exposed to the user.
 */
export type InternalContentHint = {
    type: EditProjectEnvProjectsResponseType;
    /**
     * Contains the `value` of the env variable, encrypted with a special key to make decryption possible in the subscriber Lambda.
     */
    encryptedValue: string;
};

/**
 * The environment variable was successfully edited
 */
export type EditProjectEnvResponseBody = {
    target?: Array<EditProjectEnvTarget1> | EditProjectEnvTarget2 | undefined;
    type: EditProjectEnvProjectsType;
    id?: string | undefined;
    key: string;
    value: string;
    configurationId?: string | null | undefined;
    createdAt?: number | undefined;
    updatedAt?: number | undefined;
    createdBy?: string | null | undefined;
    updatedBy?: string | null | undefined;
    gitBranch?: string | undefined;
    edgeConfigId?: string | null | undefined;
    edgeConfigTokenId?: string | null | undefined;
    contentHint?:
        | ContentHint1
        | ContentHint2
        | ContentHint3
        | ContentHint4
        | ContentHint5
        | ContentHint6
        | ContentHint7
        | ContentHint8
        | ContentHint9
        | ContentHint10
        | Eleven
        | Twelve
        | Thirteen
        | Fourteen
        | null
        | undefined;
    /**
     * Similar to `contentHints`, but should not be exposed to the user.
     */
    internalContentHint?: InternalContentHint | null | undefined;
    /**
     * Whether `value` is decrypted.
     */
    decrypted?: boolean | undefined;
    comment?: string | undefined;
    customEnvironmentId?: string | undefined;
};

/** @internal */
export const EditProjectEnvTarget$inboundSchema: z.ZodNativeEnum<typeof EditProjectEnvTarget> =
    z.nativeEnum(EditProjectEnvTarget);

/** @internal */
export const EditProjectEnvTarget$outboundSchema: z.ZodNativeEnum<typeof EditProjectEnvTarget> =
    EditProjectEnvTarget$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace EditProjectEnvTarget$ {
    /** @deprecated use `EditProjectEnvTarget$inboundSchema` instead. */
    export const inboundSchema = EditProjectEnvTarget$inboundSchema;
    /** @deprecated use `EditProjectEnvTarget$outboundSchema` instead. */
    export const outboundSchema = EditProjectEnvTarget$outboundSchema;
}

/** @internal */
export const EditProjectEnvType$inboundSchema: z.ZodNativeEnum<typeof EditProjectEnvType> =
    z.nativeEnum(EditProjectEnvType);

/** @internal */
export const EditProjectEnvType$outboundSchema: z.ZodNativeEnum<typeof EditProjectEnvType> =
    EditProjectEnvType$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace EditProjectEnvType$ {
    /** @deprecated use `EditProjectEnvType$inboundSchema` instead. */
    export const inboundSchema = EditProjectEnvType$inboundSchema;
    /** @deprecated use `EditProjectEnvType$outboundSchema` instead. */
    export const outboundSchema = EditProjectEnvType$outboundSchema;
}

/** @internal */
export const EditProjectEnvRequestBody$inboundSchema: z.ZodType<
    EditProjectEnvRequestBody,
    z.ZodTypeDef,
    unknown
> = z.object({
    key: z.string().optional(),
    target: z.array(EditProjectEnvTarget$inboundSchema).optional(),
    gitBranch: z.nullable(z.string()).optional(),
    type: EditProjectEnvType$inboundSchema.optional(),
    value: z.string().optional(),
    customEnvironmentId: z.string().optional(),
    comment: z.string().optional(),
});

/** @internal */
export type EditProjectEnvRequestBody$Outbound = {
    key?: string | undefined;
    target?: Array<string> | undefined;
    gitBranch?: string | null | undefined;
    type?: string | undefined;
    value?: string | undefined;
    customEnvironmentId?: string | undefined;
    comment?: string | undefined;
};

/** @internal */
export const EditProjectEnvRequestBody$outboundSchema: z.ZodType<
    EditProjectEnvRequestBody$Outbound,
    z.ZodTypeDef,
    EditProjectEnvRequestBody
> = z.object({
    key: z.string().optional(),
    target: z.array(EditProjectEnvTarget$outboundSchema).optional(),
    gitBranch: z.nullable(z.string()).optional(),
    type: EditProjectEnvType$outboundSchema.optional(),
    value: z.string().optional(),
    customEnvironmentId: z.string().optional(),
    comment: z.string().optional(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace EditProjectEnvRequestBody$ {
    /** @deprecated use `EditProjectEnvRequestBody$inboundSchema` instead. */
    export const inboundSchema = EditProjectEnvRequestBody$inboundSchema;
    /** @deprecated use `EditProjectEnvRequestBody$outboundSchema` instead. */
    export const outboundSchema = EditProjectEnvRequestBody$outboundSchema;
    /** @deprecated use `EditProjectEnvRequestBody$Outbound` instead. */
    export type Outbound = EditProjectEnvRequestBody$Outbound;
}

/** @internal */
export const EditProjectEnvRequest$inboundSchema: z.ZodType<
    EditProjectEnvRequest,
    z.ZodTypeDef,
    unknown
> = z
    .object({
        idOrName: z.string(),
        id: z.string(),
        teamId: z.string().optional(),
        slug: z.string().optional(),
        RequestBody: z.lazy(() => EditProjectEnvRequestBody$inboundSchema).optional(),
    })
    .transform((v) => {
        return remap$(v, {
            RequestBody: "requestBody",
        });
    });

/** @internal */
export type EditProjectEnvRequest$Outbound = {
    idOrName: string;
    id: string;
    teamId?: string | undefined;
    slug?: string | undefined;
    RequestBody?: EditProjectEnvRequestBody$Outbound | undefined;
};

/** @internal */
export const EditProjectEnvRequest$outboundSchema: z.ZodType<
    EditProjectEnvRequest$Outbound,
    z.ZodTypeDef,
    EditProjectEnvRequest
> = z
    .object({
        idOrName: z.string(),
        id: z.string(),
        teamId: z.string().optional(),
        slug: z.string().optional(),
        requestBody: z.lazy(() => EditProjectEnvRequestBody$outboundSchema).optional(),
    })
    .transform((v) => {
        return remap$(v, {
            requestBody: "RequestBody",
        });
    });

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace EditProjectEnvRequest$ {
    /** @deprecated use `EditProjectEnvRequest$inboundSchema` instead. */
    export const inboundSchema = EditProjectEnvRequest$inboundSchema;
    /** @deprecated use `EditProjectEnvRequest$outboundSchema` instead. */
    export const outboundSchema = EditProjectEnvRequest$outboundSchema;
    /** @deprecated use `EditProjectEnvRequest$Outbound` instead. */
    export type Outbound = EditProjectEnvRequest$Outbound;
}

/** @internal */
export const EditProjectEnvTarget2$inboundSchema: z.ZodNativeEnum<typeof EditProjectEnvTarget2> =
    z.nativeEnum(EditProjectEnvTarget2);

/** @internal */
export const EditProjectEnvTarget2$outboundSchema: z.ZodNativeEnum<typeof EditProjectEnvTarget2> =
    EditProjectEnvTarget2$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace EditProjectEnvTarget2$ {
    /** @deprecated use `EditProjectEnvTarget2$inboundSchema` instead. */
    export const inboundSchema = EditProjectEnvTarget2$inboundSchema;
    /** @deprecated use `EditProjectEnvTarget2$outboundSchema` instead. */
    export const outboundSchema = EditProjectEnvTarget2$outboundSchema;
}

/** @internal */
export const EditProjectEnvTarget1$inboundSchema: z.ZodNativeEnum<typeof EditProjectEnvTarget1> =
    z.nativeEnum(EditProjectEnvTarget1);

/** @internal */
export const EditProjectEnvTarget1$outboundSchema: z.ZodNativeEnum<typeof EditProjectEnvTarget1> =
    EditProjectEnvTarget1$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace EditProjectEnvTarget1$ {
    /** @deprecated use `EditProjectEnvTarget1$inboundSchema` instead. */
    export const inboundSchema = EditProjectEnvTarget1$inboundSchema;
    /** @deprecated use `EditProjectEnvTarget1$outboundSchema` instead. */
    export const outboundSchema = EditProjectEnvTarget1$outboundSchema;
}

/** @internal */
export const EditProjectEnvProjectsTarget$inboundSchema: z.ZodType<
    EditProjectEnvProjectsTarget,
    z.ZodTypeDef,
    unknown
> = z.union([z.array(EditProjectEnvTarget1$inboundSchema), EditProjectEnvTarget2$inboundSchema]);

/** @internal */
export type EditProjectEnvProjectsTarget$Outbound = Array<string> | string;

/** @internal */
export const EditProjectEnvProjectsTarget$outboundSchema: z.ZodType<
    EditProjectEnvProjectsTarget$Outbound,
    z.ZodTypeDef,
    EditProjectEnvProjectsTarget
> = z.union([z.array(EditProjectEnvTarget1$outboundSchema), EditProjectEnvTarget2$outboundSchema]);

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace EditProjectEnvProjectsTarget$ {
    /** @deprecated use `EditProjectEnvProjectsTarget$inboundSchema` instead. */
    export const inboundSchema = EditProjectEnvProjectsTarget$inboundSchema;
    /** @deprecated use `EditProjectEnvProjectsTarget$outboundSchema` instead. */
    export const outboundSchema = EditProjectEnvProjectsTarget$outboundSchema;
    /** @deprecated use `EditProjectEnvProjectsTarget$Outbound` instead. */
    export type Outbound = EditProjectEnvProjectsTarget$Outbound;
}

/** @internal */
export const EditProjectEnvProjectsType$inboundSchema: z.ZodNativeEnum<
    typeof EditProjectEnvProjectsType
> = z.nativeEnum(EditProjectEnvProjectsType);

/** @internal */
export const EditProjectEnvProjectsType$outboundSchema: z.ZodNativeEnum<
    typeof EditProjectEnvProjectsType
> = EditProjectEnvProjectsType$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace EditProjectEnvProjectsType$ {
    /** @deprecated use `EditProjectEnvProjectsType$inboundSchema` instead. */
    export const inboundSchema = EditProjectEnvProjectsType$inboundSchema;
    /** @deprecated use `EditProjectEnvProjectsType$outboundSchema` instead. */
    export const outboundSchema = EditProjectEnvProjectsType$outboundSchema;
}

/** @internal */
export const EditProjectEnvContentHintProjectsResponse200ApplicationJSONResponseBody14Type$inboundSchema: z.ZodNativeEnum<
    typeof EditProjectEnvContentHintProjectsResponse200ApplicationJSONResponseBody14Type
> = z.nativeEnum(EditProjectEnvContentHintProjectsResponse200ApplicationJSONResponseBody14Type);

/** @internal */
export const EditProjectEnvContentHintProjectsResponse200ApplicationJSONResponseBody14Type$outboundSchema: z.ZodNativeEnum<
    typeof EditProjectEnvContentHintProjectsResponse200ApplicationJSONResponseBody14Type
> = EditProjectEnvContentHintProjectsResponse200ApplicationJSONResponseBody14Type$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace EditProjectEnvContentHintProjectsResponse200ApplicationJSONResponseBody14Type$ {
    /** @deprecated use `EditProjectEnvContentHintProjectsResponse200ApplicationJSONResponseBody14Type$inboundSchema` instead. */
    export const inboundSchema =
        EditProjectEnvContentHintProjectsResponse200ApplicationJSONResponseBody14Type$inboundSchema;
    /** @deprecated use `EditProjectEnvContentHintProjectsResponse200ApplicationJSONResponseBody14Type$outboundSchema` instead. */
    export const outboundSchema =
        EditProjectEnvContentHintProjectsResponse200ApplicationJSONResponseBody14Type$outboundSchema;
}

/** @internal */
export const Fourteen$inboundSchema: z.ZodType<Fourteen, z.ZodTypeDef, unknown> = z.object({
    type: EditProjectEnvContentHintProjectsResponse200ApplicationJSONResponseBody14Type$inboundSchema,
    storeId: z.string(),
});

/** @internal */
export type Fourteen$Outbound = {
    type: string;
    storeId: string;
};

/** @internal */
export const Fourteen$outboundSchema: z.ZodType<Fourteen$Outbound, z.ZodTypeDef, Fourteen> =
    z.object({
        type: EditProjectEnvContentHintProjectsResponse200ApplicationJSONResponseBody14Type$outboundSchema,
        storeId: z.string(),
    });

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace Fourteen$ {
    /** @deprecated use `Fourteen$inboundSchema` instead. */
    export const inboundSchema = Fourteen$inboundSchema;
    /** @deprecated use `Fourteen$outboundSchema` instead. */
    export const outboundSchema = Fourteen$outboundSchema;
    /** @deprecated use `Fourteen$Outbound` instead. */
    export type Outbound = Fourteen$Outbound;
}

/** @internal */
export const EditProjectEnvContentHintProjectsResponse200ApplicationJSONResponseBody13Type$inboundSchema: z.ZodNativeEnum<
    typeof EditProjectEnvContentHintProjectsResponse200ApplicationJSONResponseBody13Type
> = z.nativeEnum(EditProjectEnvContentHintProjectsResponse200ApplicationJSONResponseBody13Type);

/** @internal */
export const EditProjectEnvContentHintProjectsResponse200ApplicationJSONResponseBody13Type$outboundSchema: z.ZodNativeEnum<
    typeof EditProjectEnvContentHintProjectsResponse200ApplicationJSONResponseBody13Type
> = EditProjectEnvContentHintProjectsResponse200ApplicationJSONResponseBody13Type$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace EditProjectEnvContentHintProjectsResponse200ApplicationJSONResponseBody13Type$ {
    /** @deprecated use `EditProjectEnvContentHintProjectsResponse200ApplicationJSONResponseBody13Type$inboundSchema` instead. */
    export const inboundSchema =
        EditProjectEnvContentHintProjectsResponse200ApplicationJSONResponseBody13Type$inboundSchema;
    /** @deprecated use `EditProjectEnvContentHintProjectsResponse200ApplicationJSONResponseBody13Type$outboundSchema` instead. */
    export const outboundSchema =
        EditProjectEnvContentHintProjectsResponse200ApplicationJSONResponseBody13Type$outboundSchema;
}

/** @internal */
export const Thirteen$inboundSchema: z.ZodType<Thirteen, z.ZodTypeDef, unknown> = z.object({
    type: EditProjectEnvContentHintProjectsResponse200ApplicationJSONResponseBody13Type$inboundSchema,
    storeId: z.string(),
});

/** @internal */
export type Thirteen$Outbound = {
    type: string;
    storeId: string;
};

/** @internal */
export const Thirteen$outboundSchema: z.ZodType<Thirteen$Outbound, z.ZodTypeDef, Thirteen> =
    z.object({
        type: EditProjectEnvContentHintProjectsResponse200ApplicationJSONResponseBody13Type$outboundSchema,
        storeId: z.string(),
    });

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace Thirteen$ {
    /** @deprecated use `Thirteen$inboundSchema` instead. */
    export const inboundSchema = Thirteen$inboundSchema;
    /** @deprecated use `Thirteen$outboundSchema` instead. */
    export const outboundSchema = Thirteen$outboundSchema;
    /** @deprecated use `Thirteen$Outbound` instead. */
    export type Outbound = Thirteen$Outbound;
}

/** @internal */
export const EditProjectEnvContentHintProjectsResponse200ApplicationJSONResponseBody12Type$inboundSchema: z.ZodNativeEnum<
    typeof EditProjectEnvContentHintProjectsResponse200ApplicationJSONResponseBody12Type
> = z.nativeEnum(EditProjectEnvContentHintProjectsResponse200ApplicationJSONResponseBody12Type);

/** @internal */
export const EditProjectEnvContentHintProjectsResponse200ApplicationJSONResponseBody12Type$outboundSchema: z.ZodNativeEnum<
    typeof EditProjectEnvContentHintProjectsResponse200ApplicationJSONResponseBody12Type
> = EditProjectEnvContentHintProjectsResponse200ApplicationJSONResponseBody12Type$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace EditProjectEnvContentHintProjectsResponse200ApplicationJSONResponseBody12Type$ {
    /** @deprecated use `EditProjectEnvContentHintProjectsResponse200ApplicationJSONResponseBody12Type$inboundSchema` instead. */
    export const inboundSchema =
        EditProjectEnvContentHintProjectsResponse200ApplicationJSONResponseBody12Type$inboundSchema;
    /** @deprecated use `EditProjectEnvContentHintProjectsResponse200ApplicationJSONResponseBody12Type$outboundSchema` instead. */
    export const outboundSchema =
        EditProjectEnvContentHintProjectsResponse200ApplicationJSONResponseBody12Type$outboundSchema;
}

/** @internal */
export const Twelve$inboundSchema: z.ZodType<Twelve, z.ZodTypeDef, unknown> = z.object({
    type: EditProjectEnvContentHintProjectsResponse200ApplicationJSONResponseBody12Type$inboundSchema,
    storeId: z.string(),
});

/** @internal */
export type Twelve$Outbound = {
    type: string;
    storeId: string;
};

/** @internal */
export const Twelve$outboundSchema: z.ZodType<Twelve$Outbound, z.ZodTypeDef, Twelve> = z.object({
    type: EditProjectEnvContentHintProjectsResponse200ApplicationJSONResponseBody12Type$outboundSchema,
    storeId: z.string(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace Twelve$ {
    /** @deprecated use `Twelve$inboundSchema` instead. */
    export const inboundSchema = Twelve$inboundSchema;
    /** @deprecated use `Twelve$outboundSchema` instead. */
    export const outboundSchema = Twelve$outboundSchema;
    /** @deprecated use `Twelve$Outbound` instead. */
    export type Outbound = Twelve$Outbound;
}

/** @internal */
export const EditProjectEnvContentHintProjectsResponse200ApplicationJSONResponseBody11Type$inboundSchema: z.ZodNativeEnum<
    typeof EditProjectEnvContentHintProjectsResponse200ApplicationJSONResponseBody11Type
> = z.nativeEnum(EditProjectEnvContentHintProjectsResponse200ApplicationJSONResponseBody11Type);

/** @internal */
export const EditProjectEnvContentHintProjectsResponse200ApplicationJSONResponseBody11Type$outboundSchema: z.ZodNativeEnum<
    typeof EditProjectEnvContentHintProjectsResponse200ApplicationJSONResponseBody11Type
> = EditProjectEnvContentHintProjectsResponse200ApplicationJSONResponseBody11Type$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace EditProjectEnvContentHintProjectsResponse200ApplicationJSONResponseBody11Type$ {
    /** @deprecated use `EditProjectEnvContentHintProjectsResponse200ApplicationJSONResponseBody11Type$inboundSchema` instead. */
    export const inboundSchema =
        EditProjectEnvContentHintProjectsResponse200ApplicationJSONResponseBody11Type$inboundSchema;
    /** @deprecated use `EditProjectEnvContentHintProjectsResponse200ApplicationJSONResponseBody11Type$outboundSchema` instead. */
    export const outboundSchema =
        EditProjectEnvContentHintProjectsResponse200ApplicationJSONResponseBody11Type$outboundSchema;
}

/** @internal */
export const Eleven$inboundSchema: z.ZodType<Eleven, z.ZodTypeDef, unknown> = z.object({
    type: EditProjectEnvContentHintProjectsResponse200ApplicationJSONResponseBody11Type$inboundSchema,
    storeId: z.string(),
});

/** @internal */
export type Eleven$Outbound = {
    type: string;
    storeId: string;
};

/** @internal */
export const Eleven$outboundSchema: z.ZodType<Eleven$Outbound, z.ZodTypeDef, Eleven> = z.object({
    type: EditProjectEnvContentHintProjectsResponse200ApplicationJSONResponseBody11Type$outboundSchema,
    storeId: z.string(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace Eleven$ {
    /** @deprecated use `Eleven$inboundSchema` instead. */
    export const inboundSchema = Eleven$inboundSchema;
    /** @deprecated use `Eleven$outboundSchema` instead. */
    export const outboundSchema = Eleven$outboundSchema;
    /** @deprecated use `Eleven$Outbound` instead. */
    export type Outbound = Eleven$Outbound;
}

/** @internal */
export const EditProjectEnvContentHintProjectsResponse200ApplicationJSONResponseBody10Type$inboundSchema: z.ZodNativeEnum<
    typeof EditProjectEnvContentHintProjectsResponse200ApplicationJSONResponseBody10Type
> = z.nativeEnum(EditProjectEnvContentHintProjectsResponse200ApplicationJSONResponseBody10Type);

/** @internal */
export const EditProjectEnvContentHintProjectsResponse200ApplicationJSONResponseBody10Type$outboundSchema: z.ZodNativeEnum<
    typeof EditProjectEnvContentHintProjectsResponse200ApplicationJSONResponseBody10Type
> = EditProjectEnvContentHintProjectsResponse200ApplicationJSONResponseBody10Type$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace EditProjectEnvContentHintProjectsResponse200ApplicationJSONResponseBody10Type$ {
    /** @deprecated use `EditProjectEnvContentHintProjectsResponse200ApplicationJSONResponseBody10Type$inboundSchema` instead. */
    export const inboundSchema =
        EditProjectEnvContentHintProjectsResponse200ApplicationJSONResponseBody10Type$inboundSchema;
    /** @deprecated use `EditProjectEnvContentHintProjectsResponse200ApplicationJSONResponseBody10Type$outboundSchema` instead. */
    export const outboundSchema =
        EditProjectEnvContentHintProjectsResponse200ApplicationJSONResponseBody10Type$outboundSchema;
}

/** @internal */
export const ContentHint10$inboundSchema: z.ZodType<ContentHint10, z.ZodTypeDef, unknown> =
    z.object({
        type: EditProjectEnvContentHintProjectsResponse200ApplicationJSONResponseBody10Type$inboundSchema,
        storeId: z.string(),
    });

/** @internal */
export type ContentHint10$Outbound = {
    type: string;
    storeId: string;
};

/** @internal */
export const ContentHint10$outboundSchema: z.ZodType<
    ContentHint10$Outbound,
    z.ZodTypeDef,
    ContentHint10
> = z.object({
    type: EditProjectEnvContentHintProjectsResponse200ApplicationJSONResponseBody10Type$outboundSchema,
    storeId: z.string(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace ContentHint10$ {
    /** @deprecated use `ContentHint10$inboundSchema` instead. */
    export const inboundSchema = ContentHint10$inboundSchema;
    /** @deprecated use `ContentHint10$outboundSchema` instead. */
    export const outboundSchema = ContentHint10$outboundSchema;
    /** @deprecated use `ContentHint10$Outbound` instead. */
    export type Outbound = ContentHint10$Outbound;
}

/** @internal */
export const EditProjectEnvContentHintProjectsResponse200ApplicationJSONResponseBody9Type$inboundSchema: z.ZodNativeEnum<
    typeof EditProjectEnvContentHintProjectsResponse200ApplicationJSONResponseBody9Type
> = z.nativeEnum(EditProjectEnvContentHintProjectsResponse200ApplicationJSONResponseBody9Type);

/** @internal */
export const EditProjectEnvContentHintProjectsResponse200ApplicationJSONResponseBody9Type$outboundSchema: z.ZodNativeEnum<
    typeof EditProjectEnvContentHintProjectsResponse200ApplicationJSONResponseBody9Type
> = EditProjectEnvContentHintProjectsResponse200ApplicationJSONResponseBody9Type$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace EditProjectEnvContentHintProjectsResponse200ApplicationJSONResponseBody9Type$ {
    /** @deprecated use `EditProjectEnvContentHintProjectsResponse200ApplicationJSONResponseBody9Type$inboundSchema` instead. */
    export const inboundSchema =
        EditProjectEnvContentHintProjectsResponse200ApplicationJSONResponseBody9Type$inboundSchema;
    /** @deprecated use `EditProjectEnvContentHintProjectsResponse200ApplicationJSONResponseBody9Type$outboundSchema` instead. */
    export const outboundSchema =
        EditProjectEnvContentHintProjectsResponse200ApplicationJSONResponseBody9Type$outboundSchema;
}

/** @internal */
export const ContentHint9$inboundSchema: z.ZodType<ContentHint9, z.ZodTypeDef, unknown> = z.object({
    type: EditProjectEnvContentHintProjectsResponse200ApplicationJSONResponseBody9Type$inboundSchema,
    storeId: z.string(),
});

/** @internal */
export type ContentHint9$Outbound = {
    type: string;
    storeId: string;
};

/** @internal */
export const ContentHint9$outboundSchema: z.ZodType<
    ContentHint9$Outbound,
    z.ZodTypeDef,
    ContentHint9
> = z.object({
    type: EditProjectEnvContentHintProjectsResponse200ApplicationJSONResponseBody9Type$outboundSchema,
    storeId: z.string(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace ContentHint9$ {
    /** @deprecated use `ContentHint9$inboundSchema` instead. */
    export const inboundSchema = ContentHint9$inboundSchema;
    /** @deprecated use `ContentHint9$outboundSchema` instead. */
    export const outboundSchema = ContentHint9$outboundSchema;
    /** @deprecated use `ContentHint9$Outbound` instead. */
    export type Outbound = ContentHint9$Outbound;
}

/** @internal */
export const EditProjectEnvContentHintProjectsResponse200ApplicationJSONResponseBody8Type$inboundSchema: z.ZodNativeEnum<
    typeof EditProjectEnvContentHintProjectsResponse200ApplicationJSONResponseBody8Type
> = z.nativeEnum(EditProjectEnvContentHintProjectsResponse200ApplicationJSONResponseBody8Type);

/** @internal */
export const EditProjectEnvContentHintProjectsResponse200ApplicationJSONResponseBody8Type$outboundSchema: z.ZodNativeEnum<
    typeof EditProjectEnvContentHintProjectsResponse200ApplicationJSONResponseBody8Type
> = EditProjectEnvContentHintProjectsResponse200ApplicationJSONResponseBody8Type$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace EditProjectEnvContentHintProjectsResponse200ApplicationJSONResponseBody8Type$ {
    /** @deprecated use `EditProjectEnvContentHintProjectsResponse200ApplicationJSONResponseBody8Type$inboundSchema` instead. */
    export const inboundSchema =
        EditProjectEnvContentHintProjectsResponse200ApplicationJSONResponseBody8Type$inboundSchema;
    /** @deprecated use `EditProjectEnvContentHintProjectsResponse200ApplicationJSONResponseBody8Type$outboundSchema` instead. */
    export const outboundSchema =
        EditProjectEnvContentHintProjectsResponse200ApplicationJSONResponseBody8Type$outboundSchema;
}

/** @internal */
export const ContentHint8$inboundSchema: z.ZodType<ContentHint8, z.ZodTypeDef, unknown> = z.object({
    type: EditProjectEnvContentHintProjectsResponse200ApplicationJSONResponseBody8Type$inboundSchema,
    storeId: z.string(),
});

/** @internal */
export type ContentHint8$Outbound = {
    type: string;
    storeId: string;
};

/** @internal */
export const ContentHint8$outboundSchema: z.ZodType<
    ContentHint8$Outbound,
    z.ZodTypeDef,
    ContentHint8
> = z.object({
    type: EditProjectEnvContentHintProjectsResponse200ApplicationJSONResponseBody8Type$outboundSchema,
    storeId: z.string(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace ContentHint8$ {
    /** @deprecated use `ContentHint8$inboundSchema` instead. */
    export const inboundSchema = ContentHint8$inboundSchema;
    /** @deprecated use `ContentHint8$outboundSchema` instead. */
    export const outboundSchema = ContentHint8$outboundSchema;
    /** @deprecated use `ContentHint8$Outbound` instead. */
    export type Outbound = ContentHint8$Outbound;
}

/** @internal */
export const EditProjectEnvContentHintProjectsResponse200ApplicationJSONResponseBodyType$inboundSchema: z.ZodNativeEnum<
    typeof EditProjectEnvContentHintProjectsResponse200ApplicationJSONResponseBodyType
> = z.nativeEnum(EditProjectEnvContentHintProjectsResponse200ApplicationJSONResponseBodyType);

/** @internal */
export const EditProjectEnvContentHintProjectsResponse200ApplicationJSONResponseBodyType$outboundSchema: z.ZodNativeEnum<
    typeof EditProjectEnvContentHintProjectsResponse200ApplicationJSONResponseBodyType
> = EditProjectEnvContentHintProjectsResponse200ApplicationJSONResponseBodyType$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace EditProjectEnvContentHintProjectsResponse200ApplicationJSONResponseBodyType$ {
    /** @deprecated use `EditProjectEnvContentHintProjectsResponse200ApplicationJSONResponseBodyType$inboundSchema` instead. */
    export const inboundSchema =
        EditProjectEnvContentHintProjectsResponse200ApplicationJSONResponseBodyType$inboundSchema;
    /** @deprecated use `EditProjectEnvContentHintProjectsResponse200ApplicationJSONResponseBodyType$outboundSchema` instead. */
    export const outboundSchema =
        EditProjectEnvContentHintProjectsResponse200ApplicationJSONResponseBodyType$outboundSchema;
}

/** @internal */
export const ContentHint7$inboundSchema: z.ZodType<ContentHint7, z.ZodTypeDef, unknown> = z.object({
    type: EditProjectEnvContentHintProjectsResponse200ApplicationJSONResponseBodyType$inboundSchema,
    storeId: z.string(),
});

/** @internal */
export type ContentHint7$Outbound = {
    type: string;
    storeId: string;
};

/** @internal */
export const ContentHint7$outboundSchema: z.ZodType<
    ContentHint7$Outbound,
    z.ZodTypeDef,
    ContentHint7
> = z.object({
    type: EditProjectEnvContentHintProjectsResponse200ApplicationJSONResponseBodyType$outboundSchema,
    storeId: z.string(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace ContentHint7$ {
    /** @deprecated use `ContentHint7$inboundSchema` instead. */
    export const inboundSchema = ContentHint7$inboundSchema;
    /** @deprecated use `ContentHint7$outboundSchema` instead. */
    export const outboundSchema = ContentHint7$outboundSchema;
    /** @deprecated use `ContentHint7$Outbound` instead. */
    export type Outbound = ContentHint7$Outbound;
}

/** @internal */
export const EditProjectEnvContentHintProjectsResponse200ApplicationJSONType$inboundSchema: z.ZodNativeEnum<
    typeof EditProjectEnvContentHintProjectsResponse200ApplicationJSONType
> = z.nativeEnum(EditProjectEnvContentHintProjectsResponse200ApplicationJSONType);

/** @internal */
export const EditProjectEnvContentHintProjectsResponse200ApplicationJSONType$outboundSchema: z.ZodNativeEnum<
    typeof EditProjectEnvContentHintProjectsResponse200ApplicationJSONType
> = EditProjectEnvContentHintProjectsResponse200ApplicationJSONType$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace EditProjectEnvContentHintProjectsResponse200ApplicationJSONType$ {
    /** @deprecated use `EditProjectEnvContentHintProjectsResponse200ApplicationJSONType$inboundSchema` instead. */
    export const inboundSchema =
        EditProjectEnvContentHintProjectsResponse200ApplicationJSONType$inboundSchema;
    /** @deprecated use `EditProjectEnvContentHintProjectsResponse200ApplicationJSONType$outboundSchema` instead. */
    export const outboundSchema =
        EditProjectEnvContentHintProjectsResponse200ApplicationJSONType$outboundSchema;
}

/** @internal */
export const ContentHint6$inboundSchema: z.ZodType<ContentHint6, z.ZodTypeDef, unknown> = z.object({
    type: EditProjectEnvContentHintProjectsResponse200ApplicationJSONType$inboundSchema,
    storeId: z.string(),
});

/** @internal */
export type ContentHint6$Outbound = {
    type: string;
    storeId: string;
};

/** @internal */
export const ContentHint6$outboundSchema: z.ZodType<
    ContentHint6$Outbound,
    z.ZodTypeDef,
    ContentHint6
> = z.object({
    type: EditProjectEnvContentHintProjectsResponse200ApplicationJSONType$outboundSchema,
    storeId: z.string(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace ContentHint6$ {
    /** @deprecated use `ContentHint6$inboundSchema` instead. */
    export const inboundSchema = ContentHint6$inboundSchema;
    /** @deprecated use `ContentHint6$outboundSchema` instead. */
    export const outboundSchema = ContentHint6$outboundSchema;
    /** @deprecated use `ContentHint6$Outbound` instead. */
    export type Outbound = ContentHint6$Outbound;
}

/** @internal */
export const EditProjectEnvContentHintProjectsResponse200Type$inboundSchema: z.ZodNativeEnum<
    typeof EditProjectEnvContentHintProjectsResponse200Type
> = z.nativeEnum(EditProjectEnvContentHintProjectsResponse200Type);

/** @internal */
export const EditProjectEnvContentHintProjectsResponse200Type$outboundSchema: z.ZodNativeEnum<
    typeof EditProjectEnvContentHintProjectsResponse200Type
> = EditProjectEnvContentHintProjectsResponse200Type$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace EditProjectEnvContentHintProjectsResponse200Type$ {
    /** @deprecated use `EditProjectEnvContentHintProjectsResponse200Type$inboundSchema` instead. */
    export const inboundSchema = EditProjectEnvContentHintProjectsResponse200Type$inboundSchema;
    /** @deprecated use `EditProjectEnvContentHintProjectsResponse200Type$outboundSchema` instead. */
    export const outboundSchema = EditProjectEnvContentHintProjectsResponse200Type$outboundSchema;
}

/** @internal */
export const ContentHint5$inboundSchema: z.ZodType<ContentHint5, z.ZodTypeDef, unknown> = z.object({
    type: EditProjectEnvContentHintProjectsResponse200Type$inboundSchema,
    storeId: z.string(),
});

/** @internal */
export type ContentHint5$Outbound = {
    type: string;
    storeId: string;
};

/** @internal */
export const ContentHint5$outboundSchema: z.ZodType<
    ContentHint5$Outbound,
    z.ZodTypeDef,
    ContentHint5
> = z.object({
    type: EditProjectEnvContentHintProjectsResponse200Type$outboundSchema,
    storeId: z.string(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace ContentHint5$ {
    /** @deprecated use `ContentHint5$inboundSchema` instead. */
    export const inboundSchema = ContentHint5$inboundSchema;
    /** @deprecated use `ContentHint5$outboundSchema` instead. */
    export const outboundSchema = ContentHint5$outboundSchema;
    /** @deprecated use `ContentHint5$Outbound` instead. */
    export type Outbound = ContentHint5$Outbound;
}

/** @internal */
export const EditProjectEnvContentHintProjectsResponseType$inboundSchema: z.ZodNativeEnum<
    typeof EditProjectEnvContentHintProjectsResponseType
> = z.nativeEnum(EditProjectEnvContentHintProjectsResponseType);

/** @internal */
export const EditProjectEnvContentHintProjectsResponseType$outboundSchema: z.ZodNativeEnum<
    typeof EditProjectEnvContentHintProjectsResponseType
> = EditProjectEnvContentHintProjectsResponseType$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace EditProjectEnvContentHintProjectsResponseType$ {
    /** @deprecated use `EditProjectEnvContentHintProjectsResponseType$inboundSchema` instead. */
    export const inboundSchema = EditProjectEnvContentHintProjectsResponseType$inboundSchema;
    /** @deprecated use `EditProjectEnvContentHintProjectsResponseType$outboundSchema` instead. */
    export const outboundSchema = EditProjectEnvContentHintProjectsResponseType$outboundSchema;
}

/** @internal */
export const ContentHint4$inboundSchema: z.ZodType<ContentHint4, z.ZodTypeDef, unknown> = z.object({
    type: EditProjectEnvContentHintProjectsResponseType$inboundSchema,
    storeId: z.string(),
});

/** @internal */
export type ContentHint4$Outbound = {
    type: string;
    storeId: string;
};

/** @internal */
export const ContentHint4$outboundSchema: z.ZodType<
    ContentHint4$Outbound,
    z.ZodTypeDef,
    ContentHint4
> = z.object({
    type: EditProjectEnvContentHintProjectsResponseType$outboundSchema,
    storeId: z.string(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace ContentHint4$ {
    /** @deprecated use `ContentHint4$inboundSchema` instead. */
    export const inboundSchema = ContentHint4$inboundSchema;
    /** @deprecated use `ContentHint4$outboundSchema` instead. */
    export const outboundSchema = ContentHint4$outboundSchema;
    /** @deprecated use `ContentHint4$Outbound` instead. */
    export type Outbound = ContentHint4$Outbound;
}

/** @internal */
export const EditProjectEnvContentHintProjectsType$inboundSchema: z.ZodNativeEnum<
    typeof EditProjectEnvContentHintProjectsType
> = z.nativeEnum(EditProjectEnvContentHintProjectsType);

/** @internal */
export const EditProjectEnvContentHintProjectsType$outboundSchema: z.ZodNativeEnum<
    typeof EditProjectEnvContentHintProjectsType
> = EditProjectEnvContentHintProjectsType$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace EditProjectEnvContentHintProjectsType$ {
    /** @deprecated use `EditProjectEnvContentHintProjectsType$inboundSchema` instead. */
    export const inboundSchema = EditProjectEnvContentHintProjectsType$inboundSchema;
    /** @deprecated use `EditProjectEnvContentHintProjectsType$outboundSchema` instead. */
    export const outboundSchema = EditProjectEnvContentHintProjectsType$outboundSchema;
}

/** @internal */
export const ContentHint3$inboundSchema: z.ZodType<ContentHint3, z.ZodTypeDef, unknown> = z.object({
    type: EditProjectEnvContentHintProjectsType$inboundSchema,
    storeId: z.string(),
});

/** @internal */
export type ContentHint3$Outbound = {
    type: string;
    storeId: string;
};

/** @internal */
export const ContentHint3$outboundSchema: z.ZodType<
    ContentHint3$Outbound,
    z.ZodTypeDef,
    ContentHint3
> = z.object({
    type: EditProjectEnvContentHintProjectsType$outboundSchema,
    storeId: z.string(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace ContentHint3$ {
    /** @deprecated use `ContentHint3$inboundSchema` instead. */
    export const inboundSchema = ContentHint3$inboundSchema;
    /** @deprecated use `ContentHint3$outboundSchema` instead. */
    export const outboundSchema = ContentHint3$outboundSchema;
    /** @deprecated use `ContentHint3$Outbound` instead. */
    export type Outbound = ContentHint3$Outbound;
}

/** @internal */
export const EditProjectEnvContentHintType$inboundSchema: z.ZodNativeEnum<
    typeof EditProjectEnvContentHintType
> = z.nativeEnum(EditProjectEnvContentHintType);

/** @internal */
export const EditProjectEnvContentHintType$outboundSchema: z.ZodNativeEnum<
    typeof EditProjectEnvContentHintType
> = EditProjectEnvContentHintType$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace EditProjectEnvContentHintType$ {
    /** @deprecated use `EditProjectEnvContentHintType$inboundSchema` instead. */
    export const inboundSchema = EditProjectEnvContentHintType$inboundSchema;
    /** @deprecated use `EditProjectEnvContentHintType$outboundSchema` instead. */
    export const outboundSchema = EditProjectEnvContentHintType$outboundSchema;
}

/** @internal */
export const ContentHint2$inboundSchema: z.ZodType<ContentHint2, z.ZodTypeDef, unknown> = z.object({
    type: EditProjectEnvContentHintType$inboundSchema,
    storeId: z.string(),
});

/** @internal */
export type ContentHint2$Outbound = {
    type: string;
    storeId: string;
};

/** @internal */
export const ContentHint2$outboundSchema: z.ZodType<
    ContentHint2$Outbound,
    z.ZodTypeDef,
    ContentHint2
> = z.object({
    type: EditProjectEnvContentHintType$outboundSchema,
    storeId: z.string(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace ContentHint2$ {
    /** @deprecated use `ContentHint2$inboundSchema` instead. */
    export const inboundSchema = ContentHint2$inboundSchema;
    /** @deprecated use `ContentHint2$outboundSchema` instead. */
    export const outboundSchema = ContentHint2$outboundSchema;
    /** @deprecated use `ContentHint2$Outbound` instead. */
    export type Outbound = ContentHint2$Outbound;
}

/** @internal */
export const ContentHintType$inboundSchema: z.ZodNativeEnum<typeof ContentHintType> =
    z.nativeEnum(ContentHintType);

/** @internal */
export const ContentHintType$outboundSchema: z.ZodNativeEnum<typeof ContentHintType> =
    ContentHintType$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace ContentHintType$ {
    /** @deprecated use `ContentHintType$inboundSchema` instead. */
    export const inboundSchema = ContentHintType$inboundSchema;
    /** @deprecated use `ContentHintType$outboundSchema` instead. */
    export const outboundSchema = ContentHintType$outboundSchema;
}

/** @internal */
export const ContentHint1$inboundSchema: z.ZodType<ContentHint1, z.ZodTypeDef, unknown> = z.object({
    type: ContentHintType$inboundSchema,
    storeId: z.string(),
});

/** @internal */
export type ContentHint1$Outbound = {
    type: string;
    storeId: string;
};

/** @internal */
export const ContentHint1$outboundSchema: z.ZodType<
    ContentHint1$Outbound,
    z.ZodTypeDef,
    ContentHint1
> = z.object({
    type: ContentHintType$outboundSchema,
    storeId: z.string(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace ContentHint1$ {
    /** @deprecated use `ContentHint1$inboundSchema` instead. */
    export const inboundSchema = ContentHint1$inboundSchema;
    /** @deprecated use `ContentHint1$outboundSchema` instead. */
    export const outboundSchema = ContentHint1$outboundSchema;
    /** @deprecated use `ContentHint1$Outbound` instead. */
    export type Outbound = ContentHint1$Outbound;
}

/** @internal */
export const ContentHint$inboundSchema: z.ZodType<ContentHint, z.ZodTypeDef, unknown> = z.union([
    z.lazy(() => ContentHint1$inboundSchema),
    z.lazy(() => ContentHint2$inboundSchema),
    z.lazy(() => ContentHint3$inboundSchema),
    z.lazy(() => ContentHint4$inboundSchema),
    z.lazy(() => ContentHint5$inboundSchema),
    z.lazy(() => ContentHint6$inboundSchema),
    z.lazy(() => ContentHint7$inboundSchema),
    z.lazy(() => ContentHint8$inboundSchema),
    z.lazy(() => ContentHint9$inboundSchema),
    z.lazy(() => ContentHint10$inboundSchema),
    z.lazy(() => Eleven$inboundSchema),
    z.lazy(() => Twelve$inboundSchema),
    z.lazy(() => Thirteen$inboundSchema),
    z.lazy(() => Fourteen$inboundSchema),
]);

/** @internal */
export type ContentHint$Outbound =
    | ContentHint1$Outbound
    | ContentHint2$Outbound
    | ContentHint3$Outbound
    | ContentHint4$Outbound
    | ContentHint5$Outbound
    | ContentHint6$Outbound
    | ContentHint7$Outbound
    | ContentHint8$Outbound
    | ContentHint9$Outbound
    | ContentHint10$Outbound
    | Eleven$Outbound
    | Twelve$Outbound
    | Thirteen$Outbound
    | Fourteen$Outbound;

/** @internal */
export const ContentHint$outboundSchema: z.ZodType<
    ContentHint$Outbound,
    z.ZodTypeDef,
    ContentHint
> = z.union([
    z.lazy(() => ContentHint1$outboundSchema),
    z.lazy(() => ContentHint2$outboundSchema),
    z.lazy(() => ContentHint3$outboundSchema),
    z.lazy(() => ContentHint4$outboundSchema),
    z.lazy(() => ContentHint5$outboundSchema),
    z.lazy(() => ContentHint6$outboundSchema),
    z.lazy(() => ContentHint7$outboundSchema),
    z.lazy(() => ContentHint8$outboundSchema),
    z.lazy(() => ContentHint9$outboundSchema),
    z.lazy(() => ContentHint10$outboundSchema),
    z.lazy(() => Eleven$outboundSchema),
    z.lazy(() => Twelve$outboundSchema),
    z.lazy(() => Thirteen$outboundSchema),
    z.lazy(() => Fourteen$outboundSchema),
]);

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace ContentHint$ {
    /** @deprecated use `ContentHint$inboundSchema` instead. */
    export const inboundSchema = ContentHint$inboundSchema;
    /** @deprecated use `ContentHint$outboundSchema` instead. */
    export const outboundSchema = ContentHint$outboundSchema;
    /** @deprecated use `ContentHint$Outbound` instead. */
    export type Outbound = ContentHint$Outbound;
}

/** @internal */
export const EditProjectEnvProjectsResponseType$inboundSchema: z.ZodNativeEnum<
    typeof EditProjectEnvProjectsResponseType
> = z.nativeEnum(EditProjectEnvProjectsResponseType);

/** @internal */
export const EditProjectEnvProjectsResponseType$outboundSchema: z.ZodNativeEnum<
    typeof EditProjectEnvProjectsResponseType
> = EditProjectEnvProjectsResponseType$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace EditProjectEnvProjectsResponseType$ {
    /** @deprecated use `EditProjectEnvProjectsResponseType$inboundSchema` instead. */
    export const inboundSchema = EditProjectEnvProjectsResponseType$inboundSchema;
    /** @deprecated use `EditProjectEnvProjectsResponseType$outboundSchema` instead. */
    export const outboundSchema = EditProjectEnvProjectsResponseType$outboundSchema;
}

/** @internal */
export const InternalContentHint$inboundSchema: z.ZodType<
    InternalContentHint,
    z.ZodTypeDef,
    unknown
> = z.object({
    type: EditProjectEnvProjectsResponseType$inboundSchema,
    encryptedValue: z.string(),
});

/** @internal */
export type InternalContentHint$Outbound = {
    type: string;
    encryptedValue: string;
};

/** @internal */
export const InternalContentHint$outboundSchema: z.ZodType<
    InternalContentHint$Outbound,
    z.ZodTypeDef,
    InternalContentHint
> = z.object({
    type: EditProjectEnvProjectsResponseType$outboundSchema,
    encryptedValue: z.string(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace InternalContentHint$ {
    /** @deprecated use `InternalContentHint$inboundSchema` instead. */
    export const inboundSchema = InternalContentHint$inboundSchema;
    /** @deprecated use `InternalContentHint$outboundSchema` instead. */
    export const outboundSchema = InternalContentHint$outboundSchema;
    /** @deprecated use `InternalContentHint$Outbound` instead. */
    export type Outbound = InternalContentHint$Outbound;
}

/** @internal */
export const EditProjectEnvResponseBody$inboundSchema: z.ZodType<
    EditProjectEnvResponseBody,
    z.ZodTypeDef,
    unknown
> = z.object({
    target: z
        .union([z.array(EditProjectEnvTarget1$inboundSchema), EditProjectEnvTarget2$inboundSchema])
        .optional(),
    type: EditProjectEnvProjectsType$inboundSchema,
    id: z.string().optional(),
    key: z.string(),
    value: z.string(),
    configurationId: z.nullable(z.string()).optional(),
    createdAt: z.number().optional(),
    updatedAt: z.number().optional(),
    createdBy: z.nullable(z.string()).optional(),
    updatedBy: z.nullable(z.string()).optional(),
    gitBranch: z.string().optional(),
    edgeConfigId: z.nullable(z.string()).optional(),
    edgeConfigTokenId: z.nullable(z.string()).optional(),
    contentHint: z
        .nullable(
            z.union([
                z.lazy(() => ContentHint1$inboundSchema),
                z.lazy(() => ContentHint2$inboundSchema),
                z.lazy(() => ContentHint3$inboundSchema),
                z.lazy(() => ContentHint4$inboundSchema),
                z.lazy(() => ContentHint5$inboundSchema),
                z.lazy(() => ContentHint6$inboundSchema),
                z.lazy(() => ContentHint7$inboundSchema),
                z.lazy(() => ContentHint8$inboundSchema),
                z.lazy(() => ContentHint9$inboundSchema),
                z.lazy(() => ContentHint10$inboundSchema),
                z.lazy(() => Eleven$inboundSchema),
                z.lazy(() => Twelve$inboundSchema),
                z.lazy(() => Thirteen$inboundSchema),
                z.lazy(() => Fourteen$inboundSchema),
            ])
        )
        .optional(),
    internalContentHint: z.nullable(z.lazy(() => InternalContentHint$inboundSchema)).optional(),
    decrypted: z.boolean().optional(),
    comment: z.string().optional(),
    customEnvironmentId: z.string().optional(),
});

/** @internal */
export type EditProjectEnvResponseBody$Outbound = {
    target?: Array<string> | string | undefined;
    type: string;
    id?: string | undefined;
    key: string;
    value: string;
    configurationId?: string | null | undefined;
    createdAt?: number | undefined;
    updatedAt?: number | undefined;
    createdBy?: string | null | undefined;
    updatedBy?: string | null | undefined;
    gitBranch?: string | undefined;
    edgeConfigId?: string | null | undefined;
    edgeConfigTokenId?: string | null | undefined;
    contentHint?:
        | ContentHint1$Outbound
        | ContentHint2$Outbound
        | ContentHint3$Outbound
        | ContentHint4$Outbound
        | ContentHint5$Outbound
        | ContentHint6$Outbound
        | ContentHint7$Outbound
        | ContentHint8$Outbound
        | ContentHint9$Outbound
        | ContentHint10$Outbound
        | Eleven$Outbound
        | Twelve$Outbound
        | Thirteen$Outbound
        | Fourteen$Outbound
        | null
        | undefined;
    internalContentHint?: InternalContentHint$Outbound | null | undefined;
    decrypted?: boolean | undefined;
    comment?: string | undefined;
    customEnvironmentId?: string | undefined;
};

/** @internal */
export const EditProjectEnvResponseBody$outboundSchema: z.ZodType<
    EditProjectEnvResponseBody$Outbound,
    z.ZodTypeDef,
    EditProjectEnvResponseBody
> = z.object({
    target: z
        .union([
            z.array(EditProjectEnvTarget1$outboundSchema),
            EditProjectEnvTarget2$outboundSchema,
        ])
        .optional(),
    type: EditProjectEnvProjectsType$outboundSchema,
    id: z.string().optional(),
    key: z.string(),
    value: z.string(),
    configurationId: z.nullable(z.string()).optional(),
    createdAt: z.number().optional(),
    updatedAt: z.number().optional(),
    createdBy: z.nullable(z.string()).optional(),
    updatedBy: z.nullable(z.string()).optional(),
    gitBranch: z.string().optional(),
    edgeConfigId: z.nullable(z.string()).optional(),
    edgeConfigTokenId: z.nullable(z.string()).optional(),
    contentHint: z
        .nullable(
            z.union([
                z.lazy(() => ContentHint1$outboundSchema),
                z.lazy(() => ContentHint2$outboundSchema),
                z.lazy(() => ContentHint3$outboundSchema),
                z.lazy(() => ContentHint4$outboundSchema),
                z.lazy(() => ContentHint5$outboundSchema),
                z.lazy(() => ContentHint6$outboundSchema),
                z.lazy(() => ContentHint7$outboundSchema),
                z.lazy(() => ContentHint8$outboundSchema),
                z.lazy(() => ContentHint9$outboundSchema),
                z.lazy(() => ContentHint10$outboundSchema),
                z.lazy(() => Eleven$outboundSchema),
                z.lazy(() => Twelve$outboundSchema),
                z.lazy(() => Thirteen$outboundSchema),
                z.lazy(() => Fourteen$outboundSchema),
            ])
        )
        .optional(),
    internalContentHint: z.nullable(z.lazy(() => InternalContentHint$outboundSchema)).optional(),
    decrypted: z.boolean().optional(),
    comment: z.string().optional(),
    customEnvironmentId: z.string().optional(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace EditProjectEnvResponseBody$ {
    /** @deprecated use `EditProjectEnvResponseBody$inboundSchema` instead. */
    export const inboundSchema = EditProjectEnvResponseBody$inboundSchema;
    /** @deprecated use `EditProjectEnvResponseBody$outboundSchema` instead. */
    export const outboundSchema = EditProjectEnvResponseBody$outboundSchema;
    /** @deprecated use `EditProjectEnvResponseBody$Outbound` instead. */
    export type Outbound = EditProjectEnvResponseBody$Outbound;
}
