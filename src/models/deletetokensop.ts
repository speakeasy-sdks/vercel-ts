/*
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

import { remap as remap$ } from "../lib/primitives";
import * as z from "zod";

export type DeleteTokensRequestBody = {
    tokens: Array<string>;
};

export type DeleteTokensRequest = {
    edgeConfigId: string;
    /**
     * The Team identifier to perform the request on behalf of.
     */
    teamId?: string | undefined;
    /**
     * The Team slug to perform the request on behalf of.
     */
    slug?: string | undefined;
    requestBody?: DeleteTokensRequestBody | undefined;
};

/** @internal */
export namespace DeleteTokensRequestBody$ {
    export const inboundSchema: z.ZodType<DeleteTokensRequestBody, z.ZodTypeDef, unknown> =
        z.object({
            tokens: z.array(z.string()),
        });

    export type Outbound = {
        tokens: Array<string>;
    };

    export const outboundSchema: z.ZodType<Outbound, z.ZodTypeDef, DeleteTokensRequestBody> =
        z.object({
            tokens: z.array(z.string()),
        });
}

/** @internal */
export namespace DeleteTokensRequest$ {
    export const inboundSchema: z.ZodType<DeleteTokensRequest, z.ZodTypeDef, unknown> = z
        .object({
            edgeConfigId: z.string(),
            teamId: z.string().optional(),
            slug: z.string().optional(),
            RequestBody: z.lazy(() => DeleteTokensRequestBody$.inboundSchema).optional(),
        })
        .transform((v) => {
            return remap$(v, {
                RequestBody: "requestBody",
            });
        });

    export type Outbound = {
        edgeConfigId: string;
        teamId?: string | undefined;
        slug?: string | undefined;
        RequestBody?: DeleteTokensRequestBody$.Outbound | undefined;
    };

    export const outboundSchema: z.ZodType<Outbound, z.ZodTypeDef, DeleteTokensRequest> = z
        .object({
            edgeConfigId: z.string(),
            teamId: z.string().optional(),
            slug: z.string().optional(),
            requestBody: z.lazy(() => DeleteTokensRequestBody$.outboundSchema).optional(),
        })
        .transform((v) => {
            return remap$(v, {
                requestBody: "RequestBody",
            });
        });
}
