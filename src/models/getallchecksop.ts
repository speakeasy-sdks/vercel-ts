/*
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

import { remap as remap$ } from "../lib/primitives.js";
import * as z from "zod";

export type GetAllChecksRequest = {
    /**
     * The deployment to get all checks for
     */
    deploymentId: string;
    /**
     * The Team identifier to perform the request on behalf of.
     */
    teamId?: string | undefined;
    /**
     * The Team slug to perform the request on behalf of.
     */
    slug?: string | undefined;
};

export enum GetAllChecksConclusion {
    Canceled = "canceled",
    Failed = "failed",
    Neutral = "neutral",
    Succeeded = "succeeded",
    Skipped = "skipped",
    Stale = "stale",
}

export enum GetAllChecksSource {
    WebVitals = "web-vitals",
}

export type GetAllChecksFCP = {
    value: number | null;
    previousValue?: number | undefined;
    source: GetAllChecksSource;
};

export enum GetAllChecksChecksSource {
    WebVitals = "web-vitals",
}

export type GetAllChecksLCP = {
    value: number | null;
    previousValue?: number | undefined;
    source: GetAllChecksChecksSource;
};

export enum GetAllChecksChecksResponseSource {
    WebVitals = "web-vitals",
}

export type GetAllChecksCLS = {
    value: number | null;
    previousValue?: number | undefined;
    source: GetAllChecksChecksResponseSource;
};

export enum GetAllChecksChecksResponse200Source {
    WebVitals = "web-vitals",
}

export type GetAllChecksTBT = {
    value: number | null;
    previousValue?: number | undefined;
    source: GetAllChecksChecksResponse200Source;
};

export enum GetAllChecksChecksResponse200ApplicationJSONSource {
    WebVitals = "web-vitals",
}

export type GetAllChecksVirtualExperienceScore = {
    value: number | null;
    previousValue?: number | undefined;
    source: GetAllChecksChecksResponse200ApplicationJSONSource;
};

export type GetAllChecksMetrics = {
    fcp: GetAllChecksFCP;
    lcp: GetAllChecksLCP;
    cls: GetAllChecksCLS;
    tbt: GetAllChecksTBT;
    virtualExperienceScore?: GetAllChecksVirtualExperienceScore | undefined;
};

export type GetAllChecksOutput = {
    metrics?: GetAllChecksMetrics | undefined;
};

export enum GetAllChecksStatus {
    Registered = "registered",
    Running = "running",
    Completed = "completed",
}

export type GetAllChecksChecks = {
    completedAt?: number | undefined;
    conclusion?: GetAllChecksConclusion | undefined;
    createdAt: number;
    detailsUrl?: string | undefined;
    id: string;
    integrationId: string;
    name: string;
    output?: GetAllChecksOutput | undefined;
    path?: string | undefined;
    rerequestable: boolean;
    startedAt?: number | undefined;
    status: GetAllChecksStatus;
    updatedAt: number;
};

export type GetAllChecksResponseBody = {
    checks: Array<GetAllChecksChecks>;
};

/** @internal */
export namespace GetAllChecksRequest$ {
    export const inboundSchema: z.ZodType<GetAllChecksRequest, z.ZodTypeDef, unknown> = z.object({
        deploymentId: z.string(),
        teamId: z.string().optional(),
        slug: z.string().optional(),
    });

    export type Outbound = {
        deploymentId: string;
        teamId?: string | undefined;
        slug?: string | undefined;
    };

    export const outboundSchema: z.ZodType<Outbound, z.ZodTypeDef, GetAllChecksRequest> = z.object({
        deploymentId: z.string(),
        teamId: z.string().optional(),
        slug: z.string().optional(),
    });
}

/** @internal */
export namespace GetAllChecksConclusion$ {
    export const inboundSchema: z.ZodNativeEnum<typeof GetAllChecksConclusion> =
        z.nativeEnum(GetAllChecksConclusion);
    export const outboundSchema: z.ZodNativeEnum<typeof GetAllChecksConclusion> = inboundSchema;
}

/** @internal */
export namespace GetAllChecksSource$ {
    export const inboundSchema: z.ZodNativeEnum<typeof GetAllChecksSource> =
        z.nativeEnum(GetAllChecksSource);
    export const outboundSchema: z.ZodNativeEnum<typeof GetAllChecksSource> = inboundSchema;
}

/** @internal */
export namespace GetAllChecksFCP$ {
    export const inboundSchema: z.ZodType<GetAllChecksFCP, z.ZodTypeDef, unknown> = z.object({
        value: z.nullable(z.number()),
        previousValue: z.number().optional(),
        source: GetAllChecksSource$.inboundSchema,
    });

    export type Outbound = {
        value: number | null;
        previousValue?: number | undefined;
        source: string;
    };

    export const outboundSchema: z.ZodType<Outbound, z.ZodTypeDef, GetAllChecksFCP> = z.object({
        value: z.nullable(z.number()),
        previousValue: z.number().optional(),
        source: GetAllChecksSource$.outboundSchema,
    });
}

/** @internal */
export namespace GetAllChecksChecksSource$ {
    export const inboundSchema: z.ZodNativeEnum<typeof GetAllChecksChecksSource> =
        z.nativeEnum(GetAllChecksChecksSource);
    export const outboundSchema: z.ZodNativeEnum<typeof GetAllChecksChecksSource> = inboundSchema;
}

/** @internal */
export namespace GetAllChecksLCP$ {
    export const inboundSchema: z.ZodType<GetAllChecksLCP, z.ZodTypeDef, unknown> = z.object({
        value: z.nullable(z.number()),
        previousValue: z.number().optional(),
        source: GetAllChecksChecksSource$.inboundSchema,
    });

    export type Outbound = {
        value: number | null;
        previousValue?: number | undefined;
        source: string;
    };

    export const outboundSchema: z.ZodType<Outbound, z.ZodTypeDef, GetAllChecksLCP> = z.object({
        value: z.nullable(z.number()),
        previousValue: z.number().optional(),
        source: GetAllChecksChecksSource$.outboundSchema,
    });
}

/** @internal */
export namespace GetAllChecksChecksResponseSource$ {
    export const inboundSchema: z.ZodNativeEnum<typeof GetAllChecksChecksResponseSource> =
        z.nativeEnum(GetAllChecksChecksResponseSource);
    export const outboundSchema: z.ZodNativeEnum<typeof GetAllChecksChecksResponseSource> =
        inboundSchema;
}

/** @internal */
export namespace GetAllChecksCLS$ {
    export const inboundSchema: z.ZodType<GetAllChecksCLS, z.ZodTypeDef, unknown> = z.object({
        value: z.nullable(z.number()),
        previousValue: z.number().optional(),
        source: GetAllChecksChecksResponseSource$.inboundSchema,
    });

    export type Outbound = {
        value: number | null;
        previousValue?: number | undefined;
        source: string;
    };

    export const outboundSchema: z.ZodType<Outbound, z.ZodTypeDef, GetAllChecksCLS> = z.object({
        value: z.nullable(z.number()),
        previousValue: z.number().optional(),
        source: GetAllChecksChecksResponseSource$.outboundSchema,
    });
}

/** @internal */
export namespace GetAllChecksChecksResponse200Source$ {
    export const inboundSchema: z.ZodNativeEnum<typeof GetAllChecksChecksResponse200Source> =
        z.nativeEnum(GetAllChecksChecksResponse200Source);
    export const outboundSchema: z.ZodNativeEnum<typeof GetAllChecksChecksResponse200Source> =
        inboundSchema;
}

/** @internal */
export namespace GetAllChecksTBT$ {
    export const inboundSchema: z.ZodType<GetAllChecksTBT, z.ZodTypeDef, unknown> = z.object({
        value: z.nullable(z.number()),
        previousValue: z.number().optional(),
        source: GetAllChecksChecksResponse200Source$.inboundSchema,
    });

    export type Outbound = {
        value: number | null;
        previousValue?: number | undefined;
        source: string;
    };

    export const outboundSchema: z.ZodType<Outbound, z.ZodTypeDef, GetAllChecksTBT> = z.object({
        value: z.nullable(z.number()),
        previousValue: z.number().optional(),
        source: GetAllChecksChecksResponse200Source$.outboundSchema,
    });
}

/** @internal */
export namespace GetAllChecksChecksResponse200ApplicationJSONSource$ {
    export const inboundSchema: z.ZodNativeEnum<
        typeof GetAllChecksChecksResponse200ApplicationJSONSource
    > = z.nativeEnum(GetAllChecksChecksResponse200ApplicationJSONSource);
    export const outboundSchema: z.ZodNativeEnum<
        typeof GetAllChecksChecksResponse200ApplicationJSONSource
    > = inboundSchema;
}

/** @internal */
export namespace GetAllChecksVirtualExperienceScore$ {
    export const inboundSchema: z.ZodType<
        GetAllChecksVirtualExperienceScore,
        z.ZodTypeDef,
        unknown
    > = z.object({
        value: z.nullable(z.number()),
        previousValue: z.number().optional(),
        source: GetAllChecksChecksResponse200ApplicationJSONSource$.inboundSchema,
    });

    export type Outbound = {
        value: number | null;
        previousValue?: number | undefined;
        source: string;
    };

    export const outboundSchema: z.ZodType<
        Outbound,
        z.ZodTypeDef,
        GetAllChecksVirtualExperienceScore
    > = z.object({
        value: z.nullable(z.number()),
        previousValue: z.number().optional(),
        source: GetAllChecksChecksResponse200ApplicationJSONSource$.outboundSchema,
    });
}

/** @internal */
export namespace GetAllChecksMetrics$ {
    export const inboundSchema: z.ZodType<GetAllChecksMetrics, z.ZodTypeDef, unknown> = z
        .object({
            FCP: z.lazy(() => GetAllChecksFCP$.inboundSchema),
            LCP: z.lazy(() => GetAllChecksLCP$.inboundSchema),
            CLS: z.lazy(() => GetAllChecksCLS$.inboundSchema),
            TBT: z.lazy(() => GetAllChecksTBT$.inboundSchema),
            virtualExperienceScore: z
                .lazy(() => GetAllChecksVirtualExperienceScore$.inboundSchema)
                .optional(),
        })
        .transform((v) => {
            return remap$(v, {
                FCP: "fcp",
                LCP: "lcp",
                CLS: "cls",
                TBT: "tbt",
            });
        });

    export type Outbound = {
        FCP: GetAllChecksFCP$.Outbound;
        LCP: GetAllChecksLCP$.Outbound;
        CLS: GetAllChecksCLS$.Outbound;
        TBT: GetAllChecksTBT$.Outbound;
        virtualExperienceScore?: GetAllChecksVirtualExperienceScore$.Outbound | undefined;
    };

    export const outboundSchema: z.ZodType<Outbound, z.ZodTypeDef, GetAllChecksMetrics> = z
        .object({
            fcp: z.lazy(() => GetAllChecksFCP$.outboundSchema),
            lcp: z.lazy(() => GetAllChecksLCP$.outboundSchema),
            cls: z.lazy(() => GetAllChecksCLS$.outboundSchema),
            tbt: z.lazy(() => GetAllChecksTBT$.outboundSchema),
            virtualExperienceScore: z
                .lazy(() => GetAllChecksVirtualExperienceScore$.outboundSchema)
                .optional(),
        })
        .transform((v) => {
            return remap$(v, {
                fcp: "FCP",
                lcp: "LCP",
                cls: "CLS",
                tbt: "TBT",
            });
        });
}

/** @internal */
export namespace GetAllChecksOutput$ {
    export const inboundSchema: z.ZodType<GetAllChecksOutput, z.ZodTypeDef, unknown> = z.object({
        metrics: z.lazy(() => GetAllChecksMetrics$.inboundSchema).optional(),
    });

    export type Outbound = {
        metrics?: GetAllChecksMetrics$.Outbound | undefined;
    };

    export const outboundSchema: z.ZodType<Outbound, z.ZodTypeDef, GetAllChecksOutput> = z.object({
        metrics: z.lazy(() => GetAllChecksMetrics$.outboundSchema).optional(),
    });
}

/** @internal */
export namespace GetAllChecksStatus$ {
    export const inboundSchema: z.ZodNativeEnum<typeof GetAllChecksStatus> =
        z.nativeEnum(GetAllChecksStatus);
    export const outboundSchema: z.ZodNativeEnum<typeof GetAllChecksStatus> = inboundSchema;
}

/** @internal */
export namespace GetAllChecksChecks$ {
    export const inboundSchema: z.ZodType<GetAllChecksChecks, z.ZodTypeDef, unknown> = z.object({
        completedAt: z.number().optional(),
        conclusion: GetAllChecksConclusion$.inboundSchema.optional(),
        createdAt: z.number(),
        detailsUrl: z.string().optional(),
        id: z.string(),
        integrationId: z.string(),
        name: z.string(),
        output: z.lazy(() => GetAllChecksOutput$.inboundSchema).optional(),
        path: z.string().optional(),
        rerequestable: z.boolean(),
        startedAt: z.number().optional(),
        status: GetAllChecksStatus$.inboundSchema,
        updatedAt: z.number(),
    });

    export type Outbound = {
        completedAt?: number | undefined;
        conclusion?: string | undefined;
        createdAt: number;
        detailsUrl?: string | undefined;
        id: string;
        integrationId: string;
        name: string;
        output?: GetAllChecksOutput$.Outbound | undefined;
        path?: string | undefined;
        rerequestable: boolean;
        startedAt?: number | undefined;
        status: string;
        updatedAt: number;
    };

    export const outboundSchema: z.ZodType<Outbound, z.ZodTypeDef, GetAllChecksChecks> = z.object({
        completedAt: z.number().optional(),
        conclusion: GetAllChecksConclusion$.outboundSchema.optional(),
        createdAt: z.number(),
        detailsUrl: z.string().optional(),
        id: z.string(),
        integrationId: z.string(),
        name: z.string(),
        output: z.lazy(() => GetAllChecksOutput$.outboundSchema).optional(),
        path: z.string().optional(),
        rerequestable: z.boolean(),
        startedAt: z.number().optional(),
        status: GetAllChecksStatus$.outboundSchema,
        updatedAt: z.number(),
    });
}

/** @internal */
export namespace GetAllChecksResponseBody$ {
    export const inboundSchema: z.ZodType<GetAllChecksResponseBody, z.ZodTypeDef, unknown> =
        z.object({
            checks: z.array(z.lazy(() => GetAllChecksChecks$.inboundSchema)),
        });

    export type Outbound = {
        checks: Array<GetAllChecksChecks$.Outbound>;
    };

    export const outboundSchema: z.ZodType<Outbound, z.ZodTypeDef, GetAllChecksResponseBody> =
        z.object({
            checks: z.array(z.lazy(() => GetAllChecksChecks$.outboundSchema)),
        });
}
