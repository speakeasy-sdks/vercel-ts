/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { ClosedEnum } from "../types/enums.js";

/**
 * Whether to try to decrypt the value of the secret. Only works if `decryptable` has been set to `true` when the secret was created.
 */
export const QueryParamDecrypt = {
  True: "true",
  False: "false",
} as const;
/**
 * Whether to try to decrypt the value of the secret. Only works if `decryptable` has been set to `true` when the secret was created.
 */
export type QueryParamDecrypt = ClosedEnum<typeof QueryParamDecrypt>;

export type GetSecretRequest = {
  /**
   * The name or the unique identifier to which the secret belongs to.
   */
  idOrName: string;
  /**
   * Whether to try to decrypt the value of the secret. Only works if `decryptable` has been set to `true` when the secret was created.
   */
  decrypt?: QueryParamDecrypt | undefined;
  /**
   * The Team identifier to perform the request on behalf of.
   */
  teamId?: string | undefined;
  /**
   * The Team slug to perform the request on behalf of.
   */
  slug?: string | undefined;
};

/**
 * Data representing a secret.
 */
export type GetSecretResponseBody = {
  /**
   * The date when the secret was created.
   */
  created: Date;
  /**
   * The name of the secret.
   */
  name: string;
  /**
   * The unique identifier of the team the secret was created for.
   */
  teamId?: string | null | undefined;
  /**
   * The unique identifier of the secret.
   */
  uid: string;
  /**
   * The unique identifier of the user who created the secret.
   */
  userId?: string | undefined;
  /**
   * The value of the secret.
   */
  value?: string | undefined;
  /**
   * Timestamp for when the secret was created.
   */
  createdAt?: number | undefined;
  /**
   * The unique identifier of the project which the secret belongs to.
   */
  projectId?: string | undefined;
  /**
   * Indicates whether the secret value can be decrypted after it has been created.
   */
  decryptable?: boolean | undefined;
};

/** @internal */
export const QueryParamDecrypt$inboundSchema: z.ZodNativeEnum<
  typeof QueryParamDecrypt
> = z.nativeEnum(QueryParamDecrypt);

/** @internal */
export const QueryParamDecrypt$outboundSchema: z.ZodNativeEnum<
  typeof QueryParamDecrypt
> = QueryParamDecrypt$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace QueryParamDecrypt$ {
  /** @deprecated use `QueryParamDecrypt$inboundSchema` instead. */
  export const inboundSchema = QueryParamDecrypt$inboundSchema;
  /** @deprecated use `QueryParamDecrypt$outboundSchema` instead. */
  export const outboundSchema = QueryParamDecrypt$outboundSchema;
}

/** @internal */
export const GetSecretRequest$inboundSchema: z.ZodType<
  GetSecretRequest,
  z.ZodTypeDef,
  unknown
> = z.object({
  idOrName: z.string(),
  decrypt: QueryParamDecrypt$inboundSchema.optional(),
  teamId: z.string().optional(),
  slug: z.string().optional(),
});

/** @internal */
export type GetSecretRequest$Outbound = {
  idOrName: string;
  decrypt?: string | undefined;
  teamId?: string | undefined;
  slug?: string | undefined;
};

/** @internal */
export const GetSecretRequest$outboundSchema: z.ZodType<
  GetSecretRequest$Outbound,
  z.ZodTypeDef,
  GetSecretRequest
> = z.object({
  idOrName: z.string(),
  decrypt: QueryParamDecrypt$outboundSchema.optional(),
  teamId: z.string().optional(),
  slug: z.string().optional(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace GetSecretRequest$ {
  /** @deprecated use `GetSecretRequest$inboundSchema` instead. */
  export const inboundSchema = GetSecretRequest$inboundSchema;
  /** @deprecated use `GetSecretRequest$outboundSchema` instead. */
  export const outboundSchema = GetSecretRequest$outboundSchema;
  /** @deprecated use `GetSecretRequest$Outbound` instead. */
  export type Outbound = GetSecretRequest$Outbound;
}

/** @internal */
export const GetSecretResponseBody$inboundSchema: z.ZodType<
  GetSecretResponseBody,
  z.ZodTypeDef,
  unknown
> = z.object({
  created: z.string().datetime({ offset: true }).transform(v => new Date(v)),
  name: z.string(),
  teamId: z.nullable(z.string()).optional(),
  uid: z.string(),
  userId: z.string().optional(),
  value: z.string().optional(),
  createdAt: z.number().optional(),
  projectId: z.string().optional(),
  decryptable: z.boolean().optional(),
});

/** @internal */
export type GetSecretResponseBody$Outbound = {
  created: string;
  name: string;
  teamId?: string | null | undefined;
  uid: string;
  userId?: string | undefined;
  value?: string | undefined;
  createdAt?: number | undefined;
  projectId?: string | undefined;
  decryptable?: boolean | undefined;
};

/** @internal */
export const GetSecretResponseBody$outboundSchema: z.ZodType<
  GetSecretResponseBody$Outbound,
  z.ZodTypeDef,
  GetSecretResponseBody
> = z.object({
  created: z.date().transform(v => v.toISOString()),
  name: z.string(),
  teamId: z.nullable(z.string()).optional(),
  uid: z.string(),
  userId: z.string().optional(),
  value: z.string().optional(),
  createdAt: z.number().optional(),
  projectId: z.string().optional(),
  decryptable: z.boolean().optional(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace GetSecretResponseBody$ {
  /** @deprecated use `GetSecretResponseBody$inboundSchema` instead. */
  export const inboundSchema = GetSecretResponseBody$inboundSchema;
  /** @deprecated use `GetSecretResponseBody$outboundSchema` instead. */
  export const outboundSchema = GetSecretResponseBody$outboundSchema;
  /** @deprecated use `GetSecretResponseBody$Outbound` instead. */
  export type Outbound = GetSecretResponseBody$Outbound;
}
