/*
 * Code generated by Speakeasy (https://speakeasyapi.com). DO NOT EDIT.
 */

import { ClosedEnum } from "../types/enums.js";
import * as z from "zod";

export type GetDeploymentBuildsRequest = {
    /**
     * The deployment unique identifier
     */
    deploymentId: string;
};

/**
 * The state of the deployment depending on the process of deploying, or if it is ready or in an error state
 */
export const ReadyState = {
    Initializing: "INITIALIZING",
    Building: "BUILDING",
    Uploading: "UPLOADING",
    Deploying: "DEPLOYING",
    Ready: "READY",
    Archived: "ARCHIVED",
    Error: "ERROR",
    Queued: "QUEUED",
    Canceled: "CANCELED",
} as const;
/**
 * The state of the deployment depending on the process of deploying, or if it is ready or in an error state
 */
export type ReadyState = ClosedEnum<typeof ReadyState>;

/**
 * An object that contains the Build's configuration
 */
export type Config = {
    distDir?: string | undefined;
    forceBuildIn?: string | undefined;
    reuseWorkPathFrom?: string | undefined;
    zeroConfig?: boolean | undefined;
};

/**
 * The type of the output
 */
export const GetDeploymentBuildsType = {
    Lambda: "lambda",
    File: "file",
    Edge: "edge",
} as const;
/**
 * The type of the output
 */
export type GetDeploymentBuildsType = ClosedEnum<typeof GetDeploymentBuildsType>;

/**
 * If the output is a Serverless Function, an object containing the name, location and memory size of the function
 */
export type Lambda = {
    functionName: string;
    deployedTo: Array<string>;
    memorySize?: number | undefined;
    timeout?: number | undefined;
    layers?: Array<string> | undefined;
};

/**
 * Exists if the output is an edge function.
 */
export type Edge = {
    /**
     * The regions where the edge function will be invoked. Only exists if the edge function as a regional edge function, see: https://vercel.com/docs/concepts/edge-network/regions#setting-edge-function-regions
     */
    regions: Array<string> | null;
};

/**
 * A list of outputs for the Build that can be either Serverless Functions or static files
 */
export type GetDeploymentBuildsOutput = {
    /**
     * The type of the output
     */
    type?: GetDeploymentBuildsType | undefined;
    /**
     * The absolute path of the file or Serverless Function
     */
    path: string;
    /**
     * The SHA1 of the file
     */
    digest: string;
    /**
     * The POSIX file permissions
     */
    mode: number;
    /**
     * The size of the file in bytes
     */
    size?: number | undefined;
    /**
     * If the output is a Serverless Function, an object containing the name, location and memory size of the function
     */
    lambda?: Lambda | null | undefined;
    /**
     * Exists if the output is an edge function.
     */
    edge?: Edge | null | undefined;
};

/**
 * An object representing a Build on Vercel
 */
export type Builds = {
    /**
     * The unique identifier of the Build
     */
    id: string;
    /**
     * The unique identifier of the deployment
     */
    deploymentId: string;
    /**
     * The entrypoint of the deployment
     */
    entrypoint: string;
    /**
     * The state of the deployment depending on the process of deploying, or if it is ready or in an error state
     */
    readyState: ReadyState;
    /**
     * The time at which the Build state was last modified
     */
    readyStateAt?: number | undefined;
    /**
     * The time at which the Build was scheduled to be built
     */
    scheduledAt?: number | null | undefined;
    /**
     * The time at which the Build was created
     */
    createdAt?: number | undefined;
    /**
     * The time at which the Build was deployed
     */
    deployedAt?: number | undefined;
    /**
     * The region where the Build was first created
     */
    createdIn?: string | undefined;
    /**
     * The Runtime the Build used to generate the output
     */
    use?: string | undefined;
    /**
     * An object that contains the Build's configuration
     */
    config?: Config | undefined;
    /**
     * A list of outputs for the Build that can be either Serverless Functions or static files
     */
    output: Array<GetDeploymentBuildsOutput>;
    /**
     * If the Build uses the `@vercel/static` Runtime, it contains a hashed string of all outputs
     */
    fingerprint?: string | null | undefined;
    copiedFrom?: string | undefined;
};

export type GetDeploymentBuildsResponseBody = {
    builds: Array<Builds>;
};

/** @internal */
export const GetDeploymentBuildsRequest$inboundSchema: z.ZodType<
    GetDeploymentBuildsRequest,
    z.ZodTypeDef,
    unknown
> = z.object({
    deploymentId: z.string(),
});

/** @internal */
export type GetDeploymentBuildsRequest$Outbound = {
    deploymentId: string;
};

/** @internal */
export const GetDeploymentBuildsRequest$outboundSchema: z.ZodType<
    GetDeploymentBuildsRequest$Outbound,
    z.ZodTypeDef,
    GetDeploymentBuildsRequest
> = z.object({
    deploymentId: z.string(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace GetDeploymentBuildsRequest$ {
    /** @deprecated use `GetDeploymentBuildsRequest$inboundSchema` instead. */
    export const inboundSchema = GetDeploymentBuildsRequest$inboundSchema;
    /** @deprecated use `GetDeploymentBuildsRequest$outboundSchema` instead. */
    export const outboundSchema = GetDeploymentBuildsRequest$outboundSchema;
    /** @deprecated use `GetDeploymentBuildsRequest$Outbound` instead. */
    export type Outbound = GetDeploymentBuildsRequest$Outbound;
}

/** @internal */
export const ReadyState$inboundSchema: z.ZodNativeEnum<typeof ReadyState> =
    z.nativeEnum(ReadyState);

/** @internal */
export const ReadyState$outboundSchema: z.ZodNativeEnum<typeof ReadyState> =
    ReadyState$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace ReadyState$ {
    /** @deprecated use `ReadyState$inboundSchema` instead. */
    export const inboundSchema = ReadyState$inboundSchema;
    /** @deprecated use `ReadyState$outboundSchema` instead. */
    export const outboundSchema = ReadyState$outboundSchema;
}

/** @internal */
export const Config$inboundSchema: z.ZodType<Config, z.ZodTypeDef, unknown> = z.object({
    distDir: z.string().optional(),
    forceBuildIn: z.string().optional(),
    reuseWorkPathFrom: z.string().optional(),
    zeroConfig: z.boolean().optional(),
});

/** @internal */
export type Config$Outbound = {
    distDir?: string | undefined;
    forceBuildIn?: string | undefined;
    reuseWorkPathFrom?: string | undefined;
    zeroConfig?: boolean | undefined;
};

/** @internal */
export const Config$outboundSchema: z.ZodType<Config$Outbound, z.ZodTypeDef, Config> = z.object({
    distDir: z.string().optional(),
    forceBuildIn: z.string().optional(),
    reuseWorkPathFrom: z.string().optional(),
    zeroConfig: z.boolean().optional(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace Config$ {
    /** @deprecated use `Config$inboundSchema` instead. */
    export const inboundSchema = Config$inboundSchema;
    /** @deprecated use `Config$outboundSchema` instead. */
    export const outboundSchema = Config$outboundSchema;
    /** @deprecated use `Config$Outbound` instead. */
    export type Outbound = Config$Outbound;
}

/** @internal */
export const GetDeploymentBuildsType$inboundSchema: z.ZodNativeEnum<
    typeof GetDeploymentBuildsType
> = z.nativeEnum(GetDeploymentBuildsType);

/** @internal */
export const GetDeploymentBuildsType$outboundSchema: z.ZodNativeEnum<
    typeof GetDeploymentBuildsType
> = GetDeploymentBuildsType$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace GetDeploymentBuildsType$ {
    /** @deprecated use `GetDeploymentBuildsType$inboundSchema` instead. */
    export const inboundSchema = GetDeploymentBuildsType$inboundSchema;
    /** @deprecated use `GetDeploymentBuildsType$outboundSchema` instead. */
    export const outboundSchema = GetDeploymentBuildsType$outboundSchema;
}

/** @internal */
export const Lambda$inboundSchema: z.ZodType<Lambda, z.ZodTypeDef, unknown> = z.object({
    functionName: z.string(),
    deployedTo: z.array(z.string()),
    memorySize: z.number().optional(),
    timeout: z.number().optional(),
    layers: z.array(z.string()).optional(),
});

/** @internal */
export type Lambda$Outbound = {
    functionName: string;
    deployedTo: Array<string>;
    memorySize?: number | undefined;
    timeout?: number | undefined;
    layers?: Array<string> | undefined;
};

/** @internal */
export const Lambda$outboundSchema: z.ZodType<Lambda$Outbound, z.ZodTypeDef, Lambda> = z.object({
    functionName: z.string(),
    deployedTo: z.array(z.string()),
    memorySize: z.number().optional(),
    timeout: z.number().optional(),
    layers: z.array(z.string()).optional(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace Lambda$ {
    /** @deprecated use `Lambda$inboundSchema` instead. */
    export const inboundSchema = Lambda$inboundSchema;
    /** @deprecated use `Lambda$outboundSchema` instead. */
    export const outboundSchema = Lambda$outboundSchema;
    /** @deprecated use `Lambda$Outbound` instead. */
    export type Outbound = Lambda$Outbound;
}

/** @internal */
export const Edge$inboundSchema: z.ZodType<Edge, z.ZodTypeDef, unknown> = z.object({
    regions: z.nullable(z.array(z.string())),
});

/** @internal */
export type Edge$Outbound = {
    regions: Array<string> | null;
};

/** @internal */
export const Edge$outboundSchema: z.ZodType<Edge$Outbound, z.ZodTypeDef, Edge> = z.object({
    regions: z.nullable(z.array(z.string())),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace Edge$ {
    /** @deprecated use `Edge$inboundSchema` instead. */
    export const inboundSchema = Edge$inboundSchema;
    /** @deprecated use `Edge$outboundSchema` instead. */
    export const outboundSchema = Edge$outboundSchema;
    /** @deprecated use `Edge$Outbound` instead. */
    export type Outbound = Edge$Outbound;
}

/** @internal */
export const GetDeploymentBuildsOutput$inboundSchema: z.ZodType<
    GetDeploymentBuildsOutput,
    z.ZodTypeDef,
    unknown
> = z.object({
    type: GetDeploymentBuildsType$inboundSchema.optional(),
    path: z.string(),
    digest: z.string(),
    mode: z.number(),
    size: z.number().optional(),
    lambda: z.nullable(z.lazy(() => Lambda$inboundSchema)).optional(),
    edge: z.nullable(z.lazy(() => Edge$inboundSchema)).optional(),
});

/** @internal */
export type GetDeploymentBuildsOutput$Outbound = {
    type?: string | undefined;
    path: string;
    digest: string;
    mode: number;
    size?: number | undefined;
    lambda?: Lambda$Outbound | null | undefined;
    edge?: Edge$Outbound | null | undefined;
};

/** @internal */
export const GetDeploymentBuildsOutput$outboundSchema: z.ZodType<
    GetDeploymentBuildsOutput$Outbound,
    z.ZodTypeDef,
    GetDeploymentBuildsOutput
> = z.object({
    type: GetDeploymentBuildsType$outboundSchema.optional(),
    path: z.string(),
    digest: z.string(),
    mode: z.number(),
    size: z.number().optional(),
    lambda: z.nullable(z.lazy(() => Lambda$outboundSchema)).optional(),
    edge: z.nullable(z.lazy(() => Edge$outboundSchema)).optional(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace GetDeploymentBuildsOutput$ {
    /** @deprecated use `GetDeploymentBuildsOutput$inboundSchema` instead. */
    export const inboundSchema = GetDeploymentBuildsOutput$inboundSchema;
    /** @deprecated use `GetDeploymentBuildsOutput$outboundSchema` instead. */
    export const outboundSchema = GetDeploymentBuildsOutput$outboundSchema;
    /** @deprecated use `GetDeploymentBuildsOutput$Outbound` instead. */
    export type Outbound = GetDeploymentBuildsOutput$Outbound;
}

/** @internal */
export const Builds$inboundSchema: z.ZodType<Builds, z.ZodTypeDef, unknown> = z.object({
    id: z.string(),
    deploymentId: z.string(),
    entrypoint: z.string(),
    readyState: ReadyState$inboundSchema,
    readyStateAt: z.number().optional(),
    scheduledAt: z.nullable(z.number()).optional(),
    createdAt: z.number().optional(),
    deployedAt: z.number().optional(),
    createdIn: z.string().optional(),
    use: z.string().optional(),
    config: z.lazy(() => Config$inboundSchema).optional(),
    output: z.array(z.lazy(() => GetDeploymentBuildsOutput$inboundSchema)),
    fingerprint: z.nullable(z.string()).optional(),
    copiedFrom: z.string().optional(),
});

/** @internal */
export type Builds$Outbound = {
    id: string;
    deploymentId: string;
    entrypoint: string;
    readyState: string;
    readyStateAt?: number | undefined;
    scheduledAt?: number | null | undefined;
    createdAt?: number | undefined;
    deployedAt?: number | undefined;
    createdIn?: string | undefined;
    use?: string | undefined;
    config?: Config$Outbound | undefined;
    output: Array<GetDeploymentBuildsOutput$Outbound>;
    fingerprint?: string | null | undefined;
    copiedFrom?: string | undefined;
};

/** @internal */
export const Builds$outboundSchema: z.ZodType<Builds$Outbound, z.ZodTypeDef, Builds> = z.object({
    id: z.string(),
    deploymentId: z.string(),
    entrypoint: z.string(),
    readyState: ReadyState$outboundSchema,
    readyStateAt: z.number().optional(),
    scheduledAt: z.nullable(z.number()).optional(),
    createdAt: z.number().optional(),
    deployedAt: z.number().optional(),
    createdIn: z.string().optional(),
    use: z.string().optional(),
    config: z.lazy(() => Config$outboundSchema).optional(),
    output: z.array(z.lazy(() => GetDeploymentBuildsOutput$outboundSchema)),
    fingerprint: z.nullable(z.string()).optional(),
    copiedFrom: z.string().optional(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace Builds$ {
    /** @deprecated use `Builds$inboundSchema` instead. */
    export const inboundSchema = Builds$inboundSchema;
    /** @deprecated use `Builds$outboundSchema` instead. */
    export const outboundSchema = Builds$outboundSchema;
    /** @deprecated use `Builds$Outbound` instead. */
    export type Outbound = Builds$Outbound;
}

/** @internal */
export const GetDeploymentBuildsResponseBody$inboundSchema: z.ZodType<
    GetDeploymentBuildsResponseBody,
    z.ZodTypeDef,
    unknown
> = z.object({
    builds: z.array(z.lazy(() => Builds$inboundSchema)),
});

/** @internal */
export type GetDeploymentBuildsResponseBody$Outbound = {
    builds: Array<Builds$Outbound>;
};

/** @internal */
export const GetDeploymentBuildsResponseBody$outboundSchema: z.ZodType<
    GetDeploymentBuildsResponseBody$Outbound,
    z.ZodTypeDef,
    GetDeploymentBuildsResponseBody
> = z.object({
    builds: z.array(z.lazy(() => Builds$outboundSchema)),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace GetDeploymentBuildsResponseBody$ {
    /** @deprecated use `GetDeploymentBuildsResponseBody$inboundSchema` instead. */
    export const inboundSchema = GetDeploymentBuildsResponseBody$inboundSchema;
    /** @deprecated use `GetDeploymentBuildsResponseBody$outboundSchema` instead. */
    export const outboundSchema = GetDeploymentBuildsResponseBody$outboundSchema;
    /** @deprecated use `GetDeploymentBuildsResponseBody$Outbound` instead. */
    export type Outbound = GetDeploymentBuildsResponseBody$Outbound;
}
