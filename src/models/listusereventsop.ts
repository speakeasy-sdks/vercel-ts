/*
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

import { HTTPMetadata, HTTPMetadata$ } from "./httpmetadata";
import { UserEvent, UserEvent$ } from "./userevent";
import * as z from "zod";

export type ListUserEventsRequest = {
    /**
     * Maximum number of items which may be returned.
     */
    limit?: number | undefined;
    /**
     * Timestamp to only include items created since then.
     */
    since?: string | undefined;
    /**
     * Timestamp to only include items created until then.
     */
    until?: string | undefined;
    /**
     * Comma-delimited list of event \"types\" to filter the results by.
     */
    types?: string | undefined;
    /**
     * When retrieving events for a Team, the `userId` parameter may be specified to filter events generated by a specific member of the Team.
     */
    userId?: string | undefined;
    /**
     * The Team identifier to perform the request on behalf of.
     */
    teamId?: string | undefined;
    /**
     * The Team slug to perform the request on behalf of.
     */
    slug?: string | undefined;
};

/**
 * Successful response.
 */
export type ListUserEventsResponseBody = {
    /**
     * Array of events generated by the User.
     */
    events: Array<UserEvent>;
};

export type ListUserEventsResponse = {
    httpMeta: HTTPMetadata;
    /**
     * Successful response.
     */
    object?: ListUserEventsResponseBody | undefined;
};

/** @internal */
export namespace ListUserEventsRequest$ {
    export const inboundSchema: z.ZodType<ListUserEventsRequest, z.ZodTypeDef, unknown> = z
        .object({
            limit: z.number().optional(),
            since: z.string().optional(),
            until: z.string().optional(),
            types: z.string().optional(),
            userId: z.string().optional(),
            teamId: z.string().optional(),
            slug: z.string().optional(),
        })
        .transform((v) => {
            return {
                ...(v.limit === undefined ? null : { limit: v.limit }),
                ...(v.since === undefined ? null : { since: v.since }),
                ...(v.until === undefined ? null : { until: v.until }),
                ...(v.types === undefined ? null : { types: v.types }),
                ...(v.userId === undefined ? null : { userId: v.userId }),
                ...(v.teamId === undefined ? null : { teamId: v.teamId }),
                ...(v.slug === undefined ? null : { slug: v.slug }),
            };
        });

    export type Outbound = {
        limit?: number | undefined;
        since?: string | undefined;
        until?: string | undefined;
        types?: string | undefined;
        userId?: string | undefined;
        teamId?: string | undefined;
        slug?: string | undefined;
    };

    export const outboundSchema: z.ZodType<Outbound, z.ZodTypeDef, ListUserEventsRequest> = z
        .object({
            limit: z.number().optional(),
            since: z.string().optional(),
            until: z.string().optional(),
            types: z.string().optional(),
            userId: z.string().optional(),
            teamId: z.string().optional(),
            slug: z.string().optional(),
        })
        .transform((v) => {
            return {
                ...(v.limit === undefined ? null : { limit: v.limit }),
                ...(v.since === undefined ? null : { since: v.since }),
                ...(v.until === undefined ? null : { until: v.until }),
                ...(v.types === undefined ? null : { types: v.types }),
                ...(v.userId === undefined ? null : { userId: v.userId }),
                ...(v.teamId === undefined ? null : { teamId: v.teamId }),
                ...(v.slug === undefined ? null : { slug: v.slug }),
            };
        });
}

/** @internal */
export namespace ListUserEventsResponseBody$ {
    export const inboundSchema: z.ZodType<ListUserEventsResponseBody, z.ZodTypeDef, unknown> = z
        .object({
            events: z.array(UserEvent$.inboundSchema),
        })
        .transform((v) => {
            return {
                events: v.events,
            };
        });

    export type Outbound = {
        events: Array<UserEvent$.Outbound>;
    };

    export const outboundSchema: z.ZodType<Outbound, z.ZodTypeDef, ListUserEventsResponseBody> = z
        .object({
            events: z.array(UserEvent$.outboundSchema),
        })
        .transform((v) => {
            return {
                events: v.events,
            };
        });
}

/** @internal */
export namespace ListUserEventsResponse$ {
    export const inboundSchema: z.ZodType<ListUserEventsResponse, z.ZodTypeDef, unknown> = z
        .object({
            HttpMeta: HTTPMetadata$.inboundSchema,
            object: z.lazy(() => ListUserEventsResponseBody$.inboundSchema).optional(),
        })
        .transform((v) => {
            return {
                httpMeta: v.HttpMeta,
                ...(v.object === undefined ? null : { object: v.object }),
            };
        });

    export type Outbound = {
        HttpMeta: HTTPMetadata$.Outbound;
        object?: ListUserEventsResponseBody$.Outbound | undefined;
    };

    export const outboundSchema: z.ZodType<Outbound, z.ZodTypeDef, ListUserEventsResponse> = z
        .object({
            httpMeta: HTTPMetadata$.outboundSchema,
            object: z.lazy(() => ListUserEventsResponseBody$.outboundSchema).optional(),
        })
        .transform((v) => {
            return {
                HttpMeta: v.httpMeta,
                ...(v.object === undefined ? null : { object: v.object }),
            };
        });
}
