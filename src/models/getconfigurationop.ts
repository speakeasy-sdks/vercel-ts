/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import { ClosedEnum } from "../types/enums.js";
import * as z from "zod";

export type GetConfigurationRequest = {
    /**
     * ID of the configuration to check
     */
    id: string;
    /**
     * The Team identifier to perform the request on behalf of.
     */
    teamId?: string | undefined;
    /**
     * The Team slug to perform the request on behalf of.
     */
    slug?: string | undefined;
};

/**
 * A string representing the permission for projects. Possible values are `all` or `selected`.
 */
export const ProjectSelection = {
    Selected: "selected",
    All: "all",
} as const;
/**
 * A string representing the permission for projects. Possible values are `all` or `selected`.
 */
export type ProjectSelection = ClosedEnum<typeof ProjectSelection>;

/**
 * Source defines where the configuration was installed from. It is used to analyze user engagement for integration installations in product metrics.
 */
export const GetConfigurationResponseBodyIntegrationsResponseSource = {
    Marketplace: "marketplace",
    DeployButton: "deploy-button",
    External: "external",
} as const;
/**
 * Source defines where the configuration was installed from. It is used to analyze user engagement for integration installations in product metrics.
 */
export type GetConfigurationResponseBodyIntegrationsResponseSource = ClosedEnum<
    typeof GetConfigurationResponseBodyIntegrationsResponseSource
>;

export const GetConfigurationResponseBodyIntegrationsResponseType = {
    IntegrationConfiguration: "integration-configuration",
} as const;
export type GetConfigurationResponseBodyIntegrationsResponseType = ClosedEnum<
    typeof GetConfigurationResponseBodyIntegrationsResponseType
>;

export const GetConfigurationResponseBodyIntegrationsAdded = {
    ReadIntegrationConfiguration: "read:integration-configuration",
    ReadWriteIntegrationConfiguration: "read-write:integration-configuration",
    ReadDeployment: "read:deployment",
    ReadWriteDeployment: "read-write:deployment",
    ReadWriteDeploymentCheck: "read-write:deployment-check",
    ReadProject: "read:project",
    ReadWriteProject: "read-write:project",
    ReadWriteProjectEnvVars: "read-write:project-env-vars",
    ReadWriteGlobalProjectEnvVars: "read-write:global-project-env-vars",
    ReadTeam: "read:team",
    ReadUser: "read:user",
    ReadWriteLogDrain: "read-write:log-drain",
    ReadDomain: "read:domain",
    ReadWriteDomain: "read-write:domain",
    ReadWriteEdgeConfig: "read-write:edge-config",
    ReadWriteOtelEndpoint: "read-write:otel-endpoint",
    ReadMonitoring: "read:monitoring",
    ReadWriteIntegrationResource: "read-write:integration-resource",
} as const;
export type GetConfigurationResponseBodyIntegrationsAdded = ClosedEnum<
    typeof GetConfigurationResponseBodyIntegrationsAdded
>;

export const GetConfigurationResponseBodyIntegrationsUpgraded = {
    ReadIntegrationConfiguration: "read:integration-configuration",
    ReadWriteIntegrationConfiguration: "read-write:integration-configuration",
    ReadDeployment: "read:deployment",
    ReadWriteDeployment: "read-write:deployment",
    ReadWriteDeploymentCheck: "read-write:deployment-check",
    ReadProject: "read:project",
    ReadWriteProject: "read-write:project",
    ReadWriteProjectEnvVars: "read-write:project-env-vars",
    ReadWriteGlobalProjectEnvVars: "read-write:global-project-env-vars",
    ReadTeam: "read:team",
    ReadUser: "read:user",
    ReadWriteLogDrain: "read-write:log-drain",
    ReadDomain: "read:domain",
    ReadWriteDomain: "read-write:domain",
    ReadWriteEdgeConfig: "read-write:edge-config",
    ReadWriteOtelEndpoint: "read-write:otel-endpoint",
    ReadMonitoring: "read:monitoring",
    ReadWriteIntegrationResource: "read-write:integration-resource",
} as const;
export type GetConfigurationResponseBodyIntegrationsUpgraded = ClosedEnum<
    typeof GetConfigurationResponseBodyIntegrationsUpgraded
>;

export type GetConfigurationResponseBodyIntegrationsScopes = {
    added: Array<GetConfigurationResponseBodyIntegrationsAdded>;
    upgraded: Array<GetConfigurationResponseBodyIntegrationsUpgraded>;
};

export type GetConfigurationResponseBodyIntegrationsScopesQueue = {
    scopes: GetConfigurationResponseBodyIntegrationsScopes;
    note: string;
    requestedAt: number;
    confirmedAt?: number | undefined;
};

export const GetConfigurationResponseBodyIntegrationsDisabledReason = {
    DisabledByOwner: "disabled-by-owner",
    FeatureNotAvailable: "feature-not-available",
    DisabledByAdmin: "disabled-by-admin",
    OriginalOwnerLeftTheTeam: "original-owner-left-the-team",
    AccountPlanDowngrade: "account-plan-downgrade",
    OriginalOwnerRoleDowngraded: "original-owner-role-downgraded",
} as const;
export type GetConfigurationResponseBodyIntegrationsDisabledReason = ClosedEnum<
    typeof GetConfigurationResponseBodyIntegrationsDisabledReason
>;

/**
 * Defines the installation type. - 'external' integrations are installed via the existing integrations flow - 'marketplace' integrations are natively installed: - when accepting the TOS of a partner during the store creation process - if undefined, assume 'external'
 */
export const GetConfigurationResponseBodyIntegrationsInstallationType = {
    Marketplace: "marketplace",
    External: "external",
} as const;
/**
 * Defines the installation type. - 'external' integrations are installed via the existing integrations flow - 'marketplace' integrations are natively installed: - when accepting the TOS of a partner during the store creation process - if undefined, assume 'external'
 */
export type GetConfigurationResponseBodyIntegrationsInstallationType = ClosedEnum<
    typeof GetConfigurationResponseBodyIntegrationsInstallationType
>;

export type GetConfigurationResponseBody3 = {
    /**
     * A string representing the permission for projects. Possible values are `all` or `selected`.
     */
    projectSelection: ProjectSelection;
    /**
     * When a configuration is limited to access certain projects, this will contain each of the project ID it is allowed to access. If it is not defined, the configuration has full access.
     */
    projects?: Array<string> | undefined;
    /**
     * A timestamp that tells you when the configuration was installed successfully
     */
    completedAt?: number | undefined;
    /**
     * A timestamp that tells you when the configuration was created
     */
    createdAt: number;
    /**
     * The unique identifier of the configuration
     */
    id: string;
    /**
     * The unique identifier of the app the configuration was created for
     */
    integrationId: string;
    /**
     * The user or team ID that owns the configuration
     */
    ownerId: string;
    /**
     * Source defines where the configuration was installed from. It is used to analyze user engagement for integration installations in product metrics.
     */
    source?: GetConfigurationResponseBodyIntegrationsResponseSource | undefined;
    removedLogDrainsAt?: number | undefined;
    removedProjectEnvsAt?: number | undefined;
    removedTokensAt?: number | undefined;
    removedWebhooksAt?: number | undefined;
    /**
     * The slug of the integration the configuration is created for.
     */
    slug: string;
    /**
     * When the configuration was created for a team, this will show the ID of the team.
     */
    teamId?: string | null | undefined;
    type: GetConfigurationResponseBodyIntegrationsResponseType;
    /**
     * A timestamp that tells you when the configuration was updated.
     */
    updatedAt: number;
    /**
     * The ID of the user that created the configuration.
     */
    userId: string;
    /**
     * The resources that are allowed to be accessed by the configuration.
     */
    scopes: Array<string>;
    scopesQueue?: Array<GetConfigurationResponseBodyIntegrationsScopesQueue> | undefined;
    /**
     * A timestamp that tells you when the configuration was disabled. Note: Configurations can be disabled when the associated user loses access to a team. They do not function during this time until the configuration is 'transferred', meaning the associated user is changed to one with access to the team.
     */
    disabledAt?: number | undefined;
    /**
     * A timestamp that tells you when the configuration was updated.
     */
    deletedAt?: number | null | undefined;
    disabledReason?: GetConfigurationResponseBodyIntegrationsDisabledReason | undefined;
    /**
     * A timestamp that tells you when the configuration was migrated as part of the Northstar migration. In the future, if we allow integration configurations to be transferred between teams, this field should be cleared upon transfer.
     */
    northstarMigratedAt?: number | undefined;
    /**
     * Defines the installation type. - 'external' integrations are installed via the existing integrations flow - 'marketplace' integrations are natively installed: - when accepting the TOS of a partner during the store creation process - if undefined, assume 'external'
     */
    installationType?: GetConfigurationResponseBodyIntegrationsInstallationType | undefined;
    canConfigureOpenTelemetry?: boolean | undefined;
};

/**
 * Source defines where the configuration was installed from. It is used to analyze user engagement for integration installations in product metrics.
 */
export const GetConfigurationResponseBodyIntegrationsSource = {
    Marketplace: "marketplace",
    DeployButton: "deploy-button",
    External: "external",
} as const;
/**
 * Source defines where the configuration was installed from. It is used to analyze user engagement for integration installations in product metrics.
 */
export type GetConfigurationResponseBodyIntegrationsSource = ClosedEnum<
    typeof GetConfigurationResponseBodyIntegrationsSource
>;

export const GetConfigurationResponseBodyIntegrationsType = {
    IntegrationConfiguration: "integration-configuration",
} as const;
export type GetConfigurationResponseBodyIntegrationsType = ClosedEnum<
    typeof GetConfigurationResponseBodyIntegrationsType
>;

export const GetConfigurationResponseBodyAdded = {
    ReadIntegrationConfiguration: "read:integration-configuration",
    ReadWriteIntegrationConfiguration: "read-write:integration-configuration",
    ReadDeployment: "read:deployment",
    ReadWriteDeployment: "read-write:deployment",
    ReadWriteDeploymentCheck: "read-write:deployment-check",
    ReadProject: "read:project",
    ReadWriteProject: "read-write:project",
    ReadWriteProjectEnvVars: "read-write:project-env-vars",
    ReadWriteGlobalProjectEnvVars: "read-write:global-project-env-vars",
    ReadTeam: "read:team",
    ReadUser: "read:user",
    ReadWriteLogDrain: "read-write:log-drain",
    ReadDomain: "read:domain",
    ReadWriteDomain: "read-write:domain",
    ReadWriteEdgeConfig: "read-write:edge-config",
    ReadWriteOtelEndpoint: "read-write:otel-endpoint",
    ReadMonitoring: "read:monitoring",
    ReadWriteIntegrationResource: "read-write:integration-resource",
} as const;
export type GetConfigurationResponseBodyAdded = ClosedEnum<
    typeof GetConfigurationResponseBodyAdded
>;

export const GetConfigurationResponseBodyUpgraded = {
    ReadIntegrationConfiguration: "read:integration-configuration",
    ReadWriteIntegrationConfiguration: "read-write:integration-configuration",
    ReadDeployment: "read:deployment",
    ReadWriteDeployment: "read-write:deployment",
    ReadWriteDeploymentCheck: "read-write:deployment-check",
    ReadProject: "read:project",
    ReadWriteProject: "read-write:project",
    ReadWriteProjectEnvVars: "read-write:project-env-vars",
    ReadWriteGlobalProjectEnvVars: "read-write:global-project-env-vars",
    ReadTeam: "read:team",
    ReadUser: "read:user",
    ReadWriteLogDrain: "read-write:log-drain",
    ReadDomain: "read:domain",
    ReadWriteDomain: "read-write:domain",
    ReadWriteEdgeConfig: "read-write:edge-config",
    ReadWriteOtelEndpoint: "read-write:otel-endpoint",
    ReadMonitoring: "read:monitoring",
    ReadWriteIntegrationResource: "read-write:integration-resource",
} as const;
export type GetConfigurationResponseBodyUpgraded = ClosedEnum<
    typeof GetConfigurationResponseBodyUpgraded
>;

export type GetConfigurationResponseBodyScopes = {
    added: Array<GetConfigurationResponseBodyAdded>;
    upgraded: Array<GetConfigurationResponseBodyUpgraded>;
};

export type GetConfigurationResponseBodyScopesQueue = {
    scopes: GetConfigurationResponseBodyScopes;
    note: string;
    requestedAt: number;
    confirmedAt?: number | undefined;
};

export const GetConfigurationResponseBodyDisabledReason = {
    DisabledByOwner: "disabled-by-owner",
    FeatureNotAvailable: "feature-not-available",
    DisabledByAdmin: "disabled-by-admin",
    OriginalOwnerLeftTheTeam: "original-owner-left-the-team",
    AccountPlanDowngrade: "account-plan-downgrade",
    OriginalOwnerRoleDowngraded: "original-owner-role-downgraded",
} as const;
export type GetConfigurationResponseBodyDisabledReason = ClosedEnum<
    typeof GetConfigurationResponseBodyDisabledReason
>;

/**
 * Defines the installation type. - 'external' integrations are installed via the existing integrations flow - 'marketplace' integrations are natively installed: - when accepting the TOS of a partner during the store creation process - if undefined, assume 'external'
 */
export const GetConfigurationResponseBodyInstallationType = {
    Marketplace: "marketplace",
    External: "external",
} as const;
/**
 * Defines the installation type. - 'external' integrations are installed via the existing integrations flow - 'marketplace' integrations are natively installed: - when accepting the TOS of a partner during the store creation process - if undefined, assume 'external'
 */
export type GetConfigurationResponseBodyInstallationType = ClosedEnum<
    typeof GetConfigurationResponseBodyInstallationType
>;

/**
 * The configuration with the provided id
 */
export type GetConfigurationResponseBody2 = {
    /**
     * A timestamp that tells you when the configuration was installed successfully
     */
    completedAt?: number | undefined;
    /**
     * A timestamp that tells you when the configuration was created
     */
    createdAt: number;
    /**
     * The unique identifier of the configuration
     */
    id: string;
    /**
     * The unique identifier of the app the configuration was created for
     */
    integrationId: string;
    /**
     * The user or team ID that owns the configuration
     */
    ownerId: string;
    /**
     * When a configuration is limited to access certain projects, this will contain each of the project ID it is allowed to access. If it is not defined, the configuration has full access.
     */
    projects?: Array<string> | undefined;
    /**
     * Source defines where the configuration was installed from. It is used to analyze user engagement for integration installations in product metrics.
     */
    source?: GetConfigurationResponseBodyIntegrationsSource | undefined;
    removedLogDrainsAt?: number | undefined;
    removedProjectEnvsAt?: number | undefined;
    removedTokensAt?: number | undefined;
    removedWebhooksAt?: number | undefined;
    /**
     * The slug of the integration the configuration is created for.
     */
    slug: string;
    /**
     * When the configuration was created for a team, this will show the ID of the team.
     */
    teamId?: string | null | undefined;
    type: GetConfigurationResponseBodyIntegrationsType;
    /**
     * A timestamp that tells you when the configuration was updated.
     */
    updatedAt: number;
    /**
     * The ID of the user that created the configuration.
     */
    userId: string;
    /**
     * The resources that are allowed to be accessed by the configuration.
     */
    scopes: Array<string>;
    scopesQueue?: Array<GetConfigurationResponseBodyScopesQueue> | undefined;
    /**
     * A timestamp that tells you when the configuration was disabled. Note: Configurations can be disabled when the associated user loses access to a team. They do not function during this time until the configuration is 'transferred', meaning the associated user is changed to one with access to the team.
     */
    disabledAt?: number | undefined;
    /**
     * A timestamp that tells you when the configuration was updated.
     */
    deletedAt?: number | null | undefined;
    disabledReason?: GetConfigurationResponseBodyDisabledReason | undefined;
    /**
     * A timestamp that tells you when the configuration was migrated as part of the Northstar migration. In the future, if we allow integration configurations to be transferred between teams, this field should be cleared upon transfer.
     */
    northstarMigratedAt?: number | undefined;
    /**
     * Defines the installation type. - 'external' integrations are installed via the existing integrations flow - 'marketplace' integrations are natively installed: - when accepting the TOS of a partner during the store creation process - if undefined, assume 'external'
     */
    installationType?: GetConfigurationResponseBodyInstallationType | undefined;
};

/**
 * Source defines where the configuration was installed from. It is used to analyze user engagement for integration installations in product metrics.
 */
export const GetConfigurationResponseBodySource = {
    Marketplace: "marketplace",
    DeployButton: "deploy-button",
    External: "external",
} as const;
/**
 * Source defines where the configuration was installed from. It is used to analyze user engagement for integration installations in product metrics.
 */
export type GetConfigurationResponseBodySource = ClosedEnum<
    typeof GetConfigurationResponseBodySource
>;

export const GetConfigurationResponseBodyType = {
    IntegrationConfiguration: "integration-configuration",
} as const;
export type GetConfigurationResponseBodyType = ClosedEnum<typeof GetConfigurationResponseBodyType>;

export const ResponseBodyAdded = {
    ReadIntegrationConfiguration: "read:integration-configuration",
    ReadWriteIntegrationConfiguration: "read-write:integration-configuration",
    ReadDeployment: "read:deployment",
    ReadWriteDeployment: "read-write:deployment",
    ReadWriteDeploymentCheck: "read-write:deployment-check",
    ReadProject: "read:project",
    ReadWriteProject: "read-write:project",
    ReadWriteProjectEnvVars: "read-write:project-env-vars",
    ReadWriteGlobalProjectEnvVars: "read-write:global-project-env-vars",
    ReadTeam: "read:team",
    ReadUser: "read:user",
    ReadWriteLogDrain: "read-write:log-drain",
    ReadDomain: "read:domain",
    ReadWriteDomain: "read-write:domain",
    ReadWriteEdgeConfig: "read-write:edge-config",
    ReadWriteOtelEndpoint: "read-write:otel-endpoint",
    ReadMonitoring: "read:monitoring",
    ReadWriteIntegrationResource: "read-write:integration-resource",
} as const;
export type ResponseBodyAdded = ClosedEnum<typeof ResponseBodyAdded>;

export const ResponseBodyUpgraded = {
    ReadIntegrationConfiguration: "read:integration-configuration",
    ReadWriteIntegrationConfiguration: "read-write:integration-configuration",
    ReadDeployment: "read:deployment",
    ReadWriteDeployment: "read-write:deployment",
    ReadWriteDeploymentCheck: "read-write:deployment-check",
    ReadProject: "read:project",
    ReadWriteProject: "read-write:project",
    ReadWriteProjectEnvVars: "read-write:project-env-vars",
    ReadWriteGlobalProjectEnvVars: "read-write:global-project-env-vars",
    ReadTeam: "read:team",
    ReadUser: "read:user",
    ReadWriteLogDrain: "read-write:log-drain",
    ReadDomain: "read:domain",
    ReadWriteDomain: "read-write:domain",
    ReadWriteEdgeConfig: "read-write:edge-config",
    ReadWriteOtelEndpoint: "read-write:otel-endpoint",
    ReadMonitoring: "read:monitoring",
    ReadWriteIntegrationResource: "read-write:integration-resource",
} as const;
export type ResponseBodyUpgraded = ClosedEnum<typeof ResponseBodyUpgraded>;

export type GetConfigurationResponseBodyIntegrationsResponseScopes = {
    added: Array<ResponseBodyAdded>;
    upgraded: Array<ResponseBodyUpgraded>;
};

export type ResponseBodyScopesQueue = {
    scopes: GetConfigurationResponseBodyIntegrationsResponseScopes;
    note: string;
    requestedAt: number;
    confirmedAt?: number | undefined;
};

export const ResponseBodyDisabledReason = {
    DisabledByOwner: "disabled-by-owner",
    FeatureNotAvailable: "feature-not-available",
    DisabledByAdmin: "disabled-by-admin",
    OriginalOwnerLeftTheTeam: "original-owner-left-the-team",
    AccountPlanDowngrade: "account-plan-downgrade",
    OriginalOwnerRoleDowngraded: "original-owner-role-downgraded",
} as const;
export type ResponseBodyDisabledReason = ClosedEnum<typeof ResponseBodyDisabledReason>;

/**
 * Defines the installation type. - 'external' integrations are installed via the existing integrations flow - 'marketplace' integrations are natively installed: - when accepting the TOS of a partner during the store creation process - if undefined, assume 'external'
 */
export const ResponseBodyInstallationType = {
    Marketplace: "marketplace",
    External: "external",
} as const;
/**
 * Defines the installation type. - 'external' integrations are installed via the existing integrations flow - 'marketplace' integrations are natively installed: - when accepting the TOS of a partner during the store creation process - if undefined, assume 'external'
 */
export type ResponseBodyInstallationType = ClosedEnum<typeof ResponseBodyInstallationType>;

export type GetConfigurationResponseBody1 = {
    billingTotal?: string | undefined;
    periodStart?: string | undefined;
    periodEnd?: string | undefined;
    /**
     * A timestamp that tells you when the configuration was installed successfully
     */
    completedAt?: number | undefined;
    /**
     * A timestamp that tells you when the configuration was created
     */
    createdAt: number;
    /**
     * The unique identifier of the configuration
     */
    id: string;
    /**
     * The unique identifier of the app the configuration was created for
     */
    integrationId: string;
    /**
     * The user or team ID that owns the configuration
     */
    ownerId: string;
    /**
     * When a configuration is limited to access certain projects, this will contain each of the project ID it is allowed to access. If it is not defined, the configuration has full access.
     */
    projects?: Array<string> | undefined;
    /**
     * Source defines where the configuration was installed from. It is used to analyze user engagement for integration installations in product metrics.
     */
    source?: GetConfigurationResponseBodySource | undefined;
    removedLogDrainsAt?: number | undefined;
    removedProjectEnvsAt?: number | undefined;
    removedTokensAt?: number | undefined;
    removedWebhooksAt?: number | undefined;
    /**
     * The slug of the integration the configuration is created for.
     */
    slug: string;
    /**
     * When the configuration was created for a team, this will show the ID of the team.
     */
    teamId?: string | null | undefined;
    type: GetConfigurationResponseBodyType;
    /**
     * A timestamp that tells you when the configuration was updated.
     */
    updatedAt: number;
    /**
     * The ID of the user that created the configuration.
     */
    userId: string;
    /**
     * The resources that are allowed to be accessed by the configuration.
     */
    scopes: Array<string>;
    scopesQueue?: Array<ResponseBodyScopesQueue> | undefined;
    /**
     * A timestamp that tells you when the configuration was disabled. Note: Configurations can be disabled when the associated user loses access to a team. They do not function during this time until the configuration is 'transferred', meaning the associated user is changed to one with access to the team.
     */
    disabledAt?: number | undefined;
    /**
     * A timestamp that tells you when the configuration was updated.
     */
    deletedAt?: number | null | undefined;
    disabledReason?: ResponseBodyDisabledReason | undefined;
    /**
     * A timestamp that tells you when the configuration was migrated as part of the Northstar migration. In the future, if we allow integration configurations to be transferred between teams, this field should be cleared upon transfer.
     */
    northstarMigratedAt?: number | undefined;
    /**
     * Defines the installation type. - 'external' integrations are installed via the existing integrations flow - 'marketplace' integrations are natively installed: - when accepting the TOS of a partner during the store creation process - if undefined, assume 'external'
     */
    installationType?: ResponseBodyInstallationType | undefined;
};

/**
 * The configuration with the provided id
 */
export type GetConfigurationResponseBody =
    | GetConfigurationResponseBody2
    | GetConfigurationResponseBody3
    | GetConfigurationResponseBody1;

/** @internal */
export const GetConfigurationRequest$inboundSchema: z.ZodType<
    GetConfigurationRequest,
    z.ZodTypeDef,
    unknown
> = z.object({
    id: z.string(),
    teamId: z.string().optional(),
    slug: z.string().optional(),
});

/** @internal */
export type GetConfigurationRequest$Outbound = {
    id: string;
    teamId?: string | undefined;
    slug?: string | undefined;
};

/** @internal */
export const GetConfigurationRequest$outboundSchema: z.ZodType<
    GetConfigurationRequest$Outbound,
    z.ZodTypeDef,
    GetConfigurationRequest
> = z.object({
    id: z.string(),
    teamId: z.string().optional(),
    slug: z.string().optional(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace GetConfigurationRequest$ {
    /** @deprecated use `GetConfigurationRequest$inboundSchema` instead. */
    export const inboundSchema = GetConfigurationRequest$inboundSchema;
    /** @deprecated use `GetConfigurationRequest$outboundSchema` instead. */
    export const outboundSchema = GetConfigurationRequest$outboundSchema;
    /** @deprecated use `GetConfigurationRequest$Outbound` instead. */
    export type Outbound = GetConfigurationRequest$Outbound;
}

/** @internal */
export const ProjectSelection$inboundSchema: z.ZodNativeEnum<typeof ProjectSelection> =
    z.nativeEnum(ProjectSelection);

/** @internal */
export const ProjectSelection$outboundSchema: z.ZodNativeEnum<typeof ProjectSelection> =
    ProjectSelection$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace ProjectSelection$ {
    /** @deprecated use `ProjectSelection$inboundSchema` instead. */
    export const inboundSchema = ProjectSelection$inboundSchema;
    /** @deprecated use `ProjectSelection$outboundSchema` instead. */
    export const outboundSchema = ProjectSelection$outboundSchema;
}

/** @internal */
export const GetConfigurationResponseBodyIntegrationsResponseSource$inboundSchema: z.ZodNativeEnum<
    typeof GetConfigurationResponseBodyIntegrationsResponseSource
> = z.nativeEnum(GetConfigurationResponseBodyIntegrationsResponseSource);

/** @internal */
export const GetConfigurationResponseBodyIntegrationsResponseSource$outboundSchema: z.ZodNativeEnum<
    typeof GetConfigurationResponseBodyIntegrationsResponseSource
> = GetConfigurationResponseBodyIntegrationsResponseSource$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace GetConfigurationResponseBodyIntegrationsResponseSource$ {
    /** @deprecated use `GetConfigurationResponseBodyIntegrationsResponseSource$inboundSchema` instead. */
    export const inboundSchema =
        GetConfigurationResponseBodyIntegrationsResponseSource$inboundSchema;
    /** @deprecated use `GetConfigurationResponseBodyIntegrationsResponseSource$outboundSchema` instead. */
    export const outboundSchema =
        GetConfigurationResponseBodyIntegrationsResponseSource$outboundSchema;
}

/** @internal */
export const GetConfigurationResponseBodyIntegrationsResponseType$inboundSchema: z.ZodNativeEnum<
    typeof GetConfigurationResponseBodyIntegrationsResponseType
> = z.nativeEnum(GetConfigurationResponseBodyIntegrationsResponseType);

/** @internal */
export const GetConfigurationResponseBodyIntegrationsResponseType$outboundSchema: z.ZodNativeEnum<
    typeof GetConfigurationResponseBodyIntegrationsResponseType
> = GetConfigurationResponseBodyIntegrationsResponseType$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace GetConfigurationResponseBodyIntegrationsResponseType$ {
    /** @deprecated use `GetConfigurationResponseBodyIntegrationsResponseType$inboundSchema` instead. */
    export const inboundSchema = GetConfigurationResponseBodyIntegrationsResponseType$inboundSchema;
    /** @deprecated use `GetConfigurationResponseBodyIntegrationsResponseType$outboundSchema` instead. */
    export const outboundSchema =
        GetConfigurationResponseBodyIntegrationsResponseType$outboundSchema;
}

/** @internal */
export const GetConfigurationResponseBodyIntegrationsAdded$inboundSchema: z.ZodNativeEnum<
    typeof GetConfigurationResponseBodyIntegrationsAdded
> = z.nativeEnum(GetConfigurationResponseBodyIntegrationsAdded);

/** @internal */
export const GetConfigurationResponseBodyIntegrationsAdded$outboundSchema: z.ZodNativeEnum<
    typeof GetConfigurationResponseBodyIntegrationsAdded
> = GetConfigurationResponseBodyIntegrationsAdded$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace GetConfigurationResponseBodyIntegrationsAdded$ {
    /** @deprecated use `GetConfigurationResponseBodyIntegrationsAdded$inboundSchema` instead. */
    export const inboundSchema = GetConfigurationResponseBodyIntegrationsAdded$inboundSchema;
    /** @deprecated use `GetConfigurationResponseBodyIntegrationsAdded$outboundSchema` instead. */
    export const outboundSchema = GetConfigurationResponseBodyIntegrationsAdded$outboundSchema;
}

/** @internal */
export const GetConfigurationResponseBodyIntegrationsUpgraded$inboundSchema: z.ZodNativeEnum<
    typeof GetConfigurationResponseBodyIntegrationsUpgraded
> = z.nativeEnum(GetConfigurationResponseBodyIntegrationsUpgraded);

/** @internal */
export const GetConfigurationResponseBodyIntegrationsUpgraded$outboundSchema: z.ZodNativeEnum<
    typeof GetConfigurationResponseBodyIntegrationsUpgraded
> = GetConfigurationResponseBodyIntegrationsUpgraded$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace GetConfigurationResponseBodyIntegrationsUpgraded$ {
    /** @deprecated use `GetConfigurationResponseBodyIntegrationsUpgraded$inboundSchema` instead. */
    export const inboundSchema = GetConfigurationResponseBodyIntegrationsUpgraded$inboundSchema;
    /** @deprecated use `GetConfigurationResponseBodyIntegrationsUpgraded$outboundSchema` instead. */
    export const outboundSchema = GetConfigurationResponseBodyIntegrationsUpgraded$outboundSchema;
}

/** @internal */
export const GetConfigurationResponseBodyIntegrationsScopes$inboundSchema: z.ZodType<
    GetConfigurationResponseBodyIntegrationsScopes,
    z.ZodTypeDef,
    unknown
> = z.object({
    added: z.array(GetConfigurationResponseBodyIntegrationsAdded$inboundSchema),
    upgraded: z.array(GetConfigurationResponseBodyIntegrationsUpgraded$inboundSchema),
});

/** @internal */
export type GetConfigurationResponseBodyIntegrationsScopes$Outbound = {
    added: Array<string>;
    upgraded: Array<string>;
};

/** @internal */
export const GetConfigurationResponseBodyIntegrationsScopes$outboundSchema: z.ZodType<
    GetConfigurationResponseBodyIntegrationsScopes$Outbound,
    z.ZodTypeDef,
    GetConfigurationResponseBodyIntegrationsScopes
> = z.object({
    added: z.array(GetConfigurationResponseBodyIntegrationsAdded$outboundSchema),
    upgraded: z.array(GetConfigurationResponseBodyIntegrationsUpgraded$outboundSchema),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace GetConfigurationResponseBodyIntegrationsScopes$ {
    /** @deprecated use `GetConfigurationResponseBodyIntegrationsScopes$inboundSchema` instead. */
    export const inboundSchema = GetConfigurationResponseBodyIntegrationsScopes$inboundSchema;
    /** @deprecated use `GetConfigurationResponseBodyIntegrationsScopes$outboundSchema` instead. */
    export const outboundSchema = GetConfigurationResponseBodyIntegrationsScopes$outboundSchema;
    /** @deprecated use `GetConfigurationResponseBodyIntegrationsScopes$Outbound` instead. */
    export type Outbound = GetConfigurationResponseBodyIntegrationsScopes$Outbound;
}

/** @internal */
export const GetConfigurationResponseBodyIntegrationsScopesQueue$inboundSchema: z.ZodType<
    GetConfigurationResponseBodyIntegrationsScopesQueue,
    z.ZodTypeDef,
    unknown
> = z.object({
    scopes: z.lazy(() => GetConfigurationResponseBodyIntegrationsScopes$inboundSchema),
    note: z.string(),
    requestedAt: z.number(),
    confirmedAt: z.number().optional(),
});

/** @internal */
export type GetConfigurationResponseBodyIntegrationsScopesQueue$Outbound = {
    scopes: GetConfigurationResponseBodyIntegrationsScopes$Outbound;
    note: string;
    requestedAt: number;
    confirmedAt?: number | undefined;
};

/** @internal */
export const GetConfigurationResponseBodyIntegrationsScopesQueue$outboundSchema: z.ZodType<
    GetConfigurationResponseBodyIntegrationsScopesQueue$Outbound,
    z.ZodTypeDef,
    GetConfigurationResponseBodyIntegrationsScopesQueue
> = z.object({
    scopes: z.lazy(() => GetConfigurationResponseBodyIntegrationsScopes$outboundSchema),
    note: z.string(),
    requestedAt: z.number(),
    confirmedAt: z.number().optional(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace GetConfigurationResponseBodyIntegrationsScopesQueue$ {
    /** @deprecated use `GetConfigurationResponseBodyIntegrationsScopesQueue$inboundSchema` instead. */
    export const inboundSchema = GetConfigurationResponseBodyIntegrationsScopesQueue$inboundSchema;
    /** @deprecated use `GetConfigurationResponseBodyIntegrationsScopesQueue$outboundSchema` instead. */
    export const outboundSchema =
        GetConfigurationResponseBodyIntegrationsScopesQueue$outboundSchema;
    /** @deprecated use `GetConfigurationResponseBodyIntegrationsScopesQueue$Outbound` instead. */
    export type Outbound = GetConfigurationResponseBodyIntegrationsScopesQueue$Outbound;
}

/** @internal */
export const GetConfigurationResponseBodyIntegrationsDisabledReason$inboundSchema: z.ZodNativeEnum<
    typeof GetConfigurationResponseBodyIntegrationsDisabledReason
> = z.nativeEnum(GetConfigurationResponseBodyIntegrationsDisabledReason);

/** @internal */
export const GetConfigurationResponseBodyIntegrationsDisabledReason$outboundSchema: z.ZodNativeEnum<
    typeof GetConfigurationResponseBodyIntegrationsDisabledReason
> = GetConfigurationResponseBodyIntegrationsDisabledReason$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace GetConfigurationResponseBodyIntegrationsDisabledReason$ {
    /** @deprecated use `GetConfigurationResponseBodyIntegrationsDisabledReason$inboundSchema` instead. */
    export const inboundSchema =
        GetConfigurationResponseBodyIntegrationsDisabledReason$inboundSchema;
    /** @deprecated use `GetConfigurationResponseBodyIntegrationsDisabledReason$outboundSchema` instead. */
    export const outboundSchema =
        GetConfigurationResponseBodyIntegrationsDisabledReason$outboundSchema;
}

/** @internal */
export const GetConfigurationResponseBodyIntegrationsInstallationType$inboundSchema: z.ZodNativeEnum<
    typeof GetConfigurationResponseBodyIntegrationsInstallationType
> = z.nativeEnum(GetConfigurationResponseBodyIntegrationsInstallationType);

/** @internal */
export const GetConfigurationResponseBodyIntegrationsInstallationType$outboundSchema: z.ZodNativeEnum<
    typeof GetConfigurationResponseBodyIntegrationsInstallationType
> = GetConfigurationResponseBodyIntegrationsInstallationType$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace GetConfigurationResponseBodyIntegrationsInstallationType$ {
    /** @deprecated use `GetConfigurationResponseBodyIntegrationsInstallationType$inboundSchema` instead. */
    export const inboundSchema =
        GetConfigurationResponseBodyIntegrationsInstallationType$inboundSchema;
    /** @deprecated use `GetConfigurationResponseBodyIntegrationsInstallationType$outboundSchema` instead. */
    export const outboundSchema =
        GetConfigurationResponseBodyIntegrationsInstallationType$outboundSchema;
}

/** @internal */
export const GetConfigurationResponseBody3$inboundSchema: z.ZodType<
    GetConfigurationResponseBody3,
    z.ZodTypeDef,
    unknown
> = z.object({
    projectSelection: ProjectSelection$inboundSchema,
    projects: z.array(z.string()).optional(),
    completedAt: z.number().optional(),
    createdAt: z.number(),
    id: z.string(),
    integrationId: z.string(),
    ownerId: z.string(),
    source: GetConfigurationResponseBodyIntegrationsResponseSource$inboundSchema.optional(),
    removedLogDrainsAt: z.number().optional(),
    removedProjectEnvsAt: z.number().optional(),
    removedTokensAt: z.number().optional(),
    removedWebhooksAt: z.number().optional(),
    slug: z.string(),
    teamId: z.nullable(z.string()).optional(),
    type: GetConfigurationResponseBodyIntegrationsResponseType$inboundSchema,
    updatedAt: z.number(),
    userId: z.string(),
    scopes: z.array(z.string()),
    scopesQueue: z
        .array(z.lazy(() => GetConfigurationResponseBodyIntegrationsScopesQueue$inboundSchema))
        .optional(),
    disabledAt: z.number().optional(),
    deletedAt: z.nullable(z.number()).optional(),
    disabledReason: GetConfigurationResponseBodyIntegrationsDisabledReason$inboundSchema.optional(),
    northstarMigratedAt: z.number().optional(),
    installationType:
        GetConfigurationResponseBodyIntegrationsInstallationType$inboundSchema.optional(),
    canConfigureOpenTelemetry: z.boolean().optional(),
});

/** @internal */
export type GetConfigurationResponseBody3$Outbound = {
    projectSelection: string;
    projects?: Array<string> | undefined;
    completedAt?: number | undefined;
    createdAt: number;
    id: string;
    integrationId: string;
    ownerId: string;
    source?: string | undefined;
    removedLogDrainsAt?: number | undefined;
    removedProjectEnvsAt?: number | undefined;
    removedTokensAt?: number | undefined;
    removedWebhooksAt?: number | undefined;
    slug: string;
    teamId?: string | null | undefined;
    type: string;
    updatedAt: number;
    userId: string;
    scopes: Array<string>;
    scopesQueue?: Array<GetConfigurationResponseBodyIntegrationsScopesQueue$Outbound> | undefined;
    disabledAt?: number | undefined;
    deletedAt?: number | null | undefined;
    disabledReason?: string | undefined;
    northstarMigratedAt?: number | undefined;
    installationType?: string | undefined;
    canConfigureOpenTelemetry?: boolean | undefined;
};

/** @internal */
export const GetConfigurationResponseBody3$outboundSchema: z.ZodType<
    GetConfigurationResponseBody3$Outbound,
    z.ZodTypeDef,
    GetConfigurationResponseBody3
> = z.object({
    projectSelection: ProjectSelection$outboundSchema,
    projects: z.array(z.string()).optional(),
    completedAt: z.number().optional(),
    createdAt: z.number(),
    id: z.string(),
    integrationId: z.string(),
    ownerId: z.string(),
    source: GetConfigurationResponseBodyIntegrationsResponseSource$outboundSchema.optional(),
    removedLogDrainsAt: z.number().optional(),
    removedProjectEnvsAt: z.number().optional(),
    removedTokensAt: z.number().optional(),
    removedWebhooksAt: z.number().optional(),
    slug: z.string(),
    teamId: z.nullable(z.string()).optional(),
    type: GetConfigurationResponseBodyIntegrationsResponseType$outboundSchema,
    updatedAt: z.number(),
    userId: z.string(),
    scopes: z.array(z.string()),
    scopesQueue: z
        .array(z.lazy(() => GetConfigurationResponseBodyIntegrationsScopesQueue$outboundSchema))
        .optional(),
    disabledAt: z.number().optional(),
    deletedAt: z.nullable(z.number()).optional(),
    disabledReason:
        GetConfigurationResponseBodyIntegrationsDisabledReason$outboundSchema.optional(),
    northstarMigratedAt: z.number().optional(),
    installationType:
        GetConfigurationResponseBodyIntegrationsInstallationType$outboundSchema.optional(),
    canConfigureOpenTelemetry: z.boolean().optional(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace GetConfigurationResponseBody3$ {
    /** @deprecated use `GetConfigurationResponseBody3$inboundSchema` instead. */
    export const inboundSchema = GetConfigurationResponseBody3$inboundSchema;
    /** @deprecated use `GetConfigurationResponseBody3$outboundSchema` instead. */
    export const outboundSchema = GetConfigurationResponseBody3$outboundSchema;
    /** @deprecated use `GetConfigurationResponseBody3$Outbound` instead. */
    export type Outbound = GetConfigurationResponseBody3$Outbound;
}

/** @internal */
export const GetConfigurationResponseBodyIntegrationsSource$inboundSchema: z.ZodNativeEnum<
    typeof GetConfigurationResponseBodyIntegrationsSource
> = z.nativeEnum(GetConfigurationResponseBodyIntegrationsSource);

/** @internal */
export const GetConfigurationResponseBodyIntegrationsSource$outboundSchema: z.ZodNativeEnum<
    typeof GetConfigurationResponseBodyIntegrationsSource
> = GetConfigurationResponseBodyIntegrationsSource$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace GetConfigurationResponseBodyIntegrationsSource$ {
    /** @deprecated use `GetConfigurationResponseBodyIntegrationsSource$inboundSchema` instead. */
    export const inboundSchema = GetConfigurationResponseBodyIntegrationsSource$inboundSchema;
    /** @deprecated use `GetConfigurationResponseBodyIntegrationsSource$outboundSchema` instead. */
    export const outboundSchema = GetConfigurationResponseBodyIntegrationsSource$outboundSchema;
}

/** @internal */
export const GetConfigurationResponseBodyIntegrationsType$inboundSchema: z.ZodNativeEnum<
    typeof GetConfigurationResponseBodyIntegrationsType
> = z.nativeEnum(GetConfigurationResponseBodyIntegrationsType);

/** @internal */
export const GetConfigurationResponseBodyIntegrationsType$outboundSchema: z.ZodNativeEnum<
    typeof GetConfigurationResponseBodyIntegrationsType
> = GetConfigurationResponseBodyIntegrationsType$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace GetConfigurationResponseBodyIntegrationsType$ {
    /** @deprecated use `GetConfigurationResponseBodyIntegrationsType$inboundSchema` instead. */
    export const inboundSchema = GetConfigurationResponseBodyIntegrationsType$inboundSchema;
    /** @deprecated use `GetConfigurationResponseBodyIntegrationsType$outboundSchema` instead. */
    export const outboundSchema = GetConfigurationResponseBodyIntegrationsType$outboundSchema;
}

/** @internal */
export const GetConfigurationResponseBodyAdded$inboundSchema: z.ZodNativeEnum<
    typeof GetConfigurationResponseBodyAdded
> = z.nativeEnum(GetConfigurationResponseBodyAdded);

/** @internal */
export const GetConfigurationResponseBodyAdded$outboundSchema: z.ZodNativeEnum<
    typeof GetConfigurationResponseBodyAdded
> = GetConfigurationResponseBodyAdded$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace GetConfigurationResponseBodyAdded$ {
    /** @deprecated use `GetConfigurationResponseBodyAdded$inboundSchema` instead. */
    export const inboundSchema = GetConfigurationResponseBodyAdded$inboundSchema;
    /** @deprecated use `GetConfigurationResponseBodyAdded$outboundSchema` instead. */
    export const outboundSchema = GetConfigurationResponseBodyAdded$outboundSchema;
}

/** @internal */
export const GetConfigurationResponseBodyUpgraded$inboundSchema: z.ZodNativeEnum<
    typeof GetConfigurationResponseBodyUpgraded
> = z.nativeEnum(GetConfigurationResponseBodyUpgraded);

/** @internal */
export const GetConfigurationResponseBodyUpgraded$outboundSchema: z.ZodNativeEnum<
    typeof GetConfigurationResponseBodyUpgraded
> = GetConfigurationResponseBodyUpgraded$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace GetConfigurationResponseBodyUpgraded$ {
    /** @deprecated use `GetConfigurationResponseBodyUpgraded$inboundSchema` instead. */
    export const inboundSchema = GetConfigurationResponseBodyUpgraded$inboundSchema;
    /** @deprecated use `GetConfigurationResponseBodyUpgraded$outboundSchema` instead. */
    export const outboundSchema = GetConfigurationResponseBodyUpgraded$outboundSchema;
}

/** @internal */
export const GetConfigurationResponseBodyScopes$inboundSchema: z.ZodType<
    GetConfigurationResponseBodyScopes,
    z.ZodTypeDef,
    unknown
> = z.object({
    added: z.array(GetConfigurationResponseBodyAdded$inboundSchema),
    upgraded: z.array(GetConfigurationResponseBodyUpgraded$inboundSchema),
});

/** @internal */
export type GetConfigurationResponseBodyScopes$Outbound = {
    added: Array<string>;
    upgraded: Array<string>;
};

/** @internal */
export const GetConfigurationResponseBodyScopes$outboundSchema: z.ZodType<
    GetConfigurationResponseBodyScopes$Outbound,
    z.ZodTypeDef,
    GetConfigurationResponseBodyScopes
> = z.object({
    added: z.array(GetConfigurationResponseBodyAdded$outboundSchema),
    upgraded: z.array(GetConfigurationResponseBodyUpgraded$outboundSchema),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace GetConfigurationResponseBodyScopes$ {
    /** @deprecated use `GetConfigurationResponseBodyScopes$inboundSchema` instead. */
    export const inboundSchema = GetConfigurationResponseBodyScopes$inboundSchema;
    /** @deprecated use `GetConfigurationResponseBodyScopes$outboundSchema` instead. */
    export const outboundSchema = GetConfigurationResponseBodyScopes$outboundSchema;
    /** @deprecated use `GetConfigurationResponseBodyScopes$Outbound` instead. */
    export type Outbound = GetConfigurationResponseBodyScopes$Outbound;
}

/** @internal */
export const GetConfigurationResponseBodyScopesQueue$inboundSchema: z.ZodType<
    GetConfigurationResponseBodyScopesQueue,
    z.ZodTypeDef,
    unknown
> = z.object({
    scopes: z.lazy(() => GetConfigurationResponseBodyScopes$inboundSchema),
    note: z.string(),
    requestedAt: z.number(),
    confirmedAt: z.number().optional(),
});

/** @internal */
export type GetConfigurationResponseBodyScopesQueue$Outbound = {
    scopes: GetConfigurationResponseBodyScopes$Outbound;
    note: string;
    requestedAt: number;
    confirmedAt?: number | undefined;
};

/** @internal */
export const GetConfigurationResponseBodyScopesQueue$outboundSchema: z.ZodType<
    GetConfigurationResponseBodyScopesQueue$Outbound,
    z.ZodTypeDef,
    GetConfigurationResponseBodyScopesQueue
> = z.object({
    scopes: z.lazy(() => GetConfigurationResponseBodyScopes$outboundSchema),
    note: z.string(),
    requestedAt: z.number(),
    confirmedAt: z.number().optional(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace GetConfigurationResponseBodyScopesQueue$ {
    /** @deprecated use `GetConfigurationResponseBodyScopesQueue$inboundSchema` instead. */
    export const inboundSchema = GetConfigurationResponseBodyScopesQueue$inboundSchema;
    /** @deprecated use `GetConfigurationResponseBodyScopesQueue$outboundSchema` instead. */
    export const outboundSchema = GetConfigurationResponseBodyScopesQueue$outboundSchema;
    /** @deprecated use `GetConfigurationResponseBodyScopesQueue$Outbound` instead. */
    export type Outbound = GetConfigurationResponseBodyScopesQueue$Outbound;
}

/** @internal */
export const GetConfigurationResponseBodyDisabledReason$inboundSchema: z.ZodNativeEnum<
    typeof GetConfigurationResponseBodyDisabledReason
> = z.nativeEnum(GetConfigurationResponseBodyDisabledReason);

/** @internal */
export const GetConfigurationResponseBodyDisabledReason$outboundSchema: z.ZodNativeEnum<
    typeof GetConfigurationResponseBodyDisabledReason
> = GetConfigurationResponseBodyDisabledReason$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace GetConfigurationResponseBodyDisabledReason$ {
    /** @deprecated use `GetConfigurationResponseBodyDisabledReason$inboundSchema` instead. */
    export const inboundSchema = GetConfigurationResponseBodyDisabledReason$inboundSchema;
    /** @deprecated use `GetConfigurationResponseBodyDisabledReason$outboundSchema` instead. */
    export const outboundSchema = GetConfigurationResponseBodyDisabledReason$outboundSchema;
}

/** @internal */
export const GetConfigurationResponseBodyInstallationType$inboundSchema: z.ZodNativeEnum<
    typeof GetConfigurationResponseBodyInstallationType
> = z.nativeEnum(GetConfigurationResponseBodyInstallationType);

/** @internal */
export const GetConfigurationResponseBodyInstallationType$outboundSchema: z.ZodNativeEnum<
    typeof GetConfigurationResponseBodyInstallationType
> = GetConfigurationResponseBodyInstallationType$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace GetConfigurationResponseBodyInstallationType$ {
    /** @deprecated use `GetConfigurationResponseBodyInstallationType$inboundSchema` instead. */
    export const inboundSchema = GetConfigurationResponseBodyInstallationType$inboundSchema;
    /** @deprecated use `GetConfigurationResponseBodyInstallationType$outboundSchema` instead. */
    export const outboundSchema = GetConfigurationResponseBodyInstallationType$outboundSchema;
}

/** @internal */
export const GetConfigurationResponseBody2$inboundSchema: z.ZodType<
    GetConfigurationResponseBody2,
    z.ZodTypeDef,
    unknown
> = z.object({
    completedAt: z.number().optional(),
    createdAt: z.number(),
    id: z.string(),
    integrationId: z.string(),
    ownerId: z.string(),
    projects: z.array(z.string()).optional(),
    source: GetConfigurationResponseBodyIntegrationsSource$inboundSchema.optional(),
    removedLogDrainsAt: z.number().optional(),
    removedProjectEnvsAt: z.number().optional(),
    removedTokensAt: z.number().optional(),
    removedWebhooksAt: z.number().optional(),
    slug: z.string(),
    teamId: z.nullable(z.string()).optional(),
    type: GetConfigurationResponseBodyIntegrationsType$inboundSchema,
    updatedAt: z.number(),
    userId: z.string(),
    scopes: z.array(z.string()),
    scopesQueue: z
        .array(z.lazy(() => GetConfigurationResponseBodyScopesQueue$inboundSchema))
        .optional(),
    disabledAt: z.number().optional(),
    deletedAt: z.nullable(z.number()).optional(),
    disabledReason: GetConfigurationResponseBodyDisabledReason$inboundSchema.optional(),
    northstarMigratedAt: z.number().optional(),
    installationType: GetConfigurationResponseBodyInstallationType$inboundSchema.optional(),
});

/** @internal */
export type GetConfigurationResponseBody2$Outbound = {
    completedAt?: number | undefined;
    createdAt: number;
    id: string;
    integrationId: string;
    ownerId: string;
    projects?: Array<string> | undefined;
    source?: string | undefined;
    removedLogDrainsAt?: number | undefined;
    removedProjectEnvsAt?: number | undefined;
    removedTokensAt?: number | undefined;
    removedWebhooksAt?: number | undefined;
    slug: string;
    teamId?: string | null | undefined;
    type: string;
    updatedAt: number;
    userId: string;
    scopes: Array<string>;
    scopesQueue?: Array<GetConfigurationResponseBodyScopesQueue$Outbound> | undefined;
    disabledAt?: number | undefined;
    deletedAt?: number | null | undefined;
    disabledReason?: string | undefined;
    northstarMigratedAt?: number | undefined;
    installationType?: string | undefined;
};

/** @internal */
export const GetConfigurationResponseBody2$outboundSchema: z.ZodType<
    GetConfigurationResponseBody2$Outbound,
    z.ZodTypeDef,
    GetConfigurationResponseBody2
> = z.object({
    completedAt: z.number().optional(),
    createdAt: z.number(),
    id: z.string(),
    integrationId: z.string(),
    ownerId: z.string(),
    projects: z.array(z.string()).optional(),
    source: GetConfigurationResponseBodyIntegrationsSource$outboundSchema.optional(),
    removedLogDrainsAt: z.number().optional(),
    removedProjectEnvsAt: z.number().optional(),
    removedTokensAt: z.number().optional(),
    removedWebhooksAt: z.number().optional(),
    slug: z.string(),
    teamId: z.nullable(z.string()).optional(),
    type: GetConfigurationResponseBodyIntegrationsType$outboundSchema,
    updatedAt: z.number(),
    userId: z.string(),
    scopes: z.array(z.string()),
    scopesQueue: z
        .array(z.lazy(() => GetConfigurationResponseBodyScopesQueue$outboundSchema))
        .optional(),
    disabledAt: z.number().optional(),
    deletedAt: z.nullable(z.number()).optional(),
    disabledReason: GetConfigurationResponseBodyDisabledReason$outboundSchema.optional(),
    northstarMigratedAt: z.number().optional(),
    installationType: GetConfigurationResponseBodyInstallationType$outboundSchema.optional(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace GetConfigurationResponseBody2$ {
    /** @deprecated use `GetConfigurationResponseBody2$inboundSchema` instead. */
    export const inboundSchema = GetConfigurationResponseBody2$inboundSchema;
    /** @deprecated use `GetConfigurationResponseBody2$outboundSchema` instead. */
    export const outboundSchema = GetConfigurationResponseBody2$outboundSchema;
    /** @deprecated use `GetConfigurationResponseBody2$Outbound` instead. */
    export type Outbound = GetConfigurationResponseBody2$Outbound;
}

/** @internal */
export const GetConfigurationResponseBodySource$inboundSchema: z.ZodNativeEnum<
    typeof GetConfigurationResponseBodySource
> = z.nativeEnum(GetConfigurationResponseBodySource);

/** @internal */
export const GetConfigurationResponseBodySource$outboundSchema: z.ZodNativeEnum<
    typeof GetConfigurationResponseBodySource
> = GetConfigurationResponseBodySource$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace GetConfigurationResponseBodySource$ {
    /** @deprecated use `GetConfigurationResponseBodySource$inboundSchema` instead. */
    export const inboundSchema = GetConfigurationResponseBodySource$inboundSchema;
    /** @deprecated use `GetConfigurationResponseBodySource$outboundSchema` instead. */
    export const outboundSchema = GetConfigurationResponseBodySource$outboundSchema;
}

/** @internal */
export const GetConfigurationResponseBodyType$inboundSchema: z.ZodNativeEnum<
    typeof GetConfigurationResponseBodyType
> = z.nativeEnum(GetConfigurationResponseBodyType);

/** @internal */
export const GetConfigurationResponseBodyType$outboundSchema: z.ZodNativeEnum<
    typeof GetConfigurationResponseBodyType
> = GetConfigurationResponseBodyType$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace GetConfigurationResponseBodyType$ {
    /** @deprecated use `GetConfigurationResponseBodyType$inboundSchema` instead. */
    export const inboundSchema = GetConfigurationResponseBodyType$inboundSchema;
    /** @deprecated use `GetConfigurationResponseBodyType$outboundSchema` instead. */
    export const outboundSchema = GetConfigurationResponseBodyType$outboundSchema;
}

/** @internal */
export const ResponseBodyAdded$inboundSchema: z.ZodNativeEnum<typeof ResponseBodyAdded> =
    z.nativeEnum(ResponseBodyAdded);

/** @internal */
export const ResponseBodyAdded$outboundSchema: z.ZodNativeEnum<typeof ResponseBodyAdded> =
    ResponseBodyAdded$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace ResponseBodyAdded$ {
    /** @deprecated use `ResponseBodyAdded$inboundSchema` instead. */
    export const inboundSchema = ResponseBodyAdded$inboundSchema;
    /** @deprecated use `ResponseBodyAdded$outboundSchema` instead. */
    export const outboundSchema = ResponseBodyAdded$outboundSchema;
}

/** @internal */
export const ResponseBodyUpgraded$inboundSchema: z.ZodNativeEnum<typeof ResponseBodyUpgraded> =
    z.nativeEnum(ResponseBodyUpgraded);

/** @internal */
export const ResponseBodyUpgraded$outboundSchema: z.ZodNativeEnum<typeof ResponseBodyUpgraded> =
    ResponseBodyUpgraded$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace ResponseBodyUpgraded$ {
    /** @deprecated use `ResponseBodyUpgraded$inboundSchema` instead. */
    export const inboundSchema = ResponseBodyUpgraded$inboundSchema;
    /** @deprecated use `ResponseBodyUpgraded$outboundSchema` instead. */
    export const outboundSchema = ResponseBodyUpgraded$outboundSchema;
}

/** @internal */
export const GetConfigurationResponseBodyIntegrationsResponseScopes$inboundSchema: z.ZodType<
    GetConfigurationResponseBodyIntegrationsResponseScopes,
    z.ZodTypeDef,
    unknown
> = z.object({
    added: z.array(ResponseBodyAdded$inboundSchema),
    upgraded: z.array(ResponseBodyUpgraded$inboundSchema),
});

/** @internal */
export type GetConfigurationResponseBodyIntegrationsResponseScopes$Outbound = {
    added: Array<string>;
    upgraded: Array<string>;
};

/** @internal */
export const GetConfigurationResponseBodyIntegrationsResponseScopes$outboundSchema: z.ZodType<
    GetConfigurationResponseBodyIntegrationsResponseScopes$Outbound,
    z.ZodTypeDef,
    GetConfigurationResponseBodyIntegrationsResponseScopes
> = z.object({
    added: z.array(ResponseBodyAdded$outboundSchema),
    upgraded: z.array(ResponseBodyUpgraded$outboundSchema),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace GetConfigurationResponseBodyIntegrationsResponseScopes$ {
    /** @deprecated use `GetConfigurationResponseBodyIntegrationsResponseScopes$inboundSchema` instead. */
    export const inboundSchema =
        GetConfigurationResponseBodyIntegrationsResponseScopes$inboundSchema;
    /** @deprecated use `GetConfigurationResponseBodyIntegrationsResponseScopes$outboundSchema` instead. */
    export const outboundSchema =
        GetConfigurationResponseBodyIntegrationsResponseScopes$outboundSchema;
    /** @deprecated use `GetConfigurationResponseBodyIntegrationsResponseScopes$Outbound` instead. */
    export type Outbound = GetConfigurationResponseBodyIntegrationsResponseScopes$Outbound;
}

/** @internal */
export const ResponseBodyScopesQueue$inboundSchema: z.ZodType<
    ResponseBodyScopesQueue,
    z.ZodTypeDef,
    unknown
> = z.object({
    scopes: z.lazy(() => GetConfigurationResponseBodyIntegrationsResponseScopes$inboundSchema),
    note: z.string(),
    requestedAt: z.number(),
    confirmedAt: z.number().optional(),
});

/** @internal */
export type ResponseBodyScopesQueue$Outbound = {
    scopes: GetConfigurationResponseBodyIntegrationsResponseScopes$Outbound;
    note: string;
    requestedAt: number;
    confirmedAt?: number | undefined;
};

/** @internal */
export const ResponseBodyScopesQueue$outboundSchema: z.ZodType<
    ResponseBodyScopesQueue$Outbound,
    z.ZodTypeDef,
    ResponseBodyScopesQueue
> = z.object({
    scopes: z.lazy(() => GetConfigurationResponseBodyIntegrationsResponseScopes$outboundSchema),
    note: z.string(),
    requestedAt: z.number(),
    confirmedAt: z.number().optional(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace ResponseBodyScopesQueue$ {
    /** @deprecated use `ResponseBodyScopesQueue$inboundSchema` instead. */
    export const inboundSchema = ResponseBodyScopesQueue$inboundSchema;
    /** @deprecated use `ResponseBodyScopesQueue$outboundSchema` instead. */
    export const outboundSchema = ResponseBodyScopesQueue$outboundSchema;
    /** @deprecated use `ResponseBodyScopesQueue$Outbound` instead. */
    export type Outbound = ResponseBodyScopesQueue$Outbound;
}

/** @internal */
export const ResponseBodyDisabledReason$inboundSchema: z.ZodNativeEnum<
    typeof ResponseBodyDisabledReason
> = z.nativeEnum(ResponseBodyDisabledReason);

/** @internal */
export const ResponseBodyDisabledReason$outboundSchema: z.ZodNativeEnum<
    typeof ResponseBodyDisabledReason
> = ResponseBodyDisabledReason$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace ResponseBodyDisabledReason$ {
    /** @deprecated use `ResponseBodyDisabledReason$inboundSchema` instead. */
    export const inboundSchema = ResponseBodyDisabledReason$inboundSchema;
    /** @deprecated use `ResponseBodyDisabledReason$outboundSchema` instead. */
    export const outboundSchema = ResponseBodyDisabledReason$outboundSchema;
}

/** @internal */
export const ResponseBodyInstallationType$inboundSchema: z.ZodNativeEnum<
    typeof ResponseBodyInstallationType
> = z.nativeEnum(ResponseBodyInstallationType);

/** @internal */
export const ResponseBodyInstallationType$outboundSchema: z.ZodNativeEnum<
    typeof ResponseBodyInstallationType
> = ResponseBodyInstallationType$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace ResponseBodyInstallationType$ {
    /** @deprecated use `ResponseBodyInstallationType$inboundSchema` instead. */
    export const inboundSchema = ResponseBodyInstallationType$inboundSchema;
    /** @deprecated use `ResponseBodyInstallationType$outboundSchema` instead. */
    export const outboundSchema = ResponseBodyInstallationType$outboundSchema;
}

/** @internal */
export const GetConfigurationResponseBody1$inboundSchema: z.ZodType<
    GetConfigurationResponseBody1,
    z.ZodTypeDef,
    unknown
> = z.object({
    billingTotal: z.string().optional(),
    periodStart: z.string().optional(),
    periodEnd: z.string().optional(),
    completedAt: z.number().optional(),
    createdAt: z.number(),
    id: z.string(),
    integrationId: z.string(),
    ownerId: z.string(),
    projects: z.array(z.string()).optional(),
    source: GetConfigurationResponseBodySource$inboundSchema.optional(),
    removedLogDrainsAt: z.number().optional(),
    removedProjectEnvsAt: z.number().optional(),
    removedTokensAt: z.number().optional(),
    removedWebhooksAt: z.number().optional(),
    slug: z.string(),
    teamId: z.nullable(z.string()).optional(),
    type: GetConfigurationResponseBodyType$inboundSchema,
    updatedAt: z.number(),
    userId: z.string(),
    scopes: z.array(z.string()),
    scopesQueue: z.array(z.lazy(() => ResponseBodyScopesQueue$inboundSchema)).optional(),
    disabledAt: z.number().optional(),
    deletedAt: z.nullable(z.number()).optional(),
    disabledReason: ResponseBodyDisabledReason$inboundSchema.optional(),
    northstarMigratedAt: z.number().optional(),
    installationType: ResponseBodyInstallationType$inboundSchema.optional(),
});

/** @internal */
export type GetConfigurationResponseBody1$Outbound = {
    billingTotal?: string | undefined;
    periodStart?: string | undefined;
    periodEnd?: string | undefined;
    completedAt?: number | undefined;
    createdAt: number;
    id: string;
    integrationId: string;
    ownerId: string;
    projects?: Array<string> | undefined;
    source?: string | undefined;
    removedLogDrainsAt?: number | undefined;
    removedProjectEnvsAt?: number | undefined;
    removedTokensAt?: number | undefined;
    removedWebhooksAt?: number | undefined;
    slug: string;
    teamId?: string | null | undefined;
    type: string;
    updatedAt: number;
    userId: string;
    scopes: Array<string>;
    scopesQueue?: Array<ResponseBodyScopesQueue$Outbound> | undefined;
    disabledAt?: number | undefined;
    deletedAt?: number | null | undefined;
    disabledReason?: string | undefined;
    northstarMigratedAt?: number | undefined;
    installationType?: string | undefined;
};

/** @internal */
export const GetConfigurationResponseBody1$outboundSchema: z.ZodType<
    GetConfigurationResponseBody1$Outbound,
    z.ZodTypeDef,
    GetConfigurationResponseBody1
> = z.object({
    billingTotal: z.string().optional(),
    periodStart: z.string().optional(),
    periodEnd: z.string().optional(),
    completedAt: z.number().optional(),
    createdAt: z.number(),
    id: z.string(),
    integrationId: z.string(),
    ownerId: z.string(),
    projects: z.array(z.string()).optional(),
    source: GetConfigurationResponseBodySource$outboundSchema.optional(),
    removedLogDrainsAt: z.number().optional(),
    removedProjectEnvsAt: z.number().optional(),
    removedTokensAt: z.number().optional(),
    removedWebhooksAt: z.number().optional(),
    slug: z.string(),
    teamId: z.nullable(z.string()).optional(),
    type: GetConfigurationResponseBodyType$outboundSchema,
    updatedAt: z.number(),
    userId: z.string(),
    scopes: z.array(z.string()),
    scopesQueue: z.array(z.lazy(() => ResponseBodyScopesQueue$outboundSchema)).optional(),
    disabledAt: z.number().optional(),
    deletedAt: z.nullable(z.number()).optional(),
    disabledReason: ResponseBodyDisabledReason$outboundSchema.optional(),
    northstarMigratedAt: z.number().optional(),
    installationType: ResponseBodyInstallationType$outboundSchema.optional(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace GetConfigurationResponseBody1$ {
    /** @deprecated use `GetConfigurationResponseBody1$inboundSchema` instead. */
    export const inboundSchema = GetConfigurationResponseBody1$inboundSchema;
    /** @deprecated use `GetConfigurationResponseBody1$outboundSchema` instead. */
    export const outboundSchema = GetConfigurationResponseBody1$outboundSchema;
    /** @deprecated use `GetConfigurationResponseBody1$Outbound` instead. */
    export type Outbound = GetConfigurationResponseBody1$Outbound;
}

/** @internal */
export const GetConfigurationResponseBody$inboundSchema: z.ZodType<
    GetConfigurationResponseBody,
    z.ZodTypeDef,
    unknown
> = z.union([
    z.lazy(() => GetConfigurationResponseBody2$inboundSchema),
    z.lazy(() => GetConfigurationResponseBody3$inboundSchema),
    z.lazy(() => GetConfigurationResponseBody1$inboundSchema),
]);

/** @internal */
export type GetConfigurationResponseBody$Outbound =
    | GetConfigurationResponseBody2$Outbound
    | GetConfigurationResponseBody3$Outbound
    | GetConfigurationResponseBody1$Outbound;

/** @internal */
export const GetConfigurationResponseBody$outboundSchema: z.ZodType<
    GetConfigurationResponseBody$Outbound,
    z.ZodTypeDef,
    GetConfigurationResponseBody
> = z.union([
    z.lazy(() => GetConfigurationResponseBody2$outboundSchema),
    z.lazy(() => GetConfigurationResponseBody3$outboundSchema),
    z.lazy(() => GetConfigurationResponseBody1$outboundSchema),
]);

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace GetConfigurationResponseBody$ {
    /** @deprecated use `GetConfigurationResponseBody$inboundSchema` instead. */
    export const inboundSchema = GetConfigurationResponseBody$inboundSchema;
    /** @deprecated use `GetConfigurationResponseBody$outboundSchema` instead. */
    export const outboundSchema = GetConfigurationResponseBody$outboundSchema;
    /** @deprecated use `GetConfigurationResponseBody$Outbound` instead. */
    export type Outbound = GetConfigurationResponseBody$Outbound;
}
