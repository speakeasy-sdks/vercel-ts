/*
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

import { AuthUser, AuthUser$ } from "./authuser";
import { AuthUserLimited, AuthUserLimited$ } from "./authuserlimited";
import * as z from "zod";

export type GetAuthUserUser = AuthUserLimited | AuthUser;

/**
 * Successful response.
 */
export type GetAuthUserResponseBody = {
    user: AuthUserLimited | AuthUser;
};

/** @internal */
export namespace GetAuthUserUser$ {
    export const inboundSchema: z.ZodType<GetAuthUserUser, z.ZodTypeDef, unknown> = z.union([
        AuthUserLimited$.inboundSchema,
        AuthUser$.inboundSchema,
    ]);

    export type Outbound = AuthUserLimited$.Outbound | AuthUser$.Outbound;
    export const outboundSchema: z.ZodType<Outbound, z.ZodTypeDef, GetAuthUserUser> = z.union([
        AuthUserLimited$.outboundSchema,
        AuthUser$.outboundSchema,
    ]);
}

/** @internal */
export namespace GetAuthUserResponseBody$ {
    export const inboundSchema: z.ZodType<GetAuthUserResponseBody, z.ZodTypeDef, unknown> =
        z.object({
            user: z.union([AuthUserLimited$.inboundSchema, AuthUser$.inboundSchema]),
        });

    export type Outbound = {
        user: AuthUserLimited$.Outbound | AuthUser$.Outbound;
    };

    export const outboundSchema: z.ZodType<Outbound, z.ZodTypeDef, GetAuthUserResponseBody> =
        z.object({
            user: z.union([AuthUserLimited$.outboundSchema, AuthUser$.outboundSchema]),
        });
}
