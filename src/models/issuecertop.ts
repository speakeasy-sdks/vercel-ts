/*
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

import { HTTPMetadata, HTTPMetadata$ } from "./httpmetadata";
import * as z from "zod";

export type IssueCertRequestBody = {
    /**
     * The common names the cert should be issued for
     */
    cns?: Array<string> | undefined;
};

export type IssueCertRequest = {
    /**
     * The Team identifier to perform the request on behalf of.
     */
    teamId?: string | undefined;
    /**
     * The Team slug to perform the request on behalf of.
     */
    slug?: string | undefined;
    requestBody?: IssueCertRequestBody | undefined;
};

export type IssueCertResponseBody = {
    id: string;
    createdAt: number;
    expiresAt: number;
    autoRenew: boolean;
    cns: Array<string>;
};

export type IssueCertResponse = {
    httpMeta: HTTPMetadata;
    object?: IssueCertResponseBody | undefined;
};

/** @internal */
export namespace IssueCertRequestBody$ {
    export const inboundSchema: z.ZodType<IssueCertRequestBody, z.ZodTypeDef, unknown> = z
        .object({
            cns: z.array(z.string()).optional(),
        })
        .transform((v) => {
            return {
                ...(v.cns === undefined ? null : { cns: v.cns }),
            };
        });

    export type Outbound = {
        cns?: Array<string> | undefined;
    };

    export const outboundSchema: z.ZodType<Outbound, z.ZodTypeDef, IssueCertRequestBody> = z
        .object({
            cns: z.array(z.string()).optional(),
        })
        .transform((v) => {
            return {
                ...(v.cns === undefined ? null : { cns: v.cns }),
            };
        });
}

/** @internal */
export namespace IssueCertRequest$ {
    export const inboundSchema: z.ZodType<IssueCertRequest, z.ZodTypeDef, unknown> = z
        .object({
            teamId: z.string().optional(),
            slug: z.string().optional(),
            RequestBody: z.lazy(() => IssueCertRequestBody$.inboundSchema).optional(),
        })
        .transform((v) => {
            return {
                ...(v.teamId === undefined ? null : { teamId: v.teamId }),
                ...(v.slug === undefined ? null : { slug: v.slug }),
                ...(v.RequestBody === undefined ? null : { requestBody: v.RequestBody }),
            };
        });

    export type Outbound = {
        teamId?: string | undefined;
        slug?: string | undefined;
        RequestBody?: IssueCertRequestBody$.Outbound | undefined;
    };

    export const outboundSchema: z.ZodType<Outbound, z.ZodTypeDef, IssueCertRequest> = z
        .object({
            teamId: z.string().optional(),
            slug: z.string().optional(),
            requestBody: z.lazy(() => IssueCertRequestBody$.outboundSchema).optional(),
        })
        .transform((v) => {
            return {
                ...(v.teamId === undefined ? null : { teamId: v.teamId }),
                ...(v.slug === undefined ? null : { slug: v.slug }),
                ...(v.requestBody === undefined ? null : { RequestBody: v.requestBody }),
            };
        });
}

/** @internal */
export namespace IssueCertResponseBody$ {
    export const inboundSchema: z.ZodType<IssueCertResponseBody, z.ZodTypeDef, unknown> = z
        .object({
            id: z.string(),
            createdAt: z.number(),
            expiresAt: z.number(),
            autoRenew: z.boolean(),
            cns: z.array(z.string()),
        })
        .transform((v) => {
            return {
                id: v.id,
                createdAt: v.createdAt,
                expiresAt: v.expiresAt,
                autoRenew: v.autoRenew,
                cns: v.cns,
            };
        });

    export type Outbound = {
        id: string;
        createdAt: number;
        expiresAt: number;
        autoRenew: boolean;
        cns: Array<string>;
    };

    export const outboundSchema: z.ZodType<Outbound, z.ZodTypeDef, IssueCertResponseBody> = z
        .object({
            id: z.string(),
            createdAt: z.number(),
            expiresAt: z.number(),
            autoRenew: z.boolean(),
            cns: z.array(z.string()),
        })
        .transform((v) => {
            return {
                id: v.id,
                createdAt: v.createdAt,
                expiresAt: v.expiresAt,
                autoRenew: v.autoRenew,
                cns: v.cns,
            };
        });
}

/** @internal */
export namespace IssueCertResponse$ {
    export const inboundSchema: z.ZodType<IssueCertResponse, z.ZodTypeDef, unknown> = z
        .object({
            HttpMeta: HTTPMetadata$.inboundSchema,
            object: z.lazy(() => IssueCertResponseBody$.inboundSchema).optional(),
        })
        .transform((v) => {
            return {
                httpMeta: v.HttpMeta,
                ...(v.object === undefined ? null : { object: v.object }),
            };
        });

    export type Outbound = {
        HttpMeta: HTTPMetadata$.Outbound;
        object?: IssueCertResponseBody$.Outbound | undefined;
    };

    export const outboundSchema: z.ZodType<Outbound, z.ZodTypeDef, IssueCertResponse> = z
        .object({
            httpMeta: HTTPMetadata$.outboundSchema,
            object: z.lazy(() => IssueCertResponseBody$.outboundSchema).optional(),
        })
        .transform((v) => {
            return {
                HttpMeta: v.httpMeta,
                ...(v.object === undefined ? null : { object: v.object }),
            };
        });
}
