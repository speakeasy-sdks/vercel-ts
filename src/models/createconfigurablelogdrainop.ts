/*
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

import { remap as remap$ } from "../lib/primitives.js";
import * as z from "zod";

/**
 * The delivery log format
 */
export enum CreateConfigurableLogDrainDeliveryFormat {
    Json = "json",
    Ndjson = "ndjson",
}

export enum CreateConfigurableLogDrainSources {
    Static = "static",
    Lambda = "lambda",
    Build = "build",
    Edge = "edge",
    External = "external",
}

export enum CreateConfigurableLogDrainEnvironments {
    Preview = "preview",
    Production = "production",
}

export type CreateConfigurableLogDrainRequestBody = {
    /**
     * The delivery log format
     */
    deliveryFormat: CreateConfigurableLogDrainDeliveryFormat;
    /**
     * The log drain url
     */
    url: string;
    /**
     * Headers to be sent together with the request
     */
    headers?: { [k: string]: string } | undefined;
    projectIds?: Array<string> | undefined;
    sources: Array<CreateConfigurableLogDrainSources>;
    environments?: Array<CreateConfigurableLogDrainEnvironments> | undefined;
    /**
     * Custom secret of log drain
     */
    secret?: string | undefined;
    /**
     * The sampling rate for this log drain. It should be a percentage rate between 0 and 100. With max 2 decimal points
     */
    samplingRate?: number | undefined;
};

export type CreateConfigurableLogDrainRequest = {
    /**
     * The Team identifier to perform the request on behalf of.
     */
    teamId?: string | undefined;
    /**
     * The Team slug to perform the request on behalf of.
     */
    slug?: string | undefined;
    requestBody?: CreateConfigurableLogDrainRequestBody | undefined;
};

export enum CreateConfigurableLogDrainLogDrainsDeliveryFormat {
    Json = "json",
    Ndjson = "ndjson",
    Syslog = "syslog",
}

export enum CreateConfigurableLogDrainLogDrainsSources {
    Build = "build",
    Edge = "edge",
    Lambda = "lambda",
    Static = "static",
    External = "external",
}

export enum CreateConfigurableLogDrainLogDrainsEnvironments {
    Production = "production",
    Preview = "preview",
}

export enum CreateConfigurableLogDrainStatus {
    Enabled = "enabled",
    Disabled = "disabled",
    Errored = "errored",
}

export enum CreateConfigurableLogDrainDisabledReason {
    DisabledByOwner = "disabled-by-owner",
    FeatureNotAvailable = "feature-not-available",
    DisabledByAdmin = "disabled-by-admin",
}

export enum CreateConfigurableLogDrainCompression {
    Gzip = "gzip",
    Zstd = "zstd",
    None = "none",
}

export enum CreateConfigurableLogDrainCreatedFrom {
    SelfServed = "self-served",
}

export type CreateConfigurableLogDrainResponseBody = {
    /**
     * The secret to validate the log-drain payload
     */
    secret?: string | undefined;
    id: string;
    deliveryFormat: CreateConfigurableLogDrainLogDrainsDeliveryFormat;
    url: string;
    name: string;
    clientId?: string | undefined;
    configurationId?: string | undefined;
    teamId?: string | null | undefined;
    ownerId: string;
    projectIds?: Array<string> | undefined;
    createdAt: number;
    sources?: Array<CreateConfigurableLogDrainLogDrainsSources> | undefined;
    headers?: { [k: string]: string } | undefined;
    environments: Array<CreateConfigurableLogDrainLogDrainsEnvironments>;
    status?: CreateConfigurableLogDrainStatus | undefined;
    disabledAt?: number | undefined;
    disabledReason?: CreateConfigurableLogDrainDisabledReason | undefined;
    disabledBy?: string | undefined;
    firstErrorTimestamp?: number | undefined;
    samplingRate?: number | undefined;
    compression?: CreateConfigurableLogDrainCompression | undefined;
    createdFrom?: CreateConfigurableLogDrainCreatedFrom | undefined;
};

/** @internal */
export namespace CreateConfigurableLogDrainDeliveryFormat$ {
    export const inboundSchema: z.ZodNativeEnum<typeof CreateConfigurableLogDrainDeliveryFormat> =
        z.nativeEnum(CreateConfigurableLogDrainDeliveryFormat);
    export const outboundSchema: z.ZodNativeEnum<typeof CreateConfigurableLogDrainDeliveryFormat> =
        inboundSchema;
}

/** @internal */
export namespace CreateConfigurableLogDrainSources$ {
    export const inboundSchema: z.ZodNativeEnum<typeof CreateConfigurableLogDrainSources> =
        z.nativeEnum(CreateConfigurableLogDrainSources);
    export const outboundSchema: z.ZodNativeEnum<typeof CreateConfigurableLogDrainSources> =
        inboundSchema;
}

/** @internal */
export namespace CreateConfigurableLogDrainEnvironments$ {
    export const inboundSchema: z.ZodNativeEnum<typeof CreateConfigurableLogDrainEnvironments> =
        z.nativeEnum(CreateConfigurableLogDrainEnvironments);
    export const outboundSchema: z.ZodNativeEnum<typeof CreateConfigurableLogDrainEnvironments> =
        inboundSchema;
}

/** @internal */
export namespace CreateConfigurableLogDrainRequestBody$ {
    export const inboundSchema: z.ZodType<
        CreateConfigurableLogDrainRequestBody,
        z.ZodTypeDef,
        unknown
    > = z.object({
        deliveryFormat: CreateConfigurableLogDrainDeliveryFormat$.inboundSchema,
        url: z.string(),
        headers: z.record(z.string()).optional(),
        projectIds: z.array(z.string()).optional(),
        sources: z.array(CreateConfigurableLogDrainSources$.inboundSchema),
        environments: z.array(CreateConfigurableLogDrainEnvironments$.inboundSchema).optional(),
        secret: z.string().optional(),
        samplingRate: z.number().optional(),
    });

    export type Outbound = {
        deliveryFormat: string;
        url: string;
        headers?: { [k: string]: string } | undefined;
        projectIds?: Array<string> | undefined;
        sources: Array<string>;
        environments?: Array<string> | undefined;
        secret?: string | undefined;
        samplingRate?: number | undefined;
    };

    export const outboundSchema: z.ZodType<
        Outbound,
        z.ZodTypeDef,
        CreateConfigurableLogDrainRequestBody
    > = z.object({
        deliveryFormat: CreateConfigurableLogDrainDeliveryFormat$.outboundSchema,
        url: z.string(),
        headers: z.record(z.string()).optional(),
        projectIds: z.array(z.string()).optional(),
        sources: z.array(CreateConfigurableLogDrainSources$.outboundSchema),
        environments: z.array(CreateConfigurableLogDrainEnvironments$.outboundSchema).optional(),
        secret: z.string().optional(),
        samplingRate: z.number().optional(),
    });
}

/** @internal */
export namespace CreateConfigurableLogDrainRequest$ {
    export const inboundSchema: z.ZodType<
        CreateConfigurableLogDrainRequest,
        z.ZodTypeDef,
        unknown
    > = z
        .object({
            teamId: z.string().optional(),
            slug: z.string().optional(),
            RequestBody: z
                .lazy(() => CreateConfigurableLogDrainRequestBody$.inboundSchema)
                .optional(),
        })
        .transform((v) => {
            return remap$(v, {
                RequestBody: "requestBody",
            });
        });

    export type Outbound = {
        teamId?: string | undefined;
        slug?: string | undefined;
        RequestBody?: CreateConfigurableLogDrainRequestBody$.Outbound | undefined;
    };

    export const outboundSchema: z.ZodType<
        Outbound,
        z.ZodTypeDef,
        CreateConfigurableLogDrainRequest
    > = z
        .object({
            teamId: z.string().optional(),
            slug: z.string().optional(),
            requestBody: z
                .lazy(() => CreateConfigurableLogDrainRequestBody$.outboundSchema)
                .optional(),
        })
        .transform((v) => {
            return remap$(v, {
                requestBody: "RequestBody",
            });
        });
}

/** @internal */
export namespace CreateConfigurableLogDrainLogDrainsDeliveryFormat$ {
    export const inboundSchema: z.ZodNativeEnum<
        typeof CreateConfigurableLogDrainLogDrainsDeliveryFormat
    > = z.nativeEnum(CreateConfigurableLogDrainLogDrainsDeliveryFormat);
    export const outboundSchema: z.ZodNativeEnum<
        typeof CreateConfigurableLogDrainLogDrainsDeliveryFormat
    > = inboundSchema;
}

/** @internal */
export namespace CreateConfigurableLogDrainLogDrainsSources$ {
    export const inboundSchema: z.ZodNativeEnum<typeof CreateConfigurableLogDrainLogDrainsSources> =
        z.nativeEnum(CreateConfigurableLogDrainLogDrainsSources);
    export const outboundSchema: z.ZodNativeEnum<
        typeof CreateConfigurableLogDrainLogDrainsSources
    > = inboundSchema;
}

/** @internal */
export namespace CreateConfigurableLogDrainLogDrainsEnvironments$ {
    export const inboundSchema: z.ZodNativeEnum<
        typeof CreateConfigurableLogDrainLogDrainsEnvironments
    > = z.nativeEnum(CreateConfigurableLogDrainLogDrainsEnvironments);
    export const outboundSchema: z.ZodNativeEnum<
        typeof CreateConfigurableLogDrainLogDrainsEnvironments
    > = inboundSchema;
}

/** @internal */
export namespace CreateConfigurableLogDrainStatus$ {
    export const inboundSchema: z.ZodNativeEnum<typeof CreateConfigurableLogDrainStatus> =
        z.nativeEnum(CreateConfigurableLogDrainStatus);
    export const outboundSchema: z.ZodNativeEnum<typeof CreateConfigurableLogDrainStatus> =
        inboundSchema;
}

/** @internal */
export namespace CreateConfigurableLogDrainDisabledReason$ {
    export const inboundSchema: z.ZodNativeEnum<typeof CreateConfigurableLogDrainDisabledReason> =
        z.nativeEnum(CreateConfigurableLogDrainDisabledReason);
    export const outboundSchema: z.ZodNativeEnum<typeof CreateConfigurableLogDrainDisabledReason> =
        inboundSchema;
}

/** @internal */
export namespace CreateConfigurableLogDrainCompression$ {
    export const inboundSchema: z.ZodNativeEnum<typeof CreateConfigurableLogDrainCompression> =
        z.nativeEnum(CreateConfigurableLogDrainCompression);
    export const outboundSchema: z.ZodNativeEnum<typeof CreateConfigurableLogDrainCompression> =
        inboundSchema;
}

/** @internal */
export namespace CreateConfigurableLogDrainCreatedFrom$ {
    export const inboundSchema: z.ZodNativeEnum<typeof CreateConfigurableLogDrainCreatedFrom> =
        z.nativeEnum(CreateConfigurableLogDrainCreatedFrom);
    export const outboundSchema: z.ZodNativeEnum<typeof CreateConfigurableLogDrainCreatedFrom> =
        inboundSchema;
}

/** @internal */
export namespace CreateConfigurableLogDrainResponseBody$ {
    export const inboundSchema: z.ZodType<
        CreateConfigurableLogDrainResponseBody,
        z.ZodTypeDef,
        unknown
    > = z.object({
        secret: z.string().optional(),
        id: z.string(),
        deliveryFormat: CreateConfigurableLogDrainLogDrainsDeliveryFormat$.inboundSchema,
        url: z.string(),
        name: z.string(),
        clientId: z.string().optional(),
        configurationId: z.string().optional(),
        teamId: z.nullable(z.string()).optional(),
        ownerId: z.string(),
        projectIds: z.array(z.string()).optional(),
        createdAt: z.number(),
        sources: z.array(CreateConfigurableLogDrainLogDrainsSources$.inboundSchema).optional(),
        headers: z.record(z.string()).optional(),
        environments: z.array(CreateConfigurableLogDrainLogDrainsEnvironments$.inboundSchema),
        status: CreateConfigurableLogDrainStatus$.inboundSchema.optional(),
        disabledAt: z.number().optional(),
        disabledReason: CreateConfigurableLogDrainDisabledReason$.inboundSchema.optional(),
        disabledBy: z.string().optional(),
        firstErrorTimestamp: z.number().optional(),
        samplingRate: z.number().optional(),
        compression: CreateConfigurableLogDrainCompression$.inboundSchema.optional(),
        createdFrom: CreateConfigurableLogDrainCreatedFrom$.inboundSchema.optional(),
    });

    export type Outbound = {
        secret?: string | undefined;
        id: string;
        deliveryFormat: string;
        url: string;
        name: string;
        clientId?: string | undefined;
        configurationId?: string | undefined;
        teamId?: string | null | undefined;
        ownerId: string;
        projectIds?: Array<string> | undefined;
        createdAt: number;
        sources?: Array<string> | undefined;
        headers?: { [k: string]: string } | undefined;
        environments: Array<string>;
        status?: string | undefined;
        disabledAt?: number | undefined;
        disabledReason?: string | undefined;
        disabledBy?: string | undefined;
        firstErrorTimestamp?: number | undefined;
        samplingRate?: number | undefined;
        compression?: string | undefined;
        createdFrom?: string | undefined;
    };

    export const outboundSchema: z.ZodType<
        Outbound,
        z.ZodTypeDef,
        CreateConfigurableLogDrainResponseBody
    > = z.object({
        secret: z.string().optional(),
        id: z.string(),
        deliveryFormat: CreateConfigurableLogDrainLogDrainsDeliveryFormat$.outboundSchema,
        url: z.string(),
        name: z.string(),
        clientId: z.string().optional(),
        configurationId: z.string().optional(),
        teamId: z.nullable(z.string()).optional(),
        ownerId: z.string(),
        projectIds: z.array(z.string()).optional(),
        createdAt: z.number(),
        sources: z.array(CreateConfigurableLogDrainLogDrainsSources$.outboundSchema).optional(),
        headers: z.record(z.string()).optional(),
        environments: z.array(CreateConfigurableLogDrainLogDrainsEnvironments$.outboundSchema),
        status: CreateConfigurableLogDrainStatus$.outboundSchema.optional(),
        disabledAt: z.number().optional(),
        disabledReason: CreateConfigurableLogDrainDisabledReason$.outboundSchema.optional(),
        disabledBy: z.string().optional(),
        firstErrorTimestamp: z.number().optional(),
        samplingRate: z.number().optional(),
        compression: CreateConfigurableLogDrainCompression$.outboundSchema.optional(),
        createdFrom: CreateConfigurableLogDrainCreatedFrom$.outboundSchema.optional(),
    });
}
