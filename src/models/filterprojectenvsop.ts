/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import { ClosedEnum } from "../types/enums.js";
import {
    Pagination,
    Pagination$inboundSchema,
    Pagination$Outbound,
    Pagination$outboundSchema,
} from "./pagination.js";
import * as z from "zod";

/**
 * If true, the environment variable value will be decrypted
 *
 * @deprecated enum: This will be removed in a future release, please migrate away from it as soon as possible.
 */
export const Decrypt = {
    True: "true",
    False: "false",
} as const;
/**
 * If true, the environment variable value will be decrypted
 *
 * @deprecated enum: This will be removed in a future release, please migrate away from it as soon as possible.
 */
export type Decrypt = ClosedEnum<typeof Decrypt>;

export type FilterProjectEnvsRequest = {
    /**
     * The unique project identifier or the project name
     */
    idOrName: string;
    /**
     * If defined, the git branch of the environment variable to filter the results (must have target=preview)
     */
    gitBranch?: string | undefined;
    /**
     * If true, the environment variable value will be decrypted
     */
    decrypt?: Decrypt | undefined;
    /**
     * The source that is calling the endpoint.
     */
    source?: string | undefined;
    /**
     * The Team identifier to perform the request on behalf of.
     */
    teamId?: string | undefined;
    /**
     * The Team slug to perform the request on behalf of.
     */
    slug?: string | undefined;
};

export const FilterProjectEnvsTargetEnvsResponse2 = {
    Production: "production",
    Preview: "preview",
    Development: "development",
} as const;
export type FilterProjectEnvsTargetEnvsResponse2 = ClosedEnum<
    typeof FilterProjectEnvsTargetEnvsResponse2
>;

export const FilterProjectEnvsTargetEnvsResponse1 = {
    Production: "production",
    Preview: "preview",
    Development: "development",
} as const;
export type FilterProjectEnvsTargetEnvsResponse1 = ClosedEnum<
    typeof FilterProjectEnvsTargetEnvsResponse1
>;

export type FilterProjectEnvsResponseBodyEnvsResponseTarget =
    | Array<FilterProjectEnvsTargetEnvsResponse1>
    | FilterProjectEnvsTargetEnvsResponse2;

export const FilterProjectEnvsResponseBodyEnvsResponse200Type = {
    System: "system",
    Encrypted: "encrypted",
    Plain: "plain",
    Sensitive: "sensitive",
    Secret: "secret",
} as const;
export type FilterProjectEnvsResponseBodyEnvsResponse200Type = ClosedEnum<
    typeof FilterProjectEnvsResponseBodyEnvsResponse200Type
>;

export const FilterProjectEnvsContentHintEnvsResponse200ApplicationJSONResponseBody3Envs14Type = {
    IntegrationStoreSecret: "integration-store-secret",
} as const;
export type FilterProjectEnvsContentHintEnvsResponse200ApplicationJSONResponseBody3Envs14Type =
    ClosedEnum<
        typeof FilterProjectEnvsContentHintEnvsResponse200ApplicationJSONResponseBody3Envs14Type
    >;

export type FilterProjectEnvsContentHintEnvsResponse14 = {
    type: FilterProjectEnvsContentHintEnvsResponse200ApplicationJSONResponseBody3Envs14Type;
    storeId: string;
    integrationId: string;
    integrationProductId: string;
    integrationConfigurationId: string;
};

export const FilterProjectEnvsContentHintEnvsResponse200ApplicationJSONResponseBody3Envs13Type = {
    PostgresUrlNoSsl: "postgres-url-no-ssl",
} as const;
export type FilterProjectEnvsContentHintEnvsResponse200ApplicationJSONResponseBody3Envs13Type =
    ClosedEnum<
        typeof FilterProjectEnvsContentHintEnvsResponse200ApplicationJSONResponseBody3Envs13Type
    >;

export type FilterProjectEnvsContentHintEnvsResponse13 = {
    type: FilterProjectEnvsContentHintEnvsResponse200ApplicationJSONResponseBody3Envs13Type;
    storeId: string;
};

export const FilterProjectEnvsContentHintEnvsResponse200ApplicationJSONResponseBody3Envs12Type = {
    PostgresDatabase: "postgres-database",
} as const;
export type FilterProjectEnvsContentHintEnvsResponse200ApplicationJSONResponseBody3Envs12Type =
    ClosedEnum<
        typeof FilterProjectEnvsContentHintEnvsResponse200ApplicationJSONResponseBody3Envs12Type
    >;

export type FilterProjectEnvsContentHintEnvsResponse12 = {
    type: FilterProjectEnvsContentHintEnvsResponse200ApplicationJSONResponseBody3Envs12Type;
    storeId: string;
};

export const FilterProjectEnvsContentHintEnvsResponse200ApplicationJSONResponseBody3Envs11Type = {
    PostgresPassword: "postgres-password",
} as const;
export type FilterProjectEnvsContentHintEnvsResponse200ApplicationJSONResponseBody3Envs11Type =
    ClosedEnum<
        typeof FilterProjectEnvsContentHintEnvsResponse200ApplicationJSONResponseBody3Envs11Type
    >;

export type FilterProjectEnvsContentHintEnvsResponse11 = {
    type: FilterProjectEnvsContentHintEnvsResponse200ApplicationJSONResponseBody3Envs11Type;
    storeId: string;
};

export const FilterProjectEnvsContentHintEnvsResponse200ApplicationJSONResponseBody3Envs10Type = {
    PostgresHost: "postgres-host",
} as const;
export type FilterProjectEnvsContentHintEnvsResponse200ApplicationJSONResponseBody3Envs10Type =
    ClosedEnum<
        typeof FilterProjectEnvsContentHintEnvsResponse200ApplicationJSONResponseBody3Envs10Type
    >;

export type FilterProjectEnvsContentHintEnvsResponse10 = {
    type: FilterProjectEnvsContentHintEnvsResponse200ApplicationJSONResponseBody3Envs10Type;
    storeId: string;
};

export const FilterProjectEnvsContentHintEnvsResponse200ApplicationJSONResponseBody3Envs9Type = {
    PostgresUser: "postgres-user",
} as const;
export type FilterProjectEnvsContentHintEnvsResponse200ApplicationJSONResponseBody3Envs9Type =
    ClosedEnum<
        typeof FilterProjectEnvsContentHintEnvsResponse200ApplicationJSONResponseBody3Envs9Type
    >;

export type FilterProjectEnvsContentHintEnvsResponse9 = {
    type: FilterProjectEnvsContentHintEnvsResponse200ApplicationJSONResponseBody3Envs9Type;
    storeId: string;
};

export const FilterProjectEnvsContentHintEnvsResponse200ApplicationJSONResponseBody3Envs8Type = {
    PostgresPrismaUrl: "postgres-prisma-url",
} as const;
export type FilterProjectEnvsContentHintEnvsResponse200ApplicationJSONResponseBody3Envs8Type =
    ClosedEnum<
        typeof FilterProjectEnvsContentHintEnvsResponse200ApplicationJSONResponseBody3Envs8Type
    >;

export type FilterProjectEnvsContentHintEnvsResponse8 = {
    type: FilterProjectEnvsContentHintEnvsResponse200ApplicationJSONResponseBody3Envs8Type;
    storeId: string;
};

export const FilterProjectEnvsContentHintEnvsResponse200ApplicationJSONResponseBody3Envs7Type = {
    PostgresUrlNonPooling: "postgres-url-non-pooling",
} as const;
export type FilterProjectEnvsContentHintEnvsResponse200ApplicationJSONResponseBody3Envs7Type =
    ClosedEnum<
        typeof FilterProjectEnvsContentHintEnvsResponse200ApplicationJSONResponseBody3Envs7Type
    >;

export type FilterProjectEnvsContentHintEnvsResponse7 = {
    type: FilterProjectEnvsContentHintEnvsResponse200ApplicationJSONResponseBody3Envs7Type;
    storeId: string;
};

export const FilterProjectEnvsContentHintEnvsResponse200ApplicationJSONResponseBody3Envs6Type = {
    PostgresUrl: "postgres-url",
} as const;
export type FilterProjectEnvsContentHintEnvsResponse200ApplicationJSONResponseBody3Envs6Type =
    ClosedEnum<
        typeof FilterProjectEnvsContentHintEnvsResponse200ApplicationJSONResponseBody3Envs6Type
    >;

export type FilterProjectEnvsContentHintEnvsResponse6 = {
    type: FilterProjectEnvsContentHintEnvsResponse200ApplicationJSONResponseBody3Envs6Type;
    storeId: string;
};

export const FilterProjectEnvsContentHintEnvsResponse200ApplicationJSONResponseBody3Envs5Type = {
    BlobReadWriteToken: "blob-read-write-token",
} as const;
export type FilterProjectEnvsContentHintEnvsResponse200ApplicationJSONResponseBody3Envs5Type =
    ClosedEnum<
        typeof FilterProjectEnvsContentHintEnvsResponse200ApplicationJSONResponseBody3Envs5Type
    >;

export type FilterProjectEnvsContentHintEnvsResponse5 = {
    type: FilterProjectEnvsContentHintEnvsResponse200ApplicationJSONResponseBody3Envs5Type;
    storeId: string;
};

export const FilterProjectEnvsContentHintEnvsResponse200ApplicationJSONResponseBody3Envs4Type = {
    RedisRestApiReadOnlyToken: "redis-rest-api-read-only-token",
} as const;
export type FilterProjectEnvsContentHintEnvsResponse200ApplicationJSONResponseBody3Envs4Type =
    ClosedEnum<
        typeof FilterProjectEnvsContentHintEnvsResponse200ApplicationJSONResponseBody3Envs4Type
    >;

export type FilterProjectEnvsContentHintEnvsResponse4 = {
    type: FilterProjectEnvsContentHintEnvsResponse200ApplicationJSONResponseBody3Envs4Type;
    storeId: string;
};

export const FilterProjectEnvsContentHintEnvsResponse200ApplicationJSONResponseBody3Envs3Type = {
    RedisRestApiToken: "redis-rest-api-token",
} as const;
export type FilterProjectEnvsContentHintEnvsResponse200ApplicationJSONResponseBody3Envs3Type =
    ClosedEnum<
        typeof FilterProjectEnvsContentHintEnvsResponse200ApplicationJSONResponseBody3Envs3Type
    >;

export type FilterProjectEnvsContentHintEnvsResponse3 = {
    type: FilterProjectEnvsContentHintEnvsResponse200ApplicationJSONResponseBody3Envs3Type;
    storeId: string;
};

export const FilterProjectEnvsContentHintEnvsResponse200ApplicationJSONResponseBody3EnvsType = {
    RedisRestApiUrl: "redis-rest-api-url",
} as const;
export type FilterProjectEnvsContentHintEnvsResponse200ApplicationJSONResponseBody3EnvsType =
    ClosedEnum<
        typeof FilterProjectEnvsContentHintEnvsResponse200ApplicationJSONResponseBody3EnvsType
    >;

export type FilterProjectEnvsContentHintEnvsResponse2 = {
    type: FilterProjectEnvsContentHintEnvsResponse200ApplicationJSONResponseBody3EnvsType;
    storeId: string;
};

export const FilterProjectEnvsContentHintEnvsResponse200ApplicationJSONResponseBody3Type = {
    RedisUrl: "redis-url",
} as const;
export type FilterProjectEnvsContentHintEnvsResponse200ApplicationJSONResponseBody3Type =
    ClosedEnum<typeof FilterProjectEnvsContentHintEnvsResponse200ApplicationJSONResponseBody3Type>;

export type FilterProjectEnvsContentHintEnvsResponse1 = {
    type: FilterProjectEnvsContentHintEnvsResponse200ApplicationJSONResponseBody3Type;
    storeId: string;
};

export type FilterProjectEnvsResponseBodyEnvsContentHint =
    | FilterProjectEnvsContentHintEnvsResponse1
    | FilterProjectEnvsContentHintEnvsResponse2
    | FilterProjectEnvsContentHintEnvsResponse3
    | FilterProjectEnvsContentHintEnvsResponse4
    | FilterProjectEnvsContentHintEnvsResponse5
    | FilterProjectEnvsContentHintEnvsResponse6
    | FilterProjectEnvsContentHintEnvsResponse7
    | FilterProjectEnvsContentHintEnvsResponse8
    | FilterProjectEnvsContentHintEnvsResponse9
    | FilterProjectEnvsContentHintEnvsResponse10
    | FilterProjectEnvsContentHintEnvsResponse11
    | FilterProjectEnvsContentHintEnvsResponse12
    | FilterProjectEnvsContentHintEnvsResponse13
    | FilterProjectEnvsContentHintEnvsResponse14;

export const FilterProjectEnvsResponseBodyEnvsResponse200ApplicationJson3Type = {
    FlagsSecret: "flags-secret",
} as const;
export type FilterProjectEnvsResponseBodyEnvsResponse200ApplicationJson3Type = ClosedEnum<
    typeof FilterProjectEnvsResponseBodyEnvsResponse200ApplicationJson3Type
>;

/**
 * Similar to `contentHints`, but should not be exposed to the user.
 */
export type FilterProjectEnvsResponseBodyEnvsInternalContentHint = {
    type: FilterProjectEnvsResponseBodyEnvsResponse200ApplicationJson3Type;
    /**
     * Contains the `value` of the env variable, encrypted with a special key to make decryption possible in the subscriber Lambda.
     */
    encryptedValue: string;
};

export type ResponseBodyEnvs = {
    target?:
        | Array<FilterProjectEnvsTargetEnvsResponse1>
        | FilterProjectEnvsTargetEnvsResponse2
        | undefined;
    type?: FilterProjectEnvsResponseBodyEnvsResponse200Type | undefined;
    /**
     * This is used to identiy variables that have been migrated from type secret to sensitive.
     */
    sunsetSecretId?: string | undefined;
    id?: string | undefined;
    key?: string | undefined;
    value?: string | undefined;
    configurationId?: string | null | undefined;
    createdAt?: number | undefined;
    updatedAt?: number | undefined;
    createdBy?: string | null | undefined;
    updatedBy?: string | null | undefined;
    gitBranch?: string | undefined;
    edgeConfigId?: string | null | undefined;
    edgeConfigTokenId?: string | null | undefined;
    contentHint?:
        | FilterProjectEnvsContentHintEnvsResponse1
        | FilterProjectEnvsContentHintEnvsResponse2
        | FilterProjectEnvsContentHintEnvsResponse3
        | FilterProjectEnvsContentHintEnvsResponse4
        | FilterProjectEnvsContentHintEnvsResponse5
        | FilterProjectEnvsContentHintEnvsResponse6
        | FilterProjectEnvsContentHintEnvsResponse7
        | FilterProjectEnvsContentHintEnvsResponse8
        | FilterProjectEnvsContentHintEnvsResponse9
        | FilterProjectEnvsContentHintEnvsResponse10
        | FilterProjectEnvsContentHintEnvsResponse11
        | FilterProjectEnvsContentHintEnvsResponse12
        | FilterProjectEnvsContentHintEnvsResponse13
        | FilterProjectEnvsContentHintEnvsResponse14
        | null
        | undefined;
    /**
     * Similar to `contentHints`, but should not be exposed to the user.
     */
    internalContentHint?: FilterProjectEnvsResponseBodyEnvsInternalContentHint | null | undefined;
    /**
     * Whether `value` and `vsmValue` are decrypted.
     */
    decrypted?: boolean | undefined;
    comment?: string | undefined;
    customEnvironmentIds?: Array<string> | undefined;
    vsmValue?: string | undefined;
    system?: boolean | undefined;
};

/**
 * The list of environment variables for the given project
 */
export type FilterProjectEnvsResponseBody3 = {
    envs: Array<ResponseBodyEnvs>;
};

export const FilterProjectEnvsTargetEnvs2 = {
    Production: "production",
    Preview: "preview",
    Development: "development",
} as const;
export type FilterProjectEnvsTargetEnvs2 = ClosedEnum<typeof FilterProjectEnvsTargetEnvs2>;

export const FilterProjectEnvsTargetEnvs1 = {
    Production: "production",
    Preview: "preview",
    Development: "development",
} as const;
export type FilterProjectEnvsTargetEnvs1 = ClosedEnum<typeof FilterProjectEnvsTargetEnvs1>;

export type FilterProjectEnvsResponseBodyEnvsTarget =
    | Array<FilterProjectEnvsTargetEnvs1>
    | FilterProjectEnvsTargetEnvs2;

export const FilterProjectEnvsResponseBodyEnvsResponseType = {
    System: "system",
    Encrypted: "encrypted",
    Plain: "plain",
    Sensitive: "sensitive",
    Secret: "secret",
} as const;
export type FilterProjectEnvsResponseBodyEnvsResponseType = ClosedEnum<
    typeof FilterProjectEnvsResponseBodyEnvsResponseType
>;

export const FilterProjectEnvsContentHintEnvsResponse200ApplicationJSONResponseBody2Envs14Type = {
    IntegrationStoreSecret: "integration-store-secret",
} as const;
export type FilterProjectEnvsContentHintEnvsResponse200ApplicationJSONResponseBody2Envs14Type =
    ClosedEnum<
        typeof FilterProjectEnvsContentHintEnvsResponse200ApplicationJSONResponseBody2Envs14Type
    >;

export type FilterProjectEnvsContentHintEnvs14 = {
    type: FilterProjectEnvsContentHintEnvsResponse200ApplicationJSONResponseBody2Envs14Type;
    storeId: string;
    integrationId: string;
    integrationProductId: string;
    integrationConfigurationId: string;
};

export const FilterProjectEnvsContentHintEnvsResponse200ApplicationJSONResponseBody2Envs13Type = {
    PostgresUrlNoSsl: "postgres-url-no-ssl",
} as const;
export type FilterProjectEnvsContentHintEnvsResponse200ApplicationJSONResponseBody2Envs13Type =
    ClosedEnum<
        typeof FilterProjectEnvsContentHintEnvsResponse200ApplicationJSONResponseBody2Envs13Type
    >;

export type FilterProjectEnvsContentHintEnvs13 = {
    type: FilterProjectEnvsContentHintEnvsResponse200ApplicationJSONResponseBody2Envs13Type;
    storeId: string;
};

export const FilterProjectEnvsContentHintEnvsResponse200ApplicationJSONResponseBody2Envs12Type = {
    PostgresDatabase: "postgres-database",
} as const;
export type FilterProjectEnvsContentHintEnvsResponse200ApplicationJSONResponseBody2Envs12Type =
    ClosedEnum<
        typeof FilterProjectEnvsContentHintEnvsResponse200ApplicationJSONResponseBody2Envs12Type
    >;

export type FilterProjectEnvsContentHintEnvs12 = {
    type: FilterProjectEnvsContentHintEnvsResponse200ApplicationJSONResponseBody2Envs12Type;
    storeId: string;
};

export const FilterProjectEnvsContentHintEnvsResponse200ApplicationJSONResponseBody2Envs11Type = {
    PostgresPassword: "postgres-password",
} as const;
export type FilterProjectEnvsContentHintEnvsResponse200ApplicationJSONResponseBody2Envs11Type =
    ClosedEnum<
        typeof FilterProjectEnvsContentHintEnvsResponse200ApplicationJSONResponseBody2Envs11Type
    >;

export type FilterProjectEnvsContentHintEnvs11 = {
    type: FilterProjectEnvsContentHintEnvsResponse200ApplicationJSONResponseBody2Envs11Type;
    storeId: string;
};

export const FilterProjectEnvsContentHintEnvsResponse200ApplicationJSONResponseBody2Envs10Type = {
    PostgresHost: "postgres-host",
} as const;
export type FilterProjectEnvsContentHintEnvsResponse200ApplicationJSONResponseBody2Envs10Type =
    ClosedEnum<
        typeof FilterProjectEnvsContentHintEnvsResponse200ApplicationJSONResponseBody2Envs10Type
    >;

export type FilterProjectEnvsContentHintEnvs10 = {
    type: FilterProjectEnvsContentHintEnvsResponse200ApplicationJSONResponseBody2Envs10Type;
    storeId: string;
};

export const FilterProjectEnvsContentHintEnvsResponse200ApplicationJSONResponseBody2Envs9Type = {
    PostgresUser: "postgres-user",
} as const;
export type FilterProjectEnvsContentHintEnvsResponse200ApplicationJSONResponseBody2Envs9Type =
    ClosedEnum<
        typeof FilterProjectEnvsContentHintEnvsResponse200ApplicationJSONResponseBody2Envs9Type
    >;

export type FilterProjectEnvsContentHintEnvs9 = {
    type: FilterProjectEnvsContentHintEnvsResponse200ApplicationJSONResponseBody2Envs9Type;
    storeId: string;
};

export const FilterProjectEnvsContentHintEnvsResponse200ApplicationJSONResponseBody2Envs8Type = {
    PostgresPrismaUrl: "postgres-prisma-url",
} as const;
export type FilterProjectEnvsContentHintEnvsResponse200ApplicationJSONResponseBody2Envs8Type =
    ClosedEnum<
        typeof FilterProjectEnvsContentHintEnvsResponse200ApplicationJSONResponseBody2Envs8Type
    >;

export type FilterProjectEnvsContentHintEnvs8 = {
    type: FilterProjectEnvsContentHintEnvsResponse200ApplicationJSONResponseBody2Envs8Type;
    storeId: string;
};

export const FilterProjectEnvsContentHintEnvsResponse200ApplicationJSONResponseBody2Envs7Type = {
    PostgresUrlNonPooling: "postgres-url-non-pooling",
} as const;
export type FilterProjectEnvsContentHintEnvsResponse200ApplicationJSONResponseBody2Envs7Type =
    ClosedEnum<
        typeof FilterProjectEnvsContentHintEnvsResponse200ApplicationJSONResponseBody2Envs7Type
    >;

export type FilterProjectEnvsContentHintEnvs7 = {
    type: FilterProjectEnvsContentHintEnvsResponse200ApplicationJSONResponseBody2Envs7Type;
    storeId: string;
};

export const FilterProjectEnvsContentHintEnvsResponse200ApplicationJSONResponseBody2Envs6Type = {
    PostgresUrl: "postgres-url",
} as const;
export type FilterProjectEnvsContentHintEnvsResponse200ApplicationJSONResponseBody2Envs6Type =
    ClosedEnum<
        typeof FilterProjectEnvsContentHintEnvsResponse200ApplicationJSONResponseBody2Envs6Type
    >;

export type FilterProjectEnvsContentHintEnvs6 = {
    type: FilterProjectEnvsContentHintEnvsResponse200ApplicationJSONResponseBody2Envs6Type;
    storeId: string;
};

export const FilterProjectEnvsContentHintEnvsResponse200ApplicationJSONResponseBody2Envs5Type = {
    BlobReadWriteToken: "blob-read-write-token",
} as const;
export type FilterProjectEnvsContentHintEnvsResponse200ApplicationJSONResponseBody2Envs5Type =
    ClosedEnum<
        typeof FilterProjectEnvsContentHintEnvsResponse200ApplicationJSONResponseBody2Envs5Type
    >;

export type FilterProjectEnvsContentHintEnvs5 = {
    type: FilterProjectEnvsContentHintEnvsResponse200ApplicationJSONResponseBody2Envs5Type;
    storeId: string;
};

export const FilterProjectEnvsContentHintEnvsResponse200ApplicationJSONResponseBody2Envs4Type = {
    RedisRestApiReadOnlyToken: "redis-rest-api-read-only-token",
} as const;
export type FilterProjectEnvsContentHintEnvsResponse200ApplicationJSONResponseBody2Envs4Type =
    ClosedEnum<
        typeof FilterProjectEnvsContentHintEnvsResponse200ApplicationJSONResponseBody2Envs4Type
    >;

export type FilterProjectEnvsContentHintEnvs4 = {
    type: FilterProjectEnvsContentHintEnvsResponse200ApplicationJSONResponseBody2Envs4Type;
    storeId: string;
};

export const FilterProjectEnvsContentHintEnvsResponse200ApplicationJSONResponseBody2Envs3Type = {
    RedisRestApiToken: "redis-rest-api-token",
} as const;
export type FilterProjectEnvsContentHintEnvsResponse200ApplicationJSONResponseBody2Envs3Type =
    ClosedEnum<
        typeof FilterProjectEnvsContentHintEnvsResponse200ApplicationJSONResponseBody2Envs3Type
    >;

export type FilterProjectEnvsContentHintEnvs3 = {
    type: FilterProjectEnvsContentHintEnvsResponse200ApplicationJSONResponseBody2Envs3Type;
    storeId: string;
};

export const FilterProjectEnvsContentHintEnvsResponse200ApplicationJSONResponseBody2EnvsType = {
    RedisRestApiUrl: "redis-rest-api-url",
} as const;
export type FilterProjectEnvsContentHintEnvsResponse200ApplicationJSONResponseBody2EnvsType =
    ClosedEnum<
        typeof FilterProjectEnvsContentHintEnvsResponse200ApplicationJSONResponseBody2EnvsType
    >;

export type FilterProjectEnvsContentHintEnvs2 = {
    type: FilterProjectEnvsContentHintEnvsResponse200ApplicationJSONResponseBody2EnvsType;
    storeId: string;
};

export const FilterProjectEnvsContentHintEnvsResponse200ApplicationJSONResponseBody2Type = {
    RedisUrl: "redis-url",
} as const;
export type FilterProjectEnvsContentHintEnvsResponse200ApplicationJSONResponseBody2Type =
    ClosedEnum<typeof FilterProjectEnvsContentHintEnvsResponse200ApplicationJSONResponseBody2Type>;

export type FilterProjectEnvsContentHintEnvs1 = {
    type: FilterProjectEnvsContentHintEnvsResponse200ApplicationJSONResponseBody2Type;
    storeId: string;
};

export type FilterProjectEnvsResponseBodyContentHint =
    | FilterProjectEnvsContentHintEnvs1
    | FilterProjectEnvsContentHintEnvs2
    | FilterProjectEnvsContentHintEnvs3
    | FilterProjectEnvsContentHintEnvs4
    | FilterProjectEnvsContentHintEnvs5
    | FilterProjectEnvsContentHintEnvs6
    | FilterProjectEnvsContentHintEnvs7
    | FilterProjectEnvsContentHintEnvs8
    | FilterProjectEnvsContentHintEnvs9
    | FilterProjectEnvsContentHintEnvs10
    | FilterProjectEnvsContentHintEnvs11
    | FilterProjectEnvsContentHintEnvs12
    | FilterProjectEnvsContentHintEnvs13
    | FilterProjectEnvsContentHintEnvs14;

export const FilterProjectEnvsResponseBodyEnvsResponse200ApplicationJSONType = {
    FlagsSecret: "flags-secret",
} as const;
export type FilterProjectEnvsResponseBodyEnvsResponse200ApplicationJSONType = ClosedEnum<
    typeof FilterProjectEnvsResponseBodyEnvsResponse200ApplicationJSONType
>;

/**
 * Similar to `contentHints`, but should not be exposed to the user.
 */
export type FilterProjectEnvsResponseBodyInternalContentHint = {
    type: FilterProjectEnvsResponseBodyEnvsResponse200ApplicationJSONType;
    /**
     * Contains the `value` of the env variable, encrypted with a special key to make decryption possible in the subscriber Lambda.
     */
    encryptedValue: string;
};

export type FilterProjectEnvsResponseBodyEnvs = {
    target?: Array<FilterProjectEnvsTargetEnvs1> | FilterProjectEnvsTargetEnvs2 | undefined;
    type?: FilterProjectEnvsResponseBodyEnvsResponseType | undefined;
    /**
     * This is used to identiy variables that have been migrated from type secret to sensitive.
     */
    sunsetSecretId?: string | undefined;
    id?: string | undefined;
    key?: string | undefined;
    value?: string | undefined;
    configurationId?: string | null | undefined;
    createdAt?: number | undefined;
    updatedAt?: number | undefined;
    createdBy?: string | null | undefined;
    updatedBy?: string | null | undefined;
    gitBranch?: string | undefined;
    edgeConfigId?: string | null | undefined;
    edgeConfigTokenId?: string | null | undefined;
    contentHint?:
        | FilterProjectEnvsContentHintEnvs1
        | FilterProjectEnvsContentHintEnvs2
        | FilterProjectEnvsContentHintEnvs3
        | FilterProjectEnvsContentHintEnvs4
        | FilterProjectEnvsContentHintEnvs5
        | FilterProjectEnvsContentHintEnvs6
        | FilterProjectEnvsContentHintEnvs7
        | FilterProjectEnvsContentHintEnvs8
        | FilterProjectEnvsContentHintEnvs9
        | FilterProjectEnvsContentHintEnvs10
        | FilterProjectEnvsContentHintEnvs11
        | FilterProjectEnvsContentHintEnvs12
        | FilterProjectEnvsContentHintEnvs13
        | FilterProjectEnvsContentHintEnvs14
        | null
        | undefined;
    /**
     * Similar to `contentHints`, but should not be exposed to the user.
     */
    internalContentHint?: FilterProjectEnvsResponseBodyInternalContentHint | null | undefined;
    /**
     * Whether `value` and `vsmValue` are decrypted.
     */
    decrypted?: boolean | undefined;
    comment?: string | undefined;
    customEnvironmentIds?: Array<string> | undefined;
    vsmValue?: string | undefined;
    system?: boolean | undefined;
};

export type FilterProjectEnvsResponseBody2 = {
    envs: Array<FilterProjectEnvsResponseBodyEnvs>;
    /**
     * This object contains information related to the pagination of the current request, including the necessary parameters to get the next or previous page of data.
     */
    pagination: Pagination;
};

export const FilterProjectEnvsTarget2 = {
    Production: "production",
    Preview: "preview",
    Development: "development",
} as const;
export type FilterProjectEnvsTarget2 = ClosedEnum<typeof FilterProjectEnvsTarget2>;

export const FilterProjectEnvsTarget1 = {
    Production: "production",
    Preview: "preview",
    Development: "development",
} as const;
export type FilterProjectEnvsTarget1 = ClosedEnum<typeof FilterProjectEnvsTarget1>;

export type FilterProjectEnvsResponseBodyTarget =
    | Array<FilterProjectEnvsTarget1>
    | FilterProjectEnvsTarget2;

export const FilterProjectEnvsResponseBodyType = {
    System: "system",
    Encrypted: "encrypted",
    Plain: "plain",
    Sensitive: "sensitive",
    Secret: "secret",
} as const;
export type FilterProjectEnvsResponseBodyType = ClosedEnum<
    typeof FilterProjectEnvsResponseBodyType
>;

export const FilterProjectEnvsContentHintEnvsResponse200ApplicationJSONResponseBody114Type = {
    IntegrationStoreSecret: "integration-store-secret",
} as const;
export type FilterProjectEnvsContentHintEnvsResponse200ApplicationJSONResponseBody114Type =
    ClosedEnum<
        typeof FilterProjectEnvsContentHintEnvsResponse200ApplicationJSONResponseBody114Type
    >;

export type FilterProjectEnvsContentHint14 = {
    type: FilterProjectEnvsContentHintEnvsResponse200ApplicationJSONResponseBody114Type;
    storeId: string;
    integrationId: string;
    integrationProductId: string;
    integrationConfigurationId: string;
};

export const FilterProjectEnvsContentHintEnvsResponse200ApplicationJSONResponseBody113Type = {
    PostgresUrlNoSsl: "postgres-url-no-ssl",
} as const;
export type FilterProjectEnvsContentHintEnvsResponse200ApplicationJSONResponseBody113Type =
    ClosedEnum<
        typeof FilterProjectEnvsContentHintEnvsResponse200ApplicationJSONResponseBody113Type
    >;

export type FilterProjectEnvsContentHint13 = {
    type: FilterProjectEnvsContentHintEnvsResponse200ApplicationJSONResponseBody113Type;
    storeId: string;
};

export const FilterProjectEnvsContentHintEnvsResponse200ApplicationJSONResponseBody112Type = {
    PostgresDatabase: "postgres-database",
} as const;
export type FilterProjectEnvsContentHintEnvsResponse200ApplicationJSONResponseBody112Type =
    ClosedEnum<
        typeof FilterProjectEnvsContentHintEnvsResponse200ApplicationJSONResponseBody112Type
    >;

export type FilterProjectEnvsContentHint12 = {
    type: FilterProjectEnvsContentHintEnvsResponse200ApplicationJSONResponseBody112Type;
    storeId: string;
};

export const FilterProjectEnvsContentHintEnvsResponse200ApplicationJSONResponseBody111Type = {
    PostgresPassword: "postgres-password",
} as const;
export type FilterProjectEnvsContentHintEnvsResponse200ApplicationJSONResponseBody111Type =
    ClosedEnum<
        typeof FilterProjectEnvsContentHintEnvsResponse200ApplicationJSONResponseBody111Type
    >;

export type FilterProjectEnvsContentHint11 = {
    type: FilterProjectEnvsContentHintEnvsResponse200ApplicationJSONResponseBody111Type;
    storeId: string;
};

export const FilterProjectEnvsContentHintEnvsResponse200ApplicationJSONResponseBody110Type = {
    PostgresHost: "postgres-host",
} as const;
export type FilterProjectEnvsContentHintEnvsResponse200ApplicationJSONResponseBody110Type =
    ClosedEnum<
        typeof FilterProjectEnvsContentHintEnvsResponse200ApplicationJSONResponseBody110Type
    >;

export type FilterProjectEnvsContentHint10 = {
    type: FilterProjectEnvsContentHintEnvsResponse200ApplicationJSONResponseBody110Type;
    storeId: string;
};

export const FilterProjectEnvsContentHintEnvsResponse200ApplicationJSONResponseBody19Type = {
    PostgresUser: "postgres-user",
} as const;
export type FilterProjectEnvsContentHintEnvsResponse200ApplicationJSONResponseBody19Type =
    ClosedEnum<typeof FilterProjectEnvsContentHintEnvsResponse200ApplicationJSONResponseBody19Type>;

export type FilterProjectEnvsContentHint9 = {
    type: FilterProjectEnvsContentHintEnvsResponse200ApplicationJSONResponseBody19Type;
    storeId: string;
};

export const FilterProjectEnvsContentHintEnvsResponse200ApplicationJSONResponseBody18Type = {
    PostgresPrismaUrl: "postgres-prisma-url",
} as const;
export type FilterProjectEnvsContentHintEnvsResponse200ApplicationJSONResponseBody18Type =
    ClosedEnum<typeof FilterProjectEnvsContentHintEnvsResponse200ApplicationJSONResponseBody18Type>;

export type FilterProjectEnvsContentHint8 = {
    type: FilterProjectEnvsContentHintEnvsResponse200ApplicationJSONResponseBody18Type;
    storeId: string;
};

export const FilterProjectEnvsContentHintEnvsResponse200ApplicationJSONResponseBody1Type = {
    PostgresUrlNonPooling: "postgres-url-non-pooling",
} as const;
export type FilterProjectEnvsContentHintEnvsResponse200ApplicationJSONResponseBody1Type =
    ClosedEnum<typeof FilterProjectEnvsContentHintEnvsResponse200ApplicationJSONResponseBody1Type>;

export type FilterProjectEnvsContentHint7 = {
    type: FilterProjectEnvsContentHintEnvsResponse200ApplicationJSONResponseBody1Type;
    storeId: string;
};

export const FilterProjectEnvsContentHintEnvsResponse200ApplicationJSONResponseBodyType = {
    PostgresUrl: "postgres-url",
} as const;
export type FilterProjectEnvsContentHintEnvsResponse200ApplicationJSONResponseBodyType = ClosedEnum<
    typeof FilterProjectEnvsContentHintEnvsResponse200ApplicationJSONResponseBodyType
>;

export type FilterProjectEnvsContentHint6 = {
    type: FilterProjectEnvsContentHintEnvsResponse200ApplicationJSONResponseBodyType;
    storeId: string;
};

export const FilterProjectEnvsContentHintEnvsResponse200ApplicationJSONType = {
    BlobReadWriteToken: "blob-read-write-token",
} as const;
export type FilterProjectEnvsContentHintEnvsResponse200ApplicationJSONType = ClosedEnum<
    typeof FilterProjectEnvsContentHintEnvsResponse200ApplicationJSONType
>;

export type FilterProjectEnvsContentHint5 = {
    type: FilterProjectEnvsContentHintEnvsResponse200ApplicationJSONType;
    storeId: string;
};

export const FilterProjectEnvsContentHintEnvsResponse200Type = {
    RedisRestApiReadOnlyToken: "redis-rest-api-read-only-token",
} as const;
export type FilterProjectEnvsContentHintEnvsResponse200Type = ClosedEnum<
    typeof FilterProjectEnvsContentHintEnvsResponse200Type
>;

export type FilterProjectEnvsContentHint4 = {
    type: FilterProjectEnvsContentHintEnvsResponse200Type;
    storeId: string;
};

export const FilterProjectEnvsContentHintEnvsResponseType = {
    RedisRestApiToken: "redis-rest-api-token",
} as const;
export type FilterProjectEnvsContentHintEnvsResponseType = ClosedEnum<
    typeof FilterProjectEnvsContentHintEnvsResponseType
>;

export type FilterProjectEnvsContentHint3 = {
    type: FilterProjectEnvsContentHintEnvsResponseType;
    storeId: string;
};

export const FilterProjectEnvsContentHintEnvsType = {
    RedisRestApiUrl: "redis-rest-api-url",
} as const;
export type FilterProjectEnvsContentHintEnvsType = ClosedEnum<
    typeof FilterProjectEnvsContentHintEnvsType
>;

export type FilterProjectEnvsContentHint2 = {
    type: FilterProjectEnvsContentHintEnvsType;
    storeId: string;
};

export const FilterProjectEnvsContentHintType = {
    RedisUrl: "redis-url",
} as const;
export type FilterProjectEnvsContentHintType = ClosedEnum<typeof FilterProjectEnvsContentHintType>;

export type FilterProjectEnvsContentHint1 = {
    type: FilterProjectEnvsContentHintType;
    storeId: string;
};

export type ResponseBodyContentHint =
    | FilterProjectEnvsContentHint1
    | FilterProjectEnvsContentHint2
    | FilterProjectEnvsContentHint3
    | FilterProjectEnvsContentHint4
    | FilterProjectEnvsContentHint5
    | FilterProjectEnvsContentHint6
    | FilterProjectEnvsContentHint7
    | FilterProjectEnvsContentHint8
    | FilterProjectEnvsContentHint9
    | FilterProjectEnvsContentHint10
    | FilterProjectEnvsContentHint11
    | FilterProjectEnvsContentHint12
    | FilterProjectEnvsContentHint13
    | FilterProjectEnvsContentHint14;

export const FilterProjectEnvsResponseBodyEnvsType = {
    FlagsSecret: "flags-secret",
} as const;
export type FilterProjectEnvsResponseBodyEnvsType = ClosedEnum<
    typeof FilterProjectEnvsResponseBodyEnvsType
>;

/**
 * Similar to `contentHints`, but should not be exposed to the user.
 */
export type ResponseBodyInternalContentHint = {
    type: FilterProjectEnvsResponseBodyEnvsType;
    /**
     * Contains the `value` of the env variable, encrypted with a special key to make decryption possible in the subscriber Lambda.
     */
    encryptedValue: string;
};

export type FilterProjectEnvsResponseBody1 = {
    target?: Array<FilterProjectEnvsTarget1> | FilterProjectEnvsTarget2 | undefined;
    type?: FilterProjectEnvsResponseBodyType | undefined;
    /**
     * This is used to identiy variables that have been migrated from type secret to sensitive.
     */
    sunsetSecretId?: string | undefined;
    id?: string | undefined;
    key?: string | undefined;
    value?: string | undefined;
    configurationId?: string | null | undefined;
    createdAt?: number | undefined;
    updatedAt?: number | undefined;
    createdBy?: string | null | undefined;
    updatedBy?: string | null | undefined;
    gitBranch?: string | undefined;
    edgeConfigId?: string | null | undefined;
    edgeConfigTokenId?: string | null | undefined;
    contentHint?:
        | FilterProjectEnvsContentHint1
        | FilterProjectEnvsContentHint2
        | FilterProjectEnvsContentHint3
        | FilterProjectEnvsContentHint4
        | FilterProjectEnvsContentHint5
        | FilterProjectEnvsContentHint6
        | FilterProjectEnvsContentHint7
        | FilterProjectEnvsContentHint8
        | FilterProjectEnvsContentHint9
        | FilterProjectEnvsContentHint10
        | FilterProjectEnvsContentHint11
        | FilterProjectEnvsContentHint12
        | FilterProjectEnvsContentHint13
        | FilterProjectEnvsContentHint14
        | null
        | undefined;
    /**
     * Similar to `contentHints`, but should not be exposed to the user.
     */
    internalContentHint?: ResponseBodyInternalContentHint | null | undefined;
    /**
     * Whether `value` and `vsmValue` are decrypted.
     */
    decrypted?: boolean | undefined;
    comment?: string | undefined;
    customEnvironmentIds?: Array<string> | undefined;
    vsmValue?: string | undefined;
    system?: boolean | undefined;
};

/**
 * The list of environment variables for the given project
 */
export type FilterProjectEnvsResponseBody =
    | FilterProjectEnvsResponseBody3
    | FilterProjectEnvsResponseBody2
    | FilterProjectEnvsResponseBody1;

/** @internal */
export const Decrypt$inboundSchema: z.ZodNativeEnum<typeof Decrypt> = z.nativeEnum(Decrypt);

/** @internal */
export const Decrypt$outboundSchema: z.ZodNativeEnum<typeof Decrypt> = Decrypt$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace Decrypt$ {
    /** @deprecated use `Decrypt$inboundSchema` instead. */
    export const inboundSchema = Decrypt$inboundSchema;
    /** @deprecated use `Decrypt$outboundSchema` instead. */
    export const outboundSchema = Decrypt$outboundSchema;
}

/** @internal */
export const FilterProjectEnvsRequest$inboundSchema: z.ZodType<
    FilterProjectEnvsRequest,
    z.ZodTypeDef,
    unknown
> = z.object({
    idOrName: z.string(),
    gitBranch: z.string().optional(),
    decrypt: Decrypt$inboundSchema.optional(),
    source: z.string().optional(),
    teamId: z.string().optional(),
    slug: z.string().optional(),
});

/** @internal */
export type FilterProjectEnvsRequest$Outbound = {
    idOrName: string;
    gitBranch?: string | undefined;
    decrypt?: string | undefined;
    source?: string | undefined;
    teamId?: string | undefined;
    slug?: string | undefined;
};

/** @internal */
export const FilterProjectEnvsRequest$outboundSchema: z.ZodType<
    FilterProjectEnvsRequest$Outbound,
    z.ZodTypeDef,
    FilterProjectEnvsRequest
> = z.object({
    idOrName: z.string(),
    gitBranch: z.string().optional(),
    decrypt: Decrypt$outboundSchema.optional(),
    source: z.string().optional(),
    teamId: z.string().optional(),
    slug: z.string().optional(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace FilterProjectEnvsRequest$ {
    /** @deprecated use `FilterProjectEnvsRequest$inboundSchema` instead. */
    export const inboundSchema = FilterProjectEnvsRequest$inboundSchema;
    /** @deprecated use `FilterProjectEnvsRequest$outboundSchema` instead. */
    export const outboundSchema = FilterProjectEnvsRequest$outboundSchema;
    /** @deprecated use `FilterProjectEnvsRequest$Outbound` instead. */
    export type Outbound = FilterProjectEnvsRequest$Outbound;
}

/** @internal */
export const FilterProjectEnvsTargetEnvsResponse2$inboundSchema: z.ZodNativeEnum<
    typeof FilterProjectEnvsTargetEnvsResponse2
> = z.nativeEnum(FilterProjectEnvsTargetEnvsResponse2);

/** @internal */
export const FilterProjectEnvsTargetEnvsResponse2$outboundSchema: z.ZodNativeEnum<
    typeof FilterProjectEnvsTargetEnvsResponse2
> = FilterProjectEnvsTargetEnvsResponse2$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace FilterProjectEnvsTargetEnvsResponse2$ {
    /** @deprecated use `FilterProjectEnvsTargetEnvsResponse2$inboundSchema` instead. */
    export const inboundSchema = FilterProjectEnvsTargetEnvsResponse2$inboundSchema;
    /** @deprecated use `FilterProjectEnvsTargetEnvsResponse2$outboundSchema` instead. */
    export const outboundSchema = FilterProjectEnvsTargetEnvsResponse2$outboundSchema;
}

/** @internal */
export const FilterProjectEnvsTargetEnvsResponse1$inboundSchema: z.ZodNativeEnum<
    typeof FilterProjectEnvsTargetEnvsResponse1
> = z.nativeEnum(FilterProjectEnvsTargetEnvsResponse1);

/** @internal */
export const FilterProjectEnvsTargetEnvsResponse1$outboundSchema: z.ZodNativeEnum<
    typeof FilterProjectEnvsTargetEnvsResponse1
> = FilterProjectEnvsTargetEnvsResponse1$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace FilterProjectEnvsTargetEnvsResponse1$ {
    /** @deprecated use `FilterProjectEnvsTargetEnvsResponse1$inboundSchema` instead. */
    export const inboundSchema = FilterProjectEnvsTargetEnvsResponse1$inboundSchema;
    /** @deprecated use `FilterProjectEnvsTargetEnvsResponse1$outboundSchema` instead. */
    export const outboundSchema = FilterProjectEnvsTargetEnvsResponse1$outboundSchema;
}

/** @internal */
export const FilterProjectEnvsResponseBodyEnvsResponseTarget$inboundSchema: z.ZodType<
    FilterProjectEnvsResponseBodyEnvsResponseTarget,
    z.ZodTypeDef,
    unknown
> = z.union([
    z.array(FilterProjectEnvsTargetEnvsResponse1$inboundSchema),
    FilterProjectEnvsTargetEnvsResponse2$inboundSchema,
]);

/** @internal */
export type FilterProjectEnvsResponseBodyEnvsResponseTarget$Outbound = Array<string> | string;

/** @internal */
export const FilterProjectEnvsResponseBodyEnvsResponseTarget$outboundSchema: z.ZodType<
    FilterProjectEnvsResponseBodyEnvsResponseTarget$Outbound,
    z.ZodTypeDef,
    FilterProjectEnvsResponseBodyEnvsResponseTarget
> = z.union([
    z.array(FilterProjectEnvsTargetEnvsResponse1$outboundSchema),
    FilterProjectEnvsTargetEnvsResponse2$outboundSchema,
]);

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace FilterProjectEnvsResponseBodyEnvsResponseTarget$ {
    /** @deprecated use `FilterProjectEnvsResponseBodyEnvsResponseTarget$inboundSchema` instead. */
    export const inboundSchema = FilterProjectEnvsResponseBodyEnvsResponseTarget$inboundSchema;
    /** @deprecated use `FilterProjectEnvsResponseBodyEnvsResponseTarget$outboundSchema` instead. */
    export const outboundSchema = FilterProjectEnvsResponseBodyEnvsResponseTarget$outboundSchema;
    /** @deprecated use `FilterProjectEnvsResponseBodyEnvsResponseTarget$Outbound` instead. */
    export type Outbound = FilterProjectEnvsResponseBodyEnvsResponseTarget$Outbound;
}

/** @internal */
export const FilterProjectEnvsResponseBodyEnvsResponse200Type$inboundSchema: z.ZodNativeEnum<
    typeof FilterProjectEnvsResponseBodyEnvsResponse200Type
> = z.nativeEnum(FilterProjectEnvsResponseBodyEnvsResponse200Type);

/** @internal */
export const FilterProjectEnvsResponseBodyEnvsResponse200Type$outboundSchema: z.ZodNativeEnum<
    typeof FilterProjectEnvsResponseBodyEnvsResponse200Type
> = FilterProjectEnvsResponseBodyEnvsResponse200Type$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace FilterProjectEnvsResponseBodyEnvsResponse200Type$ {
    /** @deprecated use `FilterProjectEnvsResponseBodyEnvsResponse200Type$inboundSchema` instead. */
    export const inboundSchema = FilterProjectEnvsResponseBodyEnvsResponse200Type$inboundSchema;
    /** @deprecated use `FilterProjectEnvsResponseBodyEnvsResponse200Type$outboundSchema` instead. */
    export const outboundSchema = FilterProjectEnvsResponseBodyEnvsResponse200Type$outboundSchema;
}

/** @internal */
export const FilterProjectEnvsContentHintEnvsResponse200ApplicationJSONResponseBody3Envs14Type$inboundSchema: z.ZodNativeEnum<
    typeof FilterProjectEnvsContentHintEnvsResponse200ApplicationJSONResponseBody3Envs14Type
> = z.nativeEnum(FilterProjectEnvsContentHintEnvsResponse200ApplicationJSONResponseBody3Envs14Type);

/** @internal */
export const FilterProjectEnvsContentHintEnvsResponse200ApplicationJSONResponseBody3Envs14Type$outboundSchema: z.ZodNativeEnum<
    typeof FilterProjectEnvsContentHintEnvsResponse200ApplicationJSONResponseBody3Envs14Type
> = FilterProjectEnvsContentHintEnvsResponse200ApplicationJSONResponseBody3Envs14Type$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace FilterProjectEnvsContentHintEnvsResponse200ApplicationJSONResponseBody3Envs14Type$ {
    /** @deprecated use `FilterProjectEnvsContentHintEnvsResponse200ApplicationJSONResponseBody3Envs14Type$inboundSchema` instead. */
    export const inboundSchema =
        FilterProjectEnvsContentHintEnvsResponse200ApplicationJSONResponseBody3Envs14Type$inboundSchema;
    /** @deprecated use `FilterProjectEnvsContentHintEnvsResponse200ApplicationJSONResponseBody3Envs14Type$outboundSchema` instead. */
    export const outboundSchema =
        FilterProjectEnvsContentHintEnvsResponse200ApplicationJSONResponseBody3Envs14Type$outboundSchema;
}

/** @internal */
export const FilterProjectEnvsContentHintEnvsResponse14$inboundSchema: z.ZodType<
    FilterProjectEnvsContentHintEnvsResponse14,
    z.ZodTypeDef,
    unknown
> = z.object({
    type: FilterProjectEnvsContentHintEnvsResponse200ApplicationJSONResponseBody3Envs14Type$inboundSchema,
    storeId: z.string(),
    integrationId: z.string(),
    integrationProductId: z.string(),
    integrationConfigurationId: z.string(),
});

/** @internal */
export type FilterProjectEnvsContentHintEnvsResponse14$Outbound = {
    type: string;
    storeId: string;
    integrationId: string;
    integrationProductId: string;
    integrationConfigurationId: string;
};

/** @internal */
export const FilterProjectEnvsContentHintEnvsResponse14$outboundSchema: z.ZodType<
    FilterProjectEnvsContentHintEnvsResponse14$Outbound,
    z.ZodTypeDef,
    FilterProjectEnvsContentHintEnvsResponse14
> = z.object({
    type: FilterProjectEnvsContentHintEnvsResponse200ApplicationJSONResponseBody3Envs14Type$outboundSchema,
    storeId: z.string(),
    integrationId: z.string(),
    integrationProductId: z.string(),
    integrationConfigurationId: z.string(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace FilterProjectEnvsContentHintEnvsResponse14$ {
    /** @deprecated use `FilterProjectEnvsContentHintEnvsResponse14$inboundSchema` instead. */
    export const inboundSchema = FilterProjectEnvsContentHintEnvsResponse14$inboundSchema;
    /** @deprecated use `FilterProjectEnvsContentHintEnvsResponse14$outboundSchema` instead. */
    export const outboundSchema = FilterProjectEnvsContentHintEnvsResponse14$outboundSchema;
    /** @deprecated use `FilterProjectEnvsContentHintEnvsResponse14$Outbound` instead. */
    export type Outbound = FilterProjectEnvsContentHintEnvsResponse14$Outbound;
}

/** @internal */
export const FilterProjectEnvsContentHintEnvsResponse200ApplicationJSONResponseBody3Envs13Type$inboundSchema: z.ZodNativeEnum<
    typeof FilterProjectEnvsContentHintEnvsResponse200ApplicationJSONResponseBody3Envs13Type
> = z.nativeEnum(FilterProjectEnvsContentHintEnvsResponse200ApplicationJSONResponseBody3Envs13Type);

/** @internal */
export const FilterProjectEnvsContentHintEnvsResponse200ApplicationJSONResponseBody3Envs13Type$outboundSchema: z.ZodNativeEnum<
    typeof FilterProjectEnvsContentHintEnvsResponse200ApplicationJSONResponseBody3Envs13Type
> = FilterProjectEnvsContentHintEnvsResponse200ApplicationJSONResponseBody3Envs13Type$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace FilterProjectEnvsContentHintEnvsResponse200ApplicationJSONResponseBody3Envs13Type$ {
    /** @deprecated use `FilterProjectEnvsContentHintEnvsResponse200ApplicationJSONResponseBody3Envs13Type$inboundSchema` instead. */
    export const inboundSchema =
        FilterProjectEnvsContentHintEnvsResponse200ApplicationJSONResponseBody3Envs13Type$inboundSchema;
    /** @deprecated use `FilterProjectEnvsContentHintEnvsResponse200ApplicationJSONResponseBody3Envs13Type$outboundSchema` instead. */
    export const outboundSchema =
        FilterProjectEnvsContentHintEnvsResponse200ApplicationJSONResponseBody3Envs13Type$outboundSchema;
}

/** @internal */
export const FilterProjectEnvsContentHintEnvsResponse13$inboundSchema: z.ZodType<
    FilterProjectEnvsContentHintEnvsResponse13,
    z.ZodTypeDef,
    unknown
> = z.object({
    type: FilterProjectEnvsContentHintEnvsResponse200ApplicationJSONResponseBody3Envs13Type$inboundSchema,
    storeId: z.string(),
});

/** @internal */
export type FilterProjectEnvsContentHintEnvsResponse13$Outbound = {
    type: string;
    storeId: string;
};

/** @internal */
export const FilterProjectEnvsContentHintEnvsResponse13$outboundSchema: z.ZodType<
    FilterProjectEnvsContentHintEnvsResponse13$Outbound,
    z.ZodTypeDef,
    FilterProjectEnvsContentHintEnvsResponse13
> = z.object({
    type: FilterProjectEnvsContentHintEnvsResponse200ApplicationJSONResponseBody3Envs13Type$outboundSchema,
    storeId: z.string(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace FilterProjectEnvsContentHintEnvsResponse13$ {
    /** @deprecated use `FilterProjectEnvsContentHintEnvsResponse13$inboundSchema` instead. */
    export const inboundSchema = FilterProjectEnvsContentHintEnvsResponse13$inboundSchema;
    /** @deprecated use `FilterProjectEnvsContentHintEnvsResponse13$outboundSchema` instead. */
    export const outboundSchema = FilterProjectEnvsContentHintEnvsResponse13$outboundSchema;
    /** @deprecated use `FilterProjectEnvsContentHintEnvsResponse13$Outbound` instead. */
    export type Outbound = FilterProjectEnvsContentHintEnvsResponse13$Outbound;
}

/** @internal */
export const FilterProjectEnvsContentHintEnvsResponse200ApplicationJSONResponseBody3Envs12Type$inboundSchema: z.ZodNativeEnum<
    typeof FilterProjectEnvsContentHintEnvsResponse200ApplicationJSONResponseBody3Envs12Type
> = z.nativeEnum(FilterProjectEnvsContentHintEnvsResponse200ApplicationJSONResponseBody3Envs12Type);

/** @internal */
export const FilterProjectEnvsContentHintEnvsResponse200ApplicationJSONResponseBody3Envs12Type$outboundSchema: z.ZodNativeEnum<
    typeof FilterProjectEnvsContentHintEnvsResponse200ApplicationJSONResponseBody3Envs12Type
> = FilterProjectEnvsContentHintEnvsResponse200ApplicationJSONResponseBody3Envs12Type$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace FilterProjectEnvsContentHintEnvsResponse200ApplicationJSONResponseBody3Envs12Type$ {
    /** @deprecated use `FilterProjectEnvsContentHintEnvsResponse200ApplicationJSONResponseBody3Envs12Type$inboundSchema` instead. */
    export const inboundSchema =
        FilterProjectEnvsContentHintEnvsResponse200ApplicationJSONResponseBody3Envs12Type$inboundSchema;
    /** @deprecated use `FilterProjectEnvsContentHintEnvsResponse200ApplicationJSONResponseBody3Envs12Type$outboundSchema` instead. */
    export const outboundSchema =
        FilterProjectEnvsContentHintEnvsResponse200ApplicationJSONResponseBody3Envs12Type$outboundSchema;
}

/** @internal */
export const FilterProjectEnvsContentHintEnvsResponse12$inboundSchema: z.ZodType<
    FilterProjectEnvsContentHintEnvsResponse12,
    z.ZodTypeDef,
    unknown
> = z.object({
    type: FilterProjectEnvsContentHintEnvsResponse200ApplicationJSONResponseBody3Envs12Type$inboundSchema,
    storeId: z.string(),
});

/** @internal */
export type FilterProjectEnvsContentHintEnvsResponse12$Outbound = {
    type: string;
    storeId: string;
};

/** @internal */
export const FilterProjectEnvsContentHintEnvsResponse12$outboundSchema: z.ZodType<
    FilterProjectEnvsContentHintEnvsResponse12$Outbound,
    z.ZodTypeDef,
    FilterProjectEnvsContentHintEnvsResponse12
> = z.object({
    type: FilterProjectEnvsContentHintEnvsResponse200ApplicationJSONResponseBody3Envs12Type$outboundSchema,
    storeId: z.string(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace FilterProjectEnvsContentHintEnvsResponse12$ {
    /** @deprecated use `FilterProjectEnvsContentHintEnvsResponse12$inboundSchema` instead. */
    export const inboundSchema = FilterProjectEnvsContentHintEnvsResponse12$inboundSchema;
    /** @deprecated use `FilterProjectEnvsContentHintEnvsResponse12$outboundSchema` instead. */
    export const outboundSchema = FilterProjectEnvsContentHintEnvsResponse12$outboundSchema;
    /** @deprecated use `FilterProjectEnvsContentHintEnvsResponse12$Outbound` instead. */
    export type Outbound = FilterProjectEnvsContentHintEnvsResponse12$Outbound;
}

/** @internal */
export const FilterProjectEnvsContentHintEnvsResponse200ApplicationJSONResponseBody3Envs11Type$inboundSchema: z.ZodNativeEnum<
    typeof FilterProjectEnvsContentHintEnvsResponse200ApplicationJSONResponseBody3Envs11Type
> = z.nativeEnum(FilterProjectEnvsContentHintEnvsResponse200ApplicationJSONResponseBody3Envs11Type);

/** @internal */
export const FilterProjectEnvsContentHintEnvsResponse200ApplicationJSONResponseBody3Envs11Type$outboundSchema: z.ZodNativeEnum<
    typeof FilterProjectEnvsContentHintEnvsResponse200ApplicationJSONResponseBody3Envs11Type
> = FilterProjectEnvsContentHintEnvsResponse200ApplicationJSONResponseBody3Envs11Type$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace FilterProjectEnvsContentHintEnvsResponse200ApplicationJSONResponseBody3Envs11Type$ {
    /** @deprecated use `FilterProjectEnvsContentHintEnvsResponse200ApplicationJSONResponseBody3Envs11Type$inboundSchema` instead. */
    export const inboundSchema =
        FilterProjectEnvsContentHintEnvsResponse200ApplicationJSONResponseBody3Envs11Type$inboundSchema;
    /** @deprecated use `FilterProjectEnvsContentHintEnvsResponse200ApplicationJSONResponseBody3Envs11Type$outboundSchema` instead. */
    export const outboundSchema =
        FilterProjectEnvsContentHintEnvsResponse200ApplicationJSONResponseBody3Envs11Type$outboundSchema;
}

/** @internal */
export const FilterProjectEnvsContentHintEnvsResponse11$inboundSchema: z.ZodType<
    FilterProjectEnvsContentHintEnvsResponse11,
    z.ZodTypeDef,
    unknown
> = z.object({
    type: FilterProjectEnvsContentHintEnvsResponse200ApplicationJSONResponseBody3Envs11Type$inboundSchema,
    storeId: z.string(),
});

/** @internal */
export type FilterProjectEnvsContentHintEnvsResponse11$Outbound = {
    type: string;
    storeId: string;
};

/** @internal */
export const FilterProjectEnvsContentHintEnvsResponse11$outboundSchema: z.ZodType<
    FilterProjectEnvsContentHintEnvsResponse11$Outbound,
    z.ZodTypeDef,
    FilterProjectEnvsContentHintEnvsResponse11
> = z.object({
    type: FilterProjectEnvsContentHintEnvsResponse200ApplicationJSONResponseBody3Envs11Type$outboundSchema,
    storeId: z.string(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace FilterProjectEnvsContentHintEnvsResponse11$ {
    /** @deprecated use `FilterProjectEnvsContentHintEnvsResponse11$inboundSchema` instead. */
    export const inboundSchema = FilterProjectEnvsContentHintEnvsResponse11$inboundSchema;
    /** @deprecated use `FilterProjectEnvsContentHintEnvsResponse11$outboundSchema` instead. */
    export const outboundSchema = FilterProjectEnvsContentHintEnvsResponse11$outboundSchema;
    /** @deprecated use `FilterProjectEnvsContentHintEnvsResponse11$Outbound` instead. */
    export type Outbound = FilterProjectEnvsContentHintEnvsResponse11$Outbound;
}

/** @internal */
export const FilterProjectEnvsContentHintEnvsResponse200ApplicationJSONResponseBody3Envs10Type$inboundSchema: z.ZodNativeEnum<
    typeof FilterProjectEnvsContentHintEnvsResponse200ApplicationJSONResponseBody3Envs10Type
> = z.nativeEnum(FilterProjectEnvsContentHintEnvsResponse200ApplicationJSONResponseBody3Envs10Type);

/** @internal */
export const FilterProjectEnvsContentHintEnvsResponse200ApplicationJSONResponseBody3Envs10Type$outboundSchema: z.ZodNativeEnum<
    typeof FilterProjectEnvsContentHintEnvsResponse200ApplicationJSONResponseBody3Envs10Type
> = FilterProjectEnvsContentHintEnvsResponse200ApplicationJSONResponseBody3Envs10Type$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace FilterProjectEnvsContentHintEnvsResponse200ApplicationJSONResponseBody3Envs10Type$ {
    /** @deprecated use `FilterProjectEnvsContentHintEnvsResponse200ApplicationJSONResponseBody3Envs10Type$inboundSchema` instead. */
    export const inboundSchema =
        FilterProjectEnvsContentHintEnvsResponse200ApplicationJSONResponseBody3Envs10Type$inboundSchema;
    /** @deprecated use `FilterProjectEnvsContentHintEnvsResponse200ApplicationJSONResponseBody3Envs10Type$outboundSchema` instead. */
    export const outboundSchema =
        FilterProjectEnvsContentHintEnvsResponse200ApplicationJSONResponseBody3Envs10Type$outboundSchema;
}

/** @internal */
export const FilterProjectEnvsContentHintEnvsResponse10$inboundSchema: z.ZodType<
    FilterProjectEnvsContentHintEnvsResponse10,
    z.ZodTypeDef,
    unknown
> = z.object({
    type: FilterProjectEnvsContentHintEnvsResponse200ApplicationJSONResponseBody3Envs10Type$inboundSchema,
    storeId: z.string(),
});

/** @internal */
export type FilterProjectEnvsContentHintEnvsResponse10$Outbound = {
    type: string;
    storeId: string;
};

/** @internal */
export const FilterProjectEnvsContentHintEnvsResponse10$outboundSchema: z.ZodType<
    FilterProjectEnvsContentHintEnvsResponse10$Outbound,
    z.ZodTypeDef,
    FilterProjectEnvsContentHintEnvsResponse10
> = z.object({
    type: FilterProjectEnvsContentHintEnvsResponse200ApplicationJSONResponseBody3Envs10Type$outboundSchema,
    storeId: z.string(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace FilterProjectEnvsContentHintEnvsResponse10$ {
    /** @deprecated use `FilterProjectEnvsContentHintEnvsResponse10$inboundSchema` instead. */
    export const inboundSchema = FilterProjectEnvsContentHintEnvsResponse10$inboundSchema;
    /** @deprecated use `FilterProjectEnvsContentHintEnvsResponse10$outboundSchema` instead. */
    export const outboundSchema = FilterProjectEnvsContentHintEnvsResponse10$outboundSchema;
    /** @deprecated use `FilterProjectEnvsContentHintEnvsResponse10$Outbound` instead. */
    export type Outbound = FilterProjectEnvsContentHintEnvsResponse10$Outbound;
}

/** @internal */
export const FilterProjectEnvsContentHintEnvsResponse200ApplicationJSONResponseBody3Envs9Type$inboundSchema: z.ZodNativeEnum<
    typeof FilterProjectEnvsContentHintEnvsResponse200ApplicationJSONResponseBody3Envs9Type
> = z.nativeEnum(FilterProjectEnvsContentHintEnvsResponse200ApplicationJSONResponseBody3Envs9Type);

/** @internal */
export const FilterProjectEnvsContentHintEnvsResponse200ApplicationJSONResponseBody3Envs9Type$outboundSchema: z.ZodNativeEnum<
    typeof FilterProjectEnvsContentHintEnvsResponse200ApplicationJSONResponseBody3Envs9Type
> = FilterProjectEnvsContentHintEnvsResponse200ApplicationJSONResponseBody3Envs9Type$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace FilterProjectEnvsContentHintEnvsResponse200ApplicationJSONResponseBody3Envs9Type$ {
    /** @deprecated use `FilterProjectEnvsContentHintEnvsResponse200ApplicationJSONResponseBody3Envs9Type$inboundSchema` instead. */
    export const inboundSchema =
        FilterProjectEnvsContentHintEnvsResponse200ApplicationJSONResponseBody3Envs9Type$inboundSchema;
    /** @deprecated use `FilterProjectEnvsContentHintEnvsResponse200ApplicationJSONResponseBody3Envs9Type$outboundSchema` instead. */
    export const outboundSchema =
        FilterProjectEnvsContentHintEnvsResponse200ApplicationJSONResponseBody3Envs9Type$outboundSchema;
}

/** @internal */
export const FilterProjectEnvsContentHintEnvsResponse9$inboundSchema: z.ZodType<
    FilterProjectEnvsContentHintEnvsResponse9,
    z.ZodTypeDef,
    unknown
> = z.object({
    type: FilterProjectEnvsContentHintEnvsResponse200ApplicationJSONResponseBody3Envs9Type$inboundSchema,
    storeId: z.string(),
});

/** @internal */
export type FilterProjectEnvsContentHintEnvsResponse9$Outbound = {
    type: string;
    storeId: string;
};

/** @internal */
export const FilterProjectEnvsContentHintEnvsResponse9$outboundSchema: z.ZodType<
    FilterProjectEnvsContentHintEnvsResponse9$Outbound,
    z.ZodTypeDef,
    FilterProjectEnvsContentHintEnvsResponse9
> = z.object({
    type: FilterProjectEnvsContentHintEnvsResponse200ApplicationJSONResponseBody3Envs9Type$outboundSchema,
    storeId: z.string(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace FilterProjectEnvsContentHintEnvsResponse9$ {
    /** @deprecated use `FilterProjectEnvsContentHintEnvsResponse9$inboundSchema` instead. */
    export const inboundSchema = FilterProjectEnvsContentHintEnvsResponse9$inboundSchema;
    /** @deprecated use `FilterProjectEnvsContentHintEnvsResponse9$outboundSchema` instead. */
    export const outboundSchema = FilterProjectEnvsContentHintEnvsResponse9$outboundSchema;
    /** @deprecated use `FilterProjectEnvsContentHintEnvsResponse9$Outbound` instead. */
    export type Outbound = FilterProjectEnvsContentHintEnvsResponse9$Outbound;
}

/** @internal */
export const FilterProjectEnvsContentHintEnvsResponse200ApplicationJSONResponseBody3Envs8Type$inboundSchema: z.ZodNativeEnum<
    typeof FilterProjectEnvsContentHintEnvsResponse200ApplicationJSONResponseBody3Envs8Type
> = z.nativeEnum(FilterProjectEnvsContentHintEnvsResponse200ApplicationJSONResponseBody3Envs8Type);

/** @internal */
export const FilterProjectEnvsContentHintEnvsResponse200ApplicationJSONResponseBody3Envs8Type$outboundSchema: z.ZodNativeEnum<
    typeof FilterProjectEnvsContentHintEnvsResponse200ApplicationJSONResponseBody3Envs8Type
> = FilterProjectEnvsContentHintEnvsResponse200ApplicationJSONResponseBody3Envs8Type$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace FilterProjectEnvsContentHintEnvsResponse200ApplicationJSONResponseBody3Envs8Type$ {
    /** @deprecated use `FilterProjectEnvsContentHintEnvsResponse200ApplicationJSONResponseBody3Envs8Type$inboundSchema` instead. */
    export const inboundSchema =
        FilterProjectEnvsContentHintEnvsResponse200ApplicationJSONResponseBody3Envs8Type$inboundSchema;
    /** @deprecated use `FilterProjectEnvsContentHintEnvsResponse200ApplicationJSONResponseBody3Envs8Type$outboundSchema` instead. */
    export const outboundSchema =
        FilterProjectEnvsContentHintEnvsResponse200ApplicationJSONResponseBody3Envs8Type$outboundSchema;
}

/** @internal */
export const FilterProjectEnvsContentHintEnvsResponse8$inboundSchema: z.ZodType<
    FilterProjectEnvsContentHintEnvsResponse8,
    z.ZodTypeDef,
    unknown
> = z.object({
    type: FilterProjectEnvsContentHintEnvsResponse200ApplicationJSONResponseBody3Envs8Type$inboundSchema,
    storeId: z.string(),
});

/** @internal */
export type FilterProjectEnvsContentHintEnvsResponse8$Outbound = {
    type: string;
    storeId: string;
};

/** @internal */
export const FilterProjectEnvsContentHintEnvsResponse8$outboundSchema: z.ZodType<
    FilterProjectEnvsContentHintEnvsResponse8$Outbound,
    z.ZodTypeDef,
    FilterProjectEnvsContentHintEnvsResponse8
> = z.object({
    type: FilterProjectEnvsContentHintEnvsResponse200ApplicationJSONResponseBody3Envs8Type$outboundSchema,
    storeId: z.string(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace FilterProjectEnvsContentHintEnvsResponse8$ {
    /** @deprecated use `FilterProjectEnvsContentHintEnvsResponse8$inboundSchema` instead. */
    export const inboundSchema = FilterProjectEnvsContentHintEnvsResponse8$inboundSchema;
    /** @deprecated use `FilterProjectEnvsContentHintEnvsResponse8$outboundSchema` instead. */
    export const outboundSchema = FilterProjectEnvsContentHintEnvsResponse8$outboundSchema;
    /** @deprecated use `FilterProjectEnvsContentHintEnvsResponse8$Outbound` instead. */
    export type Outbound = FilterProjectEnvsContentHintEnvsResponse8$Outbound;
}

/** @internal */
export const FilterProjectEnvsContentHintEnvsResponse200ApplicationJSONResponseBody3Envs7Type$inboundSchema: z.ZodNativeEnum<
    typeof FilterProjectEnvsContentHintEnvsResponse200ApplicationJSONResponseBody3Envs7Type
> = z.nativeEnum(FilterProjectEnvsContentHintEnvsResponse200ApplicationJSONResponseBody3Envs7Type);

/** @internal */
export const FilterProjectEnvsContentHintEnvsResponse200ApplicationJSONResponseBody3Envs7Type$outboundSchema: z.ZodNativeEnum<
    typeof FilterProjectEnvsContentHintEnvsResponse200ApplicationJSONResponseBody3Envs7Type
> = FilterProjectEnvsContentHintEnvsResponse200ApplicationJSONResponseBody3Envs7Type$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace FilterProjectEnvsContentHintEnvsResponse200ApplicationJSONResponseBody3Envs7Type$ {
    /** @deprecated use `FilterProjectEnvsContentHintEnvsResponse200ApplicationJSONResponseBody3Envs7Type$inboundSchema` instead. */
    export const inboundSchema =
        FilterProjectEnvsContentHintEnvsResponse200ApplicationJSONResponseBody3Envs7Type$inboundSchema;
    /** @deprecated use `FilterProjectEnvsContentHintEnvsResponse200ApplicationJSONResponseBody3Envs7Type$outboundSchema` instead. */
    export const outboundSchema =
        FilterProjectEnvsContentHintEnvsResponse200ApplicationJSONResponseBody3Envs7Type$outboundSchema;
}

/** @internal */
export const FilterProjectEnvsContentHintEnvsResponse7$inboundSchema: z.ZodType<
    FilterProjectEnvsContentHintEnvsResponse7,
    z.ZodTypeDef,
    unknown
> = z.object({
    type: FilterProjectEnvsContentHintEnvsResponse200ApplicationJSONResponseBody3Envs7Type$inboundSchema,
    storeId: z.string(),
});

/** @internal */
export type FilterProjectEnvsContentHintEnvsResponse7$Outbound = {
    type: string;
    storeId: string;
};

/** @internal */
export const FilterProjectEnvsContentHintEnvsResponse7$outboundSchema: z.ZodType<
    FilterProjectEnvsContentHintEnvsResponse7$Outbound,
    z.ZodTypeDef,
    FilterProjectEnvsContentHintEnvsResponse7
> = z.object({
    type: FilterProjectEnvsContentHintEnvsResponse200ApplicationJSONResponseBody3Envs7Type$outboundSchema,
    storeId: z.string(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace FilterProjectEnvsContentHintEnvsResponse7$ {
    /** @deprecated use `FilterProjectEnvsContentHintEnvsResponse7$inboundSchema` instead. */
    export const inboundSchema = FilterProjectEnvsContentHintEnvsResponse7$inboundSchema;
    /** @deprecated use `FilterProjectEnvsContentHintEnvsResponse7$outboundSchema` instead. */
    export const outboundSchema = FilterProjectEnvsContentHintEnvsResponse7$outboundSchema;
    /** @deprecated use `FilterProjectEnvsContentHintEnvsResponse7$Outbound` instead. */
    export type Outbound = FilterProjectEnvsContentHintEnvsResponse7$Outbound;
}

/** @internal */
export const FilterProjectEnvsContentHintEnvsResponse200ApplicationJSONResponseBody3Envs6Type$inboundSchema: z.ZodNativeEnum<
    typeof FilterProjectEnvsContentHintEnvsResponse200ApplicationJSONResponseBody3Envs6Type
> = z.nativeEnum(FilterProjectEnvsContentHintEnvsResponse200ApplicationJSONResponseBody3Envs6Type);

/** @internal */
export const FilterProjectEnvsContentHintEnvsResponse200ApplicationJSONResponseBody3Envs6Type$outboundSchema: z.ZodNativeEnum<
    typeof FilterProjectEnvsContentHintEnvsResponse200ApplicationJSONResponseBody3Envs6Type
> = FilterProjectEnvsContentHintEnvsResponse200ApplicationJSONResponseBody3Envs6Type$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace FilterProjectEnvsContentHintEnvsResponse200ApplicationJSONResponseBody3Envs6Type$ {
    /** @deprecated use `FilterProjectEnvsContentHintEnvsResponse200ApplicationJSONResponseBody3Envs6Type$inboundSchema` instead. */
    export const inboundSchema =
        FilterProjectEnvsContentHintEnvsResponse200ApplicationJSONResponseBody3Envs6Type$inboundSchema;
    /** @deprecated use `FilterProjectEnvsContentHintEnvsResponse200ApplicationJSONResponseBody3Envs6Type$outboundSchema` instead. */
    export const outboundSchema =
        FilterProjectEnvsContentHintEnvsResponse200ApplicationJSONResponseBody3Envs6Type$outboundSchema;
}

/** @internal */
export const FilterProjectEnvsContentHintEnvsResponse6$inboundSchema: z.ZodType<
    FilterProjectEnvsContentHintEnvsResponse6,
    z.ZodTypeDef,
    unknown
> = z.object({
    type: FilterProjectEnvsContentHintEnvsResponse200ApplicationJSONResponseBody3Envs6Type$inboundSchema,
    storeId: z.string(),
});

/** @internal */
export type FilterProjectEnvsContentHintEnvsResponse6$Outbound = {
    type: string;
    storeId: string;
};

/** @internal */
export const FilterProjectEnvsContentHintEnvsResponse6$outboundSchema: z.ZodType<
    FilterProjectEnvsContentHintEnvsResponse6$Outbound,
    z.ZodTypeDef,
    FilterProjectEnvsContentHintEnvsResponse6
> = z.object({
    type: FilterProjectEnvsContentHintEnvsResponse200ApplicationJSONResponseBody3Envs6Type$outboundSchema,
    storeId: z.string(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace FilterProjectEnvsContentHintEnvsResponse6$ {
    /** @deprecated use `FilterProjectEnvsContentHintEnvsResponse6$inboundSchema` instead. */
    export const inboundSchema = FilterProjectEnvsContentHintEnvsResponse6$inboundSchema;
    /** @deprecated use `FilterProjectEnvsContentHintEnvsResponse6$outboundSchema` instead. */
    export const outboundSchema = FilterProjectEnvsContentHintEnvsResponse6$outboundSchema;
    /** @deprecated use `FilterProjectEnvsContentHintEnvsResponse6$Outbound` instead. */
    export type Outbound = FilterProjectEnvsContentHintEnvsResponse6$Outbound;
}

/** @internal */
export const FilterProjectEnvsContentHintEnvsResponse200ApplicationJSONResponseBody3Envs5Type$inboundSchema: z.ZodNativeEnum<
    typeof FilterProjectEnvsContentHintEnvsResponse200ApplicationJSONResponseBody3Envs5Type
> = z.nativeEnum(FilterProjectEnvsContentHintEnvsResponse200ApplicationJSONResponseBody3Envs5Type);

/** @internal */
export const FilterProjectEnvsContentHintEnvsResponse200ApplicationJSONResponseBody3Envs5Type$outboundSchema: z.ZodNativeEnum<
    typeof FilterProjectEnvsContentHintEnvsResponse200ApplicationJSONResponseBody3Envs5Type
> = FilterProjectEnvsContentHintEnvsResponse200ApplicationJSONResponseBody3Envs5Type$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace FilterProjectEnvsContentHintEnvsResponse200ApplicationJSONResponseBody3Envs5Type$ {
    /** @deprecated use `FilterProjectEnvsContentHintEnvsResponse200ApplicationJSONResponseBody3Envs5Type$inboundSchema` instead. */
    export const inboundSchema =
        FilterProjectEnvsContentHintEnvsResponse200ApplicationJSONResponseBody3Envs5Type$inboundSchema;
    /** @deprecated use `FilterProjectEnvsContentHintEnvsResponse200ApplicationJSONResponseBody3Envs5Type$outboundSchema` instead. */
    export const outboundSchema =
        FilterProjectEnvsContentHintEnvsResponse200ApplicationJSONResponseBody3Envs5Type$outboundSchema;
}

/** @internal */
export const FilterProjectEnvsContentHintEnvsResponse5$inboundSchema: z.ZodType<
    FilterProjectEnvsContentHintEnvsResponse5,
    z.ZodTypeDef,
    unknown
> = z.object({
    type: FilterProjectEnvsContentHintEnvsResponse200ApplicationJSONResponseBody3Envs5Type$inboundSchema,
    storeId: z.string(),
});

/** @internal */
export type FilterProjectEnvsContentHintEnvsResponse5$Outbound = {
    type: string;
    storeId: string;
};

/** @internal */
export const FilterProjectEnvsContentHintEnvsResponse5$outboundSchema: z.ZodType<
    FilterProjectEnvsContentHintEnvsResponse5$Outbound,
    z.ZodTypeDef,
    FilterProjectEnvsContentHintEnvsResponse5
> = z.object({
    type: FilterProjectEnvsContentHintEnvsResponse200ApplicationJSONResponseBody3Envs5Type$outboundSchema,
    storeId: z.string(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace FilterProjectEnvsContentHintEnvsResponse5$ {
    /** @deprecated use `FilterProjectEnvsContentHintEnvsResponse5$inboundSchema` instead. */
    export const inboundSchema = FilterProjectEnvsContentHintEnvsResponse5$inboundSchema;
    /** @deprecated use `FilterProjectEnvsContentHintEnvsResponse5$outboundSchema` instead. */
    export const outboundSchema = FilterProjectEnvsContentHintEnvsResponse5$outboundSchema;
    /** @deprecated use `FilterProjectEnvsContentHintEnvsResponse5$Outbound` instead. */
    export type Outbound = FilterProjectEnvsContentHintEnvsResponse5$Outbound;
}

/** @internal */
export const FilterProjectEnvsContentHintEnvsResponse200ApplicationJSONResponseBody3Envs4Type$inboundSchema: z.ZodNativeEnum<
    typeof FilterProjectEnvsContentHintEnvsResponse200ApplicationJSONResponseBody3Envs4Type
> = z.nativeEnum(FilterProjectEnvsContentHintEnvsResponse200ApplicationJSONResponseBody3Envs4Type);

/** @internal */
export const FilterProjectEnvsContentHintEnvsResponse200ApplicationJSONResponseBody3Envs4Type$outboundSchema: z.ZodNativeEnum<
    typeof FilterProjectEnvsContentHintEnvsResponse200ApplicationJSONResponseBody3Envs4Type
> = FilterProjectEnvsContentHintEnvsResponse200ApplicationJSONResponseBody3Envs4Type$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace FilterProjectEnvsContentHintEnvsResponse200ApplicationJSONResponseBody3Envs4Type$ {
    /** @deprecated use `FilterProjectEnvsContentHintEnvsResponse200ApplicationJSONResponseBody3Envs4Type$inboundSchema` instead. */
    export const inboundSchema =
        FilterProjectEnvsContentHintEnvsResponse200ApplicationJSONResponseBody3Envs4Type$inboundSchema;
    /** @deprecated use `FilterProjectEnvsContentHintEnvsResponse200ApplicationJSONResponseBody3Envs4Type$outboundSchema` instead. */
    export const outboundSchema =
        FilterProjectEnvsContentHintEnvsResponse200ApplicationJSONResponseBody3Envs4Type$outboundSchema;
}

/** @internal */
export const FilterProjectEnvsContentHintEnvsResponse4$inboundSchema: z.ZodType<
    FilterProjectEnvsContentHintEnvsResponse4,
    z.ZodTypeDef,
    unknown
> = z.object({
    type: FilterProjectEnvsContentHintEnvsResponse200ApplicationJSONResponseBody3Envs4Type$inboundSchema,
    storeId: z.string(),
});

/** @internal */
export type FilterProjectEnvsContentHintEnvsResponse4$Outbound = {
    type: string;
    storeId: string;
};

/** @internal */
export const FilterProjectEnvsContentHintEnvsResponse4$outboundSchema: z.ZodType<
    FilterProjectEnvsContentHintEnvsResponse4$Outbound,
    z.ZodTypeDef,
    FilterProjectEnvsContentHintEnvsResponse4
> = z.object({
    type: FilterProjectEnvsContentHintEnvsResponse200ApplicationJSONResponseBody3Envs4Type$outboundSchema,
    storeId: z.string(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace FilterProjectEnvsContentHintEnvsResponse4$ {
    /** @deprecated use `FilterProjectEnvsContentHintEnvsResponse4$inboundSchema` instead. */
    export const inboundSchema = FilterProjectEnvsContentHintEnvsResponse4$inboundSchema;
    /** @deprecated use `FilterProjectEnvsContentHintEnvsResponse4$outboundSchema` instead. */
    export const outboundSchema = FilterProjectEnvsContentHintEnvsResponse4$outboundSchema;
    /** @deprecated use `FilterProjectEnvsContentHintEnvsResponse4$Outbound` instead. */
    export type Outbound = FilterProjectEnvsContentHintEnvsResponse4$Outbound;
}

/** @internal */
export const FilterProjectEnvsContentHintEnvsResponse200ApplicationJSONResponseBody3Envs3Type$inboundSchema: z.ZodNativeEnum<
    typeof FilterProjectEnvsContentHintEnvsResponse200ApplicationJSONResponseBody3Envs3Type
> = z.nativeEnum(FilterProjectEnvsContentHintEnvsResponse200ApplicationJSONResponseBody3Envs3Type);

/** @internal */
export const FilterProjectEnvsContentHintEnvsResponse200ApplicationJSONResponseBody3Envs3Type$outboundSchema: z.ZodNativeEnum<
    typeof FilterProjectEnvsContentHintEnvsResponse200ApplicationJSONResponseBody3Envs3Type
> = FilterProjectEnvsContentHintEnvsResponse200ApplicationJSONResponseBody3Envs3Type$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace FilterProjectEnvsContentHintEnvsResponse200ApplicationJSONResponseBody3Envs3Type$ {
    /** @deprecated use `FilterProjectEnvsContentHintEnvsResponse200ApplicationJSONResponseBody3Envs3Type$inboundSchema` instead. */
    export const inboundSchema =
        FilterProjectEnvsContentHintEnvsResponse200ApplicationJSONResponseBody3Envs3Type$inboundSchema;
    /** @deprecated use `FilterProjectEnvsContentHintEnvsResponse200ApplicationJSONResponseBody3Envs3Type$outboundSchema` instead. */
    export const outboundSchema =
        FilterProjectEnvsContentHintEnvsResponse200ApplicationJSONResponseBody3Envs3Type$outboundSchema;
}

/** @internal */
export const FilterProjectEnvsContentHintEnvsResponse3$inboundSchema: z.ZodType<
    FilterProjectEnvsContentHintEnvsResponse3,
    z.ZodTypeDef,
    unknown
> = z.object({
    type: FilterProjectEnvsContentHintEnvsResponse200ApplicationJSONResponseBody3Envs3Type$inboundSchema,
    storeId: z.string(),
});

/** @internal */
export type FilterProjectEnvsContentHintEnvsResponse3$Outbound = {
    type: string;
    storeId: string;
};

/** @internal */
export const FilterProjectEnvsContentHintEnvsResponse3$outboundSchema: z.ZodType<
    FilterProjectEnvsContentHintEnvsResponse3$Outbound,
    z.ZodTypeDef,
    FilterProjectEnvsContentHintEnvsResponse3
> = z.object({
    type: FilterProjectEnvsContentHintEnvsResponse200ApplicationJSONResponseBody3Envs3Type$outboundSchema,
    storeId: z.string(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace FilterProjectEnvsContentHintEnvsResponse3$ {
    /** @deprecated use `FilterProjectEnvsContentHintEnvsResponse3$inboundSchema` instead. */
    export const inboundSchema = FilterProjectEnvsContentHintEnvsResponse3$inboundSchema;
    /** @deprecated use `FilterProjectEnvsContentHintEnvsResponse3$outboundSchema` instead. */
    export const outboundSchema = FilterProjectEnvsContentHintEnvsResponse3$outboundSchema;
    /** @deprecated use `FilterProjectEnvsContentHintEnvsResponse3$Outbound` instead. */
    export type Outbound = FilterProjectEnvsContentHintEnvsResponse3$Outbound;
}

/** @internal */
export const FilterProjectEnvsContentHintEnvsResponse200ApplicationJSONResponseBody3EnvsType$inboundSchema: z.ZodNativeEnum<
    typeof FilterProjectEnvsContentHintEnvsResponse200ApplicationJSONResponseBody3EnvsType
> = z.nativeEnum(FilterProjectEnvsContentHintEnvsResponse200ApplicationJSONResponseBody3EnvsType);

/** @internal */
export const FilterProjectEnvsContentHintEnvsResponse200ApplicationJSONResponseBody3EnvsType$outboundSchema: z.ZodNativeEnum<
    typeof FilterProjectEnvsContentHintEnvsResponse200ApplicationJSONResponseBody3EnvsType
> = FilterProjectEnvsContentHintEnvsResponse200ApplicationJSONResponseBody3EnvsType$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace FilterProjectEnvsContentHintEnvsResponse200ApplicationJSONResponseBody3EnvsType$ {
    /** @deprecated use `FilterProjectEnvsContentHintEnvsResponse200ApplicationJSONResponseBody3EnvsType$inboundSchema` instead. */
    export const inboundSchema =
        FilterProjectEnvsContentHintEnvsResponse200ApplicationJSONResponseBody3EnvsType$inboundSchema;
    /** @deprecated use `FilterProjectEnvsContentHintEnvsResponse200ApplicationJSONResponseBody3EnvsType$outboundSchema` instead. */
    export const outboundSchema =
        FilterProjectEnvsContentHintEnvsResponse200ApplicationJSONResponseBody3EnvsType$outboundSchema;
}

/** @internal */
export const FilterProjectEnvsContentHintEnvsResponse2$inboundSchema: z.ZodType<
    FilterProjectEnvsContentHintEnvsResponse2,
    z.ZodTypeDef,
    unknown
> = z.object({
    type: FilterProjectEnvsContentHintEnvsResponse200ApplicationJSONResponseBody3EnvsType$inboundSchema,
    storeId: z.string(),
});

/** @internal */
export type FilterProjectEnvsContentHintEnvsResponse2$Outbound = {
    type: string;
    storeId: string;
};

/** @internal */
export const FilterProjectEnvsContentHintEnvsResponse2$outboundSchema: z.ZodType<
    FilterProjectEnvsContentHintEnvsResponse2$Outbound,
    z.ZodTypeDef,
    FilterProjectEnvsContentHintEnvsResponse2
> = z.object({
    type: FilterProjectEnvsContentHintEnvsResponse200ApplicationJSONResponseBody3EnvsType$outboundSchema,
    storeId: z.string(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace FilterProjectEnvsContentHintEnvsResponse2$ {
    /** @deprecated use `FilterProjectEnvsContentHintEnvsResponse2$inboundSchema` instead. */
    export const inboundSchema = FilterProjectEnvsContentHintEnvsResponse2$inboundSchema;
    /** @deprecated use `FilterProjectEnvsContentHintEnvsResponse2$outboundSchema` instead. */
    export const outboundSchema = FilterProjectEnvsContentHintEnvsResponse2$outboundSchema;
    /** @deprecated use `FilterProjectEnvsContentHintEnvsResponse2$Outbound` instead. */
    export type Outbound = FilterProjectEnvsContentHintEnvsResponse2$Outbound;
}

/** @internal */
export const FilterProjectEnvsContentHintEnvsResponse200ApplicationJSONResponseBody3Type$inboundSchema: z.ZodNativeEnum<
    typeof FilterProjectEnvsContentHintEnvsResponse200ApplicationJSONResponseBody3Type
> = z.nativeEnum(FilterProjectEnvsContentHintEnvsResponse200ApplicationJSONResponseBody3Type);

/** @internal */
export const FilterProjectEnvsContentHintEnvsResponse200ApplicationJSONResponseBody3Type$outboundSchema: z.ZodNativeEnum<
    typeof FilterProjectEnvsContentHintEnvsResponse200ApplicationJSONResponseBody3Type
> = FilterProjectEnvsContentHintEnvsResponse200ApplicationJSONResponseBody3Type$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace FilterProjectEnvsContentHintEnvsResponse200ApplicationJSONResponseBody3Type$ {
    /** @deprecated use `FilterProjectEnvsContentHintEnvsResponse200ApplicationJSONResponseBody3Type$inboundSchema` instead. */
    export const inboundSchema =
        FilterProjectEnvsContentHintEnvsResponse200ApplicationJSONResponseBody3Type$inboundSchema;
    /** @deprecated use `FilterProjectEnvsContentHintEnvsResponse200ApplicationJSONResponseBody3Type$outboundSchema` instead. */
    export const outboundSchema =
        FilterProjectEnvsContentHintEnvsResponse200ApplicationJSONResponseBody3Type$outboundSchema;
}

/** @internal */
export const FilterProjectEnvsContentHintEnvsResponse1$inboundSchema: z.ZodType<
    FilterProjectEnvsContentHintEnvsResponse1,
    z.ZodTypeDef,
    unknown
> = z.object({
    type: FilterProjectEnvsContentHintEnvsResponse200ApplicationJSONResponseBody3Type$inboundSchema,
    storeId: z.string(),
});

/** @internal */
export type FilterProjectEnvsContentHintEnvsResponse1$Outbound = {
    type: string;
    storeId: string;
};

/** @internal */
export const FilterProjectEnvsContentHintEnvsResponse1$outboundSchema: z.ZodType<
    FilterProjectEnvsContentHintEnvsResponse1$Outbound,
    z.ZodTypeDef,
    FilterProjectEnvsContentHintEnvsResponse1
> = z.object({
    type: FilterProjectEnvsContentHintEnvsResponse200ApplicationJSONResponseBody3Type$outboundSchema,
    storeId: z.string(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace FilterProjectEnvsContentHintEnvsResponse1$ {
    /** @deprecated use `FilterProjectEnvsContentHintEnvsResponse1$inboundSchema` instead. */
    export const inboundSchema = FilterProjectEnvsContentHintEnvsResponse1$inboundSchema;
    /** @deprecated use `FilterProjectEnvsContentHintEnvsResponse1$outboundSchema` instead. */
    export const outboundSchema = FilterProjectEnvsContentHintEnvsResponse1$outboundSchema;
    /** @deprecated use `FilterProjectEnvsContentHintEnvsResponse1$Outbound` instead. */
    export type Outbound = FilterProjectEnvsContentHintEnvsResponse1$Outbound;
}

/** @internal */
export const FilterProjectEnvsResponseBodyEnvsContentHint$inboundSchema: z.ZodType<
    FilterProjectEnvsResponseBodyEnvsContentHint,
    z.ZodTypeDef,
    unknown
> = z.union([
    z.lazy(() => FilterProjectEnvsContentHintEnvsResponse1$inboundSchema),
    z.lazy(() => FilterProjectEnvsContentHintEnvsResponse2$inboundSchema),
    z.lazy(() => FilterProjectEnvsContentHintEnvsResponse3$inboundSchema),
    z.lazy(() => FilterProjectEnvsContentHintEnvsResponse4$inboundSchema),
    z.lazy(() => FilterProjectEnvsContentHintEnvsResponse5$inboundSchema),
    z.lazy(() => FilterProjectEnvsContentHintEnvsResponse6$inboundSchema),
    z.lazy(() => FilterProjectEnvsContentHintEnvsResponse7$inboundSchema),
    z.lazy(() => FilterProjectEnvsContentHintEnvsResponse8$inboundSchema),
    z.lazy(() => FilterProjectEnvsContentHintEnvsResponse9$inboundSchema),
    z.lazy(() => FilterProjectEnvsContentHintEnvsResponse10$inboundSchema),
    z.lazy(() => FilterProjectEnvsContentHintEnvsResponse11$inboundSchema),
    z.lazy(() => FilterProjectEnvsContentHintEnvsResponse12$inboundSchema),
    z.lazy(() => FilterProjectEnvsContentHintEnvsResponse13$inboundSchema),
    z.lazy(() => FilterProjectEnvsContentHintEnvsResponse14$inboundSchema),
]);

/** @internal */
export type FilterProjectEnvsResponseBodyEnvsContentHint$Outbound =
    | FilterProjectEnvsContentHintEnvsResponse1$Outbound
    | FilterProjectEnvsContentHintEnvsResponse2$Outbound
    | FilterProjectEnvsContentHintEnvsResponse3$Outbound
    | FilterProjectEnvsContentHintEnvsResponse4$Outbound
    | FilterProjectEnvsContentHintEnvsResponse5$Outbound
    | FilterProjectEnvsContentHintEnvsResponse6$Outbound
    | FilterProjectEnvsContentHintEnvsResponse7$Outbound
    | FilterProjectEnvsContentHintEnvsResponse8$Outbound
    | FilterProjectEnvsContentHintEnvsResponse9$Outbound
    | FilterProjectEnvsContentHintEnvsResponse10$Outbound
    | FilterProjectEnvsContentHintEnvsResponse11$Outbound
    | FilterProjectEnvsContentHintEnvsResponse12$Outbound
    | FilterProjectEnvsContentHintEnvsResponse13$Outbound
    | FilterProjectEnvsContentHintEnvsResponse14$Outbound;

/** @internal */
export const FilterProjectEnvsResponseBodyEnvsContentHint$outboundSchema: z.ZodType<
    FilterProjectEnvsResponseBodyEnvsContentHint$Outbound,
    z.ZodTypeDef,
    FilterProjectEnvsResponseBodyEnvsContentHint
> = z.union([
    z.lazy(() => FilterProjectEnvsContentHintEnvsResponse1$outboundSchema),
    z.lazy(() => FilterProjectEnvsContentHintEnvsResponse2$outboundSchema),
    z.lazy(() => FilterProjectEnvsContentHintEnvsResponse3$outboundSchema),
    z.lazy(() => FilterProjectEnvsContentHintEnvsResponse4$outboundSchema),
    z.lazy(() => FilterProjectEnvsContentHintEnvsResponse5$outboundSchema),
    z.lazy(() => FilterProjectEnvsContentHintEnvsResponse6$outboundSchema),
    z.lazy(() => FilterProjectEnvsContentHintEnvsResponse7$outboundSchema),
    z.lazy(() => FilterProjectEnvsContentHintEnvsResponse8$outboundSchema),
    z.lazy(() => FilterProjectEnvsContentHintEnvsResponse9$outboundSchema),
    z.lazy(() => FilterProjectEnvsContentHintEnvsResponse10$outboundSchema),
    z.lazy(() => FilterProjectEnvsContentHintEnvsResponse11$outboundSchema),
    z.lazy(() => FilterProjectEnvsContentHintEnvsResponse12$outboundSchema),
    z.lazy(() => FilterProjectEnvsContentHintEnvsResponse13$outboundSchema),
    z.lazy(() => FilterProjectEnvsContentHintEnvsResponse14$outboundSchema),
]);

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace FilterProjectEnvsResponseBodyEnvsContentHint$ {
    /** @deprecated use `FilterProjectEnvsResponseBodyEnvsContentHint$inboundSchema` instead. */
    export const inboundSchema = FilterProjectEnvsResponseBodyEnvsContentHint$inboundSchema;
    /** @deprecated use `FilterProjectEnvsResponseBodyEnvsContentHint$outboundSchema` instead. */
    export const outboundSchema = FilterProjectEnvsResponseBodyEnvsContentHint$outboundSchema;
    /** @deprecated use `FilterProjectEnvsResponseBodyEnvsContentHint$Outbound` instead. */
    export type Outbound = FilterProjectEnvsResponseBodyEnvsContentHint$Outbound;
}

/** @internal */
export const FilterProjectEnvsResponseBodyEnvsResponse200ApplicationJson3Type$inboundSchema: z.ZodNativeEnum<
    typeof FilterProjectEnvsResponseBodyEnvsResponse200ApplicationJson3Type
> = z.nativeEnum(FilterProjectEnvsResponseBodyEnvsResponse200ApplicationJson3Type);

/** @internal */
export const FilterProjectEnvsResponseBodyEnvsResponse200ApplicationJson3Type$outboundSchema: z.ZodNativeEnum<
    typeof FilterProjectEnvsResponseBodyEnvsResponse200ApplicationJson3Type
> = FilterProjectEnvsResponseBodyEnvsResponse200ApplicationJson3Type$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace FilterProjectEnvsResponseBodyEnvsResponse200ApplicationJson3Type$ {
    /** @deprecated use `FilterProjectEnvsResponseBodyEnvsResponse200ApplicationJson3Type$inboundSchema` instead. */
    export const inboundSchema =
        FilterProjectEnvsResponseBodyEnvsResponse200ApplicationJson3Type$inboundSchema;
    /** @deprecated use `FilterProjectEnvsResponseBodyEnvsResponse200ApplicationJson3Type$outboundSchema` instead. */
    export const outboundSchema =
        FilterProjectEnvsResponseBodyEnvsResponse200ApplicationJson3Type$outboundSchema;
}

/** @internal */
export const FilterProjectEnvsResponseBodyEnvsInternalContentHint$inboundSchema: z.ZodType<
    FilterProjectEnvsResponseBodyEnvsInternalContentHint,
    z.ZodTypeDef,
    unknown
> = z.object({
    type: FilterProjectEnvsResponseBodyEnvsResponse200ApplicationJson3Type$inboundSchema,
    encryptedValue: z.string(),
});

/** @internal */
export type FilterProjectEnvsResponseBodyEnvsInternalContentHint$Outbound = {
    type: string;
    encryptedValue: string;
};

/** @internal */
export const FilterProjectEnvsResponseBodyEnvsInternalContentHint$outboundSchema: z.ZodType<
    FilterProjectEnvsResponseBodyEnvsInternalContentHint$Outbound,
    z.ZodTypeDef,
    FilterProjectEnvsResponseBodyEnvsInternalContentHint
> = z.object({
    type: FilterProjectEnvsResponseBodyEnvsResponse200ApplicationJson3Type$outboundSchema,
    encryptedValue: z.string(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace FilterProjectEnvsResponseBodyEnvsInternalContentHint$ {
    /** @deprecated use `FilterProjectEnvsResponseBodyEnvsInternalContentHint$inboundSchema` instead. */
    export const inboundSchema = FilterProjectEnvsResponseBodyEnvsInternalContentHint$inboundSchema;
    /** @deprecated use `FilterProjectEnvsResponseBodyEnvsInternalContentHint$outboundSchema` instead. */
    export const outboundSchema =
        FilterProjectEnvsResponseBodyEnvsInternalContentHint$outboundSchema;
    /** @deprecated use `FilterProjectEnvsResponseBodyEnvsInternalContentHint$Outbound` instead. */
    export type Outbound = FilterProjectEnvsResponseBodyEnvsInternalContentHint$Outbound;
}

/** @internal */
export const ResponseBodyEnvs$inboundSchema: z.ZodType<ResponseBodyEnvs, z.ZodTypeDef, unknown> =
    z.object({
        target: z
            .union([
                z.array(FilterProjectEnvsTargetEnvsResponse1$inboundSchema),
                FilterProjectEnvsTargetEnvsResponse2$inboundSchema,
            ])
            .optional(),
        type: FilterProjectEnvsResponseBodyEnvsResponse200Type$inboundSchema.optional(),
        sunsetSecretId: z.string().optional(),
        id: z.string().optional(),
        key: z.string().optional(),
        value: z.string().optional(),
        configurationId: z.nullable(z.string()).optional(),
        createdAt: z.number().optional(),
        updatedAt: z.number().optional(),
        createdBy: z.nullable(z.string()).optional(),
        updatedBy: z.nullable(z.string()).optional(),
        gitBranch: z.string().optional(),
        edgeConfigId: z.nullable(z.string()).optional(),
        edgeConfigTokenId: z.nullable(z.string()).optional(),
        contentHint: z
            .nullable(
                z.union([
                    z.lazy(() => FilterProjectEnvsContentHintEnvsResponse1$inboundSchema),
                    z.lazy(() => FilterProjectEnvsContentHintEnvsResponse2$inboundSchema),
                    z.lazy(() => FilterProjectEnvsContentHintEnvsResponse3$inboundSchema),
                    z.lazy(() => FilterProjectEnvsContentHintEnvsResponse4$inboundSchema),
                    z.lazy(() => FilterProjectEnvsContentHintEnvsResponse5$inboundSchema),
                    z.lazy(() => FilterProjectEnvsContentHintEnvsResponse6$inboundSchema),
                    z.lazy(() => FilterProjectEnvsContentHintEnvsResponse7$inboundSchema),
                    z.lazy(() => FilterProjectEnvsContentHintEnvsResponse8$inboundSchema),
                    z.lazy(() => FilterProjectEnvsContentHintEnvsResponse9$inboundSchema),
                    z.lazy(() => FilterProjectEnvsContentHintEnvsResponse10$inboundSchema),
                    z.lazy(() => FilterProjectEnvsContentHintEnvsResponse11$inboundSchema),
                    z.lazy(() => FilterProjectEnvsContentHintEnvsResponse12$inboundSchema),
                    z.lazy(() => FilterProjectEnvsContentHintEnvsResponse13$inboundSchema),
                    z.lazy(() => FilterProjectEnvsContentHintEnvsResponse14$inboundSchema),
                ])
            )
            .optional(),
        internalContentHint: z
            .nullable(
                z.lazy(() => FilterProjectEnvsResponseBodyEnvsInternalContentHint$inboundSchema)
            )
            .optional(),
        decrypted: z.boolean().optional(),
        comment: z.string().optional(),
        customEnvironmentIds: z.array(z.string()).optional(),
        vsmValue: z.string().optional(),
        system: z.boolean().optional(),
    });

/** @internal */
export type ResponseBodyEnvs$Outbound = {
    target?: Array<string> | string | undefined;
    type?: string | undefined;
    sunsetSecretId?: string | undefined;
    id?: string | undefined;
    key?: string | undefined;
    value?: string | undefined;
    configurationId?: string | null | undefined;
    createdAt?: number | undefined;
    updatedAt?: number | undefined;
    createdBy?: string | null | undefined;
    updatedBy?: string | null | undefined;
    gitBranch?: string | undefined;
    edgeConfigId?: string | null | undefined;
    edgeConfigTokenId?: string | null | undefined;
    contentHint?:
        | FilterProjectEnvsContentHintEnvsResponse1$Outbound
        | FilterProjectEnvsContentHintEnvsResponse2$Outbound
        | FilterProjectEnvsContentHintEnvsResponse3$Outbound
        | FilterProjectEnvsContentHintEnvsResponse4$Outbound
        | FilterProjectEnvsContentHintEnvsResponse5$Outbound
        | FilterProjectEnvsContentHintEnvsResponse6$Outbound
        | FilterProjectEnvsContentHintEnvsResponse7$Outbound
        | FilterProjectEnvsContentHintEnvsResponse8$Outbound
        | FilterProjectEnvsContentHintEnvsResponse9$Outbound
        | FilterProjectEnvsContentHintEnvsResponse10$Outbound
        | FilterProjectEnvsContentHintEnvsResponse11$Outbound
        | FilterProjectEnvsContentHintEnvsResponse12$Outbound
        | FilterProjectEnvsContentHintEnvsResponse13$Outbound
        | FilterProjectEnvsContentHintEnvsResponse14$Outbound
        | null
        | undefined;
    internalContentHint?:
        | FilterProjectEnvsResponseBodyEnvsInternalContentHint$Outbound
        | null
        | undefined;
    decrypted?: boolean | undefined;
    comment?: string | undefined;
    customEnvironmentIds?: Array<string> | undefined;
    vsmValue?: string | undefined;
    system?: boolean | undefined;
};

/** @internal */
export const ResponseBodyEnvs$outboundSchema: z.ZodType<
    ResponseBodyEnvs$Outbound,
    z.ZodTypeDef,
    ResponseBodyEnvs
> = z.object({
    target: z
        .union([
            z.array(FilterProjectEnvsTargetEnvsResponse1$outboundSchema),
            FilterProjectEnvsTargetEnvsResponse2$outboundSchema,
        ])
        .optional(),
    type: FilterProjectEnvsResponseBodyEnvsResponse200Type$outboundSchema.optional(),
    sunsetSecretId: z.string().optional(),
    id: z.string().optional(),
    key: z.string().optional(),
    value: z.string().optional(),
    configurationId: z.nullable(z.string()).optional(),
    createdAt: z.number().optional(),
    updatedAt: z.number().optional(),
    createdBy: z.nullable(z.string()).optional(),
    updatedBy: z.nullable(z.string()).optional(),
    gitBranch: z.string().optional(),
    edgeConfigId: z.nullable(z.string()).optional(),
    edgeConfigTokenId: z.nullable(z.string()).optional(),
    contentHint: z
        .nullable(
            z.union([
                z.lazy(() => FilterProjectEnvsContentHintEnvsResponse1$outboundSchema),
                z.lazy(() => FilterProjectEnvsContentHintEnvsResponse2$outboundSchema),
                z.lazy(() => FilterProjectEnvsContentHintEnvsResponse3$outboundSchema),
                z.lazy(() => FilterProjectEnvsContentHintEnvsResponse4$outboundSchema),
                z.lazy(() => FilterProjectEnvsContentHintEnvsResponse5$outboundSchema),
                z.lazy(() => FilterProjectEnvsContentHintEnvsResponse6$outboundSchema),
                z.lazy(() => FilterProjectEnvsContentHintEnvsResponse7$outboundSchema),
                z.lazy(() => FilterProjectEnvsContentHintEnvsResponse8$outboundSchema),
                z.lazy(() => FilterProjectEnvsContentHintEnvsResponse9$outboundSchema),
                z.lazy(() => FilterProjectEnvsContentHintEnvsResponse10$outboundSchema),
                z.lazy(() => FilterProjectEnvsContentHintEnvsResponse11$outboundSchema),
                z.lazy(() => FilterProjectEnvsContentHintEnvsResponse12$outboundSchema),
                z.lazy(() => FilterProjectEnvsContentHintEnvsResponse13$outboundSchema),
                z.lazy(() => FilterProjectEnvsContentHintEnvsResponse14$outboundSchema),
            ])
        )
        .optional(),
    internalContentHint: z
        .nullable(z.lazy(() => FilterProjectEnvsResponseBodyEnvsInternalContentHint$outboundSchema))
        .optional(),
    decrypted: z.boolean().optional(),
    comment: z.string().optional(),
    customEnvironmentIds: z.array(z.string()).optional(),
    vsmValue: z.string().optional(),
    system: z.boolean().optional(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace ResponseBodyEnvs$ {
    /** @deprecated use `ResponseBodyEnvs$inboundSchema` instead. */
    export const inboundSchema = ResponseBodyEnvs$inboundSchema;
    /** @deprecated use `ResponseBodyEnvs$outboundSchema` instead. */
    export const outboundSchema = ResponseBodyEnvs$outboundSchema;
    /** @deprecated use `ResponseBodyEnvs$Outbound` instead. */
    export type Outbound = ResponseBodyEnvs$Outbound;
}

/** @internal */
export const FilterProjectEnvsResponseBody3$inboundSchema: z.ZodType<
    FilterProjectEnvsResponseBody3,
    z.ZodTypeDef,
    unknown
> = z.object({
    envs: z.array(z.lazy(() => ResponseBodyEnvs$inboundSchema)),
});

/** @internal */
export type FilterProjectEnvsResponseBody3$Outbound = {
    envs: Array<ResponseBodyEnvs$Outbound>;
};

/** @internal */
export const FilterProjectEnvsResponseBody3$outboundSchema: z.ZodType<
    FilterProjectEnvsResponseBody3$Outbound,
    z.ZodTypeDef,
    FilterProjectEnvsResponseBody3
> = z.object({
    envs: z.array(z.lazy(() => ResponseBodyEnvs$outboundSchema)),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace FilterProjectEnvsResponseBody3$ {
    /** @deprecated use `FilterProjectEnvsResponseBody3$inboundSchema` instead. */
    export const inboundSchema = FilterProjectEnvsResponseBody3$inboundSchema;
    /** @deprecated use `FilterProjectEnvsResponseBody3$outboundSchema` instead. */
    export const outboundSchema = FilterProjectEnvsResponseBody3$outboundSchema;
    /** @deprecated use `FilterProjectEnvsResponseBody3$Outbound` instead. */
    export type Outbound = FilterProjectEnvsResponseBody3$Outbound;
}

/** @internal */
export const FilterProjectEnvsTargetEnvs2$inboundSchema: z.ZodNativeEnum<
    typeof FilterProjectEnvsTargetEnvs2
> = z.nativeEnum(FilterProjectEnvsTargetEnvs2);

/** @internal */
export const FilterProjectEnvsTargetEnvs2$outboundSchema: z.ZodNativeEnum<
    typeof FilterProjectEnvsTargetEnvs2
> = FilterProjectEnvsTargetEnvs2$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace FilterProjectEnvsTargetEnvs2$ {
    /** @deprecated use `FilterProjectEnvsTargetEnvs2$inboundSchema` instead. */
    export const inboundSchema = FilterProjectEnvsTargetEnvs2$inboundSchema;
    /** @deprecated use `FilterProjectEnvsTargetEnvs2$outboundSchema` instead. */
    export const outboundSchema = FilterProjectEnvsTargetEnvs2$outboundSchema;
}

/** @internal */
export const FilterProjectEnvsTargetEnvs1$inboundSchema: z.ZodNativeEnum<
    typeof FilterProjectEnvsTargetEnvs1
> = z.nativeEnum(FilterProjectEnvsTargetEnvs1);

/** @internal */
export const FilterProjectEnvsTargetEnvs1$outboundSchema: z.ZodNativeEnum<
    typeof FilterProjectEnvsTargetEnvs1
> = FilterProjectEnvsTargetEnvs1$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace FilterProjectEnvsTargetEnvs1$ {
    /** @deprecated use `FilterProjectEnvsTargetEnvs1$inboundSchema` instead. */
    export const inboundSchema = FilterProjectEnvsTargetEnvs1$inboundSchema;
    /** @deprecated use `FilterProjectEnvsTargetEnvs1$outboundSchema` instead. */
    export const outboundSchema = FilterProjectEnvsTargetEnvs1$outboundSchema;
}

/** @internal */
export const FilterProjectEnvsResponseBodyEnvsTarget$inboundSchema: z.ZodType<
    FilterProjectEnvsResponseBodyEnvsTarget,
    z.ZodTypeDef,
    unknown
> = z.union([
    z.array(FilterProjectEnvsTargetEnvs1$inboundSchema),
    FilterProjectEnvsTargetEnvs2$inboundSchema,
]);

/** @internal */
export type FilterProjectEnvsResponseBodyEnvsTarget$Outbound = Array<string> | string;

/** @internal */
export const FilterProjectEnvsResponseBodyEnvsTarget$outboundSchema: z.ZodType<
    FilterProjectEnvsResponseBodyEnvsTarget$Outbound,
    z.ZodTypeDef,
    FilterProjectEnvsResponseBodyEnvsTarget
> = z.union([
    z.array(FilterProjectEnvsTargetEnvs1$outboundSchema),
    FilterProjectEnvsTargetEnvs2$outboundSchema,
]);

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace FilterProjectEnvsResponseBodyEnvsTarget$ {
    /** @deprecated use `FilterProjectEnvsResponseBodyEnvsTarget$inboundSchema` instead. */
    export const inboundSchema = FilterProjectEnvsResponseBodyEnvsTarget$inboundSchema;
    /** @deprecated use `FilterProjectEnvsResponseBodyEnvsTarget$outboundSchema` instead. */
    export const outboundSchema = FilterProjectEnvsResponseBodyEnvsTarget$outboundSchema;
    /** @deprecated use `FilterProjectEnvsResponseBodyEnvsTarget$Outbound` instead. */
    export type Outbound = FilterProjectEnvsResponseBodyEnvsTarget$Outbound;
}

/** @internal */
export const FilterProjectEnvsResponseBodyEnvsResponseType$inboundSchema: z.ZodNativeEnum<
    typeof FilterProjectEnvsResponseBodyEnvsResponseType
> = z.nativeEnum(FilterProjectEnvsResponseBodyEnvsResponseType);

/** @internal */
export const FilterProjectEnvsResponseBodyEnvsResponseType$outboundSchema: z.ZodNativeEnum<
    typeof FilterProjectEnvsResponseBodyEnvsResponseType
> = FilterProjectEnvsResponseBodyEnvsResponseType$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace FilterProjectEnvsResponseBodyEnvsResponseType$ {
    /** @deprecated use `FilterProjectEnvsResponseBodyEnvsResponseType$inboundSchema` instead. */
    export const inboundSchema = FilterProjectEnvsResponseBodyEnvsResponseType$inboundSchema;
    /** @deprecated use `FilterProjectEnvsResponseBodyEnvsResponseType$outboundSchema` instead. */
    export const outboundSchema = FilterProjectEnvsResponseBodyEnvsResponseType$outboundSchema;
}

/** @internal */
export const FilterProjectEnvsContentHintEnvsResponse200ApplicationJSONResponseBody2Envs14Type$inboundSchema: z.ZodNativeEnum<
    typeof FilterProjectEnvsContentHintEnvsResponse200ApplicationJSONResponseBody2Envs14Type
> = z.nativeEnum(FilterProjectEnvsContentHintEnvsResponse200ApplicationJSONResponseBody2Envs14Type);

/** @internal */
export const FilterProjectEnvsContentHintEnvsResponse200ApplicationJSONResponseBody2Envs14Type$outboundSchema: z.ZodNativeEnum<
    typeof FilterProjectEnvsContentHintEnvsResponse200ApplicationJSONResponseBody2Envs14Type
> = FilterProjectEnvsContentHintEnvsResponse200ApplicationJSONResponseBody2Envs14Type$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace FilterProjectEnvsContentHintEnvsResponse200ApplicationJSONResponseBody2Envs14Type$ {
    /** @deprecated use `FilterProjectEnvsContentHintEnvsResponse200ApplicationJSONResponseBody2Envs14Type$inboundSchema` instead. */
    export const inboundSchema =
        FilterProjectEnvsContentHintEnvsResponse200ApplicationJSONResponseBody2Envs14Type$inboundSchema;
    /** @deprecated use `FilterProjectEnvsContentHintEnvsResponse200ApplicationJSONResponseBody2Envs14Type$outboundSchema` instead. */
    export const outboundSchema =
        FilterProjectEnvsContentHintEnvsResponse200ApplicationJSONResponseBody2Envs14Type$outboundSchema;
}

/** @internal */
export const FilterProjectEnvsContentHintEnvs14$inboundSchema: z.ZodType<
    FilterProjectEnvsContentHintEnvs14,
    z.ZodTypeDef,
    unknown
> = z.object({
    type: FilterProjectEnvsContentHintEnvsResponse200ApplicationJSONResponseBody2Envs14Type$inboundSchema,
    storeId: z.string(),
    integrationId: z.string(),
    integrationProductId: z.string(),
    integrationConfigurationId: z.string(),
});

/** @internal */
export type FilterProjectEnvsContentHintEnvs14$Outbound = {
    type: string;
    storeId: string;
    integrationId: string;
    integrationProductId: string;
    integrationConfigurationId: string;
};

/** @internal */
export const FilterProjectEnvsContentHintEnvs14$outboundSchema: z.ZodType<
    FilterProjectEnvsContentHintEnvs14$Outbound,
    z.ZodTypeDef,
    FilterProjectEnvsContentHintEnvs14
> = z.object({
    type: FilterProjectEnvsContentHintEnvsResponse200ApplicationJSONResponseBody2Envs14Type$outboundSchema,
    storeId: z.string(),
    integrationId: z.string(),
    integrationProductId: z.string(),
    integrationConfigurationId: z.string(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace FilterProjectEnvsContentHintEnvs14$ {
    /** @deprecated use `FilterProjectEnvsContentHintEnvs14$inboundSchema` instead. */
    export const inboundSchema = FilterProjectEnvsContentHintEnvs14$inboundSchema;
    /** @deprecated use `FilterProjectEnvsContentHintEnvs14$outboundSchema` instead. */
    export const outboundSchema = FilterProjectEnvsContentHintEnvs14$outboundSchema;
    /** @deprecated use `FilterProjectEnvsContentHintEnvs14$Outbound` instead. */
    export type Outbound = FilterProjectEnvsContentHintEnvs14$Outbound;
}

/** @internal */
export const FilterProjectEnvsContentHintEnvsResponse200ApplicationJSONResponseBody2Envs13Type$inboundSchema: z.ZodNativeEnum<
    typeof FilterProjectEnvsContentHintEnvsResponse200ApplicationJSONResponseBody2Envs13Type
> = z.nativeEnum(FilterProjectEnvsContentHintEnvsResponse200ApplicationJSONResponseBody2Envs13Type);

/** @internal */
export const FilterProjectEnvsContentHintEnvsResponse200ApplicationJSONResponseBody2Envs13Type$outboundSchema: z.ZodNativeEnum<
    typeof FilterProjectEnvsContentHintEnvsResponse200ApplicationJSONResponseBody2Envs13Type
> = FilterProjectEnvsContentHintEnvsResponse200ApplicationJSONResponseBody2Envs13Type$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace FilterProjectEnvsContentHintEnvsResponse200ApplicationJSONResponseBody2Envs13Type$ {
    /** @deprecated use `FilterProjectEnvsContentHintEnvsResponse200ApplicationJSONResponseBody2Envs13Type$inboundSchema` instead. */
    export const inboundSchema =
        FilterProjectEnvsContentHintEnvsResponse200ApplicationJSONResponseBody2Envs13Type$inboundSchema;
    /** @deprecated use `FilterProjectEnvsContentHintEnvsResponse200ApplicationJSONResponseBody2Envs13Type$outboundSchema` instead. */
    export const outboundSchema =
        FilterProjectEnvsContentHintEnvsResponse200ApplicationJSONResponseBody2Envs13Type$outboundSchema;
}

/** @internal */
export const FilterProjectEnvsContentHintEnvs13$inboundSchema: z.ZodType<
    FilterProjectEnvsContentHintEnvs13,
    z.ZodTypeDef,
    unknown
> = z.object({
    type: FilterProjectEnvsContentHintEnvsResponse200ApplicationJSONResponseBody2Envs13Type$inboundSchema,
    storeId: z.string(),
});

/** @internal */
export type FilterProjectEnvsContentHintEnvs13$Outbound = {
    type: string;
    storeId: string;
};

/** @internal */
export const FilterProjectEnvsContentHintEnvs13$outboundSchema: z.ZodType<
    FilterProjectEnvsContentHintEnvs13$Outbound,
    z.ZodTypeDef,
    FilterProjectEnvsContentHintEnvs13
> = z.object({
    type: FilterProjectEnvsContentHintEnvsResponse200ApplicationJSONResponseBody2Envs13Type$outboundSchema,
    storeId: z.string(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace FilterProjectEnvsContentHintEnvs13$ {
    /** @deprecated use `FilterProjectEnvsContentHintEnvs13$inboundSchema` instead. */
    export const inboundSchema = FilterProjectEnvsContentHintEnvs13$inboundSchema;
    /** @deprecated use `FilterProjectEnvsContentHintEnvs13$outboundSchema` instead. */
    export const outboundSchema = FilterProjectEnvsContentHintEnvs13$outboundSchema;
    /** @deprecated use `FilterProjectEnvsContentHintEnvs13$Outbound` instead. */
    export type Outbound = FilterProjectEnvsContentHintEnvs13$Outbound;
}

/** @internal */
export const FilterProjectEnvsContentHintEnvsResponse200ApplicationJSONResponseBody2Envs12Type$inboundSchema: z.ZodNativeEnum<
    typeof FilterProjectEnvsContentHintEnvsResponse200ApplicationJSONResponseBody2Envs12Type
> = z.nativeEnum(FilterProjectEnvsContentHintEnvsResponse200ApplicationJSONResponseBody2Envs12Type);

/** @internal */
export const FilterProjectEnvsContentHintEnvsResponse200ApplicationJSONResponseBody2Envs12Type$outboundSchema: z.ZodNativeEnum<
    typeof FilterProjectEnvsContentHintEnvsResponse200ApplicationJSONResponseBody2Envs12Type
> = FilterProjectEnvsContentHintEnvsResponse200ApplicationJSONResponseBody2Envs12Type$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace FilterProjectEnvsContentHintEnvsResponse200ApplicationJSONResponseBody2Envs12Type$ {
    /** @deprecated use `FilterProjectEnvsContentHintEnvsResponse200ApplicationJSONResponseBody2Envs12Type$inboundSchema` instead. */
    export const inboundSchema =
        FilterProjectEnvsContentHintEnvsResponse200ApplicationJSONResponseBody2Envs12Type$inboundSchema;
    /** @deprecated use `FilterProjectEnvsContentHintEnvsResponse200ApplicationJSONResponseBody2Envs12Type$outboundSchema` instead. */
    export const outboundSchema =
        FilterProjectEnvsContentHintEnvsResponse200ApplicationJSONResponseBody2Envs12Type$outboundSchema;
}

/** @internal */
export const FilterProjectEnvsContentHintEnvs12$inboundSchema: z.ZodType<
    FilterProjectEnvsContentHintEnvs12,
    z.ZodTypeDef,
    unknown
> = z.object({
    type: FilterProjectEnvsContentHintEnvsResponse200ApplicationJSONResponseBody2Envs12Type$inboundSchema,
    storeId: z.string(),
});

/** @internal */
export type FilterProjectEnvsContentHintEnvs12$Outbound = {
    type: string;
    storeId: string;
};

/** @internal */
export const FilterProjectEnvsContentHintEnvs12$outboundSchema: z.ZodType<
    FilterProjectEnvsContentHintEnvs12$Outbound,
    z.ZodTypeDef,
    FilterProjectEnvsContentHintEnvs12
> = z.object({
    type: FilterProjectEnvsContentHintEnvsResponse200ApplicationJSONResponseBody2Envs12Type$outboundSchema,
    storeId: z.string(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace FilterProjectEnvsContentHintEnvs12$ {
    /** @deprecated use `FilterProjectEnvsContentHintEnvs12$inboundSchema` instead. */
    export const inboundSchema = FilterProjectEnvsContentHintEnvs12$inboundSchema;
    /** @deprecated use `FilterProjectEnvsContentHintEnvs12$outboundSchema` instead. */
    export const outboundSchema = FilterProjectEnvsContentHintEnvs12$outboundSchema;
    /** @deprecated use `FilterProjectEnvsContentHintEnvs12$Outbound` instead. */
    export type Outbound = FilterProjectEnvsContentHintEnvs12$Outbound;
}

/** @internal */
export const FilterProjectEnvsContentHintEnvsResponse200ApplicationJSONResponseBody2Envs11Type$inboundSchema: z.ZodNativeEnum<
    typeof FilterProjectEnvsContentHintEnvsResponse200ApplicationJSONResponseBody2Envs11Type
> = z.nativeEnum(FilterProjectEnvsContentHintEnvsResponse200ApplicationJSONResponseBody2Envs11Type);

/** @internal */
export const FilterProjectEnvsContentHintEnvsResponse200ApplicationJSONResponseBody2Envs11Type$outboundSchema: z.ZodNativeEnum<
    typeof FilterProjectEnvsContentHintEnvsResponse200ApplicationJSONResponseBody2Envs11Type
> = FilterProjectEnvsContentHintEnvsResponse200ApplicationJSONResponseBody2Envs11Type$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace FilterProjectEnvsContentHintEnvsResponse200ApplicationJSONResponseBody2Envs11Type$ {
    /** @deprecated use `FilterProjectEnvsContentHintEnvsResponse200ApplicationJSONResponseBody2Envs11Type$inboundSchema` instead. */
    export const inboundSchema =
        FilterProjectEnvsContentHintEnvsResponse200ApplicationJSONResponseBody2Envs11Type$inboundSchema;
    /** @deprecated use `FilterProjectEnvsContentHintEnvsResponse200ApplicationJSONResponseBody2Envs11Type$outboundSchema` instead. */
    export const outboundSchema =
        FilterProjectEnvsContentHintEnvsResponse200ApplicationJSONResponseBody2Envs11Type$outboundSchema;
}

/** @internal */
export const FilterProjectEnvsContentHintEnvs11$inboundSchema: z.ZodType<
    FilterProjectEnvsContentHintEnvs11,
    z.ZodTypeDef,
    unknown
> = z.object({
    type: FilterProjectEnvsContentHintEnvsResponse200ApplicationJSONResponseBody2Envs11Type$inboundSchema,
    storeId: z.string(),
});

/** @internal */
export type FilterProjectEnvsContentHintEnvs11$Outbound = {
    type: string;
    storeId: string;
};

/** @internal */
export const FilterProjectEnvsContentHintEnvs11$outboundSchema: z.ZodType<
    FilterProjectEnvsContentHintEnvs11$Outbound,
    z.ZodTypeDef,
    FilterProjectEnvsContentHintEnvs11
> = z.object({
    type: FilterProjectEnvsContentHintEnvsResponse200ApplicationJSONResponseBody2Envs11Type$outboundSchema,
    storeId: z.string(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace FilterProjectEnvsContentHintEnvs11$ {
    /** @deprecated use `FilterProjectEnvsContentHintEnvs11$inboundSchema` instead. */
    export const inboundSchema = FilterProjectEnvsContentHintEnvs11$inboundSchema;
    /** @deprecated use `FilterProjectEnvsContentHintEnvs11$outboundSchema` instead. */
    export const outboundSchema = FilterProjectEnvsContentHintEnvs11$outboundSchema;
    /** @deprecated use `FilterProjectEnvsContentHintEnvs11$Outbound` instead. */
    export type Outbound = FilterProjectEnvsContentHintEnvs11$Outbound;
}

/** @internal */
export const FilterProjectEnvsContentHintEnvsResponse200ApplicationJSONResponseBody2Envs10Type$inboundSchema: z.ZodNativeEnum<
    typeof FilterProjectEnvsContentHintEnvsResponse200ApplicationJSONResponseBody2Envs10Type
> = z.nativeEnum(FilterProjectEnvsContentHintEnvsResponse200ApplicationJSONResponseBody2Envs10Type);

/** @internal */
export const FilterProjectEnvsContentHintEnvsResponse200ApplicationJSONResponseBody2Envs10Type$outboundSchema: z.ZodNativeEnum<
    typeof FilterProjectEnvsContentHintEnvsResponse200ApplicationJSONResponseBody2Envs10Type
> = FilterProjectEnvsContentHintEnvsResponse200ApplicationJSONResponseBody2Envs10Type$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace FilterProjectEnvsContentHintEnvsResponse200ApplicationJSONResponseBody2Envs10Type$ {
    /** @deprecated use `FilterProjectEnvsContentHintEnvsResponse200ApplicationJSONResponseBody2Envs10Type$inboundSchema` instead. */
    export const inboundSchema =
        FilterProjectEnvsContentHintEnvsResponse200ApplicationJSONResponseBody2Envs10Type$inboundSchema;
    /** @deprecated use `FilterProjectEnvsContentHintEnvsResponse200ApplicationJSONResponseBody2Envs10Type$outboundSchema` instead. */
    export const outboundSchema =
        FilterProjectEnvsContentHintEnvsResponse200ApplicationJSONResponseBody2Envs10Type$outboundSchema;
}

/** @internal */
export const FilterProjectEnvsContentHintEnvs10$inboundSchema: z.ZodType<
    FilterProjectEnvsContentHintEnvs10,
    z.ZodTypeDef,
    unknown
> = z.object({
    type: FilterProjectEnvsContentHintEnvsResponse200ApplicationJSONResponseBody2Envs10Type$inboundSchema,
    storeId: z.string(),
});

/** @internal */
export type FilterProjectEnvsContentHintEnvs10$Outbound = {
    type: string;
    storeId: string;
};

/** @internal */
export const FilterProjectEnvsContentHintEnvs10$outboundSchema: z.ZodType<
    FilterProjectEnvsContentHintEnvs10$Outbound,
    z.ZodTypeDef,
    FilterProjectEnvsContentHintEnvs10
> = z.object({
    type: FilterProjectEnvsContentHintEnvsResponse200ApplicationJSONResponseBody2Envs10Type$outboundSchema,
    storeId: z.string(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace FilterProjectEnvsContentHintEnvs10$ {
    /** @deprecated use `FilterProjectEnvsContentHintEnvs10$inboundSchema` instead. */
    export const inboundSchema = FilterProjectEnvsContentHintEnvs10$inboundSchema;
    /** @deprecated use `FilterProjectEnvsContentHintEnvs10$outboundSchema` instead. */
    export const outboundSchema = FilterProjectEnvsContentHintEnvs10$outboundSchema;
    /** @deprecated use `FilterProjectEnvsContentHintEnvs10$Outbound` instead. */
    export type Outbound = FilterProjectEnvsContentHintEnvs10$Outbound;
}

/** @internal */
export const FilterProjectEnvsContentHintEnvsResponse200ApplicationJSONResponseBody2Envs9Type$inboundSchema: z.ZodNativeEnum<
    typeof FilterProjectEnvsContentHintEnvsResponse200ApplicationJSONResponseBody2Envs9Type
> = z.nativeEnum(FilterProjectEnvsContentHintEnvsResponse200ApplicationJSONResponseBody2Envs9Type);

/** @internal */
export const FilterProjectEnvsContentHintEnvsResponse200ApplicationJSONResponseBody2Envs9Type$outboundSchema: z.ZodNativeEnum<
    typeof FilterProjectEnvsContentHintEnvsResponse200ApplicationJSONResponseBody2Envs9Type
> = FilterProjectEnvsContentHintEnvsResponse200ApplicationJSONResponseBody2Envs9Type$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace FilterProjectEnvsContentHintEnvsResponse200ApplicationJSONResponseBody2Envs9Type$ {
    /** @deprecated use `FilterProjectEnvsContentHintEnvsResponse200ApplicationJSONResponseBody2Envs9Type$inboundSchema` instead. */
    export const inboundSchema =
        FilterProjectEnvsContentHintEnvsResponse200ApplicationJSONResponseBody2Envs9Type$inboundSchema;
    /** @deprecated use `FilterProjectEnvsContentHintEnvsResponse200ApplicationJSONResponseBody2Envs9Type$outboundSchema` instead. */
    export const outboundSchema =
        FilterProjectEnvsContentHintEnvsResponse200ApplicationJSONResponseBody2Envs9Type$outboundSchema;
}

/** @internal */
export const FilterProjectEnvsContentHintEnvs9$inboundSchema: z.ZodType<
    FilterProjectEnvsContentHintEnvs9,
    z.ZodTypeDef,
    unknown
> = z.object({
    type: FilterProjectEnvsContentHintEnvsResponse200ApplicationJSONResponseBody2Envs9Type$inboundSchema,
    storeId: z.string(),
});

/** @internal */
export type FilterProjectEnvsContentHintEnvs9$Outbound = {
    type: string;
    storeId: string;
};

/** @internal */
export const FilterProjectEnvsContentHintEnvs9$outboundSchema: z.ZodType<
    FilterProjectEnvsContentHintEnvs9$Outbound,
    z.ZodTypeDef,
    FilterProjectEnvsContentHintEnvs9
> = z.object({
    type: FilterProjectEnvsContentHintEnvsResponse200ApplicationJSONResponseBody2Envs9Type$outboundSchema,
    storeId: z.string(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace FilterProjectEnvsContentHintEnvs9$ {
    /** @deprecated use `FilterProjectEnvsContentHintEnvs9$inboundSchema` instead. */
    export const inboundSchema = FilterProjectEnvsContentHintEnvs9$inboundSchema;
    /** @deprecated use `FilterProjectEnvsContentHintEnvs9$outboundSchema` instead. */
    export const outboundSchema = FilterProjectEnvsContentHintEnvs9$outboundSchema;
    /** @deprecated use `FilterProjectEnvsContentHintEnvs9$Outbound` instead. */
    export type Outbound = FilterProjectEnvsContentHintEnvs9$Outbound;
}

/** @internal */
export const FilterProjectEnvsContentHintEnvsResponse200ApplicationJSONResponseBody2Envs8Type$inboundSchema: z.ZodNativeEnum<
    typeof FilterProjectEnvsContentHintEnvsResponse200ApplicationJSONResponseBody2Envs8Type
> = z.nativeEnum(FilterProjectEnvsContentHintEnvsResponse200ApplicationJSONResponseBody2Envs8Type);

/** @internal */
export const FilterProjectEnvsContentHintEnvsResponse200ApplicationJSONResponseBody2Envs8Type$outboundSchema: z.ZodNativeEnum<
    typeof FilterProjectEnvsContentHintEnvsResponse200ApplicationJSONResponseBody2Envs8Type
> = FilterProjectEnvsContentHintEnvsResponse200ApplicationJSONResponseBody2Envs8Type$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace FilterProjectEnvsContentHintEnvsResponse200ApplicationJSONResponseBody2Envs8Type$ {
    /** @deprecated use `FilterProjectEnvsContentHintEnvsResponse200ApplicationJSONResponseBody2Envs8Type$inboundSchema` instead. */
    export const inboundSchema =
        FilterProjectEnvsContentHintEnvsResponse200ApplicationJSONResponseBody2Envs8Type$inboundSchema;
    /** @deprecated use `FilterProjectEnvsContentHintEnvsResponse200ApplicationJSONResponseBody2Envs8Type$outboundSchema` instead. */
    export const outboundSchema =
        FilterProjectEnvsContentHintEnvsResponse200ApplicationJSONResponseBody2Envs8Type$outboundSchema;
}

/** @internal */
export const FilterProjectEnvsContentHintEnvs8$inboundSchema: z.ZodType<
    FilterProjectEnvsContentHintEnvs8,
    z.ZodTypeDef,
    unknown
> = z.object({
    type: FilterProjectEnvsContentHintEnvsResponse200ApplicationJSONResponseBody2Envs8Type$inboundSchema,
    storeId: z.string(),
});

/** @internal */
export type FilterProjectEnvsContentHintEnvs8$Outbound = {
    type: string;
    storeId: string;
};

/** @internal */
export const FilterProjectEnvsContentHintEnvs8$outboundSchema: z.ZodType<
    FilterProjectEnvsContentHintEnvs8$Outbound,
    z.ZodTypeDef,
    FilterProjectEnvsContentHintEnvs8
> = z.object({
    type: FilterProjectEnvsContentHintEnvsResponse200ApplicationJSONResponseBody2Envs8Type$outboundSchema,
    storeId: z.string(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace FilterProjectEnvsContentHintEnvs8$ {
    /** @deprecated use `FilterProjectEnvsContentHintEnvs8$inboundSchema` instead. */
    export const inboundSchema = FilterProjectEnvsContentHintEnvs8$inboundSchema;
    /** @deprecated use `FilterProjectEnvsContentHintEnvs8$outboundSchema` instead. */
    export const outboundSchema = FilterProjectEnvsContentHintEnvs8$outboundSchema;
    /** @deprecated use `FilterProjectEnvsContentHintEnvs8$Outbound` instead. */
    export type Outbound = FilterProjectEnvsContentHintEnvs8$Outbound;
}

/** @internal */
export const FilterProjectEnvsContentHintEnvsResponse200ApplicationJSONResponseBody2Envs7Type$inboundSchema: z.ZodNativeEnum<
    typeof FilterProjectEnvsContentHintEnvsResponse200ApplicationJSONResponseBody2Envs7Type
> = z.nativeEnum(FilterProjectEnvsContentHintEnvsResponse200ApplicationJSONResponseBody2Envs7Type);

/** @internal */
export const FilterProjectEnvsContentHintEnvsResponse200ApplicationJSONResponseBody2Envs7Type$outboundSchema: z.ZodNativeEnum<
    typeof FilterProjectEnvsContentHintEnvsResponse200ApplicationJSONResponseBody2Envs7Type
> = FilterProjectEnvsContentHintEnvsResponse200ApplicationJSONResponseBody2Envs7Type$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace FilterProjectEnvsContentHintEnvsResponse200ApplicationJSONResponseBody2Envs7Type$ {
    /** @deprecated use `FilterProjectEnvsContentHintEnvsResponse200ApplicationJSONResponseBody2Envs7Type$inboundSchema` instead. */
    export const inboundSchema =
        FilterProjectEnvsContentHintEnvsResponse200ApplicationJSONResponseBody2Envs7Type$inboundSchema;
    /** @deprecated use `FilterProjectEnvsContentHintEnvsResponse200ApplicationJSONResponseBody2Envs7Type$outboundSchema` instead. */
    export const outboundSchema =
        FilterProjectEnvsContentHintEnvsResponse200ApplicationJSONResponseBody2Envs7Type$outboundSchema;
}

/** @internal */
export const FilterProjectEnvsContentHintEnvs7$inboundSchema: z.ZodType<
    FilterProjectEnvsContentHintEnvs7,
    z.ZodTypeDef,
    unknown
> = z.object({
    type: FilterProjectEnvsContentHintEnvsResponse200ApplicationJSONResponseBody2Envs7Type$inboundSchema,
    storeId: z.string(),
});

/** @internal */
export type FilterProjectEnvsContentHintEnvs7$Outbound = {
    type: string;
    storeId: string;
};

/** @internal */
export const FilterProjectEnvsContentHintEnvs7$outboundSchema: z.ZodType<
    FilterProjectEnvsContentHintEnvs7$Outbound,
    z.ZodTypeDef,
    FilterProjectEnvsContentHintEnvs7
> = z.object({
    type: FilterProjectEnvsContentHintEnvsResponse200ApplicationJSONResponseBody2Envs7Type$outboundSchema,
    storeId: z.string(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace FilterProjectEnvsContentHintEnvs7$ {
    /** @deprecated use `FilterProjectEnvsContentHintEnvs7$inboundSchema` instead. */
    export const inboundSchema = FilterProjectEnvsContentHintEnvs7$inboundSchema;
    /** @deprecated use `FilterProjectEnvsContentHintEnvs7$outboundSchema` instead. */
    export const outboundSchema = FilterProjectEnvsContentHintEnvs7$outboundSchema;
    /** @deprecated use `FilterProjectEnvsContentHintEnvs7$Outbound` instead. */
    export type Outbound = FilterProjectEnvsContentHintEnvs7$Outbound;
}

/** @internal */
export const FilterProjectEnvsContentHintEnvsResponse200ApplicationJSONResponseBody2Envs6Type$inboundSchema: z.ZodNativeEnum<
    typeof FilterProjectEnvsContentHintEnvsResponse200ApplicationJSONResponseBody2Envs6Type
> = z.nativeEnum(FilterProjectEnvsContentHintEnvsResponse200ApplicationJSONResponseBody2Envs6Type);

/** @internal */
export const FilterProjectEnvsContentHintEnvsResponse200ApplicationJSONResponseBody2Envs6Type$outboundSchema: z.ZodNativeEnum<
    typeof FilterProjectEnvsContentHintEnvsResponse200ApplicationJSONResponseBody2Envs6Type
> = FilterProjectEnvsContentHintEnvsResponse200ApplicationJSONResponseBody2Envs6Type$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace FilterProjectEnvsContentHintEnvsResponse200ApplicationJSONResponseBody2Envs6Type$ {
    /** @deprecated use `FilterProjectEnvsContentHintEnvsResponse200ApplicationJSONResponseBody2Envs6Type$inboundSchema` instead. */
    export const inboundSchema =
        FilterProjectEnvsContentHintEnvsResponse200ApplicationJSONResponseBody2Envs6Type$inboundSchema;
    /** @deprecated use `FilterProjectEnvsContentHintEnvsResponse200ApplicationJSONResponseBody2Envs6Type$outboundSchema` instead. */
    export const outboundSchema =
        FilterProjectEnvsContentHintEnvsResponse200ApplicationJSONResponseBody2Envs6Type$outboundSchema;
}

/** @internal */
export const FilterProjectEnvsContentHintEnvs6$inboundSchema: z.ZodType<
    FilterProjectEnvsContentHintEnvs6,
    z.ZodTypeDef,
    unknown
> = z.object({
    type: FilterProjectEnvsContentHintEnvsResponse200ApplicationJSONResponseBody2Envs6Type$inboundSchema,
    storeId: z.string(),
});

/** @internal */
export type FilterProjectEnvsContentHintEnvs6$Outbound = {
    type: string;
    storeId: string;
};

/** @internal */
export const FilterProjectEnvsContentHintEnvs6$outboundSchema: z.ZodType<
    FilterProjectEnvsContentHintEnvs6$Outbound,
    z.ZodTypeDef,
    FilterProjectEnvsContentHintEnvs6
> = z.object({
    type: FilterProjectEnvsContentHintEnvsResponse200ApplicationJSONResponseBody2Envs6Type$outboundSchema,
    storeId: z.string(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace FilterProjectEnvsContentHintEnvs6$ {
    /** @deprecated use `FilterProjectEnvsContentHintEnvs6$inboundSchema` instead. */
    export const inboundSchema = FilterProjectEnvsContentHintEnvs6$inboundSchema;
    /** @deprecated use `FilterProjectEnvsContentHintEnvs6$outboundSchema` instead. */
    export const outboundSchema = FilterProjectEnvsContentHintEnvs6$outboundSchema;
    /** @deprecated use `FilterProjectEnvsContentHintEnvs6$Outbound` instead. */
    export type Outbound = FilterProjectEnvsContentHintEnvs6$Outbound;
}

/** @internal */
export const FilterProjectEnvsContentHintEnvsResponse200ApplicationJSONResponseBody2Envs5Type$inboundSchema: z.ZodNativeEnum<
    typeof FilterProjectEnvsContentHintEnvsResponse200ApplicationJSONResponseBody2Envs5Type
> = z.nativeEnum(FilterProjectEnvsContentHintEnvsResponse200ApplicationJSONResponseBody2Envs5Type);

/** @internal */
export const FilterProjectEnvsContentHintEnvsResponse200ApplicationJSONResponseBody2Envs5Type$outboundSchema: z.ZodNativeEnum<
    typeof FilterProjectEnvsContentHintEnvsResponse200ApplicationJSONResponseBody2Envs5Type
> = FilterProjectEnvsContentHintEnvsResponse200ApplicationJSONResponseBody2Envs5Type$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace FilterProjectEnvsContentHintEnvsResponse200ApplicationJSONResponseBody2Envs5Type$ {
    /** @deprecated use `FilterProjectEnvsContentHintEnvsResponse200ApplicationJSONResponseBody2Envs5Type$inboundSchema` instead. */
    export const inboundSchema =
        FilterProjectEnvsContentHintEnvsResponse200ApplicationJSONResponseBody2Envs5Type$inboundSchema;
    /** @deprecated use `FilterProjectEnvsContentHintEnvsResponse200ApplicationJSONResponseBody2Envs5Type$outboundSchema` instead. */
    export const outboundSchema =
        FilterProjectEnvsContentHintEnvsResponse200ApplicationJSONResponseBody2Envs5Type$outboundSchema;
}

/** @internal */
export const FilterProjectEnvsContentHintEnvs5$inboundSchema: z.ZodType<
    FilterProjectEnvsContentHintEnvs5,
    z.ZodTypeDef,
    unknown
> = z.object({
    type: FilterProjectEnvsContentHintEnvsResponse200ApplicationJSONResponseBody2Envs5Type$inboundSchema,
    storeId: z.string(),
});

/** @internal */
export type FilterProjectEnvsContentHintEnvs5$Outbound = {
    type: string;
    storeId: string;
};

/** @internal */
export const FilterProjectEnvsContentHintEnvs5$outboundSchema: z.ZodType<
    FilterProjectEnvsContentHintEnvs5$Outbound,
    z.ZodTypeDef,
    FilterProjectEnvsContentHintEnvs5
> = z.object({
    type: FilterProjectEnvsContentHintEnvsResponse200ApplicationJSONResponseBody2Envs5Type$outboundSchema,
    storeId: z.string(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace FilterProjectEnvsContentHintEnvs5$ {
    /** @deprecated use `FilterProjectEnvsContentHintEnvs5$inboundSchema` instead. */
    export const inboundSchema = FilterProjectEnvsContentHintEnvs5$inboundSchema;
    /** @deprecated use `FilterProjectEnvsContentHintEnvs5$outboundSchema` instead. */
    export const outboundSchema = FilterProjectEnvsContentHintEnvs5$outboundSchema;
    /** @deprecated use `FilterProjectEnvsContentHintEnvs5$Outbound` instead. */
    export type Outbound = FilterProjectEnvsContentHintEnvs5$Outbound;
}

/** @internal */
export const FilterProjectEnvsContentHintEnvsResponse200ApplicationJSONResponseBody2Envs4Type$inboundSchema: z.ZodNativeEnum<
    typeof FilterProjectEnvsContentHintEnvsResponse200ApplicationJSONResponseBody2Envs4Type
> = z.nativeEnum(FilterProjectEnvsContentHintEnvsResponse200ApplicationJSONResponseBody2Envs4Type);

/** @internal */
export const FilterProjectEnvsContentHintEnvsResponse200ApplicationJSONResponseBody2Envs4Type$outboundSchema: z.ZodNativeEnum<
    typeof FilterProjectEnvsContentHintEnvsResponse200ApplicationJSONResponseBody2Envs4Type
> = FilterProjectEnvsContentHintEnvsResponse200ApplicationJSONResponseBody2Envs4Type$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace FilterProjectEnvsContentHintEnvsResponse200ApplicationJSONResponseBody2Envs4Type$ {
    /** @deprecated use `FilterProjectEnvsContentHintEnvsResponse200ApplicationJSONResponseBody2Envs4Type$inboundSchema` instead. */
    export const inboundSchema =
        FilterProjectEnvsContentHintEnvsResponse200ApplicationJSONResponseBody2Envs4Type$inboundSchema;
    /** @deprecated use `FilterProjectEnvsContentHintEnvsResponse200ApplicationJSONResponseBody2Envs4Type$outboundSchema` instead. */
    export const outboundSchema =
        FilterProjectEnvsContentHintEnvsResponse200ApplicationJSONResponseBody2Envs4Type$outboundSchema;
}

/** @internal */
export const FilterProjectEnvsContentHintEnvs4$inboundSchema: z.ZodType<
    FilterProjectEnvsContentHintEnvs4,
    z.ZodTypeDef,
    unknown
> = z.object({
    type: FilterProjectEnvsContentHintEnvsResponse200ApplicationJSONResponseBody2Envs4Type$inboundSchema,
    storeId: z.string(),
});

/** @internal */
export type FilterProjectEnvsContentHintEnvs4$Outbound = {
    type: string;
    storeId: string;
};

/** @internal */
export const FilterProjectEnvsContentHintEnvs4$outboundSchema: z.ZodType<
    FilterProjectEnvsContentHintEnvs4$Outbound,
    z.ZodTypeDef,
    FilterProjectEnvsContentHintEnvs4
> = z.object({
    type: FilterProjectEnvsContentHintEnvsResponse200ApplicationJSONResponseBody2Envs4Type$outboundSchema,
    storeId: z.string(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace FilterProjectEnvsContentHintEnvs4$ {
    /** @deprecated use `FilterProjectEnvsContentHintEnvs4$inboundSchema` instead. */
    export const inboundSchema = FilterProjectEnvsContentHintEnvs4$inboundSchema;
    /** @deprecated use `FilterProjectEnvsContentHintEnvs4$outboundSchema` instead. */
    export const outboundSchema = FilterProjectEnvsContentHintEnvs4$outboundSchema;
    /** @deprecated use `FilterProjectEnvsContentHintEnvs4$Outbound` instead. */
    export type Outbound = FilterProjectEnvsContentHintEnvs4$Outbound;
}

/** @internal */
export const FilterProjectEnvsContentHintEnvsResponse200ApplicationJSONResponseBody2Envs3Type$inboundSchema: z.ZodNativeEnum<
    typeof FilterProjectEnvsContentHintEnvsResponse200ApplicationJSONResponseBody2Envs3Type
> = z.nativeEnum(FilterProjectEnvsContentHintEnvsResponse200ApplicationJSONResponseBody2Envs3Type);

/** @internal */
export const FilterProjectEnvsContentHintEnvsResponse200ApplicationJSONResponseBody2Envs3Type$outboundSchema: z.ZodNativeEnum<
    typeof FilterProjectEnvsContentHintEnvsResponse200ApplicationJSONResponseBody2Envs3Type
> = FilterProjectEnvsContentHintEnvsResponse200ApplicationJSONResponseBody2Envs3Type$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace FilterProjectEnvsContentHintEnvsResponse200ApplicationJSONResponseBody2Envs3Type$ {
    /** @deprecated use `FilterProjectEnvsContentHintEnvsResponse200ApplicationJSONResponseBody2Envs3Type$inboundSchema` instead. */
    export const inboundSchema =
        FilterProjectEnvsContentHintEnvsResponse200ApplicationJSONResponseBody2Envs3Type$inboundSchema;
    /** @deprecated use `FilterProjectEnvsContentHintEnvsResponse200ApplicationJSONResponseBody2Envs3Type$outboundSchema` instead. */
    export const outboundSchema =
        FilterProjectEnvsContentHintEnvsResponse200ApplicationJSONResponseBody2Envs3Type$outboundSchema;
}

/** @internal */
export const FilterProjectEnvsContentHintEnvs3$inboundSchema: z.ZodType<
    FilterProjectEnvsContentHintEnvs3,
    z.ZodTypeDef,
    unknown
> = z.object({
    type: FilterProjectEnvsContentHintEnvsResponse200ApplicationJSONResponseBody2Envs3Type$inboundSchema,
    storeId: z.string(),
});

/** @internal */
export type FilterProjectEnvsContentHintEnvs3$Outbound = {
    type: string;
    storeId: string;
};

/** @internal */
export const FilterProjectEnvsContentHintEnvs3$outboundSchema: z.ZodType<
    FilterProjectEnvsContentHintEnvs3$Outbound,
    z.ZodTypeDef,
    FilterProjectEnvsContentHintEnvs3
> = z.object({
    type: FilterProjectEnvsContentHintEnvsResponse200ApplicationJSONResponseBody2Envs3Type$outboundSchema,
    storeId: z.string(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace FilterProjectEnvsContentHintEnvs3$ {
    /** @deprecated use `FilterProjectEnvsContentHintEnvs3$inboundSchema` instead. */
    export const inboundSchema = FilterProjectEnvsContentHintEnvs3$inboundSchema;
    /** @deprecated use `FilterProjectEnvsContentHintEnvs3$outboundSchema` instead. */
    export const outboundSchema = FilterProjectEnvsContentHintEnvs3$outboundSchema;
    /** @deprecated use `FilterProjectEnvsContentHintEnvs3$Outbound` instead. */
    export type Outbound = FilterProjectEnvsContentHintEnvs3$Outbound;
}

/** @internal */
export const FilterProjectEnvsContentHintEnvsResponse200ApplicationJSONResponseBody2EnvsType$inboundSchema: z.ZodNativeEnum<
    typeof FilterProjectEnvsContentHintEnvsResponse200ApplicationJSONResponseBody2EnvsType
> = z.nativeEnum(FilterProjectEnvsContentHintEnvsResponse200ApplicationJSONResponseBody2EnvsType);

/** @internal */
export const FilterProjectEnvsContentHintEnvsResponse200ApplicationJSONResponseBody2EnvsType$outboundSchema: z.ZodNativeEnum<
    typeof FilterProjectEnvsContentHintEnvsResponse200ApplicationJSONResponseBody2EnvsType
> = FilterProjectEnvsContentHintEnvsResponse200ApplicationJSONResponseBody2EnvsType$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace FilterProjectEnvsContentHintEnvsResponse200ApplicationJSONResponseBody2EnvsType$ {
    /** @deprecated use `FilterProjectEnvsContentHintEnvsResponse200ApplicationJSONResponseBody2EnvsType$inboundSchema` instead. */
    export const inboundSchema =
        FilterProjectEnvsContentHintEnvsResponse200ApplicationJSONResponseBody2EnvsType$inboundSchema;
    /** @deprecated use `FilterProjectEnvsContentHintEnvsResponse200ApplicationJSONResponseBody2EnvsType$outboundSchema` instead. */
    export const outboundSchema =
        FilterProjectEnvsContentHintEnvsResponse200ApplicationJSONResponseBody2EnvsType$outboundSchema;
}

/** @internal */
export const FilterProjectEnvsContentHintEnvs2$inboundSchema: z.ZodType<
    FilterProjectEnvsContentHintEnvs2,
    z.ZodTypeDef,
    unknown
> = z.object({
    type: FilterProjectEnvsContentHintEnvsResponse200ApplicationJSONResponseBody2EnvsType$inboundSchema,
    storeId: z.string(),
});

/** @internal */
export type FilterProjectEnvsContentHintEnvs2$Outbound = {
    type: string;
    storeId: string;
};

/** @internal */
export const FilterProjectEnvsContentHintEnvs2$outboundSchema: z.ZodType<
    FilterProjectEnvsContentHintEnvs2$Outbound,
    z.ZodTypeDef,
    FilterProjectEnvsContentHintEnvs2
> = z.object({
    type: FilterProjectEnvsContentHintEnvsResponse200ApplicationJSONResponseBody2EnvsType$outboundSchema,
    storeId: z.string(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace FilterProjectEnvsContentHintEnvs2$ {
    /** @deprecated use `FilterProjectEnvsContentHintEnvs2$inboundSchema` instead. */
    export const inboundSchema = FilterProjectEnvsContentHintEnvs2$inboundSchema;
    /** @deprecated use `FilterProjectEnvsContentHintEnvs2$outboundSchema` instead. */
    export const outboundSchema = FilterProjectEnvsContentHintEnvs2$outboundSchema;
    /** @deprecated use `FilterProjectEnvsContentHintEnvs2$Outbound` instead. */
    export type Outbound = FilterProjectEnvsContentHintEnvs2$Outbound;
}

/** @internal */
export const FilterProjectEnvsContentHintEnvsResponse200ApplicationJSONResponseBody2Type$inboundSchema: z.ZodNativeEnum<
    typeof FilterProjectEnvsContentHintEnvsResponse200ApplicationJSONResponseBody2Type
> = z.nativeEnum(FilterProjectEnvsContentHintEnvsResponse200ApplicationJSONResponseBody2Type);

/** @internal */
export const FilterProjectEnvsContentHintEnvsResponse200ApplicationJSONResponseBody2Type$outboundSchema: z.ZodNativeEnum<
    typeof FilterProjectEnvsContentHintEnvsResponse200ApplicationJSONResponseBody2Type
> = FilterProjectEnvsContentHintEnvsResponse200ApplicationJSONResponseBody2Type$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace FilterProjectEnvsContentHintEnvsResponse200ApplicationJSONResponseBody2Type$ {
    /** @deprecated use `FilterProjectEnvsContentHintEnvsResponse200ApplicationJSONResponseBody2Type$inboundSchema` instead. */
    export const inboundSchema =
        FilterProjectEnvsContentHintEnvsResponse200ApplicationJSONResponseBody2Type$inboundSchema;
    /** @deprecated use `FilterProjectEnvsContentHintEnvsResponse200ApplicationJSONResponseBody2Type$outboundSchema` instead. */
    export const outboundSchema =
        FilterProjectEnvsContentHintEnvsResponse200ApplicationJSONResponseBody2Type$outboundSchema;
}

/** @internal */
export const FilterProjectEnvsContentHintEnvs1$inboundSchema: z.ZodType<
    FilterProjectEnvsContentHintEnvs1,
    z.ZodTypeDef,
    unknown
> = z.object({
    type: FilterProjectEnvsContentHintEnvsResponse200ApplicationJSONResponseBody2Type$inboundSchema,
    storeId: z.string(),
});

/** @internal */
export type FilterProjectEnvsContentHintEnvs1$Outbound = {
    type: string;
    storeId: string;
};

/** @internal */
export const FilterProjectEnvsContentHintEnvs1$outboundSchema: z.ZodType<
    FilterProjectEnvsContentHintEnvs1$Outbound,
    z.ZodTypeDef,
    FilterProjectEnvsContentHintEnvs1
> = z.object({
    type: FilterProjectEnvsContentHintEnvsResponse200ApplicationJSONResponseBody2Type$outboundSchema,
    storeId: z.string(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace FilterProjectEnvsContentHintEnvs1$ {
    /** @deprecated use `FilterProjectEnvsContentHintEnvs1$inboundSchema` instead. */
    export const inboundSchema = FilterProjectEnvsContentHintEnvs1$inboundSchema;
    /** @deprecated use `FilterProjectEnvsContentHintEnvs1$outboundSchema` instead. */
    export const outboundSchema = FilterProjectEnvsContentHintEnvs1$outboundSchema;
    /** @deprecated use `FilterProjectEnvsContentHintEnvs1$Outbound` instead. */
    export type Outbound = FilterProjectEnvsContentHintEnvs1$Outbound;
}

/** @internal */
export const FilterProjectEnvsResponseBodyContentHint$inboundSchema: z.ZodType<
    FilterProjectEnvsResponseBodyContentHint,
    z.ZodTypeDef,
    unknown
> = z.union([
    z.lazy(() => FilterProjectEnvsContentHintEnvs1$inboundSchema),
    z.lazy(() => FilterProjectEnvsContentHintEnvs2$inboundSchema),
    z.lazy(() => FilterProjectEnvsContentHintEnvs3$inboundSchema),
    z.lazy(() => FilterProjectEnvsContentHintEnvs4$inboundSchema),
    z.lazy(() => FilterProjectEnvsContentHintEnvs5$inboundSchema),
    z.lazy(() => FilterProjectEnvsContentHintEnvs6$inboundSchema),
    z.lazy(() => FilterProjectEnvsContentHintEnvs7$inboundSchema),
    z.lazy(() => FilterProjectEnvsContentHintEnvs8$inboundSchema),
    z.lazy(() => FilterProjectEnvsContentHintEnvs9$inboundSchema),
    z.lazy(() => FilterProjectEnvsContentHintEnvs10$inboundSchema),
    z.lazy(() => FilterProjectEnvsContentHintEnvs11$inboundSchema),
    z.lazy(() => FilterProjectEnvsContentHintEnvs12$inboundSchema),
    z.lazy(() => FilterProjectEnvsContentHintEnvs13$inboundSchema),
    z.lazy(() => FilterProjectEnvsContentHintEnvs14$inboundSchema),
]);

/** @internal */
export type FilterProjectEnvsResponseBodyContentHint$Outbound =
    | FilterProjectEnvsContentHintEnvs1$Outbound
    | FilterProjectEnvsContentHintEnvs2$Outbound
    | FilterProjectEnvsContentHintEnvs3$Outbound
    | FilterProjectEnvsContentHintEnvs4$Outbound
    | FilterProjectEnvsContentHintEnvs5$Outbound
    | FilterProjectEnvsContentHintEnvs6$Outbound
    | FilterProjectEnvsContentHintEnvs7$Outbound
    | FilterProjectEnvsContentHintEnvs8$Outbound
    | FilterProjectEnvsContentHintEnvs9$Outbound
    | FilterProjectEnvsContentHintEnvs10$Outbound
    | FilterProjectEnvsContentHintEnvs11$Outbound
    | FilterProjectEnvsContentHintEnvs12$Outbound
    | FilterProjectEnvsContentHintEnvs13$Outbound
    | FilterProjectEnvsContentHintEnvs14$Outbound;

/** @internal */
export const FilterProjectEnvsResponseBodyContentHint$outboundSchema: z.ZodType<
    FilterProjectEnvsResponseBodyContentHint$Outbound,
    z.ZodTypeDef,
    FilterProjectEnvsResponseBodyContentHint
> = z.union([
    z.lazy(() => FilterProjectEnvsContentHintEnvs1$outboundSchema),
    z.lazy(() => FilterProjectEnvsContentHintEnvs2$outboundSchema),
    z.lazy(() => FilterProjectEnvsContentHintEnvs3$outboundSchema),
    z.lazy(() => FilterProjectEnvsContentHintEnvs4$outboundSchema),
    z.lazy(() => FilterProjectEnvsContentHintEnvs5$outboundSchema),
    z.lazy(() => FilterProjectEnvsContentHintEnvs6$outboundSchema),
    z.lazy(() => FilterProjectEnvsContentHintEnvs7$outboundSchema),
    z.lazy(() => FilterProjectEnvsContentHintEnvs8$outboundSchema),
    z.lazy(() => FilterProjectEnvsContentHintEnvs9$outboundSchema),
    z.lazy(() => FilterProjectEnvsContentHintEnvs10$outboundSchema),
    z.lazy(() => FilterProjectEnvsContentHintEnvs11$outboundSchema),
    z.lazy(() => FilterProjectEnvsContentHintEnvs12$outboundSchema),
    z.lazy(() => FilterProjectEnvsContentHintEnvs13$outboundSchema),
    z.lazy(() => FilterProjectEnvsContentHintEnvs14$outboundSchema),
]);

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace FilterProjectEnvsResponseBodyContentHint$ {
    /** @deprecated use `FilterProjectEnvsResponseBodyContentHint$inboundSchema` instead. */
    export const inboundSchema = FilterProjectEnvsResponseBodyContentHint$inboundSchema;
    /** @deprecated use `FilterProjectEnvsResponseBodyContentHint$outboundSchema` instead. */
    export const outboundSchema = FilterProjectEnvsResponseBodyContentHint$outboundSchema;
    /** @deprecated use `FilterProjectEnvsResponseBodyContentHint$Outbound` instead. */
    export type Outbound = FilterProjectEnvsResponseBodyContentHint$Outbound;
}

/** @internal */
export const FilterProjectEnvsResponseBodyEnvsResponse200ApplicationJSONType$inboundSchema: z.ZodNativeEnum<
    typeof FilterProjectEnvsResponseBodyEnvsResponse200ApplicationJSONType
> = z.nativeEnum(FilterProjectEnvsResponseBodyEnvsResponse200ApplicationJSONType);

/** @internal */
export const FilterProjectEnvsResponseBodyEnvsResponse200ApplicationJSONType$outboundSchema: z.ZodNativeEnum<
    typeof FilterProjectEnvsResponseBodyEnvsResponse200ApplicationJSONType
> = FilterProjectEnvsResponseBodyEnvsResponse200ApplicationJSONType$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace FilterProjectEnvsResponseBodyEnvsResponse200ApplicationJSONType$ {
    /** @deprecated use `FilterProjectEnvsResponseBodyEnvsResponse200ApplicationJSONType$inboundSchema` instead. */
    export const inboundSchema =
        FilterProjectEnvsResponseBodyEnvsResponse200ApplicationJSONType$inboundSchema;
    /** @deprecated use `FilterProjectEnvsResponseBodyEnvsResponse200ApplicationJSONType$outboundSchema` instead. */
    export const outboundSchema =
        FilterProjectEnvsResponseBodyEnvsResponse200ApplicationJSONType$outboundSchema;
}

/** @internal */
export const FilterProjectEnvsResponseBodyInternalContentHint$inboundSchema: z.ZodType<
    FilterProjectEnvsResponseBodyInternalContentHint,
    z.ZodTypeDef,
    unknown
> = z.object({
    type: FilterProjectEnvsResponseBodyEnvsResponse200ApplicationJSONType$inboundSchema,
    encryptedValue: z.string(),
});

/** @internal */
export type FilterProjectEnvsResponseBodyInternalContentHint$Outbound = {
    type: string;
    encryptedValue: string;
};

/** @internal */
export const FilterProjectEnvsResponseBodyInternalContentHint$outboundSchema: z.ZodType<
    FilterProjectEnvsResponseBodyInternalContentHint$Outbound,
    z.ZodTypeDef,
    FilterProjectEnvsResponseBodyInternalContentHint
> = z.object({
    type: FilterProjectEnvsResponseBodyEnvsResponse200ApplicationJSONType$outboundSchema,
    encryptedValue: z.string(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace FilterProjectEnvsResponseBodyInternalContentHint$ {
    /** @deprecated use `FilterProjectEnvsResponseBodyInternalContentHint$inboundSchema` instead. */
    export const inboundSchema = FilterProjectEnvsResponseBodyInternalContentHint$inboundSchema;
    /** @deprecated use `FilterProjectEnvsResponseBodyInternalContentHint$outboundSchema` instead. */
    export const outboundSchema = FilterProjectEnvsResponseBodyInternalContentHint$outboundSchema;
    /** @deprecated use `FilterProjectEnvsResponseBodyInternalContentHint$Outbound` instead. */
    export type Outbound = FilterProjectEnvsResponseBodyInternalContentHint$Outbound;
}

/** @internal */
export const FilterProjectEnvsResponseBodyEnvs$inboundSchema: z.ZodType<
    FilterProjectEnvsResponseBodyEnvs,
    z.ZodTypeDef,
    unknown
> = z.object({
    target: z
        .union([
            z.array(FilterProjectEnvsTargetEnvs1$inboundSchema),
            FilterProjectEnvsTargetEnvs2$inboundSchema,
        ])
        .optional(),
    type: FilterProjectEnvsResponseBodyEnvsResponseType$inboundSchema.optional(),
    sunsetSecretId: z.string().optional(),
    id: z.string().optional(),
    key: z.string().optional(),
    value: z.string().optional(),
    configurationId: z.nullable(z.string()).optional(),
    createdAt: z.number().optional(),
    updatedAt: z.number().optional(),
    createdBy: z.nullable(z.string()).optional(),
    updatedBy: z.nullable(z.string()).optional(),
    gitBranch: z.string().optional(),
    edgeConfigId: z.nullable(z.string()).optional(),
    edgeConfigTokenId: z.nullable(z.string()).optional(),
    contentHint: z
        .nullable(
            z.union([
                z.lazy(() => FilterProjectEnvsContentHintEnvs1$inboundSchema),
                z.lazy(() => FilterProjectEnvsContentHintEnvs2$inboundSchema),
                z.lazy(() => FilterProjectEnvsContentHintEnvs3$inboundSchema),
                z.lazy(() => FilterProjectEnvsContentHintEnvs4$inboundSchema),
                z.lazy(() => FilterProjectEnvsContentHintEnvs5$inboundSchema),
                z.lazy(() => FilterProjectEnvsContentHintEnvs6$inboundSchema),
                z.lazy(() => FilterProjectEnvsContentHintEnvs7$inboundSchema),
                z.lazy(() => FilterProjectEnvsContentHintEnvs8$inboundSchema),
                z.lazy(() => FilterProjectEnvsContentHintEnvs9$inboundSchema),
                z.lazy(() => FilterProjectEnvsContentHintEnvs10$inboundSchema),
                z.lazy(() => FilterProjectEnvsContentHintEnvs11$inboundSchema),
                z.lazy(() => FilterProjectEnvsContentHintEnvs12$inboundSchema),
                z.lazy(() => FilterProjectEnvsContentHintEnvs13$inboundSchema),
                z.lazy(() => FilterProjectEnvsContentHintEnvs14$inboundSchema),
            ])
        )
        .optional(),
    internalContentHint: z
        .nullable(z.lazy(() => FilterProjectEnvsResponseBodyInternalContentHint$inboundSchema))
        .optional(),
    decrypted: z.boolean().optional(),
    comment: z.string().optional(),
    customEnvironmentIds: z.array(z.string()).optional(),
    vsmValue: z.string().optional(),
    system: z.boolean().optional(),
});

/** @internal */
export type FilterProjectEnvsResponseBodyEnvs$Outbound = {
    target?: Array<string> | string | undefined;
    type?: string | undefined;
    sunsetSecretId?: string | undefined;
    id?: string | undefined;
    key?: string | undefined;
    value?: string | undefined;
    configurationId?: string | null | undefined;
    createdAt?: number | undefined;
    updatedAt?: number | undefined;
    createdBy?: string | null | undefined;
    updatedBy?: string | null | undefined;
    gitBranch?: string | undefined;
    edgeConfigId?: string | null | undefined;
    edgeConfigTokenId?: string | null | undefined;
    contentHint?:
        | FilterProjectEnvsContentHintEnvs1$Outbound
        | FilterProjectEnvsContentHintEnvs2$Outbound
        | FilterProjectEnvsContentHintEnvs3$Outbound
        | FilterProjectEnvsContentHintEnvs4$Outbound
        | FilterProjectEnvsContentHintEnvs5$Outbound
        | FilterProjectEnvsContentHintEnvs6$Outbound
        | FilterProjectEnvsContentHintEnvs7$Outbound
        | FilterProjectEnvsContentHintEnvs8$Outbound
        | FilterProjectEnvsContentHintEnvs9$Outbound
        | FilterProjectEnvsContentHintEnvs10$Outbound
        | FilterProjectEnvsContentHintEnvs11$Outbound
        | FilterProjectEnvsContentHintEnvs12$Outbound
        | FilterProjectEnvsContentHintEnvs13$Outbound
        | FilterProjectEnvsContentHintEnvs14$Outbound
        | null
        | undefined;
    internalContentHint?:
        | FilterProjectEnvsResponseBodyInternalContentHint$Outbound
        | null
        | undefined;
    decrypted?: boolean | undefined;
    comment?: string | undefined;
    customEnvironmentIds?: Array<string> | undefined;
    vsmValue?: string | undefined;
    system?: boolean | undefined;
};

/** @internal */
export const FilterProjectEnvsResponseBodyEnvs$outboundSchema: z.ZodType<
    FilterProjectEnvsResponseBodyEnvs$Outbound,
    z.ZodTypeDef,
    FilterProjectEnvsResponseBodyEnvs
> = z.object({
    target: z
        .union([
            z.array(FilterProjectEnvsTargetEnvs1$outboundSchema),
            FilterProjectEnvsTargetEnvs2$outboundSchema,
        ])
        .optional(),
    type: FilterProjectEnvsResponseBodyEnvsResponseType$outboundSchema.optional(),
    sunsetSecretId: z.string().optional(),
    id: z.string().optional(),
    key: z.string().optional(),
    value: z.string().optional(),
    configurationId: z.nullable(z.string()).optional(),
    createdAt: z.number().optional(),
    updatedAt: z.number().optional(),
    createdBy: z.nullable(z.string()).optional(),
    updatedBy: z.nullable(z.string()).optional(),
    gitBranch: z.string().optional(),
    edgeConfigId: z.nullable(z.string()).optional(),
    edgeConfigTokenId: z.nullable(z.string()).optional(),
    contentHint: z
        .nullable(
            z.union([
                z.lazy(() => FilterProjectEnvsContentHintEnvs1$outboundSchema),
                z.lazy(() => FilterProjectEnvsContentHintEnvs2$outboundSchema),
                z.lazy(() => FilterProjectEnvsContentHintEnvs3$outboundSchema),
                z.lazy(() => FilterProjectEnvsContentHintEnvs4$outboundSchema),
                z.lazy(() => FilterProjectEnvsContentHintEnvs5$outboundSchema),
                z.lazy(() => FilterProjectEnvsContentHintEnvs6$outboundSchema),
                z.lazy(() => FilterProjectEnvsContentHintEnvs7$outboundSchema),
                z.lazy(() => FilterProjectEnvsContentHintEnvs8$outboundSchema),
                z.lazy(() => FilterProjectEnvsContentHintEnvs9$outboundSchema),
                z.lazy(() => FilterProjectEnvsContentHintEnvs10$outboundSchema),
                z.lazy(() => FilterProjectEnvsContentHintEnvs11$outboundSchema),
                z.lazy(() => FilterProjectEnvsContentHintEnvs12$outboundSchema),
                z.lazy(() => FilterProjectEnvsContentHintEnvs13$outboundSchema),
                z.lazy(() => FilterProjectEnvsContentHintEnvs14$outboundSchema),
            ])
        )
        .optional(),
    internalContentHint: z
        .nullable(z.lazy(() => FilterProjectEnvsResponseBodyInternalContentHint$outboundSchema))
        .optional(),
    decrypted: z.boolean().optional(),
    comment: z.string().optional(),
    customEnvironmentIds: z.array(z.string()).optional(),
    vsmValue: z.string().optional(),
    system: z.boolean().optional(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace FilterProjectEnvsResponseBodyEnvs$ {
    /** @deprecated use `FilterProjectEnvsResponseBodyEnvs$inboundSchema` instead. */
    export const inboundSchema = FilterProjectEnvsResponseBodyEnvs$inboundSchema;
    /** @deprecated use `FilterProjectEnvsResponseBodyEnvs$outboundSchema` instead. */
    export const outboundSchema = FilterProjectEnvsResponseBodyEnvs$outboundSchema;
    /** @deprecated use `FilterProjectEnvsResponseBodyEnvs$Outbound` instead. */
    export type Outbound = FilterProjectEnvsResponseBodyEnvs$Outbound;
}

/** @internal */
export const FilterProjectEnvsResponseBody2$inboundSchema: z.ZodType<
    FilterProjectEnvsResponseBody2,
    z.ZodTypeDef,
    unknown
> = z.object({
    envs: z.array(z.lazy(() => FilterProjectEnvsResponseBodyEnvs$inboundSchema)),
    pagination: Pagination$inboundSchema,
});

/** @internal */
export type FilterProjectEnvsResponseBody2$Outbound = {
    envs: Array<FilterProjectEnvsResponseBodyEnvs$Outbound>;
    pagination: Pagination$Outbound;
};

/** @internal */
export const FilterProjectEnvsResponseBody2$outboundSchema: z.ZodType<
    FilterProjectEnvsResponseBody2$Outbound,
    z.ZodTypeDef,
    FilterProjectEnvsResponseBody2
> = z.object({
    envs: z.array(z.lazy(() => FilterProjectEnvsResponseBodyEnvs$outboundSchema)),
    pagination: Pagination$outboundSchema,
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace FilterProjectEnvsResponseBody2$ {
    /** @deprecated use `FilterProjectEnvsResponseBody2$inboundSchema` instead. */
    export const inboundSchema = FilterProjectEnvsResponseBody2$inboundSchema;
    /** @deprecated use `FilterProjectEnvsResponseBody2$outboundSchema` instead. */
    export const outboundSchema = FilterProjectEnvsResponseBody2$outboundSchema;
    /** @deprecated use `FilterProjectEnvsResponseBody2$Outbound` instead. */
    export type Outbound = FilterProjectEnvsResponseBody2$Outbound;
}

/** @internal */
export const FilterProjectEnvsTarget2$inboundSchema: z.ZodNativeEnum<
    typeof FilterProjectEnvsTarget2
> = z.nativeEnum(FilterProjectEnvsTarget2);

/** @internal */
export const FilterProjectEnvsTarget2$outboundSchema: z.ZodNativeEnum<
    typeof FilterProjectEnvsTarget2
> = FilterProjectEnvsTarget2$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace FilterProjectEnvsTarget2$ {
    /** @deprecated use `FilterProjectEnvsTarget2$inboundSchema` instead. */
    export const inboundSchema = FilterProjectEnvsTarget2$inboundSchema;
    /** @deprecated use `FilterProjectEnvsTarget2$outboundSchema` instead. */
    export const outboundSchema = FilterProjectEnvsTarget2$outboundSchema;
}

/** @internal */
export const FilterProjectEnvsTarget1$inboundSchema: z.ZodNativeEnum<
    typeof FilterProjectEnvsTarget1
> = z.nativeEnum(FilterProjectEnvsTarget1);

/** @internal */
export const FilterProjectEnvsTarget1$outboundSchema: z.ZodNativeEnum<
    typeof FilterProjectEnvsTarget1
> = FilterProjectEnvsTarget1$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace FilterProjectEnvsTarget1$ {
    /** @deprecated use `FilterProjectEnvsTarget1$inboundSchema` instead. */
    export const inboundSchema = FilterProjectEnvsTarget1$inboundSchema;
    /** @deprecated use `FilterProjectEnvsTarget1$outboundSchema` instead. */
    export const outboundSchema = FilterProjectEnvsTarget1$outboundSchema;
}

/** @internal */
export const FilterProjectEnvsResponseBodyTarget$inboundSchema: z.ZodType<
    FilterProjectEnvsResponseBodyTarget,
    z.ZodTypeDef,
    unknown
> = z.union([
    z.array(FilterProjectEnvsTarget1$inboundSchema),
    FilterProjectEnvsTarget2$inboundSchema,
]);

/** @internal */
export type FilterProjectEnvsResponseBodyTarget$Outbound = Array<string> | string;

/** @internal */
export const FilterProjectEnvsResponseBodyTarget$outboundSchema: z.ZodType<
    FilterProjectEnvsResponseBodyTarget$Outbound,
    z.ZodTypeDef,
    FilterProjectEnvsResponseBodyTarget
> = z.union([
    z.array(FilterProjectEnvsTarget1$outboundSchema),
    FilterProjectEnvsTarget2$outboundSchema,
]);

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace FilterProjectEnvsResponseBodyTarget$ {
    /** @deprecated use `FilterProjectEnvsResponseBodyTarget$inboundSchema` instead. */
    export const inboundSchema = FilterProjectEnvsResponseBodyTarget$inboundSchema;
    /** @deprecated use `FilterProjectEnvsResponseBodyTarget$outboundSchema` instead. */
    export const outboundSchema = FilterProjectEnvsResponseBodyTarget$outboundSchema;
    /** @deprecated use `FilterProjectEnvsResponseBodyTarget$Outbound` instead. */
    export type Outbound = FilterProjectEnvsResponseBodyTarget$Outbound;
}

/** @internal */
export const FilterProjectEnvsResponseBodyType$inboundSchema: z.ZodNativeEnum<
    typeof FilterProjectEnvsResponseBodyType
> = z.nativeEnum(FilterProjectEnvsResponseBodyType);

/** @internal */
export const FilterProjectEnvsResponseBodyType$outboundSchema: z.ZodNativeEnum<
    typeof FilterProjectEnvsResponseBodyType
> = FilterProjectEnvsResponseBodyType$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace FilterProjectEnvsResponseBodyType$ {
    /** @deprecated use `FilterProjectEnvsResponseBodyType$inboundSchema` instead. */
    export const inboundSchema = FilterProjectEnvsResponseBodyType$inboundSchema;
    /** @deprecated use `FilterProjectEnvsResponseBodyType$outboundSchema` instead. */
    export const outboundSchema = FilterProjectEnvsResponseBodyType$outboundSchema;
}

/** @internal */
export const FilterProjectEnvsContentHintEnvsResponse200ApplicationJSONResponseBody114Type$inboundSchema: z.ZodNativeEnum<
    typeof FilterProjectEnvsContentHintEnvsResponse200ApplicationJSONResponseBody114Type
> = z.nativeEnum(FilterProjectEnvsContentHintEnvsResponse200ApplicationJSONResponseBody114Type);

/** @internal */
export const FilterProjectEnvsContentHintEnvsResponse200ApplicationJSONResponseBody114Type$outboundSchema: z.ZodNativeEnum<
    typeof FilterProjectEnvsContentHintEnvsResponse200ApplicationJSONResponseBody114Type
> = FilterProjectEnvsContentHintEnvsResponse200ApplicationJSONResponseBody114Type$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace FilterProjectEnvsContentHintEnvsResponse200ApplicationJSONResponseBody114Type$ {
    /** @deprecated use `FilterProjectEnvsContentHintEnvsResponse200ApplicationJSONResponseBody114Type$inboundSchema` instead. */
    export const inboundSchema =
        FilterProjectEnvsContentHintEnvsResponse200ApplicationJSONResponseBody114Type$inboundSchema;
    /** @deprecated use `FilterProjectEnvsContentHintEnvsResponse200ApplicationJSONResponseBody114Type$outboundSchema` instead. */
    export const outboundSchema =
        FilterProjectEnvsContentHintEnvsResponse200ApplicationJSONResponseBody114Type$outboundSchema;
}

/** @internal */
export const FilterProjectEnvsContentHint14$inboundSchema: z.ZodType<
    FilterProjectEnvsContentHint14,
    z.ZodTypeDef,
    unknown
> = z.object({
    type: FilterProjectEnvsContentHintEnvsResponse200ApplicationJSONResponseBody114Type$inboundSchema,
    storeId: z.string(),
    integrationId: z.string(),
    integrationProductId: z.string(),
    integrationConfigurationId: z.string(),
});

/** @internal */
export type FilterProjectEnvsContentHint14$Outbound = {
    type: string;
    storeId: string;
    integrationId: string;
    integrationProductId: string;
    integrationConfigurationId: string;
};

/** @internal */
export const FilterProjectEnvsContentHint14$outboundSchema: z.ZodType<
    FilterProjectEnvsContentHint14$Outbound,
    z.ZodTypeDef,
    FilterProjectEnvsContentHint14
> = z.object({
    type: FilterProjectEnvsContentHintEnvsResponse200ApplicationJSONResponseBody114Type$outboundSchema,
    storeId: z.string(),
    integrationId: z.string(),
    integrationProductId: z.string(),
    integrationConfigurationId: z.string(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace FilterProjectEnvsContentHint14$ {
    /** @deprecated use `FilterProjectEnvsContentHint14$inboundSchema` instead. */
    export const inboundSchema = FilterProjectEnvsContentHint14$inboundSchema;
    /** @deprecated use `FilterProjectEnvsContentHint14$outboundSchema` instead. */
    export const outboundSchema = FilterProjectEnvsContentHint14$outboundSchema;
    /** @deprecated use `FilterProjectEnvsContentHint14$Outbound` instead. */
    export type Outbound = FilterProjectEnvsContentHint14$Outbound;
}

/** @internal */
export const FilterProjectEnvsContentHintEnvsResponse200ApplicationJSONResponseBody113Type$inboundSchema: z.ZodNativeEnum<
    typeof FilterProjectEnvsContentHintEnvsResponse200ApplicationJSONResponseBody113Type
> = z.nativeEnum(FilterProjectEnvsContentHintEnvsResponse200ApplicationJSONResponseBody113Type);

/** @internal */
export const FilterProjectEnvsContentHintEnvsResponse200ApplicationJSONResponseBody113Type$outboundSchema: z.ZodNativeEnum<
    typeof FilterProjectEnvsContentHintEnvsResponse200ApplicationJSONResponseBody113Type
> = FilterProjectEnvsContentHintEnvsResponse200ApplicationJSONResponseBody113Type$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace FilterProjectEnvsContentHintEnvsResponse200ApplicationJSONResponseBody113Type$ {
    /** @deprecated use `FilterProjectEnvsContentHintEnvsResponse200ApplicationJSONResponseBody113Type$inboundSchema` instead. */
    export const inboundSchema =
        FilterProjectEnvsContentHintEnvsResponse200ApplicationJSONResponseBody113Type$inboundSchema;
    /** @deprecated use `FilterProjectEnvsContentHintEnvsResponse200ApplicationJSONResponseBody113Type$outboundSchema` instead. */
    export const outboundSchema =
        FilterProjectEnvsContentHintEnvsResponse200ApplicationJSONResponseBody113Type$outboundSchema;
}

/** @internal */
export const FilterProjectEnvsContentHint13$inboundSchema: z.ZodType<
    FilterProjectEnvsContentHint13,
    z.ZodTypeDef,
    unknown
> = z.object({
    type: FilterProjectEnvsContentHintEnvsResponse200ApplicationJSONResponseBody113Type$inboundSchema,
    storeId: z.string(),
});

/** @internal */
export type FilterProjectEnvsContentHint13$Outbound = {
    type: string;
    storeId: string;
};

/** @internal */
export const FilterProjectEnvsContentHint13$outboundSchema: z.ZodType<
    FilterProjectEnvsContentHint13$Outbound,
    z.ZodTypeDef,
    FilterProjectEnvsContentHint13
> = z.object({
    type: FilterProjectEnvsContentHintEnvsResponse200ApplicationJSONResponseBody113Type$outboundSchema,
    storeId: z.string(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace FilterProjectEnvsContentHint13$ {
    /** @deprecated use `FilterProjectEnvsContentHint13$inboundSchema` instead. */
    export const inboundSchema = FilterProjectEnvsContentHint13$inboundSchema;
    /** @deprecated use `FilterProjectEnvsContentHint13$outboundSchema` instead. */
    export const outboundSchema = FilterProjectEnvsContentHint13$outboundSchema;
    /** @deprecated use `FilterProjectEnvsContentHint13$Outbound` instead. */
    export type Outbound = FilterProjectEnvsContentHint13$Outbound;
}

/** @internal */
export const FilterProjectEnvsContentHintEnvsResponse200ApplicationJSONResponseBody112Type$inboundSchema: z.ZodNativeEnum<
    typeof FilterProjectEnvsContentHintEnvsResponse200ApplicationJSONResponseBody112Type
> = z.nativeEnum(FilterProjectEnvsContentHintEnvsResponse200ApplicationJSONResponseBody112Type);

/** @internal */
export const FilterProjectEnvsContentHintEnvsResponse200ApplicationJSONResponseBody112Type$outboundSchema: z.ZodNativeEnum<
    typeof FilterProjectEnvsContentHintEnvsResponse200ApplicationJSONResponseBody112Type
> = FilterProjectEnvsContentHintEnvsResponse200ApplicationJSONResponseBody112Type$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace FilterProjectEnvsContentHintEnvsResponse200ApplicationJSONResponseBody112Type$ {
    /** @deprecated use `FilterProjectEnvsContentHintEnvsResponse200ApplicationJSONResponseBody112Type$inboundSchema` instead. */
    export const inboundSchema =
        FilterProjectEnvsContentHintEnvsResponse200ApplicationJSONResponseBody112Type$inboundSchema;
    /** @deprecated use `FilterProjectEnvsContentHintEnvsResponse200ApplicationJSONResponseBody112Type$outboundSchema` instead. */
    export const outboundSchema =
        FilterProjectEnvsContentHintEnvsResponse200ApplicationJSONResponseBody112Type$outboundSchema;
}

/** @internal */
export const FilterProjectEnvsContentHint12$inboundSchema: z.ZodType<
    FilterProjectEnvsContentHint12,
    z.ZodTypeDef,
    unknown
> = z.object({
    type: FilterProjectEnvsContentHintEnvsResponse200ApplicationJSONResponseBody112Type$inboundSchema,
    storeId: z.string(),
});

/** @internal */
export type FilterProjectEnvsContentHint12$Outbound = {
    type: string;
    storeId: string;
};

/** @internal */
export const FilterProjectEnvsContentHint12$outboundSchema: z.ZodType<
    FilterProjectEnvsContentHint12$Outbound,
    z.ZodTypeDef,
    FilterProjectEnvsContentHint12
> = z.object({
    type: FilterProjectEnvsContentHintEnvsResponse200ApplicationJSONResponseBody112Type$outboundSchema,
    storeId: z.string(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace FilterProjectEnvsContentHint12$ {
    /** @deprecated use `FilterProjectEnvsContentHint12$inboundSchema` instead. */
    export const inboundSchema = FilterProjectEnvsContentHint12$inboundSchema;
    /** @deprecated use `FilterProjectEnvsContentHint12$outboundSchema` instead. */
    export const outboundSchema = FilterProjectEnvsContentHint12$outboundSchema;
    /** @deprecated use `FilterProjectEnvsContentHint12$Outbound` instead. */
    export type Outbound = FilterProjectEnvsContentHint12$Outbound;
}

/** @internal */
export const FilterProjectEnvsContentHintEnvsResponse200ApplicationJSONResponseBody111Type$inboundSchema: z.ZodNativeEnum<
    typeof FilterProjectEnvsContentHintEnvsResponse200ApplicationJSONResponseBody111Type
> = z.nativeEnum(FilterProjectEnvsContentHintEnvsResponse200ApplicationJSONResponseBody111Type);

/** @internal */
export const FilterProjectEnvsContentHintEnvsResponse200ApplicationJSONResponseBody111Type$outboundSchema: z.ZodNativeEnum<
    typeof FilterProjectEnvsContentHintEnvsResponse200ApplicationJSONResponseBody111Type
> = FilterProjectEnvsContentHintEnvsResponse200ApplicationJSONResponseBody111Type$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace FilterProjectEnvsContentHintEnvsResponse200ApplicationJSONResponseBody111Type$ {
    /** @deprecated use `FilterProjectEnvsContentHintEnvsResponse200ApplicationJSONResponseBody111Type$inboundSchema` instead. */
    export const inboundSchema =
        FilterProjectEnvsContentHintEnvsResponse200ApplicationJSONResponseBody111Type$inboundSchema;
    /** @deprecated use `FilterProjectEnvsContentHintEnvsResponse200ApplicationJSONResponseBody111Type$outboundSchema` instead. */
    export const outboundSchema =
        FilterProjectEnvsContentHintEnvsResponse200ApplicationJSONResponseBody111Type$outboundSchema;
}

/** @internal */
export const FilterProjectEnvsContentHint11$inboundSchema: z.ZodType<
    FilterProjectEnvsContentHint11,
    z.ZodTypeDef,
    unknown
> = z.object({
    type: FilterProjectEnvsContentHintEnvsResponse200ApplicationJSONResponseBody111Type$inboundSchema,
    storeId: z.string(),
});

/** @internal */
export type FilterProjectEnvsContentHint11$Outbound = {
    type: string;
    storeId: string;
};

/** @internal */
export const FilterProjectEnvsContentHint11$outboundSchema: z.ZodType<
    FilterProjectEnvsContentHint11$Outbound,
    z.ZodTypeDef,
    FilterProjectEnvsContentHint11
> = z.object({
    type: FilterProjectEnvsContentHintEnvsResponse200ApplicationJSONResponseBody111Type$outboundSchema,
    storeId: z.string(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace FilterProjectEnvsContentHint11$ {
    /** @deprecated use `FilterProjectEnvsContentHint11$inboundSchema` instead. */
    export const inboundSchema = FilterProjectEnvsContentHint11$inboundSchema;
    /** @deprecated use `FilterProjectEnvsContentHint11$outboundSchema` instead. */
    export const outboundSchema = FilterProjectEnvsContentHint11$outboundSchema;
    /** @deprecated use `FilterProjectEnvsContentHint11$Outbound` instead. */
    export type Outbound = FilterProjectEnvsContentHint11$Outbound;
}

/** @internal */
export const FilterProjectEnvsContentHintEnvsResponse200ApplicationJSONResponseBody110Type$inboundSchema: z.ZodNativeEnum<
    typeof FilterProjectEnvsContentHintEnvsResponse200ApplicationJSONResponseBody110Type
> = z.nativeEnum(FilterProjectEnvsContentHintEnvsResponse200ApplicationJSONResponseBody110Type);

/** @internal */
export const FilterProjectEnvsContentHintEnvsResponse200ApplicationJSONResponseBody110Type$outboundSchema: z.ZodNativeEnum<
    typeof FilterProjectEnvsContentHintEnvsResponse200ApplicationJSONResponseBody110Type
> = FilterProjectEnvsContentHintEnvsResponse200ApplicationJSONResponseBody110Type$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace FilterProjectEnvsContentHintEnvsResponse200ApplicationJSONResponseBody110Type$ {
    /** @deprecated use `FilterProjectEnvsContentHintEnvsResponse200ApplicationJSONResponseBody110Type$inboundSchema` instead. */
    export const inboundSchema =
        FilterProjectEnvsContentHintEnvsResponse200ApplicationJSONResponseBody110Type$inboundSchema;
    /** @deprecated use `FilterProjectEnvsContentHintEnvsResponse200ApplicationJSONResponseBody110Type$outboundSchema` instead. */
    export const outboundSchema =
        FilterProjectEnvsContentHintEnvsResponse200ApplicationJSONResponseBody110Type$outboundSchema;
}

/** @internal */
export const FilterProjectEnvsContentHint10$inboundSchema: z.ZodType<
    FilterProjectEnvsContentHint10,
    z.ZodTypeDef,
    unknown
> = z.object({
    type: FilterProjectEnvsContentHintEnvsResponse200ApplicationJSONResponseBody110Type$inboundSchema,
    storeId: z.string(),
});

/** @internal */
export type FilterProjectEnvsContentHint10$Outbound = {
    type: string;
    storeId: string;
};

/** @internal */
export const FilterProjectEnvsContentHint10$outboundSchema: z.ZodType<
    FilterProjectEnvsContentHint10$Outbound,
    z.ZodTypeDef,
    FilterProjectEnvsContentHint10
> = z.object({
    type: FilterProjectEnvsContentHintEnvsResponse200ApplicationJSONResponseBody110Type$outboundSchema,
    storeId: z.string(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace FilterProjectEnvsContentHint10$ {
    /** @deprecated use `FilterProjectEnvsContentHint10$inboundSchema` instead. */
    export const inboundSchema = FilterProjectEnvsContentHint10$inboundSchema;
    /** @deprecated use `FilterProjectEnvsContentHint10$outboundSchema` instead. */
    export const outboundSchema = FilterProjectEnvsContentHint10$outboundSchema;
    /** @deprecated use `FilterProjectEnvsContentHint10$Outbound` instead. */
    export type Outbound = FilterProjectEnvsContentHint10$Outbound;
}

/** @internal */
export const FilterProjectEnvsContentHintEnvsResponse200ApplicationJSONResponseBody19Type$inboundSchema: z.ZodNativeEnum<
    typeof FilterProjectEnvsContentHintEnvsResponse200ApplicationJSONResponseBody19Type
> = z.nativeEnum(FilterProjectEnvsContentHintEnvsResponse200ApplicationJSONResponseBody19Type);

/** @internal */
export const FilterProjectEnvsContentHintEnvsResponse200ApplicationJSONResponseBody19Type$outboundSchema: z.ZodNativeEnum<
    typeof FilterProjectEnvsContentHintEnvsResponse200ApplicationJSONResponseBody19Type
> = FilterProjectEnvsContentHintEnvsResponse200ApplicationJSONResponseBody19Type$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace FilterProjectEnvsContentHintEnvsResponse200ApplicationJSONResponseBody19Type$ {
    /** @deprecated use `FilterProjectEnvsContentHintEnvsResponse200ApplicationJSONResponseBody19Type$inboundSchema` instead. */
    export const inboundSchema =
        FilterProjectEnvsContentHintEnvsResponse200ApplicationJSONResponseBody19Type$inboundSchema;
    /** @deprecated use `FilterProjectEnvsContentHintEnvsResponse200ApplicationJSONResponseBody19Type$outboundSchema` instead. */
    export const outboundSchema =
        FilterProjectEnvsContentHintEnvsResponse200ApplicationJSONResponseBody19Type$outboundSchema;
}

/** @internal */
export const FilterProjectEnvsContentHint9$inboundSchema: z.ZodType<
    FilterProjectEnvsContentHint9,
    z.ZodTypeDef,
    unknown
> = z.object({
    type: FilterProjectEnvsContentHintEnvsResponse200ApplicationJSONResponseBody19Type$inboundSchema,
    storeId: z.string(),
});

/** @internal */
export type FilterProjectEnvsContentHint9$Outbound = {
    type: string;
    storeId: string;
};

/** @internal */
export const FilterProjectEnvsContentHint9$outboundSchema: z.ZodType<
    FilterProjectEnvsContentHint9$Outbound,
    z.ZodTypeDef,
    FilterProjectEnvsContentHint9
> = z.object({
    type: FilterProjectEnvsContentHintEnvsResponse200ApplicationJSONResponseBody19Type$outboundSchema,
    storeId: z.string(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace FilterProjectEnvsContentHint9$ {
    /** @deprecated use `FilterProjectEnvsContentHint9$inboundSchema` instead. */
    export const inboundSchema = FilterProjectEnvsContentHint9$inboundSchema;
    /** @deprecated use `FilterProjectEnvsContentHint9$outboundSchema` instead. */
    export const outboundSchema = FilterProjectEnvsContentHint9$outboundSchema;
    /** @deprecated use `FilterProjectEnvsContentHint9$Outbound` instead. */
    export type Outbound = FilterProjectEnvsContentHint9$Outbound;
}

/** @internal */
export const FilterProjectEnvsContentHintEnvsResponse200ApplicationJSONResponseBody18Type$inboundSchema: z.ZodNativeEnum<
    typeof FilterProjectEnvsContentHintEnvsResponse200ApplicationJSONResponseBody18Type
> = z.nativeEnum(FilterProjectEnvsContentHintEnvsResponse200ApplicationJSONResponseBody18Type);

/** @internal */
export const FilterProjectEnvsContentHintEnvsResponse200ApplicationJSONResponseBody18Type$outboundSchema: z.ZodNativeEnum<
    typeof FilterProjectEnvsContentHintEnvsResponse200ApplicationJSONResponseBody18Type
> = FilterProjectEnvsContentHintEnvsResponse200ApplicationJSONResponseBody18Type$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace FilterProjectEnvsContentHintEnvsResponse200ApplicationJSONResponseBody18Type$ {
    /** @deprecated use `FilterProjectEnvsContentHintEnvsResponse200ApplicationJSONResponseBody18Type$inboundSchema` instead. */
    export const inboundSchema =
        FilterProjectEnvsContentHintEnvsResponse200ApplicationJSONResponseBody18Type$inboundSchema;
    /** @deprecated use `FilterProjectEnvsContentHintEnvsResponse200ApplicationJSONResponseBody18Type$outboundSchema` instead. */
    export const outboundSchema =
        FilterProjectEnvsContentHintEnvsResponse200ApplicationJSONResponseBody18Type$outboundSchema;
}

/** @internal */
export const FilterProjectEnvsContentHint8$inboundSchema: z.ZodType<
    FilterProjectEnvsContentHint8,
    z.ZodTypeDef,
    unknown
> = z.object({
    type: FilterProjectEnvsContentHintEnvsResponse200ApplicationJSONResponseBody18Type$inboundSchema,
    storeId: z.string(),
});

/** @internal */
export type FilterProjectEnvsContentHint8$Outbound = {
    type: string;
    storeId: string;
};

/** @internal */
export const FilterProjectEnvsContentHint8$outboundSchema: z.ZodType<
    FilterProjectEnvsContentHint8$Outbound,
    z.ZodTypeDef,
    FilterProjectEnvsContentHint8
> = z.object({
    type: FilterProjectEnvsContentHintEnvsResponse200ApplicationJSONResponseBody18Type$outboundSchema,
    storeId: z.string(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace FilterProjectEnvsContentHint8$ {
    /** @deprecated use `FilterProjectEnvsContentHint8$inboundSchema` instead. */
    export const inboundSchema = FilterProjectEnvsContentHint8$inboundSchema;
    /** @deprecated use `FilterProjectEnvsContentHint8$outboundSchema` instead. */
    export const outboundSchema = FilterProjectEnvsContentHint8$outboundSchema;
    /** @deprecated use `FilterProjectEnvsContentHint8$Outbound` instead. */
    export type Outbound = FilterProjectEnvsContentHint8$Outbound;
}

/** @internal */
export const FilterProjectEnvsContentHintEnvsResponse200ApplicationJSONResponseBody1Type$inboundSchema: z.ZodNativeEnum<
    typeof FilterProjectEnvsContentHintEnvsResponse200ApplicationJSONResponseBody1Type
> = z.nativeEnum(FilterProjectEnvsContentHintEnvsResponse200ApplicationJSONResponseBody1Type);

/** @internal */
export const FilterProjectEnvsContentHintEnvsResponse200ApplicationJSONResponseBody1Type$outboundSchema: z.ZodNativeEnum<
    typeof FilterProjectEnvsContentHintEnvsResponse200ApplicationJSONResponseBody1Type
> = FilterProjectEnvsContentHintEnvsResponse200ApplicationJSONResponseBody1Type$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace FilterProjectEnvsContentHintEnvsResponse200ApplicationJSONResponseBody1Type$ {
    /** @deprecated use `FilterProjectEnvsContentHintEnvsResponse200ApplicationJSONResponseBody1Type$inboundSchema` instead. */
    export const inboundSchema =
        FilterProjectEnvsContentHintEnvsResponse200ApplicationJSONResponseBody1Type$inboundSchema;
    /** @deprecated use `FilterProjectEnvsContentHintEnvsResponse200ApplicationJSONResponseBody1Type$outboundSchema` instead. */
    export const outboundSchema =
        FilterProjectEnvsContentHintEnvsResponse200ApplicationJSONResponseBody1Type$outboundSchema;
}

/** @internal */
export const FilterProjectEnvsContentHint7$inboundSchema: z.ZodType<
    FilterProjectEnvsContentHint7,
    z.ZodTypeDef,
    unknown
> = z.object({
    type: FilterProjectEnvsContentHintEnvsResponse200ApplicationJSONResponseBody1Type$inboundSchema,
    storeId: z.string(),
});

/** @internal */
export type FilterProjectEnvsContentHint7$Outbound = {
    type: string;
    storeId: string;
};

/** @internal */
export const FilterProjectEnvsContentHint7$outboundSchema: z.ZodType<
    FilterProjectEnvsContentHint7$Outbound,
    z.ZodTypeDef,
    FilterProjectEnvsContentHint7
> = z.object({
    type: FilterProjectEnvsContentHintEnvsResponse200ApplicationJSONResponseBody1Type$outboundSchema,
    storeId: z.string(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace FilterProjectEnvsContentHint7$ {
    /** @deprecated use `FilterProjectEnvsContentHint7$inboundSchema` instead. */
    export const inboundSchema = FilterProjectEnvsContentHint7$inboundSchema;
    /** @deprecated use `FilterProjectEnvsContentHint7$outboundSchema` instead. */
    export const outboundSchema = FilterProjectEnvsContentHint7$outboundSchema;
    /** @deprecated use `FilterProjectEnvsContentHint7$Outbound` instead. */
    export type Outbound = FilterProjectEnvsContentHint7$Outbound;
}

/** @internal */
export const FilterProjectEnvsContentHintEnvsResponse200ApplicationJSONResponseBodyType$inboundSchema: z.ZodNativeEnum<
    typeof FilterProjectEnvsContentHintEnvsResponse200ApplicationJSONResponseBodyType
> = z.nativeEnum(FilterProjectEnvsContentHintEnvsResponse200ApplicationJSONResponseBodyType);

/** @internal */
export const FilterProjectEnvsContentHintEnvsResponse200ApplicationJSONResponseBodyType$outboundSchema: z.ZodNativeEnum<
    typeof FilterProjectEnvsContentHintEnvsResponse200ApplicationJSONResponseBodyType
> = FilterProjectEnvsContentHintEnvsResponse200ApplicationJSONResponseBodyType$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace FilterProjectEnvsContentHintEnvsResponse200ApplicationJSONResponseBodyType$ {
    /** @deprecated use `FilterProjectEnvsContentHintEnvsResponse200ApplicationJSONResponseBodyType$inboundSchema` instead. */
    export const inboundSchema =
        FilterProjectEnvsContentHintEnvsResponse200ApplicationJSONResponseBodyType$inboundSchema;
    /** @deprecated use `FilterProjectEnvsContentHintEnvsResponse200ApplicationJSONResponseBodyType$outboundSchema` instead. */
    export const outboundSchema =
        FilterProjectEnvsContentHintEnvsResponse200ApplicationJSONResponseBodyType$outboundSchema;
}

/** @internal */
export const FilterProjectEnvsContentHint6$inboundSchema: z.ZodType<
    FilterProjectEnvsContentHint6,
    z.ZodTypeDef,
    unknown
> = z.object({
    type: FilterProjectEnvsContentHintEnvsResponse200ApplicationJSONResponseBodyType$inboundSchema,
    storeId: z.string(),
});

/** @internal */
export type FilterProjectEnvsContentHint6$Outbound = {
    type: string;
    storeId: string;
};

/** @internal */
export const FilterProjectEnvsContentHint6$outboundSchema: z.ZodType<
    FilterProjectEnvsContentHint6$Outbound,
    z.ZodTypeDef,
    FilterProjectEnvsContentHint6
> = z.object({
    type: FilterProjectEnvsContentHintEnvsResponse200ApplicationJSONResponseBodyType$outboundSchema,
    storeId: z.string(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace FilterProjectEnvsContentHint6$ {
    /** @deprecated use `FilterProjectEnvsContentHint6$inboundSchema` instead. */
    export const inboundSchema = FilterProjectEnvsContentHint6$inboundSchema;
    /** @deprecated use `FilterProjectEnvsContentHint6$outboundSchema` instead. */
    export const outboundSchema = FilterProjectEnvsContentHint6$outboundSchema;
    /** @deprecated use `FilterProjectEnvsContentHint6$Outbound` instead. */
    export type Outbound = FilterProjectEnvsContentHint6$Outbound;
}

/** @internal */
export const FilterProjectEnvsContentHintEnvsResponse200ApplicationJSONType$inboundSchema: z.ZodNativeEnum<
    typeof FilterProjectEnvsContentHintEnvsResponse200ApplicationJSONType
> = z.nativeEnum(FilterProjectEnvsContentHintEnvsResponse200ApplicationJSONType);

/** @internal */
export const FilterProjectEnvsContentHintEnvsResponse200ApplicationJSONType$outboundSchema: z.ZodNativeEnum<
    typeof FilterProjectEnvsContentHintEnvsResponse200ApplicationJSONType
> = FilterProjectEnvsContentHintEnvsResponse200ApplicationJSONType$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace FilterProjectEnvsContentHintEnvsResponse200ApplicationJSONType$ {
    /** @deprecated use `FilterProjectEnvsContentHintEnvsResponse200ApplicationJSONType$inboundSchema` instead. */
    export const inboundSchema =
        FilterProjectEnvsContentHintEnvsResponse200ApplicationJSONType$inboundSchema;
    /** @deprecated use `FilterProjectEnvsContentHintEnvsResponse200ApplicationJSONType$outboundSchema` instead. */
    export const outboundSchema =
        FilterProjectEnvsContentHintEnvsResponse200ApplicationJSONType$outboundSchema;
}

/** @internal */
export const FilterProjectEnvsContentHint5$inboundSchema: z.ZodType<
    FilterProjectEnvsContentHint5,
    z.ZodTypeDef,
    unknown
> = z.object({
    type: FilterProjectEnvsContentHintEnvsResponse200ApplicationJSONType$inboundSchema,
    storeId: z.string(),
});

/** @internal */
export type FilterProjectEnvsContentHint5$Outbound = {
    type: string;
    storeId: string;
};

/** @internal */
export const FilterProjectEnvsContentHint5$outboundSchema: z.ZodType<
    FilterProjectEnvsContentHint5$Outbound,
    z.ZodTypeDef,
    FilterProjectEnvsContentHint5
> = z.object({
    type: FilterProjectEnvsContentHintEnvsResponse200ApplicationJSONType$outboundSchema,
    storeId: z.string(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace FilterProjectEnvsContentHint5$ {
    /** @deprecated use `FilterProjectEnvsContentHint5$inboundSchema` instead. */
    export const inboundSchema = FilterProjectEnvsContentHint5$inboundSchema;
    /** @deprecated use `FilterProjectEnvsContentHint5$outboundSchema` instead. */
    export const outboundSchema = FilterProjectEnvsContentHint5$outboundSchema;
    /** @deprecated use `FilterProjectEnvsContentHint5$Outbound` instead. */
    export type Outbound = FilterProjectEnvsContentHint5$Outbound;
}

/** @internal */
export const FilterProjectEnvsContentHintEnvsResponse200Type$inboundSchema: z.ZodNativeEnum<
    typeof FilterProjectEnvsContentHintEnvsResponse200Type
> = z.nativeEnum(FilterProjectEnvsContentHintEnvsResponse200Type);

/** @internal */
export const FilterProjectEnvsContentHintEnvsResponse200Type$outboundSchema: z.ZodNativeEnum<
    typeof FilterProjectEnvsContentHintEnvsResponse200Type
> = FilterProjectEnvsContentHintEnvsResponse200Type$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace FilterProjectEnvsContentHintEnvsResponse200Type$ {
    /** @deprecated use `FilterProjectEnvsContentHintEnvsResponse200Type$inboundSchema` instead. */
    export const inboundSchema = FilterProjectEnvsContentHintEnvsResponse200Type$inboundSchema;
    /** @deprecated use `FilterProjectEnvsContentHintEnvsResponse200Type$outboundSchema` instead. */
    export const outboundSchema = FilterProjectEnvsContentHintEnvsResponse200Type$outboundSchema;
}

/** @internal */
export const FilterProjectEnvsContentHint4$inboundSchema: z.ZodType<
    FilterProjectEnvsContentHint4,
    z.ZodTypeDef,
    unknown
> = z.object({
    type: FilterProjectEnvsContentHintEnvsResponse200Type$inboundSchema,
    storeId: z.string(),
});

/** @internal */
export type FilterProjectEnvsContentHint4$Outbound = {
    type: string;
    storeId: string;
};

/** @internal */
export const FilterProjectEnvsContentHint4$outboundSchema: z.ZodType<
    FilterProjectEnvsContentHint4$Outbound,
    z.ZodTypeDef,
    FilterProjectEnvsContentHint4
> = z.object({
    type: FilterProjectEnvsContentHintEnvsResponse200Type$outboundSchema,
    storeId: z.string(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace FilterProjectEnvsContentHint4$ {
    /** @deprecated use `FilterProjectEnvsContentHint4$inboundSchema` instead. */
    export const inboundSchema = FilterProjectEnvsContentHint4$inboundSchema;
    /** @deprecated use `FilterProjectEnvsContentHint4$outboundSchema` instead. */
    export const outboundSchema = FilterProjectEnvsContentHint4$outboundSchema;
    /** @deprecated use `FilterProjectEnvsContentHint4$Outbound` instead. */
    export type Outbound = FilterProjectEnvsContentHint4$Outbound;
}

/** @internal */
export const FilterProjectEnvsContentHintEnvsResponseType$inboundSchema: z.ZodNativeEnum<
    typeof FilterProjectEnvsContentHintEnvsResponseType
> = z.nativeEnum(FilterProjectEnvsContentHintEnvsResponseType);

/** @internal */
export const FilterProjectEnvsContentHintEnvsResponseType$outboundSchema: z.ZodNativeEnum<
    typeof FilterProjectEnvsContentHintEnvsResponseType
> = FilterProjectEnvsContentHintEnvsResponseType$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace FilterProjectEnvsContentHintEnvsResponseType$ {
    /** @deprecated use `FilterProjectEnvsContentHintEnvsResponseType$inboundSchema` instead. */
    export const inboundSchema = FilterProjectEnvsContentHintEnvsResponseType$inboundSchema;
    /** @deprecated use `FilterProjectEnvsContentHintEnvsResponseType$outboundSchema` instead. */
    export const outboundSchema = FilterProjectEnvsContentHintEnvsResponseType$outboundSchema;
}

/** @internal */
export const FilterProjectEnvsContentHint3$inboundSchema: z.ZodType<
    FilterProjectEnvsContentHint3,
    z.ZodTypeDef,
    unknown
> = z.object({
    type: FilterProjectEnvsContentHintEnvsResponseType$inboundSchema,
    storeId: z.string(),
});

/** @internal */
export type FilterProjectEnvsContentHint3$Outbound = {
    type: string;
    storeId: string;
};

/** @internal */
export const FilterProjectEnvsContentHint3$outboundSchema: z.ZodType<
    FilterProjectEnvsContentHint3$Outbound,
    z.ZodTypeDef,
    FilterProjectEnvsContentHint3
> = z.object({
    type: FilterProjectEnvsContentHintEnvsResponseType$outboundSchema,
    storeId: z.string(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace FilterProjectEnvsContentHint3$ {
    /** @deprecated use `FilterProjectEnvsContentHint3$inboundSchema` instead. */
    export const inboundSchema = FilterProjectEnvsContentHint3$inboundSchema;
    /** @deprecated use `FilterProjectEnvsContentHint3$outboundSchema` instead. */
    export const outboundSchema = FilterProjectEnvsContentHint3$outboundSchema;
    /** @deprecated use `FilterProjectEnvsContentHint3$Outbound` instead. */
    export type Outbound = FilterProjectEnvsContentHint3$Outbound;
}

/** @internal */
export const FilterProjectEnvsContentHintEnvsType$inboundSchema: z.ZodNativeEnum<
    typeof FilterProjectEnvsContentHintEnvsType
> = z.nativeEnum(FilterProjectEnvsContentHintEnvsType);

/** @internal */
export const FilterProjectEnvsContentHintEnvsType$outboundSchema: z.ZodNativeEnum<
    typeof FilterProjectEnvsContentHintEnvsType
> = FilterProjectEnvsContentHintEnvsType$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace FilterProjectEnvsContentHintEnvsType$ {
    /** @deprecated use `FilterProjectEnvsContentHintEnvsType$inboundSchema` instead. */
    export const inboundSchema = FilterProjectEnvsContentHintEnvsType$inboundSchema;
    /** @deprecated use `FilterProjectEnvsContentHintEnvsType$outboundSchema` instead. */
    export const outboundSchema = FilterProjectEnvsContentHintEnvsType$outboundSchema;
}

/** @internal */
export const FilterProjectEnvsContentHint2$inboundSchema: z.ZodType<
    FilterProjectEnvsContentHint2,
    z.ZodTypeDef,
    unknown
> = z.object({
    type: FilterProjectEnvsContentHintEnvsType$inboundSchema,
    storeId: z.string(),
});

/** @internal */
export type FilterProjectEnvsContentHint2$Outbound = {
    type: string;
    storeId: string;
};

/** @internal */
export const FilterProjectEnvsContentHint2$outboundSchema: z.ZodType<
    FilterProjectEnvsContentHint2$Outbound,
    z.ZodTypeDef,
    FilterProjectEnvsContentHint2
> = z.object({
    type: FilterProjectEnvsContentHintEnvsType$outboundSchema,
    storeId: z.string(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace FilterProjectEnvsContentHint2$ {
    /** @deprecated use `FilterProjectEnvsContentHint2$inboundSchema` instead. */
    export const inboundSchema = FilterProjectEnvsContentHint2$inboundSchema;
    /** @deprecated use `FilterProjectEnvsContentHint2$outboundSchema` instead. */
    export const outboundSchema = FilterProjectEnvsContentHint2$outboundSchema;
    /** @deprecated use `FilterProjectEnvsContentHint2$Outbound` instead. */
    export type Outbound = FilterProjectEnvsContentHint2$Outbound;
}

/** @internal */
export const FilterProjectEnvsContentHintType$inboundSchema: z.ZodNativeEnum<
    typeof FilterProjectEnvsContentHintType
> = z.nativeEnum(FilterProjectEnvsContentHintType);

/** @internal */
export const FilterProjectEnvsContentHintType$outboundSchema: z.ZodNativeEnum<
    typeof FilterProjectEnvsContentHintType
> = FilterProjectEnvsContentHintType$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace FilterProjectEnvsContentHintType$ {
    /** @deprecated use `FilterProjectEnvsContentHintType$inboundSchema` instead. */
    export const inboundSchema = FilterProjectEnvsContentHintType$inboundSchema;
    /** @deprecated use `FilterProjectEnvsContentHintType$outboundSchema` instead. */
    export const outboundSchema = FilterProjectEnvsContentHintType$outboundSchema;
}

/** @internal */
export const FilterProjectEnvsContentHint1$inboundSchema: z.ZodType<
    FilterProjectEnvsContentHint1,
    z.ZodTypeDef,
    unknown
> = z.object({
    type: FilterProjectEnvsContentHintType$inboundSchema,
    storeId: z.string(),
});

/** @internal */
export type FilterProjectEnvsContentHint1$Outbound = {
    type: string;
    storeId: string;
};

/** @internal */
export const FilterProjectEnvsContentHint1$outboundSchema: z.ZodType<
    FilterProjectEnvsContentHint1$Outbound,
    z.ZodTypeDef,
    FilterProjectEnvsContentHint1
> = z.object({
    type: FilterProjectEnvsContentHintType$outboundSchema,
    storeId: z.string(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace FilterProjectEnvsContentHint1$ {
    /** @deprecated use `FilterProjectEnvsContentHint1$inboundSchema` instead. */
    export const inboundSchema = FilterProjectEnvsContentHint1$inboundSchema;
    /** @deprecated use `FilterProjectEnvsContentHint1$outboundSchema` instead. */
    export const outboundSchema = FilterProjectEnvsContentHint1$outboundSchema;
    /** @deprecated use `FilterProjectEnvsContentHint1$Outbound` instead. */
    export type Outbound = FilterProjectEnvsContentHint1$Outbound;
}

/** @internal */
export const ResponseBodyContentHint$inboundSchema: z.ZodType<
    ResponseBodyContentHint,
    z.ZodTypeDef,
    unknown
> = z.union([
    z.lazy(() => FilterProjectEnvsContentHint1$inboundSchema),
    z.lazy(() => FilterProjectEnvsContentHint2$inboundSchema),
    z.lazy(() => FilterProjectEnvsContentHint3$inboundSchema),
    z.lazy(() => FilterProjectEnvsContentHint4$inboundSchema),
    z.lazy(() => FilterProjectEnvsContentHint5$inboundSchema),
    z.lazy(() => FilterProjectEnvsContentHint6$inboundSchema),
    z.lazy(() => FilterProjectEnvsContentHint7$inboundSchema),
    z.lazy(() => FilterProjectEnvsContentHint8$inboundSchema),
    z.lazy(() => FilterProjectEnvsContentHint9$inboundSchema),
    z.lazy(() => FilterProjectEnvsContentHint10$inboundSchema),
    z.lazy(() => FilterProjectEnvsContentHint11$inboundSchema),
    z.lazy(() => FilterProjectEnvsContentHint12$inboundSchema),
    z.lazy(() => FilterProjectEnvsContentHint13$inboundSchema),
    z.lazy(() => FilterProjectEnvsContentHint14$inboundSchema),
]);

/** @internal */
export type ResponseBodyContentHint$Outbound =
    | FilterProjectEnvsContentHint1$Outbound
    | FilterProjectEnvsContentHint2$Outbound
    | FilterProjectEnvsContentHint3$Outbound
    | FilterProjectEnvsContentHint4$Outbound
    | FilterProjectEnvsContentHint5$Outbound
    | FilterProjectEnvsContentHint6$Outbound
    | FilterProjectEnvsContentHint7$Outbound
    | FilterProjectEnvsContentHint8$Outbound
    | FilterProjectEnvsContentHint9$Outbound
    | FilterProjectEnvsContentHint10$Outbound
    | FilterProjectEnvsContentHint11$Outbound
    | FilterProjectEnvsContentHint12$Outbound
    | FilterProjectEnvsContentHint13$Outbound
    | FilterProjectEnvsContentHint14$Outbound;

/** @internal */
export const ResponseBodyContentHint$outboundSchema: z.ZodType<
    ResponseBodyContentHint$Outbound,
    z.ZodTypeDef,
    ResponseBodyContentHint
> = z.union([
    z.lazy(() => FilterProjectEnvsContentHint1$outboundSchema),
    z.lazy(() => FilterProjectEnvsContentHint2$outboundSchema),
    z.lazy(() => FilterProjectEnvsContentHint3$outboundSchema),
    z.lazy(() => FilterProjectEnvsContentHint4$outboundSchema),
    z.lazy(() => FilterProjectEnvsContentHint5$outboundSchema),
    z.lazy(() => FilterProjectEnvsContentHint6$outboundSchema),
    z.lazy(() => FilterProjectEnvsContentHint7$outboundSchema),
    z.lazy(() => FilterProjectEnvsContentHint8$outboundSchema),
    z.lazy(() => FilterProjectEnvsContentHint9$outboundSchema),
    z.lazy(() => FilterProjectEnvsContentHint10$outboundSchema),
    z.lazy(() => FilterProjectEnvsContentHint11$outboundSchema),
    z.lazy(() => FilterProjectEnvsContentHint12$outboundSchema),
    z.lazy(() => FilterProjectEnvsContentHint13$outboundSchema),
    z.lazy(() => FilterProjectEnvsContentHint14$outboundSchema),
]);

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace ResponseBodyContentHint$ {
    /** @deprecated use `ResponseBodyContentHint$inboundSchema` instead. */
    export const inboundSchema = ResponseBodyContentHint$inboundSchema;
    /** @deprecated use `ResponseBodyContentHint$outboundSchema` instead. */
    export const outboundSchema = ResponseBodyContentHint$outboundSchema;
    /** @deprecated use `ResponseBodyContentHint$Outbound` instead. */
    export type Outbound = ResponseBodyContentHint$Outbound;
}

/** @internal */
export const FilterProjectEnvsResponseBodyEnvsType$inboundSchema: z.ZodNativeEnum<
    typeof FilterProjectEnvsResponseBodyEnvsType
> = z.nativeEnum(FilterProjectEnvsResponseBodyEnvsType);

/** @internal */
export const FilterProjectEnvsResponseBodyEnvsType$outboundSchema: z.ZodNativeEnum<
    typeof FilterProjectEnvsResponseBodyEnvsType
> = FilterProjectEnvsResponseBodyEnvsType$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace FilterProjectEnvsResponseBodyEnvsType$ {
    /** @deprecated use `FilterProjectEnvsResponseBodyEnvsType$inboundSchema` instead. */
    export const inboundSchema = FilterProjectEnvsResponseBodyEnvsType$inboundSchema;
    /** @deprecated use `FilterProjectEnvsResponseBodyEnvsType$outboundSchema` instead. */
    export const outboundSchema = FilterProjectEnvsResponseBodyEnvsType$outboundSchema;
}

/** @internal */
export const ResponseBodyInternalContentHint$inboundSchema: z.ZodType<
    ResponseBodyInternalContentHint,
    z.ZodTypeDef,
    unknown
> = z.object({
    type: FilterProjectEnvsResponseBodyEnvsType$inboundSchema,
    encryptedValue: z.string(),
});

/** @internal */
export type ResponseBodyInternalContentHint$Outbound = {
    type: string;
    encryptedValue: string;
};

/** @internal */
export const ResponseBodyInternalContentHint$outboundSchema: z.ZodType<
    ResponseBodyInternalContentHint$Outbound,
    z.ZodTypeDef,
    ResponseBodyInternalContentHint
> = z.object({
    type: FilterProjectEnvsResponseBodyEnvsType$outboundSchema,
    encryptedValue: z.string(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace ResponseBodyInternalContentHint$ {
    /** @deprecated use `ResponseBodyInternalContentHint$inboundSchema` instead. */
    export const inboundSchema = ResponseBodyInternalContentHint$inboundSchema;
    /** @deprecated use `ResponseBodyInternalContentHint$outboundSchema` instead. */
    export const outboundSchema = ResponseBodyInternalContentHint$outboundSchema;
    /** @deprecated use `ResponseBodyInternalContentHint$Outbound` instead. */
    export type Outbound = ResponseBodyInternalContentHint$Outbound;
}

/** @internal */
export const FilterProjectEnvsResponseBody1$inboundSchema: z.ZodType<
    FilterProjectEnvsResponseBody1,
    z.ZodTypeDef,
    unknown
> = z.object({
    target: z
        .union([
            z.array(FilterProjectEnvsTarget1$inboundSchema),
            FilterProjectEnvsTarget2$inboundSchema,
        ])
        .optional(),
    type: FilterProjectEnvsResponseBodyType$inboundSchema.optional(),
    sunsetSecretId: z.string().optional(),
    id: z.string().optional(),
    key: z.string().optional(),
    value: z.string().optional(),
    configurationId: z.nullable(z.string()).optional(),
    createdAt: z.number().optional(),
    updatedAt: z.number().optional(),
    createdBy: z.nullable(z.string()).optional(),
    updatedBy: z.nullable(z.string()).optional(),
    gitBranch: z.string().optional(),
    edgeConfigId: z.nullable(z.string()).optional(),
    edgeConfigTokenId: z.nullable(z.string()).optional(),
    contentHint: z
        .nullable(
            z.union([
                z.lazy(() => FilterProjectEnvsContentHint1$inboundSchema),
                z.lazy(() => FilterProjectEnvsContentHint2$inboundSchema),
                z.lazy(() => FilterProjectEnvsContentHint3$inboundSchema),
                z.lazy(() => FilterProjectEnvsContentHint4$inboundSchema),
                z.lazy(() => FilterProjectEnvsContentHint5$inboundSchema),
                z.lazy(() => FilterProjectEnvsContentHint6$inboundSchema),
                z.lazy(() => FilterProjectEnvsContentHint7$inboundSchema),
                z.lazy(() => FilterProjectEnvsContentHint8$inboundSchema),
                z.lazy(() => FilterProjectEnvsContentHint9$inboundSchema),
                z.lazy(() => FilterProjectEnvsContentHint10$inboundSchema),
                z.lazy(() => FilterProjectEnvsContentHint11$inboundSchema),
                z.lazy(() => FilterProjectEnvsContentHint12$inboundSchema),
                z.lazy(() => FilterProjectEnvsContentHint13$inboundSchema),
                z.lazy(() => FilterProjectEnvsContentHint14$inboundSchema),
            ])
        )
        .optional(),
    internalContentHint: z
        .nullable(z.lazy(() => ResponseBodyInternalContentHint$inboundSchema))
        .optional(),
    decrypted: z.boolean().optional(),
    comment: z.string().optional(),
    customEnvironmentIds: z.array(z.string()).optional(),
    vsmValue: z.string().optional(),
    system: z.boolean().optional(),
});

/** @internal */
export type FilterProjectEnvsResponseBody1$Outbound = {
    target?: Array<string> | string | undefined;
    type?: string | undefined;
    sunsetSecretId?: string | undefined;
    id?: string | undefined;
    key?: string | undefined;
    value?: string | undefined;
    configurationId?: string | null | undefined;
    createdAt?: number | undefined;
    updatedAt?: number | undefined;
    createdBy?: string | null | undefined;
    updatedBy?: string | null | undefined;
    gitBranch?: string | undefined;
    edgeConfigId?: string | null | undefined;
    edgeConfigTokenId?: string | null | undefined;
    contentHint?:
        | FilterProjectEnvsContentHint1$Outbound
        | FilterProjectEnvsContentHint2$Outbound
        | FilterProjectEnvsContentHint3$Outbound
        | FilterProjectEnvsContentHint4$Outbound
        | FilterProjectEnvsContentHint5$Outbound
        | FilterProjectEnvsContentHint6$Outbound
        | FilterProjectEnvsContentHint7$Outbound
        | FilterProjectEnvsContentHint8$Outbound
        | FilterProjectEnvsContentHint9$Outbound
        | FilterProjectEnvsContentHint10$Outbound
        | FilterProjectEnvsContentHint11$Outbound
        | FilterProjectEnvsContentHint12$Outbound
        | FilterProjectEnvsContentHint13$Outbound
        | FilterProjectEnvsContentHint14$Outbound
        | null
        | undefined;
    internalContentHint?: ResponseBodyInternalContentHint$Outbound | null | undefined;
    decrypted?: boolean | undefined;
    comment?: string | undefined;
    customEnvironmentIds?: Array<string> | undefined;
    vsmValue?: string | undefined;
    system?: boolean | undefined;
};

/** @internal */
export const FilterProjectEnvsResponseBody1$outboundSchema: z.ZodType<
    FilterProjectEnvsResponseBody1$Outbound,
    z.ZodTypeDef,
    FilterProjectEnvsResponseBody1
> = z.object({
    target: z
        .union([
            z.array(FilterProjectEnvsTarget1$outboundSchema),
            FilterProjectEnvsTarget2$outboundSchema,
        ])
        .optional(),
    type: FilterProjectEnvsResponseBodyType$outboundSchema.optional(),
    sunsetSecretId: z.string().optional(),
    id: z.string().optional(),
    key: z.string().optional(),
    value: z.string().optional(),
    configurationId: z.nullable(z.string()).optional(),
    createdAt: z.number().optional(),
    updatedAt: z.number().optional(),
    createdBy: z.nullable(z.string()).optional(),
    updatedBy: z.nullable(z.string()).optional(),
    gitBranch: z.string().optional(),
    edgeConfigId: z.nullable(z.string()).optional(),
    edgeConfigTokenId: z.nullable(z.string()).optional(),
    contentHint: z
        .nullable(
            z.union([
                z.lazy(() => FilterProjectEnvsContentHint1$outboundSchema),
                z.lazy(() => FilterProjectEnvsContentHint2$outboundSchema),
                z.lazy(() => FilterProjectEnvsContentHint3$outboundSchema),
                z.lazy(() => FilterProjectEnvsContentHint4$outboundSchema),
                z.lazy(() => FilterProjectEnvsContentHint5$outboundSchema),
                z.lazy(() => FilterProjectEnvsContentHint6$outboundSchema),
                z.lazy(() => FilterProjectEnvsContentHint7$outboundSchema),
                z.lazy(() => FilterProjectEnvsContentHint8$outboundSchema),
                z.lazy(() => FilterProjectEnvsContentHint9$outboundSchema),
                z.lazy(() => FilterProjectEnvsContentHint10$outboundSchema),
                z.lazy(() => FilterProjectEnvsContentHint11$outboundSchema),
                z.lazy(() => FilterProjectEnvsContentHint12$outboundSchema),
                z.lazy(() => FilterProjectEnvsContentHint13$outboundSchema),
                z.lazy(() => FilterProjectEnvsContentHint14$outboundSchema),
            ])
        )
        .optional(),
    internalContentHint: z
        .nullable(z.lazy(() => ResponseBodyInternalContentHint$outboundSchema))
        .optional(),
    decrypted: z.boolean().optional(),
    comment: z.string().optional(),
    customEnvironmentIds: z.array(z.string()).optional(),
    vsmValue: z.string().optional(),
    system: z.boolean().optional(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace FilterProjectEnvsResponseBody1$ {
    /** @deprecated use `FilterProjectEnvsResponseBody1$inboundSchema` instead. */
    export const inboundSchema = FilterProjectEnvsResponseBody1$inboundSchema;
    /** @deprecated use `FilterProjectEnvsResponseBody1$outboundSchema` instead. */
    export const outboundSchema = FilterProjectEnvsResponseBody1$outboundSchema;
    /** @deprecated use `FilterProjectEnvsResponseBody1$Outbound` instead. */
    export type Outbound = FilterProjectEnvsResponseBody1$Outbound;
}

/** @internal */
export const FilterProjectEnvsResponseBody$inboundSchema: z.ZodType<
    FilterProjectEnvsResponseBody,
    z.ZodTypeDef,
    unknown
> = z.union([
    z.lazy(() => FilterProjectEnvsResponseBody3$inboundSchema),
    z.lazy(() => FilterProjectEnvsResponseBody2$inboundSchema),
    z.lazy(() => FilterProjectEnvsResponseBody1$inboundSchema),
]);

/** @internal */
export type FilterProjectEnvsResponseBody$Outbound =
    | FilterProjectEnvsResponseBody3$Outbound
    | FilterProjectEnvsResponseBody2$Outbound
    | FilterProjectEnvsResponseBody1$Outbound;

/** @internal */
export const FilterProjectEnvsResponseBody$outboundSchema: z.ZodType<
    FilterProjectEnvsResponseBody$Outbound,
    z.ZodTypeDef,
    FilterProjectEnvsResponseBody
> = z.union([
    z.lazy(() => FilterProjectEnvsResponseBody3$outboundSchema),
    z.lazy(() => FilterProjectEnvsResponseBody2$outboundSchema),
    z.lazy(() => FilterProjectEnvsResponseBody1$outboundSchema),
]);

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace FilterProjectEnvsResponseBody$ {
    /** @deprecated use `FilterProjectEnvsResponseBody$inboundSchema` instead. */
    export const inboundSchema = FilterProjectEnvsResponseBody$inboundSchema;
    /** @deprecated use `FilterProjectEnvsResponseBody$outboundSchema` instead. */
    export const outboundSchema = FilterProjectEnvsResponseBody$outboundSchema;
    /** @deprecated use `FilterProjectEnvsResponseBody$Outbound` instead. */
    export type Outbound = FilterProjectEnvsResponseBody$Outbound;
}
