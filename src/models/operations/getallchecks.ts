/*
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

import * as components from "../components";
import * as z from "zod";

export type GetAllChecksRequest = {
    /**
     * The deployment to get all checks for
     */
    deploymentId: string;
    /**
     * The Team identifier to perform the request on behalf of.
     */
    teamId?: string | undefined;
    /**
     * The Team slug to perform the request on behalf of.
     */
    slug?: string | undefined;
};

export enum GetAllChecksConclusion {
    Canceled = "canceled",
    Failed = "failed",
    Neutral = "neutral",
    Succeeded = "succeeded",
    Skipped = "skipped",
    Stale = "stale",
}

export enum GetAllChecksSource {
    WebVitals = "web-vitals",
}

export type GetAllChecksFCP = {
    value: number | null;
    previousValue?: number | undefined;
    source: GetAllChecksSource;
};

export enum GetAllChecksChecksSource {
    WebVitals = "web-vitals",
}

export type GetAllChecksLCP = {
    value: number | null;
    previousValue?: number | undefined;
    source: GetAllChecksChecksSource;
};

export enum GetAllChecksChecksResponseSource {
    WebVitals = "web-vitals",
}

export type GetAllChecksCLS = {
    value: number | null;
    previousValue?: number | undefined;
    source: GetAllChecksChecksResponseSource;
};

export enum GetAllChecksChecksResponse200Source {
    WebVitals = "web-vitals",
}

export type GetAllChecksTBT = {
    value: number | null;
    previousValue?: number | undefined;
    source: GetAllChecksChecksResponse200Source;
};

export enum GetAllChecksChecksResponse200ApplicationJSONSource {
    WebVitals = "web-vitals",
}

export type GetAllChecksVirtualExperienceScore = {
    value: number | null;
    previousValue?: number | undefined;
    source: GetAllChecksChecksResponse200ApplicationJSONSource;
};

export type GetAllChecksMetrics = {
    fcp: GetAllChecksFCP;
    lcp: GetAllChecksLCP;
    cls: GetAllChecksCLS;
    tbt: GetAllChecksTBT;
    virtualExperienceScore?: GetAllChecksVirtualExperienceScore | undefined;
};

export type GetAllChecksOutput = {
    metrics?: GetAllChecksMetrics | undefined;
};

export enum GetAllChecksStatus {
    Registered = "registered",
    Running = "running",
    Completed = "completed",
}

export type Checks = {
    completedAt?: number | undefined;
    conclusion?: GetAllChecksConclusion | undefined;
    createdAt: number;
    detailsUrl?: string | undefined;
    id: string;
    integrationId: string;
    name: string;
    output?: GetAllChecksOutput | undefined;
    path?: string | undefined;
    rerequestable: boolean;
    startedAt?: number | undefined;
    status: GetAllChecksStatus;
    updatedAt: number;
};

export type GetAllChecksResponseBody = {
    checks: Array<Checks>;
};

export type GetAllChecksResponse = {
    httpMeta: components.HTTPMetadata;
    object?: GetAllChecksResponseBody | undefined;
};

/** @internal */
export namespace GetAllChecksRequest$ {
    export const inboundSchema: z.ZodType<GetAllChecksRequest, z.ZodTypeDef, unknown> = z
        .object({
            deploymentId: z.string(),
            teamId: z.string().optional(),
            slug: z.string().optional(),
        })
        .transform((v) => {
            return {
                deploymentId: v.deploymentId,
                ...(v.teamId === undefined ? null : { teamId: v.teamId }),
                ...(v.slug === undefined ? null : { slug: v.slug }),
            };
        });

    export type Outbound = {
        deploymentId: string;
        teamId?: string | undefined;
        slug?: string | undefined;
    };

    export const outboundSchema: z.ZodType<Outbound, z.ZodTypeDef, GetAllChecksRequest> = z
        .object({
            deploymentId: z.string(),
            teamId: z.string().optional(),
            slug: z.string().optional(),
        })
        .transform((v) => {
            return {
                deploymentId: v.deploymentId,
                ...(v.teamId === undefined ? null : { teamId: v.teamId }),
                ...(v.slug === undefined ? null : { slug: v.slug }),
            };
        });
}

/** @internal */
export const GetAllChecksConclusion$: z.ZodNativeEnum<typeof GetAllChecksConclusion> =
    z.nativeEnum(GetAllChecksConclusion);

/** @internal */
export const GetAllChecksSource$: z.ZodNativeEnum<typeof GetAllChecksSource> =
    z.nativeEnum(GetAllChecksSource);

/** @internal */
export namespace GetAllChecksFCP$ {
    export const inboundSchema: z.ZodType<GetAllChecksFCP, z.ZodTypeDef, unknown> = z
        .object({
            value: z.nullable(z.number()),
            previousValue: z.number().optional(),
            source: GetAllChecksSource$,
        })
        .transform((v) => {
            return {
                value: v.value,
                ...(v.previousValue === undefined ? null : { previousValue: v.previousValue }),
                source: v.source,
            };
        });

    export type Outbound = {
        value: number | null;
        previousValue?: number | undefined;
        source: GetAllChecksSource;
    };

    export const outboundSchema: z.ZodType<Outbound, z.ZodTypeDef, GetAllChecksFCP> = z
        .object({
            value: z.nullable(z.number()),
            previousValue: z.number().optional(),
            source: GetAllChecksSource$,
        })
        .transform((v) => {
            return {
                value: v.value,
                ...(v.previousValue === undefined ? null : { previousValue: v.previousValue }),
                source: v.source,
            };
        });
}

/** @internal */
export const GetAllChecksChecksSource$: z.ZodNativeEnum<typeof GetAllChecksChecksSource> =
    z.nativeEnum(GetAllChecksChecksSource);

/** @internal */
export namespace GetAllChecksLCP$ {
    export const inboundSchema: z.ZodType<GetAllChecksLCP, z.ZodTypeDef, unknown> = z
        .object({
            value: z.nullable(z.number()),
            previousValue: z.number().optional(),
            source: GetAllChecksChecksSource$,
        })
        .transform((v) => {
            return {
                value: v.value,
                ...(v.previousValue === undefined ? null : { previousValue: v.previousValue }),
                source: v.source,
            };
        });

    export type Outbound = {
        value: number | null;
        previousValue?: number | undefined;
        source: GetAllChecksChecksSource;
    };

    export const outboundSchema: z.ZodType<Outbound, z.ZodTypeDef, GetAllChecksLCP> = z
        .object({
            value: z.nullable(z.number()),
            previousValue: z.number().optional(),
            source: GetAllChecksChecksSource$,
        })
        .transform((v) => {
            return {
                value: v.value,
                ...(v.previousValue === undefined ? null : { previousValue: v.previousValue }),
                source: v.source,
            };
        });
}

/** @internal */
export const GetAllChecksChecksResponseSource$: z.ZodNativeEnum<
    typeof GetAllChecksChecksResponseSource
> = z.nativeEnum(GetAllChecksChecksResponseSource);

/** @internal */
export namespace GetAllChecksCLS$ {
    export const inboundSchema: z.ZodType<GetAllChecksCLS, z.ZodTypeDef, unknown> = z
        .object({
            value: z.nullable(z.number()),
            previousValue: z.number().optional(),
            source: GetAllChecksChecksResponseSource$,
        })
        .transform((v) => {
            return {
                value: v.value,
                ...(v.previousValue === undefined ? null : { previousValue: v.previousValue }),
                source: v.source,
            };
        });

    export type Outbound = {
        value: number | null;
        previousValue?: number | undefined;
        source: GetAllChecksChecksResponseSource;
    };

    export const outboundSchema: z.ZodType<Outbound, z.ZodTypeDef, GetAllChecksCLS> = z
        .object({
            value: z.nullable(z.number()),
            previousValue: z.number().optional(),
            source: GetAllChecksChecksResponseSource$,
        })
        .transform((v) => {
            return {
                value: v.value,
                ...(v.previousValue === undefined ? null : { previousValue: v.previousValue }),
                source: v.source,
            };
        });
}

/** @internal */
export const GetAllChecksChecksResponse200Source$: z.ZodNativeEnum<
    typeof GetAllChecksChecksResponse200Source
> = z.nativeEnum(GetAllChecksChecksResponse200Source);

/** @internal */
export namespace GetAllChecksTBT$ {
    export const inboundSchema: z.ZodType<GetAllChecksTBT, z.ZodTypeDef, unknown> = z
        .object({
            value: z.nullable(z.number()),
            previousValue: z.number().optional(),
            source: GetAllChecksChecksResponse200Source$,
        })
        .transform((v) => {
            return {
                value: v.value,
                ...(v.previousValue === undefined ? null : { previousValue: v.previousValue }),
                source: v.source,
            };
        });

    export type Outbound = {
        value: number | null;
        previousValue?: number | undefined;
        source: GetAllChecksChecksResponse200Source;
    };

    export const outboundSchema: z.ZodType<Outbound, z.ZodTypeDef, GetAllChecksTBT> = z
        .object({
            value: z.nullable(z.number()),
            previousValue: z.number().optional(),
            source: GetAllChecksChecksResponse200Source$,
        })
        .transform((v) => {
            return {
                value: v.value,
                ...(v.previousValue === undefined ? null : { previousValue: v.previousValue }),
                source: v.source,
            };
        });
}

/** @internal */
export const GetAllChecksChecksResponse200ApplicationJSONSource$: z.ZodNativeEnum<
    typeof GetAllChecksChecksResponse200ApplicationJSONSource
> = z.nativeEnum(GetAllChecksChecksResponse200ApplicationJSONSource);

/** @internal */
export namespace GetAllChecksVirtualExperienceScore$ {
    export const inboundSchema: z.ZodType<
        GetAllChecksVirtualExperienceScore,
        z.ZodTypeDef,
        unknown
    > = z
        .object({
            value: z.nullable(z.number()),
            previousValue: z.number().optional(),
            source: GetAllChecksChecksResponse200ApplicationJSONSource$,
        })
        .transform((v) => {
            return {
                value: v.value,
                ...(v.previousValue === undefined ? null : { previousValue: v.previousValue }),
                source: v.source,
            };
        });

    export type Outbound = {
        value: number | null;
        previousValue?: number | undefined;
        source: GetAllChecksChecksResponse200ApplicationJSONSource;
    };

    export const outboundSchema: z.ZodType<
        Outbound,
        z.ZodTypeDef,
        GetAllChecksVirtualExperienceScore
    > = z
        .object({
            value: z.nullable(z.number()),
            previousValue: z.number().optional(),
            source: GetAllChecksChecksResponse200ApplicationJSONSource$,
        })
        .transform((v) => {
            return {
                value: v.value,
                ...(v.previousValue === undefined ? null : { previousValue: v.previousValue }),
                source: v.source,
            };
        });
}

/** @internal */
export namespace GetAllChecksMetrics$ {
    export const inboundSchema: z.ZodType<GetAllChecksMetrics, z.ZodTypeDef, unknown> = z
        .object({
            FCP: z.lazy(() => GetAllChecksFCP$.inboundSchema),
            LCP: z.lazy(() => GetAllChecksLCP$.inboundSchema),
            CLS: z.lazy(() => GetAllChecksCLS$.inboundSchema),
            TBT: z.lazy(() => GetAllChecksTBT$.inboundSchema),
            virtualExperienceScore: z
                .lazy(() => GetAllChecksVirtualExperienceScore$.inboundSchema)
                .optional(),
        })
        .transform((v) => {
            return {
                fcp: v.FCP,
                lcp: v.LCP,
                cls: v.CLS,
                tbt: v.TBT,
                ...(v.virtualExperienceScore === undefined
                    ? null
                    : { virtualExperienceScore: v.virtualExperienceScore }),
            };
        });

    export type Outbound = {
        FCP: GetAllChecksFCP$.Outbound;
        LCP: GetAllChecksLCP$.Outbound;
        CLS: GetAllChecksCLS$.Outbound;
        TBT: GetAllChecksTBT$.Outbound;
        virtualExperienceScore?: GetAllChecksVirtualExperienceScore$.Outbound | undefined;
    };

    export const outboundSchema: z.ZodType<Outbound, z.ZodTypeDef, GetAllChecksMetrics> = z
        .object({
            fcp: z.lazy(() => GetAllChecksFCP$.outboundSchema),
            lcp: z.lazy(() => GetAllChecksLCP$.outboundSchema),
            cls: z.lazy(() => GetAllChecksCLS$.outboundSchema),
            tbt: z.lazy(() => GetAllChecksTBT$.outboundSchema),
            virtualExperienceScore: z
                .lazy(() => GetAllChecksVirtualExperienceScore$.outboundSchema)
                .optional(),
        })
        .transform((v) => {
            return {
                FCP: v.fcp,
                LCP: v.lcp,
                CLS: v.cls,
                TBT: v.tbt,
                ...(v.virtualExperienceScore === undefined
                    ? null
                    : { virtualExperienceScore: v.virtualExperienceScore }),
            };
        });
}

/** @internal */
export namespace GetAllChecksOutput$ {
    export const inboundSchema: z.ZodType<GetAllChecksOutput, z.ZodTypeDef, unknown> = z
        .object({
            metrics: z.lazy(() => GetAllChecksMetrics$.inboundSchema).optional(),
        })
        .transform((v) => {
            return {
                ...(v.metrics === undefined ? null : { metrics: v.metrics }),
            };
        });

    export type Outbound = {
        metrics?: GetAllChecksMetrics$.Outbound | undefined;
    };

    export const outboundSchema: z.ZodType<Outbound, z.ZodTypeDef, GetAllChecksOutput> = z
        .object({
            metrics: z.lazy(() => GetAllChecksMetrics$.outboundSchema).optional(),
        })
        .transform((v) => {
            return {
                ...(v.metrics === undefined ? null : { metrics: v.metrics }),
            };
        });
}

/** @internal */
export const GetAllChecksStatus$: z.ZodNativeEnum<typeof GetAllChecksStatus> =
    z.nativeEnum(GetAllChecksStatus);

/** @internal */
export namespace Checks$ {
    export const inboundSchema: z.ZodType<Checks, z.ZodTypeDef, unknown> = z
        .object({
            completedAt: z.number().optional(),
            conclusion: GetAllChecksConclusion$.optional(),
            createdAt: z.number(),
            detailsUrl: z.string().optional(),
            id: z.string(),
            integrationId: z.string(),
            name: z.string(),
            output: z.lazy(() => GetAllChecksOutput$.inboundSchema).optional(),
            path: z.string().optional(),
            rerequestable: z.boolean(),
            startedAt: z.number().optional(),
            status: GetAllChecksStatus$,
            updatedAt: z.number(),
        })
        .transform((v) => {
            return {
                ...(v.completedAt === undefined ? null : { completedAt: v.completedAt }),
                ...(v.conclusion === undefined ? null : { conclusion: v.conclusion }),
                createdAt: v.createdAt,
                ...(v.detailsUrl === undefined ? null : { detailsUrl: v.detailsUrl }),
                id: v.id,
                integrationId: v.integrationId,
                name: v.name,
                ...(v.output === undefined ? null : { output: v.output }),
                ...(v.path === undefined ? null : { path: v.path }),
                rerequestable: v.rerequestable,
                ...(v.startedAt === undefined ? null : { startedAt: v.startedAt }),
                status: v.status,
                updatedAt: v.updatedAt,
            };
        });

    export type Outbound = {
        completedAt?: number | undefined;
        conclusion?: GetAllChecksConclusion | undefined;
        createdAt: number;
        detailsUrl?: string | undefined;
        id: string;
        integrationId: string;
        name: string;
        output?: GetAllChecksOutput$.Outbound | undefined;
        path?: string | undefined;
        rerequestable: boolean;
        startedAt?: number | undefined;
        status: GetAllChecksStatus;
        updatedAt: number;
    };

    export const outboundSchema: z.ZodType<Outbound, z.ZodTypeDef, Checks> = z
        .object({
            completedAt: z.number().optional(),
            conclusion: GetAllChecksConclusion$.optional(),
            createdAt: z.number(),
            detailsUrl: z.string().optional(),
            id: z.string(),
            integrationId: z.string(),
            name: z.string(),
            output: z.lazy(() => GetAllChecksOutput$.outboundSchema).optional(),
            path: z.string().optional(),
            rerequestable: z.boolean(),
            startedAt: z.number().optional(),
            status: GetAllChecksStatus$,
            updatedAt: z.number(),
        })
        .transform((v) => {
            return {
                ...(v.completedAt === undefined ? null : { completedAt: v.completedAt }),
                ...(v.conclusion === undefined ? null : { conclusion: v.conclusion }),
                createdAt: v.createdAt,
                ...(v.detailsUrl === undefined ? null : { detailsUrl: v.detailsUrl }),
                id: v.id,
                integrationId: v.integrationId,
                name: v.name,
                ...(v.output === undefined ? null : { output: v.output }),
                ...(v.path === undefined ? null : { path: v.path }),
                rerequestable: v.rerequestable,
                ...(v.startedAt === undefined ? null : { startedAt: v.startedAt }),
                status: v.status,
                updatedAt: v.updatedAt,
            };
        });
}

/** @internal */
export namespace GetAllChecksResponseBody$ {
    export const inboundSchema: z.ZodType<GetAllChecksResponseBody, z.ZodTypeDef, unknown> = z
        .object({
            checks: z.array(z.lazy(() => Checks$.inboundSchema)),
        })
        .transform((v) => {
            return {
                checks: v.checks,
            };
        });

    export type Outbound = {
        checks: Array<Checks$.Outbound>;
    };

    export const outboundSchema: z.ZodType<Outbound, z.ZodTypeDef, GetAllChecksResponseBody> = z
        .object({
            checks: z.array(z.lazy(() => Checks$.outboundSchema)),
        })
        .transform((v) => {
            return {
                checks: v.checks,
            };
        });
}

/** @internal */
export namespace GetAllChecksResponse$ {
    export const inboundSchema: z.ZodType<GetAllChecksResponse, z.ZodTypeDef, unknown> = z
        .object({
            HttpMeta: components.HTTPMetadata$.inboundSchema,
            object: z.lazy(() => GetAllChecksResponseBody$.inboundSchema).optional(),
        })
        .transform((v) => {
            return {
                httpMeta: v.HttpMeta,
                ...(v.object === undefined ? null : { object: v.object }),
            };
        });

    export type Outbound = {
        HttpMeta: components.HTTPMetadata$.Outbound;
        object?: GetAllChecksResponseBody$.Outbound | undefined;
    };

    export const outboundSchema: z.ZodType<Outbound, z.ZodTypeDef, GetAllChecksResponse> = z
        .object({
            httpMeta: components.HTTPMetadata$.outboundSchema,
            object: z.lazy(() => GetAllChecksResponseBody$.outboundSchema).optional(),
        })
        .transform((v) => {
            return {
                HttpMeta: v.httpMeta,
                ...(v.object === undefined ? null : { object: v.object }),
            };
        });
}
