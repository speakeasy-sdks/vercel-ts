/*
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

import * as components from "../components";
import * as z from "zod";

export type UploadFileRequest = {
    /**
     * The file size in bytes
     */
    contentLength?: number | undefined;
    /**
     * The file SHA1 used to check the integrity
     */
    xVercelDigest?: string | undefined;
    /**
     * The file SHA1 used to check the integrity
     */
    xNowDigest?: string | undefined;
    /**
     * The file size as an alternative to `Content-Length`
     */
    xNowSize?: number | undefined;
    /**
     * The Team identifier to perform the request on behalf of.
     */
    teamId?: string | undefined;
    /**
     * The Team slug to perform the request on behalf of.
     */
    slug?: string | undefined;
};

export type UploadFileResponseBody2 = {};

export type UploadFileResponseBody1 = {
    /**
     * Array of URLs where the file was updated
     */
    urls: Array<string>;
};

/**
 * File already uploaded
 *
 * @remarks
 * File successfully uploaded
 */
export type UploadFileResponseBody = UploadFileResponseBody2 | UploadFileResponseBody1;

export type UploadFileResponse = {
    httpMeta: components.HTTPMetadata;
    /**
     * File already uploaded
     *
     * @remarks
     * File successfully uploaded
     */
    oneOf?: UploadFileResponseBody2 | UploadFileResponseBody1 | undefined;
};

/** @internal */
export namespace UploadFileRequest$ {
    export const inboundSchema: z.ZodType<UploadFileRequest, z.ZodTypeDef, unknown> = z
        .object({
            "Content-Length": z.number().optional(),
            "x-vercel-digest": z.string().optional(),
            "x-now-digest": z.string().optional(),
            "x-now-size": z.number().optional(),
            teamId: z.string().optional(),
            slug: z.string().optional(),
        })
        .transform((v) => {
            return {
                ...(v["Content-Length"] === undefined
                    ? null
                    : { contentLength: v["Content-Length"] }),
                ...(v["x-vercel-digest"] === undefined
                    ? null
                    : { xVercelDigest: v["x-vercel-digest"] }),
                ...(v["x-now-digest"] === undefined ? null : { xNowDigest: v["x-now-digest"] }),
                ...(v["x-now-size"] === undefined ? null : { xNowSize: v["x-now-size"] }),
                ...(v.teamId === undefined ? null : { teamId: v.teamId }),
                ...(v.slug === undefined ? null : { slug: v.slug }),
            };
        });

    export type Outbound = {
        "Content-Length"?: number | undefined;
        "x-vercel-digest"?: string | undefined;
        "x-now-digest"?: string | undefined;
        "x-now-size"?: number | undefined;
        teamId?: string | undefined;
        slug?: string | undefined;
    };

    export const outboundSchema: z.ZodType<Outbound, z.ZodTypeDef, UploadFileRequest> = z
        .object({
            contentLength: z.number().optional(),
            xVercelDigest: z.string().optional(),
            xNowDigest: z.string().optional(),
            xNowSize: z.number().optional(),
            teamId: z.string().optional(),
            slug: z.string().optional(),
        })
        .transform((v) => {
            return {
                ...(v.contentLength === undefined ? null : { "Content-Length": v.contentLength }),
                ...(v.xVercelDigest === undefined ? null : { "x-vercel-digest": v.xVercelDigest }),
                ...(v.xNowDigest === undefined ? null : { "x-now-digest": v.xNowDigest }),
                ...(v.xNowSize === undefined ? null : { "x-now-size": v.xNowSize }),
                ...(v.teamId === undefined ? null : { teamId: v.teamId }),
                ...(v.slug === undefined ? null : { slug: v.slug }),
            };
        });
}

/** @internal */
export namespace UploadFileResponseBody2$ {
    export const inboundSchema: z.ZodType<UploadFileResponseBody2, z.ZodTypeDef, unknown> =
        z.object({});

    export type Outbound = {};

    export const outboundSchema: z.ZodType<Outbound, z.ZodTypeDef, UploadFileResponseBody2> =
        z.object({});
}

/** @internal */
export namespace UploadFileResponseBody1$ {
    export const inboundSchema: z.ZodType<UploadFileResponseBody1, z.ZodTypeDef, unknown> = z
        .object({
            urls: z.array(z.string()),
        })
        .transform((v) => {
            return {
                urls: v.urls,
            };
        });

    export type Outbound = {
        urls: Array<string>;
    };

    export const outboundSchema: z.ZodType<Outbound, z.ZodTypeDef, UploadFileResponseBody1> = z
        .object({
            urls: z.array(z.string()),
        })
        .transform((v) => {
            return {
                urls: v.urls,
            };
        });
}

/** @internal */
export namespace UploadFileResponseBody$ {
    export const inboundSchema: z.ZodType<UploadFileResponseBody, z.ZodTypeDef, unknown> = z.union([
        z.lazy(() => UploadFileResponseBody2$.inboundSchema),
        z.lazy(() => UploadFileResponseBody1$.inboundSchema),
    ]);

    export type Outbound = UploadFileResponseBody2$.Outbound | UploadFileResponseBody1$.Outbound;
    export const outboundSchema: z.ZodType<Outbound, z.ZodTypeDef, UploadFileResponseBody> =
        z.union([
            z.lazy(() => UploadFileResponseBody2$.outboundSchema),
            z.lazy(() => UploadFileResponseBody1$.outboundSchema),
        ]);
}

/** @internal */
export namespace UploadFileResponse$ {
    export const inboundSchema: z.ZodType<UploadFileResponse, z.ZodTypeDef, unknown> = z
        .object({
            HttpMeta: components.HTTPMetadata$.inboundSchema,
            oneOf: z
                .union([
                    z.lazy(() => UploadFileResponseBody2$.inboundSchema),
                    z.lazy(() => UploadFileResponseBody1$.inboundSchema),
                ])
                .optional(),
        })
        .transform((v) => {
            return {
                httpMeta: v.HttpMeta,
                ...(v.oneOf === undefined ? null : { oneOf: v.oneOf }),
            };
        });

    export type Outbound = {
        HttpMeta: components.HTTPMetadata$.Outbound;
        oneOf?: UploadFileResponseBody2$.Outbound | UploadFileResponseBody1$.Outbound | undefined;
    };

    export const outboundSchema: z.ZodType<Outbound, z.ZodTypeDef, UploadFileResponse> = z
        .object({
            httpMeta: components.HTTPMetadata$.outboundSchema,
            oneOf: z
                .union([
                    z.lazy(() => UploadFileResponseBody2$.outboundSchema),
                    z.lazy(() => UploadFileResponseBody1$.outboundSchema),
                ])
                .optional(),
        })
        .transform((v) => {
            return {
                HttpMeta: v.httpMeta,
                ...(v.oneOf === undefined ? null : { oneOf: v.oneOf }),
            };
        });
}
