/*
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

import * as components from "../components";
import * as z from "zod";

export type RerequestCheckRequest = {
    /**
     * The deployment to rerun the check for.
     */
    deploymentId: string;
    /**
     * The check to rerun
     */
    checkId: string;
    /**
     * The Team identifier to perform the request on behalf of.
     */
    teamId?: string | undefined;
    /**
     * The Team slug to perform the request on behalf of.
     */
    slug?: string | undefined;
};

export type RerequestCheckResponseBody = {};

export type RerequestCheckResponse = {
    httpMeta: components.HTTPMetadata;
    object?: RerequestCheckResponseBody | undefined;
};

/** @internal */
export namespace RerequestCheckRequest$ {
    export const inboundSchema: z.ZodType<RerequestCheckRequest, z.ZodTypeDef, unknown> = z
        .object({
            deploymentId: z.string(),
            checkId: z.string(),
            teamId: z.string().optional(),
            slug: z.string().optional(),
        })
        .transform((v) => {
            return {
                deploymentId: v.deploymentId,
                checkId: v.checkId,
                ...(v.teamId === undefined ? null : { teamId: v.teamId }),
                ...(v.slug === undefined ? null : { slug: v.slug }),
            };
        });

    export type Outbound = {
        deploymentId: string;
        checkId: string;
        teamId?: string | undefined;
        slug?: string | undefined;
    };

    export const outboundSchema: z.ZodType<Outbound, z.ZodTypeDef, RerequestCheckRequest> = z
        .object({
            deploymentId: z.string(),
            checkId: z.string(),
            teamId: z.string().optional(),
            slug: z.string().optional(),
        })
        .transform((v) => {
            return {
                deploymentId: v.deploymentId,
                checkId: v.checkId,
                ...(v.teamId === undefined ? null : { teamId: v.teamId }),
                ...(v.slug === undefined ? null : { slug: v.slug }),
            };
        });
}

/** @internal */
export namespace RerequestCheckResponseBody$ {
    export const inboundSchema: z.ZodType<RerequestCheckResponseBody, z.ZodTypeDef, unknown> =
        z.object({});

    export type Outbound = {};

    export const outboundSchema: z.ZodType<Outbound, z.ZodTypeDef, RerequestCheckResponseBody> =
        z.object({});
}

/** @internal */
export namespace RerequestCheckResponse$ {
    export const inboundSchema: z.ZodType<RerequestCheckResponse, z.ZodTypeDef, unknown> = z
        .object({
            HttpMeta: components.HTTPMetadata$.inboundSchema,
            object: z.lazy(() => RerequestCheckResponseBody$.inboundSchema).optional(),
        })
        .transform((v) => {
            return {
                httpMeta: v.HttpMeta,
                ...(v.object === undefined ? null : { object: v.object }),
            };
        });

    export type Outbound = {
        HttpMeta: components.HTTPMetadata$.Outbound;
        object?: RerequestCheckResponseBody$.Outbound | undefined;
    };

    export const outboundSchema: z.ZodType<Outbound, z.ZodTypeDef, RerequestCheckResponse> = z
        .object({
            httpMeta: components.HTTPMetadata$.outboundSchema,
            object: z.lazy(() => RerequestCheckResponseBody$.outboundSchema).optional(),
        })
        .transform((v) => {
            return {
                HttpMeta: v.httpMeta,
                ...(v.object === undefined ? null : { object: v.object }),
            };
        });
}
