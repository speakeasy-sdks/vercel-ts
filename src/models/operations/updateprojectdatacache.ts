/*
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

import * as components from "../components";
import * as z from "zod";

export type UpdateProjectDataCacheRequestBody = {
    /**
     * Enable or disable data cache for the project - default: false
     */
    disabled?: boolean | undefined;
};

export type UpdateProjectDataCacheRequest = {
    /**
     * The unique project identifier
     */
    projectId: string;
    /**
     * The Team identifier to perform the request on behalf of.
     */
    teamId?: string | undefined;
    /**
     * The Team slug to perform the request on behalf of.
     */
    slug?: string | undefined;
    requestBody?: UpdateProjectDataCacheRequestBody | undefined;
};

export type Analytics = {
    id: string;
    canceledAt?: number | null | undefined;
    disabledAt: number;
    enabledAt: number;
    paidAt?: number | undefined;
    sampleRatePercent?: number | null | undefined;
    spendLimitInDollars?: number | null | undefined;
};

export type SpeedInsights = {
    id: string;
    enabledAt?: number | undefined;
    disabledAt?: number | undefined;
    canceledAt?: number | undefined;
    hasData?: boolean | undefined;
    paidAt?: number | undefined;
};

export type Definitions = {
    /**
     * The hostname that should be used.
     */
    host: string;
    /**
     * The path that should be called for the cronjob.
     */
    path: string;
    /**
     * The cron expression.
     */
    schedule: string;
};

export type Crons = {
    /**
     * The time the feature was enabled for this project. Note: It enables automatically with the first Deployment that outputs cronjobs.
     */
    enabledAt: number;
    /**
     * The time the feature was disabled for this project.
     */
    disabledAt: number | null;
    updatedAt: number;
    /**
     * The ID of the Deployment from which the definitions originated.
     */
    deploymentId: string | null;
    definitions: Array<Definitions>;
};

export type DataCache = {
    userDisabled: boolean;
    storageSizeBytes?: number | null | undefined;
    unlimited?: boolean | undefined;
};

export enum UpdateProjectDataCacheTarget2 {
    Production = "production",
    Preview = "preview",
    Development = "development",
}

export enum UpdateProjectDataCacheTarget1 {
    Production = "production",
    Preview = "preview",
    Development = "development",
}

export type UpdateProjectDataCacheTarget =
    | Array<UpdateProjectDataCacheTarget1>
    | UpdateProjectDataCacheTarget2;

export enum UpdateProjectDataCacheType {
    Secret = "secret",
    System = "system",
    Encrypted = "encrypted",
    Plain = "plain",
    Sensitive = "sensitive",
}

export enum UpdateProjectDataCacheContentHintProjectsResponse200ApplicationJSONResponseBodyEnv14Type {
    IntegrationStoreSecret = "integration-store-secret",
}

export type UpdateProjectDataCacheContentHint14 = {
    type: UpdateProjectDataCacheContentHintProjectsResponse200ApplicationJSONResponseBodyEnv14Type;
    storeId: string;
};

export enum UpdateProjectDataCacheContentHintProjectsResponse200ApplicationJSONResponseBodyEnv13Type {
    PostgresUrlNoSsl = "postgres-url-no-ssl",
}

export type UpdateProjectDataCacheContentHint13 = {
    type: UpdateProjectDataCacheContentHintProjectsResponse200ApplicationJSONResponseBodyEnv13Type;
    storeId: string;
};

export enum UpdateProjectDataCacheContentHintProjectsResponse200ApplicationJSONResponseBodyEnv12Type {
    PostgresDatabase = "postgres-database",
}

export type UpdateProjectDataCacheContentHint12 = {
    type: UpdateProjectDataCacheContentHintProjectsResponse200ApplicationJSONResponseBodyEnv12Type;
    storeId: string;
};

export enum UpdateProjectDataCacheContentHintProjectsResponse200ApplicationJSONResponseBodyEnv11Type {
    PostgresPassword = "postgres-password",
}

export type UpdateProjectDataCacheContentHint11 = {
    type: UpdateProjectDataCacheContentHintProjectsResponse200ApplicationJSONResponseBodyEnv11Type;
    storeId: string;
};

export enum UpdateProjectDataCacheContentHintProjectsResponse200ApplicationJSONResponseBodyEnv10Type {
    PostgresHost = "postgres-host",
}

export type UpdateProjectDataCacheContentHint10 = {
    type: UpdateProjectDataCacheContentHintProjectsResponse200ApplicationJSONResponseBodyEnv10Type;
    storeId: string;
};

export enum UpdateProjectDataCacheContentHintProjectsResponse200ApplicationJSONResponseBodyEnv9Type {
    PostgresUser = "postgres-user",
}

export type UpdateProjectDataCacheContentHint9 = {
    type: UpdateProjectDataCacheContentHintProjectsResponse200ApplicationJSONResponseBodyEnv9Type;
    storeId: string;
};

export enum UpdateProjectDataCacheContentHintProjectsResponse200ApplicationJSONResponseBodyEnvType {
    PostgresPrismaUrl = "postgres-prisma-url",
}

export type UpdateProjectDataCacheContentHint8 = {
    type: UpdateProjectDataCacheContentHintProjectsResponse200ApplicationJSONResponseBodyEnvType;
    storeId: string;
};

export enum UpdateProjectDataCacheContentHintProjectsResponse200ApplicationJSONResponseBodyType {
    PostgresUrlNonPooling = "postgres-url-non-pooling",
}

export type UpdateProjectDataCacheContentHint7 = {
    type: UpdateProjectDataCacheContentHintProjectsResponse200ApplicationJSONResponseBodyType;
    storeId: string;
};

export enum UpdateProjectDataCacheContentHintProjectsResponse200ApplicationJSONType {
    PostgresUrl = "postgres-url",
}

export type UpdateProjectDataCacheContentHint6 = {
    type: UpdateProjectDataCacheContentHintProjectsResponse200ApplicationJSONType;
    storeId: string;
};

export enum UpdateProjectDataCacheContentHintProjectsResponse200Type {
    BlobReadWriteToken = "blob-read-write-token",
}

export type UpdateProjectDataCacheContentHint5 = {
    type: UpdateProjectDataCacheContentHintProjectsResponse200Type;
    storeId: string;
};

export enum UpdateProjectDataCacheContentHintProjectsResponseType {
    RedisRestApiReadOnlyToken = "redis-rest-api-read-only-token",
}

export type UpdateProjectDataCacheContentHint4 = {
    type: UpdateProjectDataCacheContentHintProjectsResponseType;
    storeId: string;
};

export enum UpdateProjectDataCacheContentHintProjectsType {
    RedisRestApiToken = "redis-rest-api-token",
}

export type UpdateProjectDataCacheContentHint3 = {
    type: UpdateProjectDataCacheContentHintProjectsType;
    storeId: string;
};

export enum UpdateProjectDataCacheContentHintType {
    RedisRestApiUrl = "redis-rest-api-url",
}

export type UpdateProjectDataCacheContentHint2 = {
    type: UpdateProjectDataCacheContentHintType;
    storeId: string;
};

export enum UpdateProjectDataCacheContentHintProjectsResponse200ApplicationJSONResponseBodyEnv1Type {
    RedisUrl = "redis-url",
}

export type UpdateProjectDataCacheContentHint1 = {
    type: UpdateProjectDataCacheContentHintProjectsResponse200ApplicationJSONResponseBodyEnv1Type;
    storeId: string;
};

export type UpdateProjectDataCacheContentHint =
    | UpdateProjectDataCacheContentHint1
    | UpdateProjectDataCacheContentHint2
    | UpdateProjectDataCacheContentHint3
    | UpdateProjectDataCacheContentHint4
    | UpdateProjectDataCacheContentHint5
    | UpdateProjectDataCacheContentHint6
    | UpdateProjectDataCacheContentHint7
    | UpdateProjectDataCacheContentHint8
    | UpdateProjectDataCacheContentHint9
    | UpdateProjectDataCacheContentHint10
    | UpdateProjectDataCacheContentHint11
    | UpdateProjectDataCacheContentHint12
    | UpdateProjectDataCacheContentHint13
    | UpdateProjectDataCacheContentHint14;

export enum UpdateProjectDataCacheProjectsResponse200Type {
    FlagsSecret = "flags-secret",
}

/**
 * Similar to `contentHints`, but should not be exposed to the user.
 */
export type UpdateProjectDataCacheInternalContentHint = {
    type: UpdateProjectDataCacheProjectsResponse200Type;
    /**
     * Contains the `value` of the env variable, encrypted with a special key to make decryption possible in the subscriber Lambda.
     */
    encryptedValue: string;
};

export type Env = {
    target?: Array<UpdateProjectDataCacheTarget1> | UpdateProjectDataCacheTarget2 | undefined;
    type: UpdateProjectDataCacheType;
    id?: string | undefined;
    key: string;
    value: string;
    configurationId?: string | null | undefined;
    createdAt?: number | undefined;
    updatedAt?: number | undefined;
    createdBy?: string | null | undefined;
    updatedBy?: string | null | undefined;
    gitBranch?: string | undefined;
    edgeConfigId?: string | null | undefined;
    edgeConfigTokenId?: string | null | undefined;
    contentHint?:
        | UpdateProjectDataCacheContentHint1
        | UpdateProjectDataCacheContentHint2
        | UpdateProjectDataCacheContentHint3
        | UpdateProjectDataCacheContentHint4
        | UpdateProjectDataCacheContentHint5
        | UpdateProjectDataCacheContentHint6
        | UpdateProjectDataCacheContentHint7
        | UpdateProjectDataCacheContentHint8
        | UpdateProjectDataCacheContentHint9
        | UpdateProjectDataCacheContentHint10
        | UpdateProjectDataCacheContentHint11
        | UpdateProjectDataCacheContentHint12
        | UpdateProjectDataCacheContentHint13
        | UpdateProjectDataCacheContentHint14
        | null
        | undefined;
    /**
     * Similar to `contentHints`, but should not be exposed to the user.
     */
    internalContentHint?: UpdateProjectDataCacheInternalContentHint | null | undefined;
    /**
     * Whether `value` is decrypted.
     */
    decrypted?: boolean | undefined;
    comment?: string | undefined;
    customEnvironmentId?: string | undefined;
};

export enum UpdateProjectDataCacheFramework {
    Blitzjs = "blitzjs",
    Nextjs = "nextjs",
    Gatsby = "gatsby",
    Remix = "remix",
    Astro = "astro",
    Hexo = "hexo",
    Eleventy = "eleventy",
    Docusaurus2 = "docusaurus-2",
    Docusaurus = "docusaurus",
    Preact = "preact",
    Solidstart1 = "solidstart-1",
    Solidstart = "solidstart",
    Dojo = "dojo",
    Ember = "ember",
    Vue = "vue",
    Scully = "scully",
    IonicAngular = "ionic-angular",
    Angular = "angular",
    Polymer = "polymer",
    Svelte = "svelte",
    Sveltekit = "sveltekit",
    Sveltekit1 = "sveltekit-1",
    IonicReact = "ionic-react",
    CreateReactApp = "create-react-app",
    Gridsome = "gridsome",
    Umijs = "umijs",
    Sapper = "sapper",
    Saber = "saber",
    Stencil = "stencil",
    Nuxtjs = "nuxtjs",
    Redwoodjs = "redwoodjs",
    Hugo = "hugo",
    Jekyll = "jekyll",
    Brunch = "brunch",
    Middleman = "middleman",
    Zola = "zola",
    Hydrogen = "hydrogen",
    Vite = "vite",
    Vitepress = "vitepress",
    Vuepress = "vuepress",
    Parcel = "parcel",
    Sanity = "sanity",
    Storybook = "storybook",
}

export type AliasAssigned = number | boolean;

export type UpdateProjectDataCacheAliasError = {
    code: string;
    message: string;
};

export type UpdateProjectDataCacheBuilds = {
    use: string;
    src?: string | undefined;
    dest?: string | undefined;
};

export type UpdateProjectDataCacheCreator = {
    email: string;
    githubLogin?: string | undefined;
    gitlabLogin?: string | undefined;
    uid: string;
    username: string;
};

export enum UpdateProjectDataCachePlan {
    Pro = "pro",
    Enterprise = "enterprise",
    Hobby = "hobby",
}

export enum UpdateProjectDataCacheReadyState {
    Building = "BUILDING",
    Error = "ERROR",
    Initializing = "INITIALIZING",
    Queued = "QUEUED",
    Ready = "READY",
    Canceled = "CANCELED",
}

export enum UpdateProjectDataCacheReadySubstate {
    Staged = "STAGED",
    Promoted = "PROMOTED",
}

export enum UpdateProjectDataCacheProjectsType {
    Lambdas = "LAMBDAS",
}

export enum UpdateProjectDataCacheChecksConclusion {
    Succeeded = "succeeded",
    Failed = "failed",
    Skipped = "skipped",
    Canceled = "canceled",
}

export enum UpdateProjectDataCacheChecksState {
    Registered = "registered",
    Running = "running",
    Completed = "completed",
}

export type OidcTokenClaims = string | Array<string>;

export type LatestDeployments = {
    alias?: Array<string> | undefined;
    aliasAssigned?: number | boolean | null | undefined;
    aliasError?: UpdateProjectDataCacheAliasError | null | undefined;
    aliasFinal?: string | null | undefined;
    automaticAliases?: Array<string> | undefined;
    builds?: Array<UpdateProjectDataCacheBuilds> | undefined;
    connectBuildsEnabled?: boolean | undefined;
    connectConfigurationId?: string | undefined;
    createdAt: number;
    createdIn: string;
    creator: UpdateProjectDataCacheCreator | null;
    deploymentHostname: string;
    name: string;
    forced?: boolean | undefined;
    id: string;
    meta?: Record<string, string> | undefined;
    monorepoManager?: string | null | undefined;
    plan: UpdateProjectDataCachePlan;
    private: boolean;
    readyState: UpdateProjectDataCacheReadyState;
    readySubstate?: UpdateProjectDataCacheReadySubstate | undefined;
    requestedAt?: number | undefined;
    target?: string | null | undefined;
    teamId?: string | null | undefined;
    type: UpdateProjectDataCacheProjectsType;
    url: string;
    userId: string;
    withCache?: boolean | undefined;
    checksConclusion?: UpdateProjectDataCacheChecksConclusion | undefined;
    checksState?: UpdateProjectDataCacheChecksState | undefined;
    readyAt?: number | undefined;
    buildingAt?: number | undefined;
    /**
     * Whether or not preview comments are enabled for the deployment
     */
    previewCommentsEnabled?: boolean | undefined;
    oidcTokenClaims?: Record<string, string | Array<string>> | undefined;
};

export enum UpdateProjectDataCacheLinkProjectsType {
    Bitbucket = "bitbucket",
}

export type UpdateProjectDataCacheLinkDeployHooks = {
    createdAt?: number | undefined;
    id: string;
    name: string;
    ref: string;
    url: string;
};

export type Link3 = {
    name?: string | undefined;
    slug?: string | undefined;
    owner?: string | undefined;
    type?: UpdateProjectDataCacheLinkProjectsType | undefined;
    uuid?: string | undefined;
    workspaceUuid?: string | undefined;
    createdAt?: number | undefined;
    deployHooks: Array<UpdateProjectDataCacheLinkDeployHooks>;
    gitCredentialId?: string | undefined;
    updatedAt?: number | undefined;
    sourceless?: boolean | undefined;
    productionBranch?: string | undefined;
};

export enum UpdateProjectDataCacheLinkType {
    Gitlab = "gitlab",
}

export type LinkDeployHooks = {
    createdAt?: number | undefined;
    id: string;
    name: string;
    ref: string;
    url: string;
};

export type Link2 = {
    projectId?: string | undefined;
    projectName?: string | undefined;
    projectNameWithNamespace?: string | undefined;
    projectNamespace?: string | undefined;
    projectUrl?: string | undefined;
    type?: UpdateProjectDataCacheLinkType | undefined;
    createdAt?: number | undefined;
    deployHooks: Array<LinkDeployHooks>;
    gitCredentialId?: string | undefined;
    updatedAt?: number | undefined;
    sourceless?: boolean | undefined;
    productionBranch?: string | undefined;
};

export enum LinkType {
    Github = "github",
}

export type DeployHooks = {
    createdAt?: number | undefined;
    id: string;
    name: string;
    ref: string;
    url: string;
};

export type Link1 = {
    org?: string | undefined;
    repo?: string | undefined;
    repoId?: number | undefined;
    type?: LinkType | undefined;
    createdAt?: number | undefined;
    deployHooks: Array<DeployHooks>;
    gitCredentialId?: string | undefined;
    updatedAt?: number | undefined;
    sourceless?: boolean | undefined;
    productionBranch?: string | undefined;
};

export type Link = Link1 | Link2 | Link3;

export enum UpdateProjectDataCacheNodeVersion {
    TwentyX = "20.x",
    EighteenX = "18.x",
    SixteenX = "16.x",
    FourteenX = "14.x",
    TwelveX = "12.x",
    TenX = "10.x",
    Eight10X = "8.10.x",
}

export type UpdateProjectDataCachePaths = {
    value: string;
};

export type UpdateProjectDataCacheOptionsAllowlist = {
    paths: Array<UpdateProjectDataCachePaths>;
};

export type UpdateProjectDataCachePasswordProtection = {};

export enum UpdateProjectDataCacheDeploymentType {
    All = "all",
    Preview = "preview",
    ProdDeploymentUrlsAndAllPreviews = "prod_deployment_urls_and_all_previews",
}

export type UpdateProjectDataCacheSsoProtection = {
    deploymentType: UpdateProjectDataCacheDeploymentType;
};

export type Targets = string | Array<string>;

export type Permissions = {
    accessGroup?: Array<components.ACLAction> | undefined;
    aliasGlobal?: Array<components.ACLAction> | undefined;
    analyticsSampling?: Array<components.ACLAction> | undefined;
    analyticsUsage?: Array<components.ACLAction> | undefined;
    auditLog?: Array<components.ACLAction> | undefined;
    billingAddress?: Array<components.ACLAction> | undefined;
    billingInformation?: Array<components.ACLAction> | undefined;
    billingInvoice?: Array<components.ACLAction> | undefined;
    billingInvoiceEmailRecipient?: Array<components.ACLAction> | undefined;
    billingInvoiceLanguage?: Array<components.ACLAction> | undefined;
    billingPlan?: Array<components.ACLAction> | undefined;
    billingPurchaseOrder?: Array<components.ACLAction> | undefined;
    billingTaxId?: Array<components.ACLAction> | undefined;
    blob?: Array<components.ACLAction> | undefined;
    budget?: Array<components.ACLAction> | undefined;
    cacheArtifact?: Array<components.ACLAction> | undefined;
    cacheArtifactUsageEvent?: Array<components.ACLAction> | undefined;
    codeChecks?: Array<components.ACLAction> | undefined;
    concurrentBuilds?: Array<components.ACLAction> | undefined;
    connect?: Array<components.ACLAction> | undefined;
    connectConfiguration?: Array<components.ACLAction> | undefined;
    domain?: Array<components.ACLAction> | undefined;
    domainAcceptDelegation?: Array<components.ACLAction> | undefined;
    domainAuthCodes?: Array<components.ACLAction> | undefined;
    domainCertificate?: Array<components.ACLAction> | undefined;
    domainCheckConfig?: Array<components.ACLAction> | undefined;
    domainMove?: Array<components.ACLAction> | undefined;
    domainPurchase?: Array<components.ACLAction> | undefined;
    domainRecord?: Array<components.ACLAction> | undefined;
    domainTransferIn?: Array<components.ACLAction> | undefined;
    event?: Array<components.ACLAction> | undefined;
    ownEvent?: Array<components.ACLAction> | undefined;
    sensitiveEnvironmentVariablePolicy?: Array<components.ACLAction> | undefined;
    fileUpload?: Array<components.ACLAction> | undefined;
    gitRepository?: Array<components.ACLAction> | undefined;
    ipBlocking?: Array<components.ACLAction> | undefined;
    integration?: Array<components.ACLAction> | undefined;
    integrationConfiguration?: Array<components.ACLAction> | undefined;
    integrationConfigurationTransfer?: Array<components.ACLAction> | undefined;
    integrationConfigurationProjects?: Array<components.ACLAction> | undefined;
    integrationVercelConfigurationOverride?: Array<components.ACLAction> | undefined;
    integrationStore?: Array<components.ACLAction> | undefined;
    integrationEvent?: Array<components.ACLAction> | undefined;
    integrationResourceSecrets?: Array<components.ACLAction> | undefined;
    marketplaceBillingData?: Array<components.ACLAction> | undefined;
    jobGlobal?: Array<components.ACLAction> | undefined;
    logDrain?: Array<components.ACLAction> | undefined;
    monitoring?: Array<components.ACLAction> | undefined;
    monitoringSettings?: Array<components.ACLAction> | undefined;
    monitoringQuery?: Array<components.ACLAction> | undefined;
    monitoringChart?: Array<components.ACLAction> | undefined;
    monitoringAlert?: Array<components.ACLAction> | undefined;
    notificationDeploymentFailed?: Array<components.ACLAction> | undefined;
    notificationDomainConfiguration?: Array<components.ACLAction> | undefined;
    notificationDomainExpire?: Array<components.ACLAction> | undefined;
    notificationDomainMoved?: Array<components.ACLAction> | undefined;
    notificationDomainPurchase?: Array<components.ACLAction> | undefined;
    notificationDomainRenewal?: Array<components.ACLAction> | undefined;
    notificationDomainTransfer?: Array<components.ACLAction> | undefined;
    notificationDomainUnverified?: Array<components.ACLAction> | undefined;
    notificationMonitoringAlert?: Array<components.ACLAction> | undefined;
    notificationPaymentFailed?: Array<components.ACLAction> | undefined;
    notificationUsageAlert?: Array<components.ACLAction> | undefined;
    notificationCustomerBudget?: Array<components.ACLAction> | undefined;
    notificationStatementOfReasons?: Array<components.ACLAction> | undefined;
    oauth2Connection?: Array<components.ACLAction> | undefined;
    openTelemetryEndpoint?: Array<components.ACLAction> | undefined;
    paymentMethod?: Array<components.ACLAction> | undefined;
    permissions?: Array<components.ACLAction> | undefined;
    postgres?: Array<components.ACLAction> | undefined;
    previewDeploymentSuffix?: Array<components.ACLAction> | undefined;
    proTrialOnboarding?: Array<components.ACLAction> | undefined;
    seawallConfig?: Array<components.ACLAction> | undefined;
    sharedEnvVars?: Array<components.ACLAction> | undefined;
    sharedEnvVarsProduction?: Array<components.ACLAction> | undefined;
    space?: Array<components.ACLAction> | undefined;
    spaceRun?: Array<components.ACLAction> | undefined;
    passwordProtectionInvoiceItem?: Array<components.ACLAction> | undefined;
    rateLimit?: Array<components.ACLAction> | undefined;
    redis?: Array<components.ACLAction> | undefined;
    repository?: Array<components.ACLAction> | undefined;
    remoteCaching?: Array<components.ACLAction> | undefined;
    samlConfig?: Array<components.ACLAction> | undefined;
    secret?: Array<components.ACLAction> | undefined;
    redisStoreTokenSet?: Array<components.ACLAction> | undefined;
    blobStoreTokenSet?: Array<components.ACLAction> | undefined;
    postgresStoreTokenSet?: Array<components.ACLAction> | undefined;
    integrationStoreTokenSet?: Array<components.ACLAction> | undefined;
    supportCase?: Array<components.ACLAction> | undefined;
    supportCaseComment?: Array<components.ACLAction> | undefined;
    dataCacheBillingSettings?: Array<components.ACLAction> | undefined;
    team?: Array<components.ACLAction> | undefined;
    teamAccessRequest?: Array<components.ACLAction> | undefined;
    teamFellowMembership?: Array<components.ACLAction> | undefined;
    teamInvite?: Array<components.ACLAction> | undefined;
    teamInviteCode?: Array<components.ACLAction> | undefined;
    teamJoin?: Array<components.ACLAction> | undefined;
    teamOwnMembership?: Array<components.ACLAction> | undefined;
    teamOwnMembershipDisconnectSAML?: Array<components.ACLAction> | undefined;
    token?: Array<components.ACLAction> | undefined;
    usage?: Array<components.ACLAction> | undefined;
    usageCycle?: Array<components.ACLAction> | undefined;
    user?: Array<components.ACLAction> | undefined;
    userConnection?: Array<components.ACLAction> | undefined;
    webAnalyticsPlan?: Array<components.ACLAction> | undefined;
    webAuthn?: Array<components.ACLAction> | undefined;
    edgeConfig?: Array<components.ACLAction> | undefined;
    edgeConfigItem?: Array<components.ACLAction> | undefined;
    edgeConfigSchema?: Array<components.ACLAction> | undefined;
    edgeConfigToken?: Array<components.ACLAction> | undefined;
    webhook?: Array<components.ACLAction> | undefined;
    webhookEvent?: Array<components.ACLAction> | undefined;
    endpointVerification?: Array<components.ACLAction> | undefined;
    projectTransferIn?: Array<components.ACLAction> | undefined;
    oauth2Application?: Array<components.ACLAction> | undefined;
    aliasProject?: Array<components.ACLAction> | undefined;
    aliasProtectionBypass?: Array<components.ACLAction> | undefined;
    productionAliasProtectionBypass?: Array<components.ACLAction> | undefined;
    connectConfigurationLink?: Array<components.ACLAction> | undefined;
    dataCacheNamespace?: Array<components.ACLAction> | undefined;
    deployment?: Array<components.ACLAction> | undefined;
    deploymentCheck?: Array<components.ACLAction> | undefined;
    deploymentCheckPreview?: Array<components.ACLAction> | undefined;
    deploymentCheckReRunFromProductionBranch?: Array<components.ACLAction> | undefined;
    deploymentProductionGit?: Array<components.ACLAction> | undefined;
    deploymentPreview?: Array<components.ACLAction> | undefined;
    deploymentPrivate?: Array<components.ACLAction> | undefined;
    deploymentPromote?: Array<components.ACLAction> | undefined;
    deploymentRollback?: Array<components.ACLAction> | undefined;
    environments?: Array<components.ACLAction> | undefined;
    logs?: Array<components.ACLAction> | undefined;
    logsPreset?: Array<components.ACLAction> | undefined;
    passwordProtection?: Array<components.ACLAction> | undefined;
    optionsAllowlist?: Array<components.ACLAction> | undefined;
    job?: Array<components.ACLAction> | undefined;
    project?: Array<components.ACLAction> | undefined;
    projectAccessGroup?: Array<components.ACLAction> | undefined;
    projectAnalyticsSampling?: Array<components.ACLAction> | undefined;
    projectDeploymentHook?: Array<components.ACLAction> | undefined;
    projectDomain?: Array<components.ACLAction> | undefined;
    projectDomainMove?: Array<components.ACLAction> | undefined;
    projectDomainCheckConfig?: Array<components.ACLAction> | undefined;
    projectEnvVars?: Array<components.ACLAction> | undefined;
    projectEnvVarsProduction?: Array<components.ACLAction> | undefined;
    projectEnvVarsUnownedByIntegration?: Array<components.ACLAction> | undefined;
    projectId?: Array<components.ACLAction> | undefined;
    projectIntegrationConfiguration?: Array<components.ACLAction> | undefined;
    projectLink?: Array<components.ACLAction> | undefined;
    projectMember?: Array<components.ACLAction> | undefined;
    projectMonitoring?: Array<components.ACLAction> | undefined;
    projectPermissions?: Array<components.ACLAction> | undefined;
    projectProductionBranch?: Array<components.ACLAction> | undefined;
    projectTransfer?: Array<components.ACLAction> | undefined;
    projectTransferOut?: Array<components.ACLAction> | undefined;
    projectProtectionBypass?: Array<components.ACLAction> | undefined;
    projectUsage?: Array<components.ACLAction> | undefined;
    projectAnalyticsUsage?: Array<components.ACLAction> | undefined;
    projectSupportCase?: Array<components.ACLAction> | undefined;
    projectSupportCaseComment?: Array<components.ACLAction> | undefined;
    projectDeploymentExpiration?: Array<components.ACLAction> | undefined;
    skewProtection?: Array<components.ACLAction> | undefined;
    analytics?: Array<components.ACLAction> | undefined;
    trustedIps?: Array<components.ACLAction> | undefined;
    webAnalytics?: Array<components.ACLAction> | undefined;
    sharedEnvVarConnection?: Array<components.ACLAction> | undefined;
};

export type LastRollbackTarget = {};

export enum JobStatus {
    Succeeded = "succeeded",
    Failed = "failed",
    Skipped = "skipped",
    Pending = "pending",
    InProgress = "in-progress",
}

export enum UpdateProjectDataCacheProjectsResponseType {
    Promote = "promote",
    Rollback = "rollback",
}

export type LastAliasRequest = {
    fromDeploymentId: string;
    toDeploymentId: string;
    jobStatus: JobStatus;
    requestedAt: number;
    type: UpdateProjectDataCacheProjectsResponseType;
};

export enum Scope {
    AutomationBypass = "automation-bypass",
}

export type ProtectionBypass = {
    createdAt: number;
    createdBy: string;
    scope: Scope;
};

export enum UpdateProjectDataCacheTrustedIpsDeploymentType {
    All = "all",
    Preview = "preview",
    ProdDeploymentUrlsAndAllPreviews = "prod_deployment_urls_and_all_previews",
    Production = "production",
}

export type TrustedIps2 = {
    deploymentType: UpdateProjectDataCacheTrustedIpsDeploymentType;
};

export enum TrustedIpsDeploymentType {
    All = "all",
    Preview = "preview",
    ProdDeploymentUrlsAndAllPreviews = "prod_deployment_urls_and_all_previews",
    Production = "production",
}

export type UpdateProjectDataCacheTrustedIpsAddresses = {
    value: string;
    note?: string | undefined;
};

export enum UpdateProjectDataCacheTrustedIpsProtectionMode {
    Additional = "additional",
    Exclusive = "exclusive",
}

export type TrustedIps1 = {
    deploymentType: TrustedIpsDeploymentType;
    addresses: Array<UpdateProjectDataCacheTrustedIpsAddresses>;
    protectionMode: UpdateProjectDataCacheTrustedIpsProtectionMode;
};

export type UpdateProjectDataCacheTrustedIps = TrustedIps2 | TrustedIps1;

export type GitComments = {
    /**
     * Whether the Vercel bot should comment on PRs
     */
    onPullRequest: boolean;
    /**
     * Whether the Vercel bot should comment on commits
     */
    onCommit: boolean;
};

export type WebAnalytics = {
    id: string;
    disabledAt?: number | undefined;
    canceledAt?: number | undefined;
    enabledAt?: number | undefined;
    hasData?: boolean | undefined;
};

export type Src2 = {
    re?: string | undefined;
    eq?: string | undefined;
    neq?: string | undefined;
    inc?: Array<string> | undefined;
    ninc?: Array<string> | undefined;
    pre?: string | undefined;
    suf?: string | undefined;
    gt?: number | undefined;
    gte?: number | undefined;
    lt?: number | undefined;
    lte?: number | undefined;
};

export type Src = Src2 | string;

export enum UpdateProjectDataCacheProjectsResponse200ApplicationJSONType {
    Host = "host",
    Method = "method",
    Path = "path",
    Header = "header",
    Cookie = "cookie",
    Query = "query",
    IpAddress = "ip_address",
    Protocol = "protocol",
    Scheme = "scheme",
    Region = "region",
}

export type UpdateProjectDataCacheValueProjects2 = {
    re?: string | undefined;
    eq?: string | undefined;
    neq?: string | undefined;
    inc?: Array<string> | undefined;
    ninc?: Array<string> | undefined;
    pre?: string | undefined;
    suf?: string | undefined;
    gt?: number | undefined;
    gte?: number | undefined;
    lt?: number | undefined;
    lte?: number | undefined;
};

export type UpdateProjectDataCacheProjectsValue = UpdateProjectDataCacheValueProjects2 | string;

export type Has = {
    type: UpdateProjectDataCacheProjectsResponse200ApplicationJSONType;
    key?: string | undefined;
    value?: UpdateProjectDataCacheValueProjects2 | string | undefined;
};

export enum UpdateProjectDataCacheProjectsResponse200ApplicationJSONResponseBodyType {
    Host = "host",
    Method = "method",
    Path = "path",
    Header = "header",
    Cookie = "cookie",
    Query = "query",
    IpAddress = "ip_address",
    Protocol = "protocol",
    Scheme = "scheme",
    Region = "region",
}

export type UpdateProjectDataCacheValue2 = {
    re?: string | undefined;
    eq?: string | undefined;
    neq?: string | undefined;
    inc?: Array<string> | undefined;
    ninc?: Array<string> | undefined;
    pre?: string | undefined;
    suf?: string | undefined;
    gt?: number | undefined;
    gte?: number | undefined;
    lt?: number | undefined;
    lte?: number | undefined;
};

export type UpdateProjectDataCacheValue = UpdateProjectDataCacheValue2 | string;

export type Missing = {
    type: UpdateProjectDataCacheProjectsResponse200ApplicationJSONResponseBodyType;
    key?: string | undefined;
    value?: UpdateProjectDataCacheValue2 | string | undefined;
};

export enum Handle {
    Init = "init",
    Finalize = "finalize",
}

export enum Action {
    Deny = "deny",
    Challenge = "challenge",
    Log = "log",
    Bypass = "bypass",
    RateLimit = "rate_limit",
}

export enum Algo {
    FixedWindow = "fixed_window",
    TokenBucket = "token_bucket",
}

export type Erl = {
    algo: Algo;
    window: number;
    limit: number;
    keys: Array<string>;
};

export type Mitigate = {
    action: Action;
    ruleId: string;
    erl?: Erl | undefined;
};

export type FirewallRoutes = {
    src?: Src2 | string | undefined;
    has?: Array<Has> | undefined;
    missing?: Array<Missing> | undefined;
    dest?: string | undefined;
    status?: number | undefined;
    handle?: Handle | undefined;
    mitigate?: Mitigate | undefined;
};

export type Security = {
    attackModeEnabled?: boolean | undefined;
    attackModeUpdatedAt?: number | undefined;
    firewallEnabled?: boolean | undefined;
    firewallUpdatedAt?: number | undefined;
    attackModeActiveUntil?: number | null | undefined;
    firewallConfigVersion?: number | undefined;
    firewallRoutes?: Array<FirewallRoutes> | undefined;
    firewallSeawallEnabled?: boolean | undefined;
    ja3Enabled?: boolean | undefined;
    ja4Enabled?: boolean | undefined;
};

export type OidcTokenConfig = {
    enabled: boolean;
};

export type UpdateProjectDataCacheResponseBody = {
    accountId: string;
    analytics?: Analytics | undefined;
    speedInsights?: SpeedInsights | undefined;
    autoExposeSystemEnvs?: boolean | undefined;
    autoAssignCustomDomains?: boolean | undefined;
    autoAssignCustomDomainsUpdatedBy?: string | undefined;
    buildCommand?: string | null | undefined;
    commandForIgnoringBuildStep?: string | null | undefined;
    connectConfigurationId?: string | null | undefined;
    connectBuildsEnabled?: boolean | undefined;
    createdAt?: number | undefined;
    customerSupportCodeVisibility?: boolean | undefined;
    crons?: Crons | undefined;
    dataCache?: DataCache | undefined;
    devCommand?: string | null | undefined;
    directoryListing: boolean;
    installCommand?: string | null | undefined;
    env?: Array<Env> | undefined;
    framework?: UpdateProjectDataCacheFramework | null | undefined;
    gitForkProtection?: boolean | undefined;
    gitLFS?: boolean | undefined;
    id: string;
    latestDeployments?: Array<LatestDeployments> | undefined;
    link?: Link1 | Link2 | Link3 | undefined;
    name: string;
    nodeVersion: UpdateProjectDataCacheNodeVersion;
    optionsAllowlist?: UpdateProjectDataCacheOptionsAllowlist | null | undefined;
    outputDirectory?: string | null | undefined;
    passiveConnectConfigurationId?: string | null | undefined;
    passwordProtection?: UpdateProjectDataCachePasswordProtection | null | undefined;
    productionDeploymentsFastLane?: boolean | undefined;
    publicSource?: boolean | null | undefined;
    rootDirectory?: string | null | undefined;
    serverlessFunctionRegion?: string | null | undefined;
    serverlessFunctionZeroConfigFailover?: boolean | undefined;
    skewProtectionBoundaryAt?: number | undefined;
    skewProtectionMaxAge?: number | undefined;
    skipGitConnectDuringLink?: boolean | undefined;
    sourceFilesOutsideRootDirectory?: boolean | undefined;
    ssoProtection?: UpdateProjectDataCacheSsoProtection | null | undefined;
    targets?: Record<string, string | Array<string>> | undefined;
    transferCompletedAt?: number | undefined;
    transferStartedAt?: number | undefined;
    transferToAccountId?: string | undefined;
    transferredFromAccountId?: string | undefined;
    updatedAt?: number | undefined;
    live?: boolean | undefined;
    enablePreviewFeedback?: boolean | null | undefined;
    permissions?: Permissions | undefined;
    lastRollbackTarget?: LastRollbackTarget | null | undefined;
    lastAliasRequest?: LastAliasRequest | null | undefined;
    hasFloatingAliases?: boolean | undefined;
    protectionBypass?: Record<string, ProtectionBypass> | undefined;
    hasActiveBranches?: boolean | undefined;
    trustedIps?: TrustedIps2 | TrustedIps1 | null | undefined;
    gitComments?: GitComments | undefined;
    paused?: boolean | undefined;
    concurrencyBucketName?: string | undefined;
    webAnalytics?: WebAnalytics | undefined;
    security?: Security | undefined;
    oidcTokenConfig?: OidcTokenConfig | undefined;
};

export type UpdateProjectDataCacheResponse = {
    httpMeta: components.HTTPMetadata;
    object?: UpdateProjectDataCacheResponseBody | undefined;
};

/** @internal */
export namespace UpdateProjectDataCacheRequestBody$ {
    export const inboundSchema: z.ZodType<
        UpdateProjectDataCacheRequestBody,
        z.ZodTypeDef,
        unknown
    > = z
        .object({
            disabled: z.boolean().optional(),
        })
        .transform((v) => {
            return {
                ...(v.disabled === undefined ? null : { disabled: v.disabled }),
            };
        });

    export type Outbound = {
        disabled?: boolean | undefined;
    };

    export const outboundSchema: z.ZodType<
        Outbound,
        z.ZodTypeDef,
        UpdateProjectDataCacheRequestBody
    > = z
        .object({
            disabled: z.boolean().optional(),
        })
        .transform((v) => {
            return {
                ...(v.disabled === undefined ? null : { disabled: v.disabled }),
            };
        });
}

/** @internal */
export namespace UpdateProjectDataCacheRequest$ {
    export const inboundSchema: z.ZodType<UpdateProjectDataCacheRequest, z.ZodTypeDef, unknown> = z
        .object({
            projectId: z.string(),
            teamId: z.string().optional(),
            slug: z.string().optional(),
            RequestBody: z.lazy(() => UpdateProjectDataCacheRequestBody$.inboundSchema).optional(),
        })
        .transform((v) => {
            return {
                projectId: v.projectId,
                ...(v.teamId === undefined ? null : { teamId: v.teamId }),
                ...(v.slug === undefined ? null : { slug: v.slug }),
                ...(v.RequestBody === undefined ? null : { requestBody: v.RequestBody }),
            };
        });

    export type Outbound = {
        projectId: string;
        teamId?: string | undefined;
        slug?: string | undefined;
        RequestBody?: UpdateProjectDataCacheRequestBody$.Outbound | undefined;
    };

    export const outboundSchema: z.ZodType<Outbound, z.ZodTypeDef, UpdateProjectDataCacheRequest> =
        z
            .object({
                projectId: z.string(),
                teamId: z.string().optional(),
                slug: z.string().optional(),
                requestBody: z
                    .lazy(() => UpdateProjectDataCacheRequestBody$.outboundSchema)
                    .optional(),
            })
            .transform((v) => {
                return {
                    projectId: v.projectId,
                    ...(v.teamId === undefined ? null : { teamId: v.teamId }),
                    ...(v.slug === undefined ? null : { slug: v.slug }),
                    ...(v.requestBody === undefined ? null : { RequestBody: v.requestBody }),
                };
            });
}

/** @internal */
export namespace Analytics$ {
    export const inboundSchema: z.ZodType<Analytics, z.ZodTypeDef, unknown> = z
        .object({
            id: z.string(),
            canceledAt: z.nullable(z.number()).optional(),
            disabledAt: z.number(),
            enabledAt: z.number(),
            paidAt: z.number().optional(),
            sampleRatePercent: z.nullable(z.number()).optional(),
            spendLimitInDollars: z.nullable(z.number()).optional(),
        })
        .transform((v) => {
            return {
                id: v.id,
                ...(v.canceledAt === undefined ? null : { canceledAt: v.canceledAt }),
                disabledAt: v.disabledAt,
                enabledAt: v.enabledAt,
                ...(v.paidAt === undefined ? null : { paidAt: v.paidAt }),
                ...(v.sampleRatePercent === undefined
                    ? null
                    : { sampleRatePercent: v.sampleRatePercent }),
                ...(v.spendLimitInDollars === undefined
                    ? null
                    : { spendLimitInDollars: v.spendLimitInDollars }),
            };
        });

    export type Outbound = {
        id: string;
        canceledAt?: number | null | undefined;
        disabledAt: number;
        enabledAt: number;
        paidAt?: number | undefined;
        sampleRatePercent?: number | null | undefined;
        spendLimitInDollars?: number | null | undefined;
    };

    export const outboundSchema: z.ZodType<Outbound, z.ZodTypeDef, Analytics> = z
        .object({
            id: z.string(),
            canceledAt: z.nullable(z.number()).optional(),
            disabledAt: z.number(),
            enabledAt: z.number(),
            paidAt: z.number().optional(),
            sampleRatePercent: z.nullable(z.number()).optional(),
            spendLimitInDollars: z.nullable(z.number()).optional(),
        })
        .transform((v) => {
            return {
                id: v.id,
                ...(v.canceledAt === undefined ? null : { canceledAt: v.canceledAt }),
                disabledAt: v.disabledAt,
                enabledAt: v.enabledAt,
                ...(v.paidAt === undefined ? null : { paidAt: v.paidAt }),
                ...(v.sampleRatePercent === undefined
                    ? null
                    : { sampleRatePercent: v.sampleRatePercent }),
                ...(v.spendLimitInDollars === undefined
                    ? null
                    : { spendLimitInDollars: v.spendLimitInDollars }),
            };
        });
}

/** @internal */
export namespace SpeedInsights$ {
    export const inboundSchema: z.ZodType<SpeedInsights, z.ZodTypeDef, unknown> = z
        .object({
            id: z.string(),
            enabledAt: z.number().optional(),
            disabledAt: z.number().optional(),
            canceledAt: z.number().optional(),
            hasData: z.boolean().optional(),
            paidAt: z.number().optional(),
        })
        .transform((v) => {
            return {
                id: v.id,
                ...(v.enabledAt === undefined ? null : { enabledAt: v.enabledAt }),
                ...(v.disabledAt === undefined ? null : { disabledAt: v.disabledAt }),
                ...(v.canceledAt === undefined ? null : { canceledAt: v.canceledAt }),
                ...(v.hasData === undefined ? null : { hasData: v.hasData }),
                ...(v.paidAt === undefined ? null : { paidAt: v.paidAt }),
            };
        });

    export type Outbound = {
        id: string;
        enabledAt?: number | undefined;
        disabledAt?: number | undefined;
        canceledAt?: number | undefined;
        hasData?: boolean | undefined;
        paidAt?: number | undefined;
    };

    export const outboundSchema: z.ZodType<Outbound, z.ZodTypeDef, SpeedInsights> = z
        .object({
            id: z.string(),
            enabledAt: z.number().optional(),
            disabledAt: z.number().optional(),
            canceledAt: z.number().optional(),
            hasData: z.boolean().optional(),
            paidAt: z.number().optional(),
        })
        .transform((v) => {
            return {
                id: v.id,
                ...(v.enabledAt === undefined ? null : { enabledAt: v.enabledAt }),
                ...(v.disabledAt === undefined ? null : { disabledAt: v.disabledAt }),
                ...(v.canceledAt === undefined ? null : { canceledAt: v.canceledAt }),
                ...(v.hasData === undefined ? null : { hasData: v.hasData }),
                ...(v.paidAt === undefined ? null : { paidAt: v.paidAt }),
            };
        });
}

/** @internal */
export namespace Definitions$ {
    export const inboundSchema: z.ZodType<Definitions, z.ZodTypeDef, unknown> = z
        .object({
            host: z.string(),
            path: z.string(),
            schedule: z.string(),
        })
        .transform((v) => {
            return {
                host: v.host,
                path: v.path,
                schedule: v.schedule,
            };
        });

    export type Outbound = {
        host: string;
        path: string;
        schedule: string;
    };

    export const outboundSchema: z.ZodType<Outbound, z.ZodTypeDef, Definitions> = z
        .object({
            host: z.string(),
            path: z.string(),
            schedule: z.string(),
        })
        .transform((v) => {
            return {
                host: v.host,
                path: v.path,
                schedule: v.schedule,
            };
        });
}

/** @internal */
export namespace Crons$ {
    export const inboundSchema: z.ZodType<Crons, z.ZodTypeDef, unknown> = z
        .object({
            enabledAt: z.number(),
            disabledAt: z.nullable(z.number()),
            updatedAt: z.number(),
            deploymentId: z.nullable(z.string()),
            definitions: z.array(z.lazy(() => Definitions$.inboundSchema)),
        })
        .transform((v) => {
            return {
                enabledAt: v.enabledAt,
                disabledAt: v.disabledAt,
                updatedAt: v.updatedAt,
                deploymentId: v.deploymentId,
                definitions: v.definitions,
            };
        });

    export type Outbound = {
        enabledAt: number;
        disabledAt: number | null;
        updatedAt: number;
        deploymentId: string | null;
        definitions: Array<Definitions$.Outbound>;
    };

    export const outboundSchema: z.ZodType<Outbound, z.ZodTypeDef, Crons> = z
        .object({
            enabledAt: z.number(),
            disabledAt: z.nullable(z.number()),
            updatedAt: z.number(),
            deploymentId: z.nullable(z.string()),
            definitions: z.array(z.lazy(() => Definitions$.outboundSchema)),
        })
        .transform((v) => {
            return {
                enabledAt: v.enabledAt,
                disabledAt: v.disabledAt,
                updatedAt: v.updatedAt,
                deploymentId: v.deploymentId,
                definitions: v.definitions,
            };
        });
}

/** @internal */
export namespace DataCache$ {
    export const inboundSchema: z.ZodType<DataCache, z.ZodTypeDef, unknown> = z
        .object({
            userDisabled: z.boolean(),
            storageSizeBytes: z.nullable(z.number()).optional(),
            unlimited: z.boolean().optional(),
        })
        .transform((v) => {
            return {
                userDisabled: v.userDisabled,
                ...(v.storageSizeBytes === undefined
                    ? null
                    : { storageSizeBytes: v.storageSizeBytes }),
                ...(v.unlimited === undefined ? null : { unlimited: v.unlimited }),
            };
        });

    export type Outbound = {
        userDisabled: boolean;
        storageSizeBytes?: number | null | undefined;
        unlimited?: boolean | undefined;
    };

    export const outboundSchema: z.ZodType<Outbound, z.ZodTypeDef, DataCache> = z
        .object({
            userDisabled: z.boolean(),
            storageSizeBytes: z.nullable(z.number()).optional(),
            unlimited: z.boolean().optional(),
        })
        .transform((v) => {
            return {
                userDisabled: v.userDisabled,
                ...(v.storageSizeBytes === undefined
                    ? null
                    : { storageSizeBytes: v.storageSizeBytes }),
                ...(v.unlimited === undefined ? null : { unlimited: v.unlimited }),
            };
        });
}

/** @internal */
export const UpdateProjectDataCacheTarget2$: z.ZodNativeEnum<typeof UpdateProjectDataCacheTarget2> =
    z.nativeEnum(UpdateProjectDataCacheTarget2);

/** @internal */
export const UpdateProjectDataCacheTarget1$: z.ZodNativeEnum<typeof UpdateProjectDataCacheTarget1> =
    z.nativeEnum(UpdateProjectDataCacheTarget1);

/** @internal */
export namespace UpdateProjectDataCacheTarget$ {
    export const inboundSchema: z.ZodType<UpdateProjectDataCacheTarget, z.ZodTypeDef, unknown> =
        z.union([z.array(UpdateProjectDataCacheTarget1$), UpdateProjectDataCacheTarget2$]);

    export type Outbound = Array<UpdateProjectDataCacheTarget1> | UpdateProjectDataCacheTarget2;
    export const outboundSchema: z.ZodType<Outbound, z.ZodTypeDef, UpdateProjectDataCacheTarget> =
        z.union([z.array(UpdateProjectDataCacheTarget1$), UpdateProjectDataCacheTarget2$]);
}

/** @internal */
export const UpdateProjectDataCacheType$: z.ZodNativeEnum<typeof UpdateProjectDataCacheType> =
    z.nativeEnum(UpdateProjectDataCacheType);

/** @internal */
export const UpdateProjectDataCacheContentHintProjectsResponse200ApplicationJSONResponseBodyEnv14Type$: z.ZodNativeEnum<
    typeof UpdateProjectDataCacheContentHintProjectsResponse200ApplicationJSONResponseBodyEnv14Type
> = z.nativeEnum(
    UpdateProjectDataCacheContentHintProjectsResponse200ApplicationJSONResponseBodyEnv14Type
);

/** @internal */
export namespace UpdateProjectDataCacheContentHint14$ {
    export const inboundSchema: z.ZodType<
        UpdateProjectDataCacheContentHint14,
        z.ZodTypeDef,
        unknown
    > = z
        .object({
            type: UpdateProjectDataCacheContentHintProjectsResponse200ApplicationJSONResponseBodyEnv14Type$,
            storeId: z.string(),
        })
        .transform((v) => {
            return {
                type: v.type,
                storeId: v.storeId,
            };
        });

    export type Outbound = {
        type: UpdateProjectDataCacheContentHintProjectsResponse200ApplicationJSONResponseBodyEnv14Type;
        storeId: string;
    };

    export const outboundSchema: z.ZodType<
        Outbound,
        z.ZodTypeDef,
        UpdateProjectDataCacheContentHint14
    > = z
        .object({
            type: UpdateProjectDataCacheContentHintProjectsResponse200ApplicationJSONResponseBodyEnv14Type$,
            storeId: z.string(),
        })
        .transform((v) => {
            return {
                type: v.type,
                storeId: v.storeId,
            };
        });
}

/** @internal */
export const UpdateProjectDataCacheContentHintProjectsResponse200ApplicationJSONResponseBodyEnv13Type$: z.ZodNativeEnum<
    typeof UpdateProjectDataCacheContentHintProjectsResponse200ApplicationJSONResponseBodyEnv13Type
> = z.nativeEnum(
    UpdateProjectDataCacheContentHintProjectsResponse200ApplicationJSONResponseBodyEnv13Type
);

/** @internal */
export namespace UpdateProjectDataCacheContentHint13$ {
    export const inboundSchema: z.ZodType<
        UpdateProjectDataCacheContentHint13,
        z.ZodTypeDef,
        unknown
    > = z
        .object({
            type: UpdateProjectDataCacheContentHintProjectsResponse200ApplicationJSONResponseBodyEnv13Type$,
            storeId: z.string(),
        })
        .transform((v) => {
            return {
                type: v.type,
                storeId: v.storeId,
            };
        });

    export type Outbound = {
        type: UpdateProjectDataCacheContentHintProjectsResponse200ApplicationJSONResponseBodyEnv13Type;
        storeId: string;
    };

    export const outboundSchema: z.ZodType<
        Outbound,
        z.ZodTypeDef,
        UpdateProjectDataCacheContentHint13
    > = z
        .object({
            type: UpdateProjectDataCacheContentHintProjectsResponse200ApplicationJSONResponseBodyEnv13Type$,
            storeId: z.string(),
        })
        .transform((v) => {
            return {
                type: v.type,
                storeId: v.storeId,
            };
        });
}

/** @internal */
export const UpdateProjectDataCacheContentHintProjectsResponse200ApplicationJSONResponseBodyEnv12Type$: z.ZodNativeEnum<
    typeof UpdateProjectDataCacheContentHintProjectsResponse200ApplicationJSONResponseBodyEnv12Type
> = z.nativeEnum(
    UpdateProjectDataCacheContentHintProjectsResponse200ApplicationJSONResponseBodyEnv12Type
);

/** @internal */
export namespace UpdateProjectDataCacheContentHint12$ {
    export const inboundSchema: z.ZodType<
        UpdateProjectDataCacheContentHint12,
        z.ZodTypeDef,
        unknown
    > = z
        .object({
            type: UpdateProjectDataCacheContentHintProjectsResponse200ApplicationJSONResponseBodyEnv12Type$,
            storeId: z.string(),
        })
        .transform((v) => {
            return {
                type: v.type,
                storeId: v.storeId,
            };
        });

    export type Outbound = {
        type: UpdateProjectDataCacheContentHintProjectsResponse200ApplicationJSONResponseBodyEnv12Type;
        storeId: string;
    };

    export const outboundSchema: z.ZodType<
        Outbound,
        z.ZodTypeDef,
        UpdateProjectDataCacheContentHint12
    > = z
        .object({
            type: UpdateProjectDataCacheContentHintProjectsResponse200ApplicationJSONResponseBodyEnv12Type$,
            storeId: z.string(),
        })
        .transform((v) => {
            return {
                type: v.type,
                storeId: v.storeId,
            };
        });
}

/** @internal */
export const UpdateProjectDataCacheContentHintProjectsResponse200ApplicationJSONResponseBodyEnv11Type$: z.ZodNativeEnum<
    typeof UpdateProjectDataCacheContentHintProjectsResponse200ApplicationJSONResponseBodyEnv11Type
> = z.nativeEnum(
    UpdateProjectDataCacheContentHintProjectsResponse200ApplicationJSONResponseBodyEnv11Type
);

/** @internal */
export namespace UpdateProjectDataCacheContentHint11$ {
    export const inboundSchema: z.ZodType<
        UpdateProjectDataCacheContentHint11,
        z.ZodTypeDef,
        unknown
    > = z
        .object({
            type: UpdateProjectDataCacheContentHintProjectsResponse200ApplicationJSONResponseBodyEnv11Type$,
            storeId: z.string(),
        })
        .transform((v) => {
            return {
                type: v.type,
                storeId: v.storeId,
            };
        });

    export type Outbound = {
        type: UpdateProjectDataCacheContentHintProjectsResponse200ApplicationJSONResponseBodyEnv11Type;
        storeId: string;
    };

    export const outboundSchema: z.ZodType<
        Outbound,
        z.ZodTypeDef,
        UpdateProjectDataCacheContentHint11
    > = z
        .object({
            type: UpdateProjectDataCacheContentHintProjectsResponse200ApplicationJSONResponseBodyEnv11Type$,
            storeId: z.string(),
        })
        .transform((v) => {
            return {
                type: v.type,
                storeId: v.storeId,
            };
        });
}

/** @internal */
export const UpdateProjectDataCacheContentHintProjectsResponse200ApplicationJSONResponseBodyEnv10Type$: z.ZodNativeEnum<
    typeof UpdateProjectDataCacheContentHintProjectsResponse200ApplicationJSONResponseBodyEnv10Type
> = z.nativeEnum(
    UpdateProjectDataCacheContentHintProjectsResponse200ApplicationJSONResponseBodyEnv10Type
);

/** @internal */
export namespace UpdateProjectDataCacheContentHint10$ {
    export const inboundSchema: z.ZodType<
        UpdateProjectDataCacheContentHint10,
        z.ZodTypeDef,
        unknown
    > = z
        .object({
            type: UpdateProjectDataCacheContentHintProjectsResponse200ApplicationJSONResponseBodyEnv10Type$,
            storeId: z.string(),
        })
        .transform((v) => {
            return {
                type: v.type,
                storeId: v.storeId,
            };
        });

    export type Outbound = {
        type: UpdateProjectDataCacheContentHintProjectsResponse200ApplicationJSONResponseBodyEnv10Type;
        storeId: string;
    };

    export const outboundSchema: z.ZodType<
        Outbound,
        z.ZodTypeDef,
        UpdateProjectDataCacheContentHint10
    > = z
        .object({
            type: UpdateProjectDataCacheContentHintProjectsResponse200ApplicationJSONResponseBodyEnv10Type$,
            storeId: z.string(),
        })
        .transform((v) => {
            return {
                type: v.type,
                storeId: v.storeId,
            };
        });
}

/** @internal */
export const UpdateProjectDataCacheContentHintProjectsResponse200ApplicationJSONResponseBodyEnv9Type$: z.ZodNativeEnum<
    typeof UpdateProjectDataCacheContentHintProjectsResponse200ApplicationJSONResponseBodyEnv9Type
> = z.nativeEnum(
    UpdateProjectDataCacheContentHintProjectsResponse200ApplicationJSONResponseBodyEnv9Type
);

/** @internal */
export namespace UpdateProjectDataCacheContentHint9$ {
    export const inboundSchema: z.ZodType<
        UpdateProjectDataCacheContentHint9,
        z.ZodTypeDef,
        unknown
    > = z
        .object({
            type: UpdateProjectDataCacheContentHintProjectsResponse200ApplicationJSONResponseBodyEnv9Type$,
            storeId: z.string(),
        })
        .transform((v) => {
            return {
                type: v.type,
                storeId: v.storeId,
            };
        });

    export type Outbound = {
        type: UpdateProjectDataCacheContentHintProjectsResponse200ApplicationJSONResponseBodyEnv9Type;
        storeId: string;
    };

    export const outboundSchema: z.ZodType<
        Outbound,
        z.ZodTypeDef,
        UpdateProjectDataCacheContentHint9
    > = z
        .object({
            type: UpdateProjectDataCacheContentHintProjectsResponse200ApplicationJSONResponseBodyEnv9Type$,
            storeId: z.string(),
        })
        .transform((v) => {
            return {
                type: v.type,
                storeId: v.storeId,
            };
        });
}

/** @internal */
export const UpdateProjectDataCacheContentHintProjectsResponse200ApplicationJSONResponseBodyEnvType$: z.ZodNativeEnum<
    typeof UpdateProjectDataCacheContentHintProjectsResponse200ApplicationJSONResponseBodyEnvType
> = z.nativeEnum(
    UpdateProjectDataCacheContentHintProjectsResponse200ApplicationJSONResponseBodyEnvType
);

/** @internal */
export namespace UpdateProjectDataCacheContentHint8$ {
    export const inboundSchema: z.ZodType<
        UpdateProjectDataCacheContentHint8,
        z.ZodTypeDef,
        unknown
    > = z
        .object({
            type: UpdateProjectDataCacheContentHintProjectsResponse200ApplicationJSONResponseBodyEnvType$,
            storeId: z.string(),
        })
        .transform((v) => {
            return {
                type: v.type,
                storeId: v.storeId,
            };
        });

    export type Outbound = {
        type: UpdateProjectDataCacheContentHintProjectsResponse200ApplicationJSONResponseBodyEnvType;
        storeId: string;
    };

    export const outboundSchema: z.ZodType<
        Outbound,
        z.ZodTypeDef,
        UpdateProjectDataCacheContentHint8
    > = z
        .object({
            type: UpdateProjectDataCacheContentHintProjectsResponse200ApplicationJSONResponseBodyEnvType$,
            storeId: z.string(),
        })
        .transform((v) => {
            return {
                type: v.type,
                storeId: v.storeId,
            };
        });
}

/** @internal */
export const UpdateProjectDataCacheContentHintProjectsResponse200ApplicationJSONResponseBodyType$: z.ZodNativeEnum<
    typeof UpdateProjectDataCacheContentHintProjectsResponse200ApplicationJSONResponseBodyType
> = z.nativeEnum(
    UpdateProjectDataCacheContentHintProjectsResponse200ApplicationJSONResponseBodyType
);

/** @internal */
export namespace UpdateProjectDataCacheContentHint7$ {
    export const inboundSchema: z.ZodType<
        UpdateProjectDataCacheContentHint7,
        z.ZodTypeDef,
        unknown
    > = z
        .object({
            type: UpdateProjectDataCacheContentHintProjectsResponse200ApplicationJSONResponseBodyType$,
            storeId: z.string(),
        })
        .transform((v) => {
            return {
                type: v.type,
                storeId: v.storeId,
            };
        });

    export type Outbound = {
        type: UpdateProjectDataCacheContentHintProjectsResponse200ApplicationJSONResponseBodyType;
        storeId: string;
    };

    export const outboundSchema: z.ZodType<
        Outbound,
        z.ZodTypeDef,
        UpdateProjectDataCacheContentHint7
    > = z
        .object({
            type: UpdateProjectDataCacheContentHintProjectsResponse200ApplicationJSONResponseBodyType$,
            storeId: z.string(),
        })
        .transform((v) => {
            return {
                type: v.type,
                storeId: v.storeId,
            };
        });
}

/** @internal */
export const UpdateProjectDataCacheContentHintProjectsResponse200ApplicationJSONType$: z.ZodNativeEnum<
    typeof UpdateProjectDataCacheContentHintProjectsResponse200ApplicationJSONType
> = z.nativeEnum(UpdateProjectDataCacheContentHintProjectsResponse200ApplicationJSONType);

/** @internal */
export namespace UpdateProjectDataCacheContentHint6$ {
    export const inboundSchema: z.ZodType<
        UpdateProjectDataCacheContentHint6,
        z.ZodTypeDef,
        unknown
    > = z
        .object({
            type: UpdateProjectDataCacheContentHintProjectsResponse200ApplicationJSONType$,
            storeId: z.string(),
        })
        .transform((v) => {
            return {
                type: v.type,
                storeId: v.storeId,
            };
        });

    export type Outbound = {
        type: UpdateProjectDataCacheContentHintProjectsResponse200ApplicationJSONType;
        storeId: string;
    };

    export const outboundSchema: z.ZodType<
        Outbound,
        z.ZodTypeDef,
        UpdateProjectDataCacheContentHint6
    > = z
        .object({
            type: UpdateProjectDataCacheContentHintProjectsResponse200ApplicationJSONType$,
            storeId: z.string(),
        })
        .transform((v) => {
            return {
                type: v.type,
                storeId: v.storeId,
            };
        });
}

/** @internal */
export const UpdateProjectDataCacheContentHintProjectsResponse200Type$: z.ZodNativeEnum<
    typeof UpdateProjectDataCacheContentHintProjectsResponse200Type
> = z.nativeEnum(UpdateProjectDataCacheContentHintProjectsResponse200Type);

/** @internal */
export namespace UpdateProjectDataCacheContentHint5$ {
    export const inboundSchema: z.ZodType<
        UpdateProjectDataCacheContentHint5,
        z.ZodTypeDef,
        unknown
    > = z
        .object({
            type: UpdateProjectDataCacheContentHintProjectsResponse200Type$,
            storeId: z.string(),
        })
        .transform((v) => {
            return {
                type: v.type,
                storeId: v.storeId,
            };
        });

    export type Outbound = {
        type: UpdateProjectDataCacheContentHintProjectsResponse200Type;
        storeId: string;
    };

    export const outboundSchema: z.ZodType<
        Outbound,
        z.ZodTypeDef,
        UpdateProjectDataCacheContentHint5
    > = z
        .object({
            type: UpdateProjectDataCacheContentHintProjectsResponse200Type$,
            storeId: z.string(),
        })
        .transform((v) => {
            return {
                type: v.type,
                storeId: v.storeId,
            };
        });
}

/** @internal */
export const UpdateProjectDataCacheContentHintProjectsResponseType$: z.ZodNativeEnum<
    typeof UpdateProjectDataCacheContentHintProjectsResponseType
> = z.nativeEnum(UpdateProjectDataCacheContentHintProjectsResponseType);

/** @internal */
export namespace UpdateProjectDataCacheContentHint4$ {
    export const inboundSchema: z.ZodType<
        UpdateProjectDataCacheContentHint4,
        z.ZodTypeDef,
        unknown
    > = z
        .object({
            type: UpdateProjectDataCacheContentHintProjectsResponseType$,
            storeId: z.string(),
        })
        .transform((v) => {
            return {
                type: v.type,
                storeId: v.storeId,
            };
        });

    export type Outbound = {
        type: UpdateProjectDataCacheContentHintProjectsResponseType;
        storeId: string;
    };

    export const outboundSchema: z.ZodType<
        Outbound,
        z.ZodTypeDef,
        UpdateProjectDataCacheContentHint4
    > = z
        .object({
            type: UpdateProjectDataCacheContentHintProjectsResponseType$,
            storeId: z.string(),
        })
        .transform((v) => {
            return {
                type: v.type,
                storeId: v.storeId,
            };
        });
}

/** @internal */
export const UpdateProjectDataCacheContentHintProjectsType$: z.ZodNativeEnum<
    typeof UpdateProjectDataCacheContentHintProjectsType
> = z.nativeEnum(UpdateProjectDataCacheContentHintProjectsType);

/** @internal */
export namespace UpdateProjectDataCacheContentHint3$ {
    export const inboundSchema: z.ZodType<
        UpdateProjectDataCacheContentHint3,
        z.ZodTypeDef,
        unknown
    > = z
        .object({
            type: UpdateProjectDataCacheContentHintProjectsType$,
            storeId: z.string(),
        })
        .transform((v) => {
            return {
                type: v.type,
                storeId: v.storeId,
            };
        });

    export type Outbound = {
        type: UpdateProjectDataCacheContentHintProjectsType;
        storeId: string;
    };

    export const outboundSchema: z.ZodType<
        Outbound,
        z.ZodTypeDef,
        UpdateProjectDataCacheContentHint3
    > = z
        .object({
            type: UpdateProjectDataCacheContentHintProjectsType$,
            storeId: z.string(),
        })
        .transform((v) => {
            return {
                type: v.type,
                storeId: v.storeId,
            };
        });
}

/** @internal */
export const UpdateProjectDataCacheContentHintType$: z.ZodNativeEnum<
    typeof UpdateProjectDataCacheContentHintType
> = z.nativeEnum(UpdateProjectDataCacheContentHintType);

/** @internal */
export namespace UpdateProjectDataCacheContentHint2$ {
    export const inboundSchema: z.ZodType<
        UpdateProjectDataCacheContentHint2,
        z.ZodTypeDef,
        unknown
    > = z
        .object({
            type: UpdateProjectDataCacheContentHintType$,
            storeId: z.string(),
        })
        .transform((v) => {
            return {
                type: v.type,
                storeId: v.storeId,
            };
        });

    export type Outbound = {
        type: UpdateProjectDataCacheContentHintType;
        storeId: string;
    };

    export const outboundSchema: z.ZodType<
        Outbound,
        z.ZodTypeDef,
        UpdateProjectDataCacheContentHint2
    > = z
        .object({
            type: UpdateProjectDataCacheContentHintType$,
            storeId: z.string(),
        })
        .transform((v) => {
            return {
                type: v.type,
                storeId: v.storeId,
            };
        });
}

/** @internal */
export const UpdateProjectDataCacheContentHintProjectsResponse200ApplicationJSONResponseBodyEnv1Type$: z.ZodNativeEnum<
    typeof UpdateProjectDataCacheContentHintProjectsResponse200ApplicationJSONResponseBodyEnv1Type
> = z.nativeEnum(
    UpdateProjectDataCacheContentHintProjectsResponse200ApplicationJSONResponseBodyEnv1Type
);

/** @internal */
export namespace UpdateProjectDataCacheContentHint1$ {
    export const inboundSchema: z.ZodType<
        UpdateProjectDataCacheContentHint1,
        z.ZodTypeDef,
        unknown
    > = z
        .object({
            type: UpdateProjectDataCacheContentHintProjectsResponse200ApplicationJSONResponseBodyEnv1Type$,
            storeId: z.string(),
        })
        .transform((v) => {
            return {
                type: v.type,
                storeId: v.storeId,
            };
        });

    export type Outbound = {
        type: UpdateProjectDataCacheContentHintProjectsResponse200ApplicationJSONResponseBodyEnv1Type;
        storeId: string;
    };

    export const outboundSchema: z.ZodType<
        Outbound,
        z.ZodTypeDef,
        UpdateProjectDataCacheContentHint1
    > = z
        .object({
            type: UpdateProjectDataCacheContentHintProjectsResponse200ApplicationJSONResponseBodyEnv1Type$,
            storeId: z.string(),
        })
        .transform((v) => {
            return {
                type: v.type,
                storeId: v.storeId,
            };
        });
}

/** @internal */
export namespace UpdateProjectDataCacheContentHint$ {
    export const inboundSchema: z.ZodType<
        UpdateProjectDataCacheContentHint,
        z.ZodTypeDef,
        unknown
    > = z.union([
        z.lazy(() => UpdateProjectDataCacheContentHint1$.inboundSchema),
        z.lazy(() => UpdateProjectDataCacheContentHint2$.inboundSchema),
        z.lazy(() => UpdateProjectDataCacheContentHint3$.inboundSchema),
        z.lazy(() => UpdateProjectDataCacheContentHint4$.inboundSchema),
        z.lazy(() => UpdateProjectDataCacheContentHint5$.inboundSchema),
        z.lazy(() => UpdateProjectDataCacheContentHint6$.inboundSchema),
        z.lazy(() => UpdateProjectDataCacheContentHint7$.inboundSchema),
        z.lazy(() => UpdateProjectDataCacheContentHint8$.inboundSchema),
        z.lazy(() => UpdateProjectDataCacheContentHint9$.inboundSchema),
        z.lazy(() => UpdateProjectDataCacheContentHint10$.inboundSchema),
        z.lazy(() => UpdateProjectDataCacheContentHint11$.inboundSchema),
        z.lazy(() => UpdateProjectDataCacheContentHint12$.inboundSchema),
        z.lazy(() => UpdateProjectDataCacheContentHint13$.inboundSchema),
        z.lazy(() => UpdateProjectDataCacheContentHint14$.inboundSchema),
    ]);

    export type Outbound =
        | UpdateProjectDataCacheContentHint1$.Outbound
        | UpdateProjectDataCacheContentHint2$.Outbound
        | UpdateProjectDataCacheContentHint3$.Outbound
        | UpdateProjectDataCacheContentHint4$.Outbound
        | UpdateProjectDataCacheContentHint5$.Outbound
        | UpdateProjectDataCacheContentHint6$.Outbound
        | UpdateProjectDataCacheContentHint7$.Outbound
        | UpdateProjectDataCacheContentHint8$.Outbound
        | UpdateProjectDataCacheContentHint9$.Outbound
        | UpdateProjectDataCacheContentHint10$.Outbound
        | UpdateProjectDataCacheContentHint11$.Outbound
        | UpdateProjectDataCacheContentHint12$.Outbound
        | UpdateProjectDataCacheContentHint13$.Outbound
        | UpdateProjectDataCacheContentHint14$.Outbound;
    export const outboundSchema: z.ZodType<
        Outbound,
        z.ZodTypeDef,
        UpdateProjectDataCacheContentHint
    > = z.union([
        z.lazy(() => UpdateProjectDataCacheContentHint1$.outboundSchema),
        z.lazy(() => UpdateProjectDataCacheContentHint2$.outboundSchema),
        z.lazy(() => UpdateProjectDataCacheContentHint3$.outboundSchema),
        z.lazy(() => UpdateProjectDataCacheContentHint4$.outboundSchema),
        z.lazy(() => UpdateProjectDataCacheContentHint5$.outboundSchema),
        z.lazy(() => UpdateProjectDataCacheContentHint6$.outboundSchema),
        z.lazy(() => UpdateProjectDataCacheContentHint7$.outboundSchema),
        z.lazy(() => UpdateProjectDataCacheContentHint8$.outboundSchema),
        z.lazy(() => UpdateProjectDataCacheContentHint9$.outboundSchema),
        z.lazy(() => UpdateProjectDataCacheContentHint10$.outboundSchema),
        z.lazy(() => UpdateProjectDataCacheContentHint11$.outboundSchema),
        z.lazy(() => UpdateProjectDataCacheContentHint12$.outboundSchema),
        z.lazy(() => UpdateProjectDataCacheContentHint13$.outboundSchema),
        z.lazy(() => UpdateProjectDataCacheContentHint14$.outboundSchema),
    ]);
}

/** @internal */
export const UpdateProjectDataCacheProjectsResponse200Type$: z.ZodNativeEnum<
    typeof UpdateProjectDataCacheProjectsResponse200Type
> = z.nativeEnum(UpdateProjectDataCacheProjectsResponse200Type);

/** @internal */
export namespace UpdateProjectDataCacheInternalContentHint$ {
    export const inboundSchema: z.ZodType<
        UpdateProjectDataCacheInternalContentHint,
        z.ZodTypeDef,
        unknown
    > = z
        .object({
            type: UpdateProjectDataCacheProjectsResponse200Type$,
            encryptedValue: z.string(),
        })
        .transform((v) => {
            return {
                type: v.type,
                encryptedValue: v.encryptedValue,
            };
        });

    export type Outbound = {
        type: UpdateProjectDataCacheProjectsResponse200Type;
        encryptedValue: string;
    };

    export const outboundSchema: z.ZodType<
        Outbound,
        z.ZodTypeDef,
        UpdateProjectDataCacheInternalContentHint
    > = z
        .object({
            type: UpdateProjectDataCacheProjectsResponse200Type$,
            encryptedValue: z.string(),
        })
        .transform((v) => {
            return {
                type: v.type,
                encryptedValue: v.encryptedValue,
            };
        });
}

/** @internal */
export namespace Env$ {
    export const inboundSchema: z.ZodType<Env, z.ZodTypeDef, unknown> = z
        .object({
            target: z
                .union([z.array(UpdateProjectDataCacheTarget1$), UpdateProjectDataCacheTarget2$])
                .optional(),
            type: UpdateProjectDataCacheType$,
            id: z.string().optional(),
            key: z.string(),
            value: z.string(),
            configurationId: z.nullable(z.string()).optional(),
            createdAt: z.number().optional(),
            updatedAt: z.number().optional(),
            createdBy: z.nullable(z.string()).optional(),
            updatedBy: z.nullable(z.string()).optional(),
            gitBranch: z.string().optional(),
            edgeConfigId: z.nullable(z.string()).optional(),
            edgeConfigTokenId: z.nullable(z.string()).optional(),
            contentHint: z
                .nullable(
                    z.union([
                        z.lazy(() => UpdateProjectDataCacheContentHint1$.inboundSchema),
                        z.lazy(() => UpdateProjectDataCacheContentHint2$.inboundSchema),
                        z.lazy(() => UpdateProjectDataCacheContentHint3$.inboundSchema),
                        z.lazy(() => UpdateProjectDataCacheContentHint4$.inboundSchema),
                        z.lazy(() => UpdateProjectDataCacheContentHint5$.inboundSchema),
                        z.lazy(() => UpdateProjectDataCacheContentHint6$.inboundSchema),
                        z.lazy(() => UpdateProjectDataCacheContentHint7$.inboundSchema),
                        z.lazy(() => UpdateProjectDataCacheContentHint8$.inboundSchema),
                        z.lazy(() => UpdateProjectDataCacheContentHint9$.inboundSchema),
                        z.lazy(() => UpdateProjectDataCacheContentHint10$.inboundSchema),
                        z.lazy(() => UpdateProjectDataCacheContentHint11$.inboundSchema),
                        z.lazy(() => UpdateProjectDataCacheContentHint12$.inboundSchema),
                        z.lazy(() => UpdateProjectDataCacheContentHint13$.inboundSchema),
                        z.lazy(() => UpdateProjectDataCacheContentHint14$.inboundSchema),
                    ])
                )
                .optional(),
            internalContentHint: z
                .nullable(z.lazy(() => UpdateProjectDataCacheInternalContentHint$.inboundSchema))
                .optional(),
            decrypted: z.boolean().optional(),
            comment: z.string().optional(),
            customEnvironmentId: z.string().optional(),
        })
        .transform((v) => {
            return {
                ...(v.target === undefined ? null : { target: v.target }),
                type: v.type,
                ...(v.id === undefined ? null : { id: v.id }),
                key: v.key,
                value: v.value,
                ...(v.configurationId === undefined
                    ? null
                    : { configurationId: v.configurationId }),
                ...(v.createdAt === undefined ? null : { createdAt: v.createdAt }),
                ...(v.updatedAt === undefined ? null : { updatedAt: v.updatedAt }),
                ...(v.createdBy === undefined ? null : { createdBy: v.createdBy }),
                ...(v.updatedBy === undefined ? null : { updatedBy: v.updatedBy }),
                ...(v.gitBranch === undefined ? null : { gitBranch: v.gitBranch }),
                ...(v.edgeConfigId === undefined ? null : { edgeConfigId: v.edgeConfigId }),
                ...(v.edgeConfigTokenId === undefined
                    ? null
                    : { edgeConfigTokenId: v.edgeConfigTokenId }),
                ...(v.contentHint === undefined ? null : { contentHint: v.contentHint }),
                ...(v.internalContentHint === undefined
                    ? null
                    : { internalContentHint: v.internalContentHint }),
                ...(v.decrypted === undefined ? null : { decrypted: v.decrypted }),
                ...(v.comment === undefined ? null : { comment: v.comment }),
                ...(v.customEnvironmentId === undefined
                    ? null
                    : { customEnvironmentId: v.customEnvironmentId }),
            };
        });

    export type Outbound = {
        target?: Array<UpdateProjectDataCacheTarget1> | UpdateProjectDataCacheTarget2 | undefined;
        type: UpdateProjectDataCacheType;
        id?: string | undefined;
        key: string;
        value: string;
        configurationId?: string | null | undefined;
        createdAt?: number | undefined;
        updatedAt?: number | undefined;
        createdBy?: string | null | undefined;
        updatedBy?: string | null | undefined;
        gitBranch?: string | undefined;
        edgeConfigId?: string | null | undefined;
        edgeConfigTokenId?: string | null | undefined;
        contentHint?:
            | UpdateProjectDataCacheContentHint1$.Outbound
            | UpdateProjectDataCacheContentHint2$.Outbound
            | UpdateProjectDataCacheContentHint3$.Outbound
            | UpdateProjectDataCacheContentHint4$.Outbound
            | UpdateProjectDataCacheContentHint5$.Outbound
            | UpdateProjectDataCacheContentHint6$.Outbound
            | UpdateProjectDataCacheContentHint7$.Outbound
            | UpdateProjectDataCacheContentHint8$.Outbound
            | UpdateProjectDataCacheContentHint9$.Outbound
            | UpdateProjectDataCacheContentHint10$.Outbound
            | UpdateProjectDataCacheContentHint11$.Outbound
            | UpdateProjectDataCacheContentHint12$.Outbound
            | UpdateProjectDataCacheContentHint13$.Outbound
            | UpdateProjectDataCacheContentHint14$.Outbound
            | null
            | undefined;
        internalContentHint?:
            | UpdateProjectDataCacheInternalContentHint$.Outbound
            | null
            | undefined;
        decrypted?: boolean | undefined;
        comment?: string | undefined;
        customEnvironmentId?: string | undefined;
    };

    export const outboundSchema: z.ZodType<Outbound, z.ZodTypeDef, Env> = z
        .object({
            target: z
                .union([z.array(UpdateProjectDataCacheTarget1$), UpdateProjectDataCacheTarget2$])
                .optional(),
            type: UpdateProjectDataCacheType$,
            id: z.string().optional(),
            key: z.string(),
            value: z.string(),
            configurationId: z.nullable(z.string()).optional(),
            createdAt: z.number().optional(),
            updatedAt: z.number().optional(),
            createdBy: z.nullable(z.string()).optional(),
            updatedBy: z.nullable(z.string()).optional(),
            gitBranch: z.string().optional(),
            edgeConfigId: z.nullable(z.string()).optional(),
            edgeConfigTokenId: z.nullable(z.string()).optional(),
            contentHint: z
                .nullable(
                    z.union([
                        z.lazy(() => UpdateProjectDataCacheContentHint1$.outboundSchema),
                        z.lazy(() => UpdateProjectDataCacheContentHint2$.outboundSchema),
                        z.lazy(() => UpdateProjectDataCacheContentHint3$.outboundSchema),
                        z.lazy(() => UpdateProjectDataCacheContentHint4$.outboundSchema),
                        z.lazy(() => UpdateProjectDataCacheContentHint5$.outboundSchema),
                        z.lazy(() => UpdateProjectDataCacheContentHint6$.outboundSchema),
                        z.lazy(() => UpdateProjectDataCacheContentHint7$.outboundSchema),
                        z.lazy(() => UpdateProjectDataCacheContentHint8$.outboundSchema),
                        z.lazy(() => UpdateProjectDataCacheContentHint9$.outboundSchema),
                        z.lazy(() => UpdateProjectDataCacheContentHint10$.outboundSchema),
                        z.lazy(() => UpdateProjectDataCacheContentHint11$.outboundSchema),
                        z.lazy(() => UpdateProjectDataCacheContentHint12$.outboundSchema),
                        z.lazy(() => UpdateProjectDataCacheContentHint13$.outboundSchema),
                        z.lazy(() => UpdateProjectDataCacheContentHint14$.outboundSchema),
                    ])
                )
                .optional(),
            internalContentHint: z
                .nullable(z.lazy(() => UpdateProjectDataCacheInternalContentHint$.outboundSchema))
                .optional(),
            decrypted: z.boolean().optional(),
            comment: z.string().optional(),
            customEnvironmentId: z.string().optional(),
        })
        .transform((v) => {
            return {
                ...(v.target === undefined ? null : { target: v.target }),
                type: v.type,
                ...(v.id === undefined ? null : { id: v.id }),
                key: v.key,
                value: v.value,
                ...(v.configurationId === undefined
                    ? null
                    : { configurationId: v.configurationId }),
                ...(v.createdAt === undefined ? null : { createdAt: v.createdAt }),
                ...(v.updatedAt === undefined ? null : { updatedAt: v.updatedAt }),
                ...(v.createdBy === undefined ? null : { createdBy: v.createdBy }),
                ...(v.updatedBy === undefined ? null : { updatedBy: v.updatedBy }),
                ...(v.gitBranch === undefined ? null : { gitBranch: v.gitBranch }),
                ...(v.edgeConfigId === undefined ? null : { edgeConfigId: v.edgeConfigId }),
                ...(v.edgeConfigTokenId === undefined
                    ? null
                    : { edgeConfigTokenId: v.edgeConfigTokenId }),
                ...(v.contentHint === undefined ? null : { contentHint: v.contentHint }),
                ...(v.internalContentHint === undefined
                    ? null
                    : { internalContentHint: v.internalContentHint }),
                ...(v.decrypted === undefined ? null : { decrypted: v.decrypted }),
                ...(v.comment === undefined ? null : { comment: v.comment }),
                ...(v.customEnvironmentId === undefined
                    ? null
                    : { customEnvironmentId: v.customEnvironmentId }),
            };
        });
}

/** @internal */
export const UpdateProjectDataCacheFramework$: z.ZodNativeEnum<
    typeof UpdateProjectDataCacheFramework
> = z.nativeEnum(UpdateProjectDataCacheFramework);

/** @internal */
export namespace AliasAssigned$ {
    export const inboundSchema: z.ZodType<AliasAssigned, z.ZodTypeDef, unknown> = z.union([
        z.number(),
        z.boolean(),
    ]);

    export type Outbound = number | boolean;
    export const outboundSchema: z.ZodType<Outbound, z.ZodTypeDef, AliasAssigned> = z.union([
        z.number(),
        z.boolean(),
    ]);
}

/** @internal */
export namespace UpdateProjectDataCacheAliasError$ {
    export const inboundSchema: z.ZodType<UpdateProjectDataCacheAliasError, z.ZodTypeDef, unknown> =
        z
            .object({
                code: z.string(),
                message: z.string(),
            })
            .transform((v) => {
                return {
                    code: v.code,
                    message: v.message,
                };
            });

    export type Outbound = {
        code: string;
        message: string;
    };

    export const outboundSchema: z.ZodType<
        Outbound,
        z.ZodTypeDef,
        UpdateProjectDataCacheAliasError
    > = z
        .object({
            code: z.string(),
            message: z.string(),
        })
        .transform((v) => {
            return {
                code: v.code,
                message: v.message,
            };
        });
}

/** @internal */
export namespace UpdateProjectDataCacheBuilds$ {
    export const inboundSchema: z.ZodType<UpdateProjectDataCacheBuilds, z.ZodTypeDef, unknown> = z
        .object({
            use: z.string(),
            src: z.string().optional(),
            dest: z.string().optional(),
        })
        .transform((v) => {
            return {
                use: v.use,
                ...(v.src === undefined ? null : { src: v.src }),
                ...(v.dest === undefined ? null : { dest: v.dest }),
            };
        });

    export type Outbound = {
        use: string;
        src?: string | undefined;
        dest?: string | undefined;
    };

    export const outboundSchema: z.ZodType<Outbound, z.ZodTypeDef, UpdateProjectDataCacheBuilds> = z
        .object({
            use: z.string(),
            src: z.string().optional(),
            dest: z.string().optional(),
        })
        .transform((v) => {
            return {
                use: v.use,
                ...(v.src === undefined ? null : { src: v.src }),
                ...(v.dest === undefined ? null : { dest: v.dest }),
            };
        });
}

/** @internal */
export namespace UpdateProjectDataCacheCreator$ {
    export const inboundSchema: z.ZodType<UpdateProjectDataCacheCreator, z.ZodTypeDef, unknown> = z
        .object({
            email: z.string(),
            githubLogin: z.string().optional(),
            gitlabLogin: z.string().optional(),
            uid: z.string(),
            username: z.string(),
        })
        .transform((v) => {
            return {
                email: v.email,
                ...(v.githubLogin === undefined ? null : { githubLogin: v.githubLogin }),
                ...(v.gitlabLogin === undefined ? null : { gitlabLogin: v.gitlabLogin }),
                uid: v.uid,
                username: v.username,
            };
        });

    export type Outbound = {
        email: string;
        githubLogin?: string | undefined;
        gitlabLogin?: string | undefined;
        uid: string;
        username: string;
    };

    export const outboundSchema: z.ZodType<Outbound, z.ZodTypeDef, UpdateProjectDataCacheCreator> =
        z
            .object({
                email: z.string(),
                githubLogin: z.string().optional(),
                gitlabLogin: z.string().optional(),
                uid: z.string(),
                username: z.string(),
            })
            .transform((v) => {
                return {
                    email: v.email,
                    ...(v.githubLogin === undefined ? null : { githubLogin: v.githubLogin }),
                    ...(v.gitlabLogin === undefined ? null : { gitlabLogin: v.gitlabLogin }),
                    uid: v.uid,
                    username: v.username,
                };
            });
}

/** @internal */
export const UpdateProjectDataCachePlan$: z.ZodNativeEnum<typeof UpdateProjectDataCachePlan> =
    z.nativeEnum(UpdateProjectDataCachePlan);

/** @internal */
export const UpdateProjectDataCacheReadyState$: z.ZodNativeEnum<
    typeof UpdateProjectDataCacheReadyState
> = z.nativeEnum(UpdateProjectDataCacheReadyState);

/** @internal */
export const UpdateProjectDataCacheReadySubstate$: z.ZodNativeEnum<
    typeof UpdateProjectDataCacheReadySubstate
> = z.nativeEnum(UpdateProjectDataCacheReadySubstate);

/** @internal */
export const UpdateProjectDataCacheProjectsType$: z.ZodNativeEnum<
    typeof UpdateProjectDataCacheProjectsType
> = z.nativeEnum(UpdateProjectDataCacheProjectsType);

/** @internal */
export const UpdateProjectDataCacheChecksConclusion$: z.ZodNativeEnum<
    typeof UpdateProjectDataCacheChecksConclusion
> = z.nativeEnum(UpdateProjectDataCacheChecksConclusion);

/** @internal */
export const UpdateProjectDataCacheChecksState$: z.ZodNativeEnum<
    typeof UpdateProjectDataCacheChecksState
> = z.nativeEnum(UpdateProjectDataCacheChecksState);

/** @internal */
export namespace OidcTokenClaims$ {
    export const inboundSchema: z.ZodType<OidcTokenClaims, z.ZodTypeDef, unknown> = z.union([
        z.string(),
        z.array(z.string()),
    ]);

    export type Outbound = string | Array<string>;
    export const outboundSchema: z.ZodType<Outbound, z.ZodTypeDef, OidcTokenClaims> = z.union([
        z.string(),
        z.array(z.string()),
    ]);
}

/** @internal */
export namespace LatestDeployments$ {
    export const inboundSchema: z.ZodType<LatestDeployments, z.ZodTypeDef, unknown> = z
        .object({
            alias: z.array(z.string()).optional(),
            aliasAssigned: z.nullable(z.union([z.number(), z.boolean()])).optional(),
            aliasError: z
                .nullable(z.lazy(() => UpdateProjectDataCacheAliasError$.inboundSchema))
                .optional(),
            aliasFinal: z.nullable(z.string()).optional(),
            automaticAliases: z.array(z.string()).optional(),
            builds: z.array(z.lazy(() => UpdateProjectDataCacheBuilds$.inboundSchema)).optional(),
            connectBuildsEnabled: z.boolean().optional(),
            connectConfigurationId: z.string().optional(),
            createdAt: z.number(),
            createdIn: z.string(),
            creator: z.nullable(z.lazy(() => UpdateProjectDataCacheCreator$.inboundSchema)),
            deploymentHostname: z.string(),
            name: z.string(),
            forced: z.boolean().optional(),
            id: z.string(),
            meta: z.record(z.string()).optional(),
            monorepoManager: z.nullable(z.string()).optional(),
            plan: UpdateProjectDataCachePlan$,
            private: z.boolean(),
            readyState: UpdateProjectDataCacheReadyState$,
            readySubstate: UpdateProjectDataCacheReadySubstate$.optional(),
            requestedAt: z.number().optional(),
            target: z.nullable(z.string()).optional(),
            teamId: z.nullable(z.string()).optional(),
            type: UpdateProjectDataCacheProjectsType$,
            url: z.string(),
            userId: z.string(),
            withCache: z.boolean().optional(),
            checksConclusion: UpdateProjectDataCacheChecksConclusion$.optional(),
            checksState: UpdateProjectDataCacheChecksState$.optional(),
            readyAt: z.number().optional(),
            buildingAt: z.number().optional(),
            previewCommentsEnabled: z.boolean().optional(),
            oidcTokenClaims: z.record(z.union([z.string(), z.array(z.string())])).optional(),
        })
        .transform((v) => {
            return {
                ...(v.alias === undefined ? null : { alias: v.alias }),
                ...(v.aliasAssigned === undefined ? null : { aliasAssigned: v.aliasAssigned }),
                ...(v.aliasError === undefined ? null : { aliasError: v.aliasError }),
                ...(v.aliasFinal === undefined ? null : { aliasFinal: v.aliasFinal }),
                ...(v.automaticAliases === undefined
                    ? null
                    : { automaticAliases: v.automaticAliases }),
                ...(v.builds === undefined ? null : { builds: v.builds }),
                ...(v.connectBuildsEnabled === undefined
                    ? null
                    : { connectBuildsEnabled: v.connectBuildsEnabled }),
                ...(v.connectConfigurationId === undefined
                    ? null
                    : { connectConfigurationId: v.connectConfigurationId }),
                createdAt: v.createdAt,
                createdIn: v.createdIn,
                creator: v.creator,
                deploymentHostname: v.deploymentHostname,
                name: v.name,
                ...(v.forced === undefined ? null : { forced: v.forced }),
                id: v.id,
                ...(v.meta === undefined ? null : { meta: v.meta }),
                ...(v.monorepoManager === undefined
                    ? null
                    : { monorepoManager: v.monorepoManager }),
                plan: v.plan,
                private: v.private,
                readyState: v.readyState,
                ...(v.readySubstate === undefined ? null : { readySubstate: v.readySubstate }),
                ...(v.requestedAt === undefined ? null : { requestedAt: v.requestedAt }),
                ...(v.target === undefined ? null : { target: v.target }),
                ...(v.teamId === undefined ? null : { teamId: v.teamId }),
                type: v.type,
                url: v.url,
                userId: v.userId,
                ...(v.withCache === undefined ? null : { withCache: v.withCache }),
                ...(v.checksConclusion === undefined
                    ? null
                    : { checksConclusion: v.checksConclusion }),
                ...(v.checksState === undefined ? null : { checksState: v.checksState }),
                ...(v.readyAt === undefined ? null : { readyAt: v.readyAt }),
                ...(v.buildingAt === undefined ? null : { buildingAt: v.buildingAt }),
                ...(v.previewCommentsEnabled === undefined
                    ? null
                    : { previewCommentsEnabled: v.previewCommentsEnabled }),
                ...(v.oidcTokenClaims === undefined
                    ? null
                    : { oidcTokenClaims: v.oidcTokenClaims }),
            };
        });

    export type Outbound = {
        alias?: Array<string> | undefined;
        aliasAssigned?: number | boolean | null | undefined;
        aliasError?: UpdateProjectDataCacheAliasError$.Outbound | null | undefined;
        aliasFinal?: string | null | undefined;
        automaticAliases?: Array<string> | undefined;
        builds?: Array<UpdateProjectDataCacheBuilds$.Outbound> | undefined;
        connectBuildsEnabled?: boolean | undefined;
        connectConfigurationId?: string | undefined;
        createdAt: number;
        createdIn: string;
        creator: UpdateProjectDataCacheCreator$.Outbound | null;
        deploymentHostname: string;
        name: string;
        forced?: boolean | undefined;
        id: string;
        meta?: Record<string, string> | undefined;
        monorepoManager?: string | null | undefined;
        plan: UpdateProjectDataCachePlan;
        private: boolean;
        readyState: UpdateProjectDataCacheReadyState;
        readySubstate?: UpdateProjectDataCacheReadySubstate | undefined;
        requestedAt?: number | undefined;
        target?: string | null | undefined;
        teamId?: string | null | undefined;
        type: UpdateProjectDataCacheProjectsType;
        url: string;
        userId: string;
        withCache?: boolean | undefined;
        checksConclusion?: UpdateProjectDataCacheChecksConclusion | undefined;
        checksState?: UpdateProjectDataCacheChecksState | undefined;
        readyAt?: number | undefined;
        buildingAt?: number | undefined;
        previewCommentsEnabled?: boolean | undefined;
        oidcTokenClaims?: Record<string, string | Array<string>> | undefined;
    };

    export const outboundSchema: z.ZodType<Outbound, z.ZodTypeDef, LatestDeployments> = z
        .object({
            alias: z.array(z.string()).optional(),
            aliasAssigned: z.nullable(z.union([z.number(), z.boolean()])).optional(),
            aliasError: z
                .nullable(z.lazy(() => UpdateProjectDataCacheAliasError$.outboundSchema))
                .optional(),
            aliasFinal: z.nullable(z.string()).optional(),
            automaticAliases: z.array(z.string()).optional(),
            builds: z.array(z.lazy(() => UpdateProjectDataCacheBuilds$.outboundSchema)).optional(),
            connectBuildsEnabled: z.boolean().optional(),
            connectConfigurationId: z.string().optional(),
            createdAt: z.number(),
            createdIn: z.string(),
            creator: z.nullable(z.lazy(() => UpdateProjectDataCacheCreator$.outboundSchema)),
            deploymentHostname: z.string(),
            name: z.string(),
            forced: z.boolean().optional(),
            id: z.string(),
            meta: z.record(z.string()).optional(),
            monorepoManager: z.nullable(z.string()).optional(),
            plan: UpdateProjectDataCachePlan$,
            private: z.boolean(),
            readyState: UpdateProjectDataCacheReadyState$,
            readySubstate: UpdateProjectDataCacheReadySubstate$.optional(),
            requestedAt: z.number().optional(),
            target: z.nullable(z.string()).optional(),
            teamId: z.nullable(z.string()).optional(),
            type: UpdateProjectDataCacheProjectsType$,
            url: z.string(),
            userId: z.string(),
            withCache: z.boolean().optional(),
            checksConclusion: UpdateProjectDataCacheChecksConclusion$.optional(),
            checksState: UpdateProjectDataCacheChecksState$.optional(),
            readyAt: z.number().optional(),
            buildingAt: z.number().optional(),
            previewCommentsEnabled: z.boolean().optional(),
            oidcTokenClaims: z.record(z.union([z.string(), z.array(z.string())])).optional(),
        })
        .transform((v) => {
            return {
                ...(v.alias === undefined ? null : { alias: v.alias }),
                ...(v.aliasAssigned === undefined ? null : { aliasAssigned: v.aliasAssigned }),
                ...(v.aliasError === undefined ? null : { aliasError: v.aliasError }),
                ...(v.aliasFinal === undefined ? null : { aliasFinal: v.aliasFinal }),
                ...(v.automaticAliases === undefined
                    ? null
                    : { automaticAliases: v.automaticAliases }),
                ...(v.builds === undefined ? null : { builds: v.builds }),
                ...(v.connectBuildsEnabled === undefined
                    ? null
                    : { connectBuildsEnabled: v.connectBuildsEnabled }),
                ...(v.connectConfigurationId === undefined
                    ? null
                    : { connectConfigurationId: v.connectConfigurationId }),
                createdAt: v.createdAt,
                createdIn: v.createdIn,
                creator: v.creator,
                deploymentHostname: v.deploymentHostname,
                name: v.name,
                ...(v.forced === undefined ? null : { forced: v.forced }),
                id: v.id,
                ...(v.meta === undefined ? null : { meta: v.meta }),
                ...(v.monorepoManager === undefined
                    ? null
                    : { monorepoManager: v.monorepoManager }),
                plan: v.plan,
                private: v.private,
                readyState: v.readyState,
                ...(v.readySubstate === undefined ? null : { readySubstate: v.readySubstate }),
                ...(v.requestedAt === undefined ? null : { requestedAt: v.requestedAt }),
                ...(v.target === undefined ? null : { target: v.target }),
                ...(v.teamId === undefined ? null : { teamId: v.teamId }),
                type: v.type,
                url: v.url,
                userId: v.userId,
                ...(v.withCache === undefined ? null : { withCache: v.withCache }),
                ...(v.checksConclusion === undefined
                    ? null
                    : { checksConclusion: v.checksConclusion }),
                ...(v.checksState === undefined ? null : { checksState: v.checksState }),
                ...(v.readyAt === undefined ? null : { readyAt: v.readyAt }),
                ...(v.buildingAt === undefined ? null : { buildingAt: v.buildingAt }),
                ...(v.previewCommentsEnabled === undefined
                    ? null
                    : { previewCommentsEnabled: v.previewCommentsEnabled }),
                ...(v.oidcTokenClaims === undefined
                    ? null
                    : { oidcTokenClaims: v.oidcTokenClaims }),
            };
        });
}

/** @internal */
export const UpdateProjectDataCacheLinkProjectsType$: z.ZodNativeEnum<
    typeof UpdateProjectDataCacheLinkProjectsType
> = z.nativeEnum(UpdateProjectDataCacheLinkProjectsType);

/** @internal */
export namespace UpdateProjectDataCacheLinkDeployHooks$ {
    export const inboundSchema: z.ZodType<
        UpdateProjectDataCacheLinkDeployHooks,
        z.ZodTypeDef,
        unknown
    > = z
        .object({
            createdAt: z.number().optional(),
            id: z.string(),
            name: z.string(),
            ref: z.string(),
            url: z.string(),
        })
        .transform((v) => {
            return {
                ...(v.createdAt === undefined ? null : { createdAt: v.createdAt }),
                id: v.id,
                name: v.name,
                ref: v.ref,
                url: v.url,
            };
        });

    export type Outbound = {
        createdAt?: number | undefined;
        id: string;
        name: string;
        ref: string;
        url: string;
    };

    export const outboundSchema: z.ZodType<
        Outbound,
        z.ZodTypeDef,
        UpdateProjectDataCacheLinkDeployHooks
    > = z
        .object({
            createdAt: z.number().optional(),
            id: z.string(),
            name: z.string(),
            ref: z.string(),
            url: z.string(),
        })
        .transform((v) => {
            return {
                ...(v.createdAt === undefined ? null : { createdAt: v.createdAt }),
                id: v.id,
                name: v.name,
                ref: v.ref,
                url: v.url,
            };
        });
}

/** @internal */
export namespace Link3$ {
    export const inboundSchema: z.ZodType<Link3, z.ZodTypeDef, unknown> = z
        .object({
            name: z.string().optional(),
            slug: z.string().optional(),
            owner: z.string().optional(),
            type: UpdateProjectDataCacheLinkProjectsType$.optional(),
            uuid: z.string().optional(),
            workspaceUuid: z.string().optional(),
            createdAt: z.number().optional(),
            deployHooks: z.array(
                z.lazy(() => UpdateProjectDataCacheLinkDeployHooks$.inboundSchema)
            ),
            gitCredentialId: z.string().optional(),
            updatedAt: z.number().optional(),
            sourceless: z.boolean().optional(),
            productionBranch: z.string().optional(),
        })
        .transform((v) => {
            return {
                ...(v.name === undefined ? null : { name: v.name }),
                ...(v.slug === undefined ? null : { slug: v.slug }),
                ...(v.owner === undefined ? null : { owner: v.owner }),
                ...(v.type === undefined ? null : { type: v.type }),
                ...(v.uuid === undefined ? null : { uuid: v.uuid }),
                ...(v.workspaceUuid === undefined ? null : { workspaceUuid: v.workspaceUuid }),
                ...(v.createdAt === undefined ? null : { createdAt: v.createdAt }),
                deployHooks: v.deployHooks,
                ...(v.gitCredentialId === undefined
                    ? null
                    : { gitCredentialId: v.gitCredentialId }),
                ...(v.updatedAt === undefined ? null : { updatedAt: v.updatedAt }),
                ...(v.sourceless === undefined ? null : { sourceless: v.sourceless }),
                ...(v.productionBranch === undefined
                    ? null
                    : { productionBranch: v.productionBranch }),
            };
        });

    export type Outbound = {
        name?: string | undefined;
        slug?: string | undefined;
        owner?: string | undefined;
        type?: UpdateProjectDataCacheLinkProjectsType | undefined;
        uuid?: string | undefined;
        workspaceUuid?: string | undefined;
        createdAt?: number | undefined;
        deployHooks: Array<UpdateProjectDataCacheLinkDeployHooks$.Outbound>;
        gitCredentialId?: string | undefined;
        updatedAt?: number | undefined;
        sourceless?: boolean | undefined;
        productionBranch?: string | undefined;
    };

    export const outboundSchema: z.ZodType<Outbound, z.ZodTypeDef, Link3> = z
        .object({
            name: z.string().optional(),
            slug: z.string().optional(),
            owner: z.string().optional(),
            type: UpdateProjectDataCacheLinkProjectsType$.optional(),
            uuid: z.string().optional(),
            workspaceUuid: z.string().optional(),
            createdAt: z.number().optional(),
            deployHooks: z.array(
                z.lazy(() => UpdateProjectDataCacheLinkDeployHooks$.outboundSchema)
            ),
            gitCredentialId: z.string().optional(),
            updatedAt: z.number().optional(),
            sourceless: z.boolean().optional(),
            productionBranch: z.string().optional(),
        })
        .transform((v) => {
            return {
                ...(v.name === undefined ? null : { name: v.name }),
                ...(v.slug === undefined ? null : { slug: v.slug }),
                ...(v.owner === undefined ? null : { owner: v.owner }),
                ...(v.type === undefined ? null : { type: v.type }),
                ...(v.uuid === undefined ? null : { uuid: v.uuid }),
                ...(v.workspaceUuid === undefined ? null : { workspaceUuid: v.workspaceUuid }),
                ...(v.createdAt === undefined ? null : { createdAt: v.createdAt }),
                deployHooks: v.deployHooks,
                ...(v.gitCredentialId === undefined
                    ? null
                    : { gitCredentialId: v.gitCredentialId }),
                ...(v.updatedAt === undefined ? null : { updatedAt: v.updatedAt }),
                ...(v.sourceless === undefined ? null : { sourceless: v.sourceless }),
                ...(v.productionBranch === undefined
                    ? null
                    : { productionBranch: v.productionBranch }),
            };
        });
}

/** @internal */
export const UpdateProjectDataCacheLinkType$: z.ZodNativeEnum<
    typeof UpdateProjectDataCacheLinkType
> = z.nativeEnum(UpdateProjectDataCacheLinkType);

/** @internal */
export namespace LinkDeployHooks$ {
    export const inboundSchema: z.ZodType<LinkDeployHooks, z.ZodTypeDef, unknown> = z
        .object({
            createdAt: z.number().optional(),
            id: z.string(),
            name: z.string(),
            ref: z.string(),
            url: z.string(),
        })
        .transform((v) => {
            return {
                ...(v.createdAt === undefined ? null : { createdAt: v.createdAt }),
                id: v.id,
                name: v.name,
                ref: v.ref,
                url: v.url,
            };
        });

    export type Outbound = {
        createdAt?: number | undefined;
        id: string;
        name: string;
        ref: string;
        url: string;
    };

    export const outboundSchema: z.ZodType<Outbound, z.ZodTypeDef, LinkDeployHooks> = z
        .object({
            createdAt: z.number().optional(),
            id: z.string(),
            name: z.string(),
            ref: z.string(),
            url: z.string(),
        })
        .transform((v) => {
            return {
                ...(v.createdAt === undefined ? null : { createdAt: v.createdAt }),
                id: v.id,
                name: v.name,
                ref: v.ref,
                url: v.url,
            };
        });
}

/** @internal */
export namespace Link2$ {
    export const inboundSchema: z.ZodType<Link2, z.ZodTypeDef, unknown> = z
        .object({
            projectId: z.string().optional(),
            projectName: z.string().optional(),
            projectNameWithNamespace: z.string().optional(),
            projectNamespace: z.string().optional(),
            projectUrl: z.string().optional(),
            type: UpdateProjectDataCacheLinkType$.optional(),
            createdAt: z.number().optional(),
            deployHooks: z.array(z.lazy(() => LinkDeployHooks$.inboundSchema)),
            gitCredentialId: z.string().optional(),
            updatedAt: z.number().optional(),
            sourceless: z.boolean().optional(),
            productionBranch: z.string().optional(),
        })
        .transform((v) => {
            return {
                ...(v.projectId === undefined ? null : { projectId: v.projectId }),
                ...(v.projectName === undefined ? null : { projectName: v.projectName }),
                ...(v.projectNameWithNamespace === undefined
                    ? null
                    : { projectNameWithNamespace: v.projectNameWithNamespace }),
                ...(v.projectNamespace === undefined
                    ? null
                    : { projectNamespace: v.projectNamespace }),
                ...(v.projectUrl === undefined ? null : { projectUrl: v.projectUrl }),
                ...(v.type === undefined ? null : { type: v.type }),
                ...(v.createdAt === undefined ? null : { createdAt: v.createdAt }),
                deployHooks: v.deployHooks,
                ...(v.gitCredentialId === undefined
                    ? null
                    : { gitCredentialId: v.gitCredentialId }),
                ...(v.updatedAt === undefined ? null : { updatedAt: v.updatedAt }),
                ...(v.sourceless === undefined ? null : { sourceless: v.sourceless }),
                ...(v.productionBranch === undefined
                    ? null
                    : { productionBranch: v.productionBranch }),
            };
        });

    export type Outbound = {
        projectId?: string | undefined;
        projectName?: string | undefined;
        projectNameWithNamespace?: string | undefined;
        projectNamespace?: string | undefined;
        projectUrl?: string | undefined;
        type?: UpdateProjectDataCacheLinkType | undefined;
        createdAt?: number | undefined;
        deployHooks: Array<LinkDeployHooks$.Outbound>;
        gitCredentialId?: string | undefined;
        updatedAt?: number | undefined;
        sourceless?: boolean | undefined;
        productionBranch?: string | undefined;
    };

    export const outboundSchema: z.ZodType<Outbound, z.ZodTypeDef, Link2> = z
        .object({
            projectId: z.string().optional(),
            projectName: z.string().optional(),
            projectNameWithNamespace: z.string().optional(),
            projectNamespace: z.string().optional(),
            projectUrl: z.string().optional(),
            type: UpdateProjectDataCacheLinkType$.optional(),
            createdAt: z.number().optional(),
            deployHooks: z.array(z.lazy(() => LinkDeployHooks$.outboundSchema)),
            gitCredentialId: z.string().optional(),
            updatedAt: z.number().optional(),
            sourceless: z.boolean().optional(),
            productionBranch: z.string().optional(),
        })
        .transform((v) => {
            return {
                ...(v.projectId === undefined ? null : { projectId: v.projectId }),
                ...(v.projectName === undefined ? null : { projectName: v.projectName }),
                ...(v.projectNameWithNamespace === undefined
                    ? null
                    : { projectNameWithNamespace: v.projectNameWithNamespace }),
                ...(v.projectNamespace === undefined
                    ? null
                    : { projectNamespace: v.projectNamespace }),
                ...(v.projectUrl === undefined ? null : { projectUrl: v.projectUrl }),
                ...(v.type === undefined ? null : { type: v.type }),
                ...(v.createdAt === undefined ? null : { createdAt: v.createdAt }),
                deployHooks: v.deployHooks,
                ...(v.gitCredentialId === undefined
                    ? null
                    : { gitCredentialId: v.gitCredentialId }),
                ...(v.updatedAt === undefined ? null : { updatedAt: v.updatedAt }),
                ...(v.sourceless === undefined ? null : { sourceless: v.sourceless }),
                ...(v.productionBranch === undefined
                    ? null
                    : { productionBranch: v.productionBranch }),
            };
        });
}

/** @internal */
export const LinkType$: z.ZodNativeEnum<typeof LinkType> = z.nativeEnum(LinkType);

/** @internal */
export namespace DeployHooks$ {
    export const inboundSchema: z.ZodType<DeployHooks, z.ZodTypeDef, unknown> = z
        .object({
            createdAt: z.number().optional(),
            id: z.string(),
            name: z.string(),
            ref: z.string(),
            url: z.string(),
        })
        .transform((v) => {
            return {
                ...(v.createdAt === undefined ? null : { createdAt: v.createdAt }),
                id: v.id,
                name: v.name,
                ref: v.ref,
                url: v.url,
            };
        });

    export type Outbound = {
        createdAt?: number | undefined;
        id: string;
        name: string;
        ref: string;
        url: string;
    };

    export const outboundSchema: z.ZodType<Outbound, z.ZodTypeDef, DeployHooks> = z
        .object({
            createdAt: z.number().optional(),
            id: z.string(),
            name: z.string(),
            ref: z.string(),
            url: z.string(),
        })
        .transform((v) => {
            return {
                ...(v.createdAt === undefined ? null : { createdAt: v.createdAt }),
                id: v.id,
                name: v.name,
                ref: v.ref,
                url: v.url,
            };
        });
}

/** @internal */
export namespace Link1$ {
    export const inboundSchema: z.ZodType<Link1, z.ZodTypeDef, unknown> = z
        .object({
            org: z.string().optional(),
            repo: z.string().optional(),
            repoId: z.number().optional(),
            type: LinkType$.optional(),
            createdAt: z.number().optional(),
            deployHooks: z.array(z.lazy(() => DeployHooks$.inboundSchema)),
            gitCredentialId: z.string().optional(),
            updatedAt: z.number().optional(),
            sourceless: z.boolean().optional(),
            productionBranch: z.string().optional(),
        })
        .transform((v) => {
            return {
                ...(v.org === undefined ? null : { org: v.org }),
                ...(v.repo === undefined ? null : { repo: v.repo }),
                ...(v.repoId === undefined ? null : { repoId: v.repoId }),
                ...(v.type === undefined ? null : { type: v.type }),
                ...(v.createdAt === undefined ? null : { createdAt: v.createdAt }),
                deployHooks: v.deployHooks,
                ...(v.gitCredentialId === undefined
                    ? null
                    : { gitCredentialId: v.gitCredentialId }),
                ...(v.updatedAt === undefined ? null : { updatedAt: v.updatedAt }),
                ...(v.sourceless === undefined ? null : { sourceless: v.sourceless }),
                ...(v.productionBranch === undefined
                    ? null
                    : { productionBranch: v.productionBranch }),
            };
        });

    export type Outbound = {
        org?: string | undefined;
        repo?: string | undefined;
        repoId?: number | undefined;
        type?: LinkType | undefined;
        createdAt?: number | undefined;
        deployHooks: Array<DeployHooks$.Outbound>;
        gitCredentialId?: string | undefined;
        updatedAt?: number | undefined;
        sourceless?: boolean | undefined;
        productionBranch?: string | undefined;
    };

    export const outboundSchema: z.ZodType<Outbound, z.ZodTypeDef, Link1> = z
        .object({
            org: z.string().optional(),
            repo: z.string().optional(),
            repoId: z.number().optional(),
            type: LinkType$.optional(),
            createdAt: z.number().optional(),
            deployHooks: z.array(z.lazy(() => DeployHooks$.outboundSchema)),
            gitCredentialId: z.string().optional(),
            updatedAt: z.number().optional(),
            sourceless: z.boolean().optional(),
            productionBranch: z.string().optional(),
        })
        .transform((v) => {
            return {
                ...(v.org === undefined ? null : { org: v.org }),
                ...(v.repo === undefined ? null : { repo: v.repo }),
                ...(v.repoId === undefined ? null : { repoId: v.repoId }),
                ...(v.type === undefined ? null : { type: v.type }),
                ...(v.createdAt === undefined ? null : { createdAt: v.createdAt }),
                deployHooks: v.deployHooks,
                ...(v.gitCredentialId === undefined
                    ? null
                    : { gitCredentialId: v.gitCredentialId }),
                ...(v.updatedAt === undefined ? null : { updatedAt: v.updatedAt }),
                ...(v.sourceless === undefined ? null : { sourceless: v.sourceless }),
                ...(v.productionBranch === undefined
                    ? null
                    : { productionBranch: v.productionBranch }),
            };
        });
}

/** @internal */
export namespace Link$ {
    export const inboundSchema: z.ZodType<Link, z.ZodTypeDef, unknown> = z.union([
        z.lazy(() => Link1$.inboundSchema),
        z.lazy(() => Link2$.inboundSchema),
        z.lazy(() => Link3$.inboundSchema),
    ]);

    export type Outbound = Link1$.Outbound | Link2$.Outbound | Link3$.Outbound;
    export const outboundSchema: z.ZodType<Outbound, z.ZodTypeDef, Link> = z.union([
        z.lazy(() => Link1$.outboundSchema),
        z.lazy(() => Link2$.outboundSchema),
        z.lazy(() => Link3$.outboundSchema),
    ]);
}

/** @internal */
export const UpdateProjectDataCacheNodeVersion$: z.ZodNativeEnum<
    typeof UpdateProjectDataCacheNodeVersion
> = z.nativeEnum(UpdateProjectDataCacheNodeVersion);

/** @internal */
export namespace UpdateProjectDataCachePaths$ {
    export const inboundSchema: z.ZodType<UpdateProjectDataCachePaths, z.ZodTypeDef, unknown> = z
        .object({
            value: z.string(),
        })
        .transform((v) => {
            return {
                value: v.value,
            };
        });

    export type Outbound = {
        value: string;
    };

    export const outboundSchema: z.ZodType<Outbound, z.ZodTypeDef, UpdateProjectDataCachePaths> = z
        .object({
            value: z.string(),
        })
        .transform((v) => {
            return {
                value: v.value,
            };
        });
}

/** @internal */
export namespace UpdateProjectDataCacheOptionsAllowlist$ {
    export const inboundSchema: z.ZodType<
        UpdateProjectDataCacheOptionsAllowlist,
        z.ZodTypeDef,
        unknown
    > = z
        .object({
            paths: z.array(z.lazy(() => UpdateProjectDataCachePaths$.inboundSchema)),
        })
        .transform((v) => {
            return {
                paths: v.paths,
            };
        });

    export type Outbound = {
        paths: Array<UpdateProjectDataCachePaths$.Outbound>;
    };

    export const outboundSchema: z.ZodType<
        Outbound,
        z.ZodTypeDef,
        UpdateProjectDataCacheOptionsAllowlist
    > = z
        .object({
            paths: z.array(z.lazy(() => UpdateProjectDataCachePaths$.outboundSchema)),
        })
        .transform((v) => {
            return {
                paths: v.paths,
            };
        });
}

/** @internal */
export namespace UpdateProjectDataCachePasswordProtection$ {
    export const inboundSchema: z.ZodType<
        UpdateProjectDataCachePasswordProtection,
        z.ZodTypeDef,
        unknown
    > = z.object({});

    export type Outbound = {};

    export const outboundSchema: z.ZodType<
        Outbound,
        z.ZodTypeDef,
        UpdateProjectDataCachePasswordProtection
    > = z.object({});
}

/** @internal */
export const UpdateProjectDataCacheDeploymentType$: z.ZodNativeEnum<
    typeof UpdateProjectDataCacheDeploymentType
> = z.nativeEnum(UpdateProjectDataCacheDeploymentType);

/** @internal */
export namespace UpdateProjectDataCacheSsoProtection$ {
    export const inboundSchema: z.ZodType<
        UpdateProjectDataCacheSsoProtection,
        z.ZodTypeDef,
        unknown
    > = z
        .object({
            deploymentType: UpdateProjectDataCacheDeploymentType$,
        })
        .transform((v) => {
            return {
                deploymentType: v.deploymentType,
            };
        });

    export type Outbound = {
        deploymentType: UpdateProjectDataCacheDeploymentType;
    };

    export const outboundSchema: z.ZodType<
        Outbound,
        z.ZodTypeDef,
        UpdateProjectDataCacheSsoProtection
    > = z
        .object({
            deploymentType: UpdateProjectDataCacheDeploymentType$,
        })
        .transform((v) => {
            return {
                deploymentType: v.deploymentType,
            };
        });
}

/** @internal */
export namespace Targets$ {
    export const inboundSchema: z.ZodType<Targets, z.ZodTypeDef, unknown> = z.union([
        z.string(),
        z.array(z.string()),
    ]);

    export type Outbound = string | Array<string>;
    export const outboundSchema: z.ZodType<Outbound, z.ZodTypeDef, Targets> = z.union([
        z.string(),
        z.array(z.string()),
    ]);
}

/** @internal */
export namespace Permissions$ {
    export const inboundSchema: z.ZodType<Permissions, z.ZodTypeDef, unknown> = z
        .object({
            accessGroup: z.array(components.ACLAction$).optional(),
            aliasGlobal: z.array(components.ACLAction$).optional(),
            analyticsSampling: z.array(components.ACLAction$).optional(),
            analyticsUsage: z.array(components.ACLAction$).optional(),
            auditLog: z.array(components.ACLAction$).optional(),
            billingAddress: z.array(components.ACLAction$).optional(),
            billingInformation: z.array(components.ACLAction$).optional(),
            billingInvoice: z.array(components.ACLAction$).optional(),
            billingInvoiceEmailRecipient: z.array(components.ACLAction$).optional(),
            billingInvoiceLanguage: z.array(components.ACLAction$).optional(),
            billingPlan: z.array(components.ACLAction$).optional(),
            billingPurchaseOrder: z.array(components.ACLAction$).optional(),
            billingTaxId: z.array(components.ACLAction$).optional(),
            blob: z.array(components.ACLAction$).optional(),
            budget: z.array(components.ACLAction$).optional(),
            cacheArtifact: z.array(components.ACLAction$).optional(),
            cacheArtifactUsageEvent: z.array(components.ACLAction$).optional(),
            codeChecks: z.array(components.ACLAction$).optional(),
            concurrentBuilds: z.array(components.ACLAction$).optional(),
            connect: z.array(components.ACLAction$).optional(),
            connectConfiguration: z.array(components.ACLAction$).optional(),
            domain: z.array(components.ACLAction$).optional(),
            domainAcceptDelegation: z.array(components.ACLAction$).optional(),
            domainAuthCodes: z.array(components.ACLAction$).optional(),
            domainCertificate: z.array(components.ACLAction$).optional(),
            domainCheckConfig: z.array(components.ACLAction$).optional(),
            domainMove: z.array(components.ACLAction$).optional(),
            domainPurchase: z.array(components.ACLAction$).optional(),
            domainRecord: z.array(components.ACLAction$).optional(),
            domainTransferIn: z.array(components.ACLAction$).optional(),
            event: z.array(components.ACLAction$).optional(),
            ownEvent: z.array(components.ACLAction$).optional(),
            sensitiveEnvironmentVariablePolicy: z.array(components.ACLAction$).optional(),
            fileUpload: z.array(components.ACLAction$).optional(),
            gitRepository: z.array(components.ACLAction$).optional(),
            ipBlocking: z.array(components.ACLAction$).optional(),
            integration: z.array(components.ACLAction$).optional(),
            integrationConfiguration: z.array(components.ACLAction$).optional(),
            integrationConfigurationTransfer: z.array(components.ACLAction$).optional(),
            integrationConfigurationProjects: z.array(components.ACLAction$).optional(),
            integrationVercelConfigurationOverride: z.array(components.ACLAction$).optional(),
            integrationStore: z.array(components.ACLAction$).optional(),
            integrationEvent: z.array(components.ACLAction$).optional(),
            integrationResourceSecrets: z.array(components.ACLAction$).optional(),
            marketplaceBillingData: z.array(components.ACLAction$).optional(),
            jobGlobal: z.array(components.ACLAction$).optional(),
            logDrain: z.array(components.ACLAction$).optional(),
            Monitoring: z.array(components.ACLAction$).optional(),
            monitoringSettings: z.array(components.ACLAction$).optional(),
            monitoringQuery: z.array(components.ACLAction$).optional(),
            monitoringChart: z.array(components.ACLAction$).optional(),
            monitoringAlert: z.array(components.ACLAction$).optional(),
            notificationDeploymentFailed: z.array(components.ACLAction$).optional(),
            notificationDomainConfiguration: z.array(components.ACLAction$).optional(),
            notificationDomainExpire: z.array(components.ACLAction$).optional(),
            notificationDomainMoved: z.array(components.ACLAction$).optional(),
            notificationDomainPurchase: z.array(components.ACLAction$).optional(),
            notificationDomainRenewal: z.array(components.ACLAction$).optional(),
            notificationDomainTransfer: z.array(components.ACLAction$).optional(),
            notificationDomainUnverified: z.array(components.ACLAction$).optional(),
            NotificationMonitoringAlert: z.array(components.ACLAction$).optional(),
            notificationPaymentFailed: z.array(components.ACLAction$).optional(),
            notificationUsageAlert: z.array(components.ACLAction$).optional(),
            notificationCustomerBudget: z.array(components.ACLAction$).optional(),
            notificationStatementOfReasons: z.array(components.ACLAction$).optional(),
            oauth2Connection: z.array(components.ACLAction$).optional(),
            openTelemetryEndpoint: z.array(components.ACLAction$).optional(),
            paymentMethod: z.array(components.ACLAction$).optional(),
            permissions: z.array(components.ACLAction$).optional(),
            postgres: z.array(components.ACLAction$).optional(),
            previewDeploymentSuffix: z.array(components.ACLAction$).optional(),
            proTrialOnboarding: z.array(components.ACLAction$).optional(),
            seawallConfig: z.array(components.ACLAction$).optional(),
            sharedEnvVars: z.array(components.ACLAction$).optional(),
            sharedEnvVarsProduction: z.array(components.ACLAction$).optional(),
            space: z.array(components.ACLAction$).optional(),
            spaceRun: z.array(components.ACLAction$).optional(),
            passwordProtectionInvoiceItem: z.array(components.ACLAction$).optional(),
            rateLimit: z.array(components.ACLAction$).optional(),
            redis: z.array(components.ACLAction$).optional(),
            repository: z.array(components.ACLAction$).optional(),
            remoteCaching: z.array(components.ACLAction$).optional(),
            samlConfig: z.array(components.ACLAction$).optional(),
            secret: z.array(components.ACLAction$).optional(),
            redisStoreTokenSet: z.array(components.ACLAction$).optional(),
            blobStoreTokenSet: z.array(components.ACLAction$).optional(),
            postgresStoreTokenSet: z.array(components.ACLAction$).optional(),
            integrationStoreTokenSet: z.array(components.ACLAction$).optional(),
            supportCase: z.array(components.ACLAction$).optional(),
            supportCaseComment: z.array(components.ACLAction$).optional(),
            dataCacheBillingSettings: z.array(components.ACLAction$).optional(),
            team: z.array(components.ACLAction$).optional(),
            teamAccessRequest: z.array(components.ACLAction$).optional(),
            teamFellowMembership: z.array(components.ACLAction$).optional(),
            teamInvite: z.array(components.ACLAction$).optional(),
            teamInviteCode: z.array(components.ACLAction$).optional(),
            teamJoin: z.array(components.ACLAction$).optional(),
            teamOwnMembership: z.array(components.ACLAction$).optional(),
            teamOwnMembershipDisconnectSAML: z.array(components.ACLAction$).optional(),
            token: z.array(components.ACLAction$).optional(),
            usage: z.array(components.ACLAction$).optional(),
            usageCycle: z.array(components.ACLAction$).optional(),
            user: z.array(components.ACLAction$).optional(),
            userConnection: z.array(components.ACLAction$).optional(),
            webAnalyticsPlan: z.array(components.ACLAction$).optional(),
            webAuthn: z.array(components.ACLAction$).optional(),
            edgeConfig: z.array(components.ACLAction$).optional(),
            edgeConfigItem: z.array(components.ACLAction$).optional(),
            edgeConfigSchema: z.array(components.ACLAction$).optional(),
            edgeConfigToken: z.array(components.ACLAction$).optional(),
            webhook: z.array(components.ACLAction$).optional(),
            "webhook-event": z.array(components.ACLAction$).optional(),
            endpointVerification: z.array(components.ACLAction$).optional(),
            projectTransferIn: z.array(components.ACLAction$).optional(),
            oauth2Application: z.array(components.ACLAction$).optional(),
            aliasProject: z.array(components.ACLAction$).optional(),
            aliasProtectionBypass: z.array(components.ACLAction$).optional(),
            productionAliasProtectionBypass: z.array(components.ACLAction$).optional(),
            connectConfigurationLink: z.array(components.ACLAction$).optional(),
            dataCacheNamespace: z.array(components.ACLAction$).optional(),
            deployment: z.array(components.ACLAction$).optional(),
            deploymentCheck: z.array(components.ACLAction$).optional(),
            deploymentCheckPreview: z.array(components.ACLAction$).optional(),
            deploymentCheckReRunFromProductionBranch: z.array(components.ACLAction$).optional(),
            deploymentProductionGit: z.array(components.ACLAction$).optional(),
            deploymentPreview: z.array(components.ACLAction$).optional(),
            deploymentPrivate: z.array(components.ACLAction$).optional(),
            deploymentPromote: z.array(components.ACLAction$).optional(),
            deploymentRollback: z.array(components.ACLAction$).optional(),
            environments: z.array(components.ACLAction$).optional(),
            logs: z.array(components.ACLAction$).optional(),
            logsPreset: z.array(components.ACLAction$).optional(),
            passwordProtection: z.array(components.ACLAction$).optional(),
            optionsAllowlist: z.array(components.ACLAction$).optional(),
            job: z.array(components.ACLAction$).optional(),
            project: z.array(components.ACLAction$).optional(),
            projectAccessGroup: z.array(components.ACLAction$).optional(),
            projectAnalyticsSampling: z.array(components.ACLAction$).optional(),
            projectDeploymentHook: z.array(components.ACLAction$).optional(),
            projectDomain: z.array(components.ACLAction$).optional(),
            projectDomainMove: z.array(components.ACLAction$).optional(),
            projectDomainCheckConfig: z.array(components.ACLAction$).optional(),
            projectEnvVars: z.array(components.ACLAction$).optional(),
            projectEnvVarsProduction: z.array(components.ACLAction$).optional(),
            projectEnvVarsUnownedByIntegration: z.array(components.ACLAction$).optional(),
            projectId: z.array(components.ACLAction$).optional(),
            projectIntegrationConfiguration: z.array(components.ACLAction$).optional(),
            projectLink: z.array(components.ACLAction$).optional(),
            projectMember: z.array(components.ACLAction$).optional(),
            projectMonitoring: z.array(components.ACLAction$).optional(),
            projectPermissions: z.array(components.ACLAction$).optional(),
            projectProductionBranch: z.array(components.ACLAction$).optional(),
            projectTransfer: z.array(components.ACLAction$).optional(),
            projectTransferOut: z.array(components.ACLAction$).optional(),
            projectProtectionBypass: z.array(components.ACLAction$).optional(),
            projectUsage: z.array(components.ACLAction$).optional(),
            projectAnalyticsUsage: z.array(components.ACLAction$).optional(),
            projectSupportCase: z.array(components.ACLAction$).optional(),
            projectSupportCaseComment: z.array(components.ACLAction$).optional(),
            projectDeploymentExpiration: z.array(components.ACLAction$).optional(),
            skewProtection: z.array(components.ACLAction$).optional(),
            analytics: z.array(components.ACLAction$).optional(),
            trustedIps: z.array(components.ACLAction$).optional(),
            webAnalytics: z.array(components.ACLAction$).optional(),
            sharedEnvVarConnection: z.array(components.ACLAction$).optional(),
        })
        .transform((v) => {
            return {
                ...(v.accessGroup === undefined ? null : { accessGroup: v.accessGroup }),
                ...(v.aliasGlobal === undefined ? null : { aliasGlobal: v.aliasGlobal }),
                ...(v.analyticsSampling === undefined
                    ? null
                    : { analyticsSampling: v.analyticsSampling }),
                ...(v.analyticsUsage === undefined ? null : { analyticsUsage: v.analyticsUsage }),
                ...(v.auditLog === undefined ? null : { auditLog: v.auditLog }),
                ...(v.billingAddress === undefined ? null : { billingAddress: v.billingAddress }),
                ...(v.billingInformation === undefined
                    ? null
                    : { billingInformation: v.billingInformation }),
                ...(v.billingInvoice === undefined ? null : { billingInvoice: v.billingInvoice }),
                ...(v.billingInvoiceEmailRecipient === undefined
                    ? null
                    : { billingInvoiceEmailRecipient: v.billingInvoiceEmailRecipient }),
                ...(v.billingInvoiceLanguage === undefined
                    ? null
                    : { billingInvoiceLanguage: v.billingInvoiceLanguage }),
                ...(v.billingPlan === undefined ? null : { billingPlan: v.billingPlan }),
                ...(v.billingPurchaseOrder === undefined
                    ? null
                    : { billingPurchaseOrder: v.billingPurchaseOrder }),
                ...(v.billingTaxId === undefined ? null : { billingTaxId: v.billingTaxId }),
                ...(v.blob === undefined ? null : { blob: v.blob }),
                ...(v.budget === undefined ? null : { budget: v.budget }),
                ...(v.cacheArtifact === undefined ? null : { cacheArtifact: v.cacheArtifact }),
                ...(v.cacheArtifactUsageEvent === undefined
                    ? null
                    : { cacheArtifactUsageEvent: v.cacheArtifactUsageEvent }),
                ...(v.codeChecks === undefined ? null : { codeChecks: v.codeChecks }),
                ...(v.concurrentBuilds === undefined
                    ? null
                    : { concurrentBuilds: v.concurrentBuilds }),
                ...(v.connect === undefined ? null : { connect: v.connect }),
                ...(v.connectConfiguration === undefined
                    ? null
                    : { connectConfiguration: v.connectConfiguration }),
                ...(v.domain === undefined ? null : { domain: v.domain }),
                ...(v.domainAcceptDelegation === undefined
                    ? null
                    : { domainAcceptDelegation: v.domainAcceptDelegation }),
                ...(v.domainAuthCodes === undefined
                    ? null
                    : { domainAuthCodes: v.domainAuthCodes }),
                ...(v.domainCertificate === undefined
                    ? null
                    : { domainCertificate: v.domainCertificate }),
                ...(v.domainCheckConfig === undefined
                    ? null
                    : { domainCheckConfig: v.domainCheckConfig }),
                ...(v.domainMove === undefined ? null : { domainMove: v.domainMove }),
                ...(v.domainPurchase === undefined ? null : { domainPurchase: v.domainPurchase }),
                ...(v.domainRecord === undefined ? null : { domainRecord: v.domainRecord }),
                ...(v.domainTransferIn === undefined
                    ? null
                    : { domainTransferIn: v.domainTransferIn }),
                ...(v.event === undefined ? null : { event: v.event }),
                ...(v.ownEvent === undefined ? null : { ownEvent: v.ownEvent }),
                ...(v.sensitiveEnvironmentVariablePolicy === undefined
                    ? null
                    : { sensitiveEnvironmentVariablePolicy: v.sensitiveEnvironmentVariablePolicy }),
                ...(v.fileUpload === undefined ? null : { fileUpload: v.fileUpload }),
                ...(v.gitRepository === undefined ? null : { gitRepository: v.gitRepository }),
                ...(v.ipBlocking === undefined ? null : { ipBlocking: v.ipBlocking }),
                ...(v.integration === undefined ? null : { integration: v.integration }),
                ...(v.integrationConfiguration === undefined
                    ? null
                    : { integrationConfiguration: v.integrationConfiguration }),
                ...(v.integrationConfigurationTransfer === undefined
                    ? null
                    : { integrationConfigurationTransfer: v.integrationConfigurationTransfer }),
                ...(v.integrationConfigurationProjects === undefined
                    ? null
                    : { integrationConfigurationProjects: v.integrationConfigurationProjects }),
                ...(v.integrationVercelConfigurationOverride === undefined
                    ? null
                    : {
                          integrationVercelConfigurationOverride:
                              v.integrationVercelConfigurationOverride,
                      }),
                ...(v.integrationStore === undefined
                    ? null
                    : { integrationStore: v.integrationStore }),
                ...(v.integrationEvent === undefined
                    ? null
                    : { integrationEvent: v.integrationEvent }),
                ...(v.integrationResourceSecrets === undefined
                    ? null
                    : { integrationResourceSecrets: v.integrationResourceSecrets }),
                ...(v.marketplaceBillingData === undefined
                    ? null
                    : { marketplaceBillingData: v.marketplaceBillingData }),
                ...(v.jobGlobal === undefined ? null : { jobGlobal: v.jobGlobal }),
                ...(v.logDrain === undefined ? null : { logDrain: v.logDrain }),
                ...(v.Monitoring === undefined ? null : { monitoring: v.Monitoring }),
                ...(v.monitoringSettings === undefined
                    ? null
                    : { monitoringSettings: v.monitoringSettings }),
                ...(v.monitoringQuery === undefined
                    ? null
                    : { monitoringQuery: v.monitoringQuery }),
                ...(v.monitoringChart === undefined
                    ? null
                    : { monitoringChart: v.monitoringChart }),
                ...(v.monitoringAlert === undefined
                    ? null
                    : { monitoringAlert: v.monitoringAlert }),
                ...(v.notificationDeploymentFailed === undefined
                    ? null
                    : { notificationDeploymentFailed: v.notificationDeploymentFailed }),
                ...(v.notificationDomainConfiguration === undefined
                    ? null
                    : { notificationDomainConfiguration: v.notificationDomainConfiguration }),
                ...(v.notificationDomainExpire === undefined
                    ? null
                    : { notificationDomainExpire: v.notificationDomainExpire }),
                ...(v.notificationDomainMoved === undefined
                    ? null
                    : { notificationDomainMoved: v.notificationDomainMoved }),
                ...(v.notificationDomainPurchase === undefined
                    ? null
                    : { notificationDomainPurchase: v.notificationDomainPurchase }),
                ...(v.notificationDomainRenewal === undefined
                    ? null
                    : { notificationDomainRenewal: v.notificationDomainRenewal }),
                ...(v.notificationDomainTransfer === undefined
                    ? null
                    : { notificationDomainTransfer: v.notificationDomainTransfer }),
                ...(v.notificationDomainUnverified === undefined
                    ? null
                    : { notificationDomainUnverified: v.notificationDomainUnverified }),
                ...(v.NotificationMonitoringAlert === undefined
                    ? null
                    : { notificationMonitoringAlert: v.NotificationMonitoringAlert }),
                ...(v.notificationPaymentFailed === undefined
                    ? null
                    : { notificationPaymentFailed: v.notificationPaymentFailed }),
                ...(v.notificationUsageAlert === undefined
                    ? null
                    : { notificationUsageAlert: v.notificationUsageAlert }),
                ...(v.notificationCustomerBudget === undefined
                    ? null
                    : { notificationCustomerBudget: v.notificationCustomerBudget }),
                ...(v.notificationStatementOfReasons === undefined
                    ? null
                    : { notificationStatementOfReasons: v.notificationStatementOfReasons }),
                ...(v.oauth2Connection === undefined
                    ? null
                    : { oauth2Connection: v.oauth2Connection }),
                ...(v.openTelemetryEndpoint === undefined
                    ? null
                    : { openTelemetryEndpoint: v.openTelemetryEndpoint }),
                ...(v.paymentMethod === undefined ? null : { paymentMethod: v.paymentMethod }),
                ...(v.permissions === undefined ? null : { permissions: v.permissions }),
                ...(v.postgres === undefined ? null : { postgres: v.postgres }),
                ...(v.previewDeploymentSuffix === undefined
                    ? null
                    : { previewDeploymentSuffix: v.previewDeploymentSuffix }),
                ...(v.proTrialOnboarding === undefined
                    ? null
                    : { proTrialOnboarding: v.proTrialOnboarding }),
                ...(v.seawallConfig === undefined ? null : { seawallConfig: v.seawallConfig }),
                ...(v.sharedEnvVars === undefined ? null : { sharedEnvVars: v.sharedEnvVars }),
                ...(v.sharedEnvVarsProduction === undefined
                    ? null
                    : { sharedEnvVarsProduction: v.sharedEnvVarsProduction }),
                ...(v.space === undefined ? null : { space: v.space }),
                ...(v.spaceRun === undefined ? null : { spaceRun: v.spaceRun }),
                ...(v.passwordProtectionInvoiceItem === undefined
                    ? null
                    : { passwordProtectionInvoiceItem: v.passwordProtectionInvoiceItem }),
                ...(v.rateLimit === undefined ? null : { rateLimit: v.rateLimit }),
                ...(v.redis === undefined ? null : { redis: v.redis }),
                ...(v.repository === undefined ? null : { repository: v.repository }),
                ...(v.remoteCaching === undefined ? null : { remoteCaching: v.remoteCaching }),
                ...(v.samlConfig === undefined ? null : { samlConfig: v.samlConfig }),
                ...(v.secret === undefined ? null : { secret: v.secret }),
                ...(v.redisStoreTokenSet === undefined
                    ? null
                    : { redisStoreTokenSet: v.redisStoreTokenSet }),
                ...(v.blobStoreTokenSet === undefined
                    ? null
                    : { blobStoreTokenSet: v.blobStoreTokenSet }),
                ...(v.postgresStoreTokenSet === undefined
                    ? null
                    : { postgresStoreTokenSet: v.postgresStoreTokenSet }),
                ...(v.integrationStoreTokenSet === undefined
                    ? null
                    : { integrationStoreTokenSet: v.integrationStoreTokenSet }),
                ...(v.supportCase === undefined ? null : { supportCase: v.supportCase }),
                ...(v.supportCaseComment === undefined
                    ? null
                    : { supportCaseComment: v.supportCaseComment }),
                ...(v.dataCacheBillingSettings === undefined
                    ? null
                    : { dataCacheBillingSettings: v.dataCacheBillingSettings }),
                ...(v.team === undefined ? null : { team: v.team }),
                ...(v.teamAccessRequest === undefined
                    ? null
                    : { teamAccessRequest: v.teamAccessRequest }),
                ...(v.teamFellowMembership === undefined
                    ? null
                    : { teamFellowMembership: v.teamFellowMembership }),
                ...(v.teamInvite === undefined ? null : { teamInvite: v.teamInvite }),
                ...(v.teamInviteCode === undefined ? null : { teamInviteCode: v.teamInviteCode }),
                ...(v.teamJoin === undefined ? null : { teamJoin: v.teamJoin }),
                ...(v.teamOwnMembership === undefined
                    ? null
                    : { teamOwnMembership: v.teamOwnMembership }),
                ...(v.teamOwnMembershipDisconnectSAML === undefined
                    ? null
                    : { teamOwnMembershipDisconnectSAML: v.teamOwnMembershipDisconnectSAML }),
                ...(v.token === undefined ? null : { token: v.token }),
                ...(v.usage === undefined ? null : { usage: v.usage }),
                ...(v.usageCycle === undefined ? null : { usageCycle: v.usageCycle }),
                ...(v.user === undefined ? null : { user: v.user }),
                ...(v.userConnection === undefined ? null : { userConnection: v.userConnection }),
                ...(v.webAnalyticsPlan === undefined
                    ? null
                    : { webAnalyticsPlan: v.webAnalyticsPlan }),
                ...(v.webAuthn === undefined ? null : { webAuthn: v.webAuthn }),
                ...(v.edgeConfig === undefined ? null : { edgeConfig: v.edgeConfig }),
                ...(v.edgeConfigItem === undefined ? null : { edgeConfigItem: v.edgeConfigItem }),
                ...(v.edgeConfigSchema === undefined
                    ? null
                    : { edgeConfigSchema: v.edgeConfigSchema }),
                ...(v.edgeConfigToken === undefined
                    ? null
                    : { edgeConfigToken: v.edgeConfigToken }),
                ...(v.webhook === undefined ? null : { webhook: v.webhook }),
                ...(v["webhook-event"] === undefined ? null : { webhookEvent: v["webhook-event"] }),
                ...(v.endpointVerification === undefined
                    ? null
                    : { endpointVerification: v.endpointVerification }),
                ...(v.projectTransferIn === undefined
                    ? null
                    : { projectTransferIn: v.projectTransferIn }),
                ...(v.oauth2Application === undefined
                    ? null
                    : { oauth2Application: v.oauth2Application }),
                ...(v.aliasProject === undefined ? null : { aliasProject: v.aliasProject }),
                ...(v.aliasProtectionBypass === undefined
                    ? null
                    : { aliasProtectionBypass: v.aliasProtectionBypass }),
                ...(v.productionAliasProtectionBypass === undefined
                    ? null
                    : { productionAliasProtectionBypass: v.productionAliasProtectionBypass }),
                ...(v.connectConfigurationLink === undefined
                    ? null
                    : { connectConfigurationLink: v.connectConfigurationLink }),
                ...(v.dataCacheNamespace === undefined
                    ? null
                    : { dataCacheNamespace: v.dataCacheNamespace }),
                ...(v.deployment === undefined ? null : { deployment: v.deployment }),
                ...(v.deploymentCheck === undefined
                    ? null
                    : { deploymentCheck: v.deploymentCheck }),
                ...(v.deploymentCheckPreview === undefined
                    ? null
                    : { deploymentCheckPreview: v.deploymentCheckPreview }),
                ...(v.deploymentCheckReRunFromProductionBranch === undefined
                    ? null
                    : {
                          deploymentCheckReRunFromProductionBranch:
                              v.deploymentCheckReRunFromProductionBranch,
                      }),
                ...(v.deploymentProductionGit === undefined
                    ? null
                    : { deploymentProductionGit: v.deploymentProductionGit }),
                ...(v.deploymentPreview === undefined
                    ? null
                    : { deploymentPreview: v.deploymentPreview }),
                ...(v.deploymentPrivate === undefined
                    ? null
                    : { deploymentPrivate: v.deploymentPrivate }),
                ...(v.deploymentPromote === undefined
                    ? null
                    : { deploymentPromote: v.deploymentPromote }),
                ...(v.deploymentRollback === undefined
                    ? null
                    : { deploymentRollback: v.deploymentRollback }),
                ...(v.environments === undefined ? null : { environments: v.environments }),
                ...(v.logs === undefined ? null : { logs: v.logs }),
                ...(v.logsPreset === undefined ? null : { logsPreset: v.logsPreset }),
                ...(v.passwordProtection === undefined
                    ? null
                    : { passwordProtection: v.passwordProtection }),
                ...(v.optionsAllowlist === undefined
                    ? null
                    : { optionsAllowlist: v.optionsAllowlist }),
                ...(v.job === undefined ? null : { job: v.job }),
                ...(v.project === undefined ? null : { project: v.project }),
                ...(v.projectAccessGroup === undefined
                    ? null
                    : { projectAccessGroup: v.projectAccessGroup }),
                ...(v.projectAnalyticsSampling === undefined
                    ? null
                    : { projectAnalyticsSampling: v.projectAnalyticsSampling }),
                ...(v.projectDeploymentHook === undefined
                    ? null
                    : { projectDeploymentHook: v.projectDeploymentHook }),
                ...(v.projectDomain === undefined ? null : { projectDomain: v.projectDomain }),
                ...(v.projectDomainMove === undefined
                    ? null
                    : { projectDomainMove: v.projectDomainMove }),
                ...(v.projectDomainCheckConfig === undefined
                    ? null
                    : { projectDomainCheckConfig: v.projectDomainCheckConfig }),
                ...(v.projectEnvVars === undefined ? null : { projectEnvVars: v.projectEnvVars }),
                ...(v.projectEnvVarsProduction === undefined
                    ? null
                    : { projectEnvVarsProduction: v.projectEnvVarsProduction }),
                ...(v.projectEnvVarsUnownedByIntegration === undefined
                    ? null
                    : { projectEnvVarsUnownedByIntegration: v.projectEnvVarsUnownedByIntegration }),
                ...(v.projectId === undefined ? null : { projectId: v.projectId }),
                ...(v.projectIntegrationConfiguration === undefined
                    ? null
                    : { projectIntegrationConfiguration: v.projectIntegrationConfiguration }),
                ...(v.projectLink === undefined ? null : { projectLink: v.projectLink }),
                ...(v.projectMember === undefined ? null : { projectMember: v.projectMember }),
                ...(v.projectMonitoring === undefined
                    ? null
                    : { projectMonitoring: v.projectMonitoring }),
                ...(v.projectPermissions === undefined
                    ? null
                    : { projectPermissions: v.projectPermissions }),
                ...(v.projectProductionBranch === undefined
                    ? null
                    : { projectProductionBranch: v.projectProductionBranch }),
                ...(v.projectTransfer === undefined
                    ? null
                    : { projectTransfer: v.projectTransfer }),
                ...(v.projectTransferOut === undefined
                    ? null
                    : { projectTransferOut: v.projectTransferOut }),
                ...(v.projectProtectionBypass === undefined
                    ? null
                    : { projectProtectionBypass: v.projectProtectionBypass }),
                ...(v.projectUsage === undefined ? null : { projectUsage: v.projectUsage }),
                ...(v.projectAnalyticsUsage === undefined
                    ? null
                    : { projectAnalyticsUsage: v.projectAnalyticsUsage }),
                ...(v.projectSupportCase === undefined
                    ? null
                    : { projectSupportCase: v.projectSupportCase }),
                ...(v.projectSupportCaseComment === undefined
                    ? null
                    : { projectSupportCaseComment: v.projectSupportCaseComment }),
                ...(v.projectDeploymentExpiration === undefined
                    ? null
                    : { projectDeploymentExpiration: v.projectDeploymentExpiration }),
                ...(v.skewProtection === undefined ? null : { skewProtection: v.skewProtection }),
                ...(v.analytics === undefined ? null : { analytics: v.analytics }),
                ...(v.trustedIps === undefined ? null : { trustedIps: v.trustedIps }),
                ...(v.webAnalytics === undefined ? null : { webAnalytics: v.webAnalytics }),
                ...(v.sharedEnvVarConnection === undefined
                    ? null
                    : { sharedEnvVarConnection: v.sharedEnvVarConnection }),
            };
        });

    export type Outbound = {
        accessGroup?: Array<components.ACLAction> | undefined;
        aliasGlobal?: Array<components.ACLAction> | undefined;
        analyticsSampling?: Array<components.ACLAction> | undefined;
        analyticsUsage?: Array<components.ACLAction> | undefined;
        auditLog?: Array<components.ACLAction> | undefined;
        billingAddress?: Array<components.ACLAction> | undefined;
        billingInformation?: Array<components.ACLAction> | undefined;
        billingInvoice?: Array<components.ACLAction> | undefined;
        billingInvoiceEmailRecipient?: Array<components.ACLAction> | undefined;
        billingInvoiceLanguage?: Array<components.ACLAction> | undefined;
        billingPlan?: Array<components.ACLAction> | undefined;
        billingPurchaseOrder?: Array<components.ACLAction> | undefined;
        billingTaxId?: Array<components.ACLAction> | undefined;
        blob?: Array<components.ACLAction> | undefined;
        budget?: Array<components.ACLAction> | undefined;
        cacheArtifact?: Array<components.ACLAction> | undefined;
        cacheArtifactUsageEvent?: Array<components.ACLAction> | undefined;
        codeChecks?: Array<components.ACLAction> | undefined;
        concurrentBuilds?: Array<components.ACLAction> | undefined;
        connect?: Array<components.ACLAction> | undefined;
        connectConfiguration?: Array<components.ACLAction> | undefined;
        domain?: Array<components.ACLAction> | undefined;
        domainAcceptDelegation?: Array<components.ACLAction> | undefined;
        domainAuthCodes?: Array<components.ACLAction> | undefined;
        domainCertificate?: Array<components.ACLAction> | undefined;
        domainCheckConfig?: Array<components.ACLAction> | undefined;
        domainMove?: Array<components.ACLAction> | undefined;
        domainPurchase?: Array<components.ACLAction> | undefined;
        domainRecord?: Array<components.ACLAction> | undefined;
        domainTransferIn?: Array<components.ACLAction> | undefined;
        event?: Array<components.ACLAction> | undefined;
        ownEvent?: Array<components.ACLAction> | undefined;
        sensitiveEnvironmentVariablePolicy?: Array<components.ACLAction> | undefined;
        fileUpload?: Array<components.ACLAction> | undefined;
        gitRepository?: Array<components.ACLAction> | undefined;
        ipBlocking?: Array<components.ACLAction> | undefined;
        integration?: Array<components.ACLAction> | undefined;
        integrationConfiguration?: Array<components.ACLAction> | undefined;
        integrationConfigurationTransfer?: Array<components.ACLAction> | undefined;
        integrationConfigurationProjects?: Array<components.ACLAction> | undefined;
        integrationVercelConfigurationOverride?: Array<components.ACLAction> | undefined;
        integrationStore?: Array<components.ACLAction> | undefined;
        integrationEvent?: Array<components.ACLAction> | undefined;
        integrationResourceSecrets?: Array<components.ACLAction> | undefined;
        marketplaceBillingData?: Array<components.ACLAction> | undefined;
        jobGlobal?: Array<components.ACLAction> | undefined;
        logDrain?: Array<components.ACLAction> | undefined;
        Monitoring?: Array<components.ACLAction> | undefined;
        monitoringSettings?: Array<components.ACLAction> | undefined;
        monitoringQuery?: Array<components.ACLAction> | undefined;
        monitoringChart?: Array<components.ACLAction> | undefined;
        monitoringAlert?: Array<components.ACLAction> | undefined;
        notificationDeploymentFailed?: Array<components.ACLAction> | undefined;
        notificationDomainConfiguration?: Array<components.ACLAction> | undefined;
        notificationDomainExpire?: Array<components.ACLAction> | undefined;
        notificationDomainMoved?: Array<components.ACLAction> | undefined;
        notificationDomainPurchase?: Array<components.ACLAction> | undefined;
        notificationDomainRenewal?: Array<components.ACLAction> | undefined;
        notificationDomainTransfer?: Array<components.ACLAction> | undefined;
        notificationDomainUnverified?: Array<components.ACLAction> | undefined;
        NotificationMonitoringAlert?: Array<components.ACLAction> | undefined;
        notificationPaymentFailed?: Array<components.ACLAction> | undefined;
        notificationUsageAlert?: Array<components.ACLAction> | undefined;
        notificationCustomerBudget?: Array<components.ACLAction> | undefined;
        notificationStatementOfReasons?: Array<components.ACLAction> | undefined;
        oauth2Connection?: Array<components.ACLAction> | undefined;
        openTelemetryEndpoint?: Array<components.ACLAction> | undefined;
        paymentMethod?: Array<components.ACLAction> | undefined;
        permissions?: Array<components.ACLAction> | undefined;
        postgres?: Array<components.ACLAction> | undefined;
        previewDeploymentSuffix?: Array<components.ACLAction> | undefined;
        proTrialOnboarding?: Array<components.ACLAction> | undefined;
        seawallConfig?: Array<components.ACLAction> | undefined;
        sharedEnvVars?: Array<components.ACLAction> | undefined;
        sharedEnvVarsProduction?: Array<components.ACLAction> | undefined;
        space?: Array<components.ACLAction> | undefined;
        spaceRun?: Array<components.ACLAction> | undefined;
        passwordProtectionInvoiceItem?: Array<components.ACLAction> | undefined;
        rateLimit?: Array<components.ACLAction> | undefined;
        redis?: Array<components.ACLAction> | undefined;
        repository?: Array<components.ACLAction> | undefined;
        remoteCaching?: Array<components.ACLAction> | undefined;
        samlConfig?: Array<components.ACLAction> | undefined;
        secret?: Array<components.ACLAction> | undefined;
        redisStoreTokenSet?: Array<components.ACLAction> | undefined;
        blobStoreTokenSet?: Array<components.ACLAction> | undefined;
        postgresStoreTokenSet?: Array<components.ACLAction> | undefined;
        integrationStoreTokenSet?: Array<components.ACLAction> | undefined;
        supportCase?: Array<components.ACLAction> | undefined;
        supportCaseComment?: Array<components.ACLAction> | undefined;
        dataCacheBillingSettings?: Array<components.ACLAction> | undefined;
        team?: Array<components.ACLAction> | undefined;
        teamAccessRequest?: Array<components.ACLAction> | undefined;
        teamFellowMembership?: Array<components.ACLAction> | undefined;
        teamInvite?: Array<components.ACLAction> | undefined;
        teamInviteCode?: Array<components.ACLAction> | undefined;
        teamJoin?: Array<components.ACLAction> | undefined;
        teamOwnMembership?: Array<components.ACLAction> | undefined;
        teamOwnMembershipDisconnectSAML?: Array<components.ACLAction> | undefined;
        token?: Array<components.ACLAction> | undefined;
        usage?: Array<components.ACLAction> | undefined;
        usageCycle?: Array<components.ACLAction> | undefined;
        user?: Array<components.ACLAction> | undefined;
        userConnection?: Array<components.ACLAction> | undefined;
        webAnalyticsPlan?: Array<components.ACLAction> | undefined;
        webAuthn?: Array<components.ACLAction> | undefined;
        edgeConfig?: Array<components.ACLAction> | undefined;
        edgeConfigItem?: Array<components.ACLAction> | undefined;
        edgeConfigSchema?: Array<components.ACLAction> | undefined;
        edgeConfigToken?: Array<components.ACLAction> | undefined;
        webhook?: Array<components.ACLAction> | undefined;
        "webhook-event"?: Array<components.ACLAction> | undefined;
        endpointVerification?: Array<components.ACLAction> | undefined;
        projectTransferIn?: Array<components.ACLAction> | undefined;
        oauth2Application?: Array<components.ACLAction> | undefined;
        aliasProject?: Array<components.ACLAction> | undefined;
        aliasProtectionBypass?: Array<components.ACLAction> | undefined;
        productionAliasProtectionBypass?: Array<components.ACLAction> | undefined;
        connectConfigurationLink?: Array<components.ACLAction> | undefined;
        dataCacheNamespace?: Array<components.ACLAction> | undefined;
        deployment?: Array<components.ACLAction> | undefined;
        deploymentCheck?: Array<components.ACLAction> | undefined;
        deploymentCheckPreview?: Array<components.ACLAction> | undefined;
        deploymentCheckReRunFromProductionBranch?: Array<components.ACLAction> | undefined;
        deploymentProductionGit?: Array<components.ACLAction> | undefined;
        deploymentPreview?: Array<components.ACLAction> | undefined;
        deploymentPrivate?: Array<components.ACLAction> | undefined;
        deploymentPromote?: Array<components.ACLAction> | undefined;
        deploymentRollback?: Array<components.ACLAction> | undefined;
        environments?: Array<components.ACLAction> | undefined;
        logs?: Array<components.ACLAction> | undefined;
        logsPreset?: Array<components.ACLAction> | undefined;
        passwordProtection?: Array<components.ACLAction> | undefined;
        optionsAllowlist?: Array<components.ACLAction> | undefined;
        job?: Array<components.ACLAction> | undefined;
        project?: Array<components.ACLAction> | undefined;
        projectAccessGroup?: Array<components.ACLAction> | undefined;
        projectAnalyticsSampling?: Array<components.ACLAction> | undefined;
        projectDeploymentHook?: Array<components.ACLAction> | undefined;
        projectDomain?: Array<components.ACLAction> | undefined;
        projectDomainMove?: Array<components.ACLAction> | undefined;
        projectDomainCheckConfig?: Array<components.ACLAction> | undefined;
        projectEnvVars?: Array<components.ACLAction> | undefined;
        projectEnvVarsProduction?: Array<components.ACLAction> | undefined;
        projectEnvVarsUnownedByIntegration?: Array<components.ACLAction> | undefined;
        projectId?: Array<components.ACLAction> | undefined;
        projectIntegrationConfiguration?: Array<components.ACLAction> | undefined;
        projectLink?: Array<components.ACLAction> | undefined;
        projectMember?: Array<components.ACLAction> | undefined;
        projectMonitoring?: Array<components.ACLAction> | undefined;
        projectPermissions?: Array<components.ACLAction> | undefined;
        projectProductionBranch?: Array<components.ACLAction> | undefined;
        projectTransfer?: Array<components.ACLAction> | undefined;
        projectTransferOut?: Array<components.ACLAction> | undefined;
        projectProtectionBypass?: Array<components.ACLAction> | undefined;
        projectUsage?: Array<components.ACLAction> | undefined;
        projectAnalyticsUsage?: Array<components.ACLAction> | undefined;
        projectSupportCase?: Array<components.ACLAction> | undefined;
        projectSupportCaseComment?: Array<components.ACLAction> | undefined;
        projectDeploymentExpiration?: Array<components.ACLAction> | undefined;
        skewProtection?: Array<components.ACLAction> | undefined;
        analytics?: Array<components.ACLAction> | undefined;
        trustedIps?: Array<components.ACLAction> | undefined;
        webAnalytics?: Array<components.ACLAction> | undefined;
        sharedEnvVarConnection?: Array<components.ACLAction> | undefined;
    };

    export const outboundSchema: z.ZodType<Outbound, z.ZodTypeDef, Permissions> = z
        .object({
            accessGroup: z.array(components.ACLAction$).optional(),
            aliasGlobal: z.array(components.ACLAction$).optional(),
            analyticsSampling: z.array(components.ACLAction$).optional(),
            analyticsUsage: z.array(components.ACLAction$).optional(),
            auditLog: z.array(components.ACLAction$).optional(),
            billingAddress: z.array(components.ACLAction$).optional(),
            billingInformation: z.array(components.ACLAction$).optional(),
            billingInvoice: z.array(components.ACLAction$).optional(),
            billingInvoiceEmailRecipient: z.array(components.ACLAction$).optional(),
            billingInvoiceLanguage: z.array(components.ACLAction$).optional(),
            billingPlan: z.array(components.ACLAction$).optional(),
            billingPurchaseOrder: z.array(components.ACLAction$).optional(),
            billingTaxId: z.array(components.ACLAction$).optional(),
            blob: z.array(components.ACLAction$).optional(),
            budget: z.array(components.ACLAction$).optional(),
            cacheArtifact: z.array(components.ACLAction$).optional(),
            cacheArtifactUsageEvent: z.array(components.ACLAction$).optional(),
            codeChecks: z.array(components.ACLAction$).optional(),
            concurrentBuilds: z.array(components.ACLAction$).optional(),
            connect: z.array(components.ACLAction$).optional(),
            connectConfiguration: z.array(components.ACLAction$).optional(),
            domain: z.array(components.ACLAction$).optional(),
            domainAcceptDelegation: z.array(components.ACLAction$).optional(),
            domainAuthCodes: z.array(components.ACLAction$).optional(),
            domainCertificate: z.array(components.ACLAction$).optional(),
            domainCheckConfig: z.array(components.ACLAction$).optional(),
            domainMove: z.array(components.ACLAction$).optional(),
            domainPurchase: z.array(components.ACLAction$).optional(),
            domainRecord: z.array(components.ACLAction$).optional(),
            domainTransferIn: z.array(components.ACLAction$).optional(),
            event: z.array(components.ACLAction$).optional(),
            ownEvent: z.array(components.ACLAction$).optional(),
            sensitiveEnvironmentVariablePolicy: z.array(components.ACLAction$).optional(),
            fileUpload: z.array(components.ACLAction$).optional(),
            gitRepository: z.array(components.ACLAction$).optional(),
            ipBlocking: z.array(components.ACLAction$).optional(),
            integration: z.array(components.ACLAction$).optional(),
            integrationConfiguration: z.array(components.ACLAction$).optional(),
            integrationConfigurationTransfer: z.array(components.ACLAction$).optional(),
            integrationConfigurationProjects: z.array(components.ACLAction$).optional(),
            integrationVercelConfigurationOverride: z.array(components.ACLAction$).optional(),
            integrationStore: z.array(components.ACLAction$).optional(),
            integrationEvent: z.array(components.ACLAction$).optional(),
            integrationResourceSecrets: z.array(components.ACLAction$).optional(),
            marketplaceBillingData: z.array(components.ACLAction$).optional(),
            jobGlobal: z.array(components.ACLAction$).optional(),
            logDrain: z.array(components.ACLAction$).optional(),
            monitoring: z.array(components.ACLAction$).optional(),
            monitoringSettings: z.array(components.ACLAction$).optional(),
            monitoringQuery: z.array(components.ACLAction$).optional(),
            monitoringChart: z.array(components.ACLAction$).optional(),
            monitoringAlert: z.array(components.ACLAction$).optional(),
            notificationDeploymentFailed: z.array(components.ACLAction$).optional(),
            notificationDomainConfiguration: z.array(components.ACLAction$).optional(),
            notificationDomainExpire: z.array(components.ACLAction$).optional(),
            notificationDomainMoved: z.array(components.ACLAction$).optional(),
            notificationDomainPurchase: z.array(components.ACLAction$).optional(),
            notificationDomainRenewal: z.array(components.ACLAction$).optional(),
            notificationDomainTransfer: z.array(components.ACLAction$).optional(),
            notificationDomainUnverified: z.array(components.ACLAction$).optional(),
            notificationMonitoringAlert: z.array(components.ACLAction$).optional(),
            notificationPaymentFailed: z.array(components.ACLAction$).optional(),
            notificationUsageAlert: z.array(components.ACLAction$).optional(),
            notificationCustomerBudget: z.array(components.ACLAction$).optional(),
            notificationStatementOfReasons: z.array(components.ACLAction$).optional(),
            oauth2Connection: z.array(components.ACLAction$).optional(),
            openTelemetryEndpoint: z.array(components.ACLAction$).optional(),
            paymentMethod: z.array(components.ACLAction$).optional(),
            permissions: z.array(components.ACLAction$).optional(),
            postgres: z.array(components.ACLAction$).optional(),
            previewDeploymentSuffix: z.array(components.ACLAction$).optional(),
            proTrialOnboarding: z.array(components.ACLAction$).optional(),
            seawallConfig: z.array(components.ACLAction$).optional(),
            sharedEnvVars: z.array(components.ACLAction$).optional(),
            sharedEnvVarsProduction: z.array(components.ACLAction$).optional(),
            space: z.array(components.ACLAction$).optional(),
            spaceRun: z.array(components.ACLAction$).optional(),
            passwordProtectionInvoiceItem: z.array(components.ACLAction$).optional(),
            rateLimit: z.array(components.ACLAction$).optional(),
            redis: z.array(components.ACLAction$).optional(),
            repository: z.array(components.ACLAction$).optional(),
            remoteCaching: z.array(components.ACLAction$).optional(),
            samlConfig: z.array(components.ACLAction$).optional(),
            secret: z.array(components.ACLAction$).optional(),
            redisStoreTokenSet: z.array(components.ACLAction$).optional(),
            blobStoreTokenSet: z.array(components.ACLAction$).optional(),
            postgresStoreTokenSet: z.array(components.ACLAction$).optional(),
            integrationStoreTokenSet: z.array(components.ACLAction$).optional(),
            supportCase: z.array(components.ACLAction$).optional(),
            supportCaseComment: z.array(components.ACLAction$).optional(),
            dataCacheBillingSettings: z.array(components.ACLAction$).optional(),
            team: z.array(components.ACLAction$).optional(),
            teamAccessRequest: z.array(components.ACLAction$).optional(),
            teamFellowMembership: z.array(components.ACLAction$).optional(),
            teamInvite: z.array(components.ACLAction$).optional(),
            teamInviteCode: z.array(components.ACLAction$).optional(),
            teamJoin: z.array(components.ACLAction$).optional(),
            teamOwnMembership: z.array(components.ACLAction$).optional(),
            teamOwnMembershipDisconnectSAML: z.array(components.ACLAction$).optional(),
            token: z.array(components.ACLAction$).optional(),
            usage: z.array(components.ACLAction$).optional(),
            usageCycle: z.array(components.ACLAction$).optional(),
            user: z.array(components.ACLAction$).optional(),
            userConnection: z.array(components.ACLAction$).optional(),
            webAnalyticsPlan: z.array(components.ACLAction$).optional(),
            webAuthn: z.array(components.ACLAction$).optional(),
            edgeConfig: z.array(components.ACLAction$).optional(),
            edgeConfigItem: z.array(components.ACLAction$).optional(),
            edgeConfigSchema: z.array(components.ACLAction$).optional(),
            edgeConfigToken: z.array(components.ACLAction$).optional(),
            webhook: z.array(components.ACLAction$).optional(),
            webhookEvent: z.array(components.ACLAction$).optional(),
            endpointVerification: z.array(components.ACLAction$).optional(),
            projectTransferIn: z.array(components.ACLAction$).optional(),
            oauth2Application: z.array(components.ACLAction$).optional(),
            aliasProject: z.array(components.ACLAction$).optional(),
            aliasProtectionBypass: z.array(components.ACLAction$).optional(),
            productionAliasProtectionBypass: z.array(components.ACLAction$).optional(),
            connectConfigurationLink: z.array(components.ACLAction$).optional(),
            dataCacheNamespace: z.array(components.ACLAction$).optional(),
            deployment: z.array(components.ACLAction$).optional(),
            deploymentCheck: z.array(components.ACLAction$).optional(),
            deploymentCheckPreview: z.array(components.ACLAction$).optional(),
            deploymentCheckReRunFromProductionBranch: z.array(components.ACLAction$).optional(),
            deploymentProductionGit: z.array(components.ACLAction$).optional(),
            deploymentPreview: z.array(components.ACLAction$).optional(),
            deploymentPrivate: z.array(components.ACLAction$).optional(),
            deploymentPromote: z.array(components.ACLAction$).optional(),
            deploymentRollback: z.array(components.ACLAction$).optional(),
            environments: z.array(components.ACLAction$).optional(),
            logs: z.array(components.ACLAction$).optional(),
            logsPreset: z.array(components.ACLAction$).optional(),
            passwordProtection: z.array(components.ACLAction$).optional(),
            optionsAllowlist: z.array(components.ACLAction$).optional(),
            job: z.array(components.ACLAction$).optional(),
            project: z.array(components.ACLAction$).optional(),
            projectAccessGroup: z.array(components.ACLAction$).optional(),
            projectAnalyticsSampling: z.array(components.ACLAction$).optional(),
            projectDeploymentHook: z.array(components.ACLAction$).optional(),
            projectDomain: z.array(components.ACLAction$).optional(),
            projectDomainMove: z.array(components.ACLAction$).optional(),
            projectDomainCheckConfig: z.array(components.ACLAction$).optional(),
            projectEnvVars: z.array(components.ACLAction$).optional(),
            projectEnvVarsProduction: z.array(components.ACLAction$).optional(),
            projectEnvVarsUnownedByIntegration: z.array(components.ACLAction$).optional(),
            projectId: z.array(components.ACLAction$).optional(),
            projectIntegrationConfiguration: z.array(components.ACLAction$).optional(),
            projectLink: z.array(components.ACLAction$).optional(),
            projectMember: z.array(components.ACLAction$).optional(),
            projectMonitoring: z.array(components.ACLAction$).optional(),
            projectPermissions: z.array(components.ACLAction$).optional(),
            projectProductionBranch: z.array(components.ACLAction$).optional(),
            projectTransfer: z.array(components.ACLAction$).optional(),
            projectTransferOut: z.array(components.ACLAction$).optional(),
            projectProtectionBypass: z.array(components.ACLAction$).optional(),
            projectUsage: z.array(components.ACLAction$).optional(),
            projectAnalyticsUsage: z.array(components.ACLAction$).optional(),
            projectSupportCase: z.array(components.ACLAction$).optional(),
            projectSupportCaseComment: z.array(components.ACLAction$).optional(),
            projectDeploymentExpiration: z.array(components.ACLAction$).optional(),
            skewProtection: z.array(components.ACLAction$).optional(),
            analytics: z.array(components.ACLAction$).optional(),
            trustedIps: z.array(components.ACLAction$).optional(),
            webAnalytics: z.array(components.ACLAction$).optional(),
            sharedEnvVarConnection: z.array(components.ACLAction$).optional(),
        })
        .transform((v) => {
            return {
                ...(v.accessGroup === undefined ? null : { accessGroup: v.accessGroup }),
                ...(v.aliasGlobal === undefined ? null : { aliasGlobal: v.aliasGlobal }),
                ...(v.analyticsSampling === undefined
                    ? null
                    : { analyticsSampling: v.analyticsSampling }),
                ...(v.analyticsUsage === undefined ? null : { analyticsUsage: v.analyticsUsage }),
                ...(v.auditLog === undefined ? null : { auditLog: v.auditLog }),
                ...(v.billingAddress === undefined ? null : { billingAddress: v.billingAddress }),
                ...(v.billingInformation === undefined
                    ? null
                    : { billingInformation: v.billingInformation }),
                ...(v.billingInvoice === undefined ? null : { billingInvoice: v.billingInvoice }),
                ...(v.billingInvoiceEmailRecipient === undefined
                    ? null
                    : { billingInvoiceEmailRecipient: v.billingInvoiceEmailRecipient }),
                ...(v.billingInvoiceLanguage === undefined
                    ? null
                    : { billingInvoiceLanguage: v.billingInvoiceLanguage }),
                ...(v.billingPlan === undefined ? null : { billingPlan: v.billingPlan }),
                ...(v.billingPurchaseOrder === undefined
                    ? null
                    : { billingPurchaseOrder: v.billingPurchaseOrder }),
                ...(v.billingTaxId === undefined ? null : { billingTaxId: v.billingTaxId }),
                ...(v.blob === undefined ? null : { blob: v.blob }),
                ...(v.budget === undefined ? null : { budget: v.budget }),
                ...(v.cacheArtifact === undefined ? null : { cacheArtifact: v.cacheArtifact }),
                ...(v.cacheArtifactUsageEvent === undefined
                    ? null
                    : { cacheArtifactUsageEvent: v.cacheArtifactUsageEvent }),
                ...(v.codeChecks === undefined ? null : { codeChecks: v.codeChecks }),
                ...(v.concurrentBuilds === undefined
                    ? null
                    : { concurrentBuilds: v.concurrentBuilds }),
                ...(v.connect === undefined ? null : { connect: v.connect }),
                ...(v.connectConfiguration === undefined
                    ? null
                    : { connectConfiguration: v.connectConfiguration }),
                ...(v.domain === undefined ? null : { domain: v.domain }),
                ...(v.domainAcceptDelegation === undefined
                    ? null
                    : { domainAcceptDelegation: v.domainAcceptDelegation }),
                ...(v.domainAuthCodes === undefined
                    ? null
                    : { domainAuthCodes: v.domainAuthCodes }),
                ...(v.domainCertificate === undefined
                    ? null
                    : { domainCertificate: v.domainCertificate }),
                ...(v.domainCheckConfig === undefined
                    ? null
                    : { domainCheckConfig: v.domainCheckConfig }),
                ...(v.domainMove === undefined ? null : { domainMove: v.domainMove }),
                ...(v.domainPurchase === undefined ? null : { domainPurchase: v.domainPurchase }),
                ...(v.domainRecord === undefined ? null : { domainRecord: v.domainRecord }),
                ...(v.domainTransferIn === undefined
                    ? null
                    : { domainTransferIn: v.domainTransferIn }),
                ...(v.event === undefined ? null : { event: v.event }),
                ...(v.ownEvent === undefined ? null : { ownEvent: v.ownEvent }),
                ...(v.sensitiveEnvironmentVariablePolicy === undefined
                    ? null
                    : { sensitiveEnvironmentVariablePolicy: v.sensitiveEnvironmentVariablePolicy }),
                ...(v.fileUpload === undefined ? null : { fileUpload: v.fileUpload }),
                ...(v.gitRepository === undefined ? null : { gitRepository: v.gitRepository }),
                ...(v.ipBlocking === undefined ? null : { ipBlocking: v.ipBlocking }),
                ...(v.integration === undefined ? null : { integration: v.integration }),
                ...(v.integrationConfiguration === undefined
                    ? null
                    : { integrationConfiguration: v.integrationConfiguration }),
                ...(v.integrationConfigurationTransfer === undefined
                    ? null
                    : { integrationConfigurationTransfer: v.integrationConfigurationTransfer }),
                ...(v.integrationConfigurationProjects === undefined
                    ? null
                    : { integrationConfigurationProjects: v.integrationConfigurationProjects }),
                ...(v.integrationVercelConfigurationOverride === undefined
                    ? null
                    : {
                          integrationVercelConfigurationOverride:
                              v.integrationVercelConfigurationOverride,
                      }),
                ...(v.integrationStore === undefined
                    ? null
                    : { integrationStore: v.integrationStore }),
                ...(v.integrationEvent === undefined
                    ? null
                    : { integrationEvent: v.integrationEvent }),
                ...(v.integrationResourceSecrets === undefined
                    ? null
                    : { integrationResourceSecrets: v.integrationResourceSecrets }),
                ...(v.marketplaceBillingData === undefined
                    ? null
                    : { marketplaceBillingData: v.marketplaceBillingData }),
                ...(v.jobGlobal === undefined ? null : { jobGlobal: v.jobGlobal }),
                ...(v.logDrain === undefined ? null : { logDrain: v.logDrain }),
                ...(v.monitoring === undefined ? null : { Monitoring: v.monitoring }),
                ...(v.monitoringSettings === undefined
                    ? null
                    : { monitoringSettings: v.monitoringSettings }),
                ...(v.monitoringQuery === undefined
                    ? null
                    : { monitoringQuery: v.monitoringQuery }),
                ...(v.monitoringChart === undefined
                    ? null
                    : { monitoringChart: v.monitoringChart }),
                ...(v.monitoringAlert === undefined
                    ? null
                    : { monitoringAlert: v.monitoringAlert }),
                ...(v.notificationDeploymentFailed === undefined
                    ? null
                    : { notificationDeploymentFailed: v.notificationDeploymentFailed }),
                ...(v.notificationDomainConfiguration === undefined
                    ? null
                    : { notificationDomainConfiguration: v.notificationDomainConfiguration }),
                ...(v.notificationDomainExpire === undefined
                    ? null
                    : { notificationDomainExpire: v.notificationDomainExpire }),
                ...(v.notificationDomainMoved === undefined
                    ? null
                    : { notificationDomainMoved: v.notificationDomainMoved }),
                ...(v.notificationDomainPurchase === undefined
                    ? null
                    : { notificationDomainPurchase: v.notificationDomainPurchase }),
                ...(v.notificationDomainRenewal === undefined
                    ? null
                    : { notificationDomainRenewal: v.notificationDomainRenewal }),
                ...(v.notificationDomainTransfer === undefined
                    ? null
                    : { notificationDomainTransfer: v.notificationDomainTransfer }),
                ...(v.notificationDomainUnverified === undefined
                    ? null
                    : { notificationDomainUnverified: v.notificationDomainUnverified }),
                ...(v.notificationMonitoringAlert === undefined
                    ? null
                    : { NotificationMonitoringAlert: v.notificationMonitoringAlert }),
                ...(v.notificationPaymentFailed === undefined
                    ? null
                    : { notificationPaymentFailed: v.notificationPaymentFailed }),
                ...(v.notificationUsageAlert === undefined
                    ? null
                    : { notificationUsageAlert: v.notificationUsageAlert }),
                ...(v.notificationCustomerBudget === undefined
                    ? null
                    : { notificationCustomerBudget: v.notificationCustomerBudget }),
                ...(v.notificationStatementOfReasons === undefined
                    ? null
                    : { notificationStatementOfReasons: v.notificationStatementOfReasons }),
                ...(v.oauth2Connection === undefined
                    ? null
                    : { oauth2Connection: v.oauth2Connection }),
                ...(v.openTelemetryEndpoint === undefined
                    ? null
                    : { openTelemetryEndpoint: v.openTelemetryEndpoint }),
                ...(v.paymentMethod === undefined ? null : { paymentMethod: v.paymentMethod }),
                ...(v.permissions === undefined ? null : { permissions: v.permissions }),
                ...(v.postgres === undefined ? null : { postgres: v.postgres }),
                ...(v.previewDeploymentSuffix === undefined
                    ? null
                    : { previewDeploymentSuffix: v.previewDeploymentSuffix }),
                ...(v.proTrialOnboarding === undefined
                    ? null
                    : { proTrialOnboarding: v.proTrialOnboarding }),
                ...(v.seawallConfig === undefined ? null : { seawallConfig: v.seawallConfig }),
                ...(v.sharedEnvVars === undefined ? null : { sharedEnvVars: v.sharedEnvVars }),
                ...(v.sharedEnvVarsProduction === undefined
                    ? null
                    : { sharedEnvVarsProduction: v.sharedEnvVarsProduction }),
                ...(v.space === undefined ? null : { space: v.space }),
                ...(v.spaceRun === undefined ? null : { spaceRun: v.spaceRun }),
                ...(v.passwordProtectionInvoiceItem === undefined
                    ? null
                    : { passwordProtectionInvoiceItem: v.passwordProtectionInvoiceItem }),
                ...(v.rateLimit === undefined ? null : { rateLimit: v.rateLimit }),
                ...(v.redis === undefined ? null : { redis: v.redis }),
                ...(v.repository === undefined ? null : { repository: v.repository }),
                ...(v.remoteCaching === undefined ? null : { remoteCaching: v.remoteCaching }),
                ...(v.samlConfig === undefined ? null : { samlConfig: v.samlConfig }),
                ...(v.secret === undefined ? null : { secret: v.secret }),
                ...(v.redisStoreTokenSet === undefined
                    ? null
                    : { redisStoreTokenSet: v.redisStoreTokenSet }),
                ...(v.blobStoreTokenSet === undefined
                    ? null
                    : { blobStoreTokenSet: v.blobStoreTokenSet }),
                ...(v.postgresStoreTokenSet === undefined
                    ? null
                    : { postgresStoreTokenSet: v.postgresStoreTokenSet }),
                ...(v.integrationStoreTokenSet === undefined
                    ? null
                    : { integrationStoreTokenSet: v.integrationStoreTokenSet }),
                ...(v.supportCase === undefined ? null : { supportCase: v.supportCase }),
                ...(v.supportCaseComment === undefined
                    ? null
                    : { supportCaseComment: v.supportCaseComment }),
                ...(v.dataCacheBillingSettings === undefined
                    ? null
                    : { dataCacheBillingSettings: v.dataCacheBillingSettings }),
                ...(v.team === undefined ? null : { team: v.team }),
                ...(v.teamAccessRequest === undefined
                    ? null
                    : { teamAccessRequest: v.teamAccessRequest }),
                ...(v.teamFellowMembership === undefined
                    ? null
                    : { teamFellowMembership: v.teamFellowMembership }),
                ...(v.teamInvite === undefined ? null : { teamInvite: v.teamInvite }),
                ...(v.teamInviteCode === undefined ? null : { teamInviteCode: v.teamInviteCode }),
                ...(v.teamJoin === undefined ? null : { teamJoin: v.teamJoin }),
                ...(v.teamOwnMembership === undefined
                    ? null
                    : { teamOwnMembership: v.teamOwnMembership }),
                ...(v.teamOwnMembershipDisconnectSAML === undefined
                    ? null
                    : { teamOwnMembershipDisconnectSAML: v.teamOwnMembershipDisconnectSAML }),
                ...(v.token === undefined ? null : { token: v.token }),
                ...(v.usage === undefined ? null : { usage: v.usage }),
                ...(v.usageCycle === undefined ? null : { usageCycle: v.usageCycle }),
                ...(v.user === undefined ? null : { user: v.user }),
                ...(v.userConnection === undefined ? null : { userConnection: v.userConnection }),
                ...(v.webAnalyticsPlan === undefined
                    ? null
                    : { webAnalyticsPlan: v.webAnalyticsPlan }),
                ...(v.webAuthn === undefined ? null : { webAuthn: v.webAuthn }),
                ...(v.edgeConfig === undefined ? null : { edgeConfig: v.edgeConfig }),
                ...(v.edgeConfigItem === undefined ? null : { edgeConfigItem: v.edgeConfigItem }),
                ...(v.edgeConfigSchema === undefined
                    ? null
                    : { edgeConfigSchema: v.edgeConfigSchema }),
                ...(v.edgeConfigToken === undefined
                    ? null
                    : { edgeConfigToken: v.edgeConfigToken }),
                ...(v.webhook === undefined ? null : { webhook: v.webhook }),
                ...(v.webhookEvent === undefined ? null : { "webhook-event": v.webhookEvent }),
                ...(v.endpointVerification === undefined
                    ? null
                    : { endpointVerification: v.endpointVerification }),
                ...(v.projectTransferIn === undefined
                    ? null
                    : { projectTransferIn: v.projectTransferIn }),
                ...(v.oauth2Application === undefined
                    ? null
                    : { oauth2Application: v.oauth2Application }),
                ...(v.aliasProject === undefined ? null : { aliasProject: v.aliasProject }),
                ...(v.aliasProtectionBypass === undefined
                    ? null
                    : { aliasProtectionBypass: v.aliasProtectionBypass }),
                ...(v.productionAliasProtectionBypass === undefined
                    ? null
                    : { productionAliasProtectionBypass: v.productionAliasProtectionBypass }),
                ...(v.connectConfigurationLink === undefined
                    ? null
                    : { connectConfigurationLink: v.connectConfigurationLink }),
                ...(v.dataCacheNamespace === undefined
                    ? null
                    : { dataCacheNamespace: v.dataCacheNamespace }),
                ...(v.deployment === undefined ? null : { deployment: v.deployment }),
                ...(v.deploymentCheck === undefined
                    ? null
                    : { deploymentCheck: v.deploymentCheck }),
                ...(v.deploymentCheckPreview === undefined
                    ? null
                    : { deploymentCheckPreview: v.deploymentCheckPreview }),
                ...(v.deploymentCheckReRunFromProductionBranch === undefined
                    ? null
                    : {
                          deploymentCheckReRunFromProductionBranch:
                              v.deploymentCheckReRunFromProductionBranch,
                      }),
                ...(v.deploymentProductionGit === undefined
                    ? null
                    : { deploymentProductionGit: v.deploymentProductionGit }),
                ...(v.deploymentPreview === undefined
                    ? null
                    : { deploymentPreview: v.deploymentPreview }),
                ...(v.deploymentPrivate === undefined
                    ? null
                    : { deploymentPrivate: v.deploymentPrivate }),
                ...(v.deploymentPromote === undefined
                    ? null
                    : { deploymentPromote: v.deploymentPromote }),
                ...(v.deploymentRollback === undefined
                    ? null
                    : { deploymentRollback: v.deploymentRollback }),
                ...(v.environments === undefined ? null : { environments: v.environments }),
                ...(v.logs === undefined ? null : { logs: v.logs }),
                ...(v.logsPreset === undefined ? null : { logsPreset: v.logsPreset }),
                ...(v.passwordProtection === undefined
                    ? null
                    : { passwordProtection: v.passwordProtection }),
                ...(v.optionsAllowlist === undefined
                    ? null
                    : { optionsAllowlist: v.optionsAllowlist }),
                ...(v.job === undefined ? null : { job: v.job }),
                ...(v.project === undefined ? null : { project: v.project }),
                ...(v.projectAccessGroup === undefined
                    ? null
                    : { projectAccessGroup: v.projectAccessGroup }),
                ...(v.projectAnalyticsSampling === undefined
                    ? null
                    : { projectAnalyticsSampling: v.projectAnalyticsSampling }),
                ...(v.projectDeploymentHook === undefined
                    ? null
                    : { projectDeploymentHook: v.projectDeploymentHook }),
                ...(v.projectDomain === undefined ? null : { projectDomain: v.projectDomain }),
                ...(v.projectDomainMove === undefined
                    ? null
                    : { projectDomainMove: v.projectDomainMove }),
                ...(v.projectDomainCheckConfig === undefined
                    ? null
                    : { projectDomainCheckConfig: v.projectDomainCheckConfig }),
                ...(v.projectEnvVars === undefined ? null : { projectEnvVars: v.projectEnvVars }),
                ...(v.projectEnvVarsProduction === undefined
                    ? null
                    : { projectEnvVarsProduction: v.projectEnvVarsProduction }),
                ...(v.projectEnvVarsUnownedByIntegration === undefined
                    ? null
                    : { projectEnvVarsUnownedByIntegration: v.projectEnvVarsUnownedByIntegration }),
                ...(v.projectId === undefined ? null : { projectId: v.projectId }),
                ...(v.projectIntegrationConfiguration === undefined
                    ? null
                    : { projectIntegrationConfiguration: v.projectIntegrationConfiguration }),
                ...(v.projectLink === undefined ? null : { projectLink: v.projectLink }),
                ...(v.projectMember === undefined ? null : { projectMember: v.projectMember }),
                ...(v.projectMonitoring === undefined
                    ? null
                    : { projectMonitoring: v.projectMonitoring }),
                ...(v.projectPermissions === undefined
                    ? null
                    : { projectPermissions: v.projectPermissions }),
                ...(v.projectProductionBranch === undefined
                    ? null
                    : { projectProductionBranch: v.projectProductionBranch }),
                ...(v.projectTransfer === undefined
                    ? null
                    : { projectTransfer: v.projectTransfer }),
                ...(v.projectTransferOut === undefined
                    ? null
                    : { projectTransferOut: v.projectTransferOut }),
                ...(v.projectProtectionBypass === undefined
                    ? null
                    : { projectProtectionBypass: v.projectProtectionBypass }),
                ...(v.projectUsage === undefined ? null : { projectUsage: v.projectUsage }),
                ...(v.projectAnalyticsUsage === undefined
                    ? null
                    : { projectAnalyticsUsage: v.projectAnalyticsUsage }),
                ...(v.projectSupportCase === undefined
                    ? null
                    : { projectSupportCase: v.projectSupportCase }),
                ...(v.projectSupportCaseComment === undefined
                    ? null
                    : { projectSupportCaseComment: v.projectSupportCaseComment }),
                ...(v.projectDeploymentExpiration === undefined
                    ? null
                    : { projectDeploymentExpiration: v.projectDeploymentExpiration }),
                ...(v.skewProtection === undefined ? null : { skewProtection: v.skewProtection }),
                ...(v.analytics === undefined ? null : { analytics: v.analytics }),
                ...(v.trustedIps === undefined ? null : { trustedIps: v.trustedIps }),
                ...(v.webAnalytics === undefined ? null : { webAnalytics: v.webAnalytics }),
                ...(v.sharedEnvVarConnection === undefined
                    ? null
                    : { sharedEnvVarConnection: v.sharedEnvVarConnection }),
            };
        });
}

/** @internal */
export namespace LastRollbackTarget$ {
    export const inboundSchema: z.ZodType<LastRollbackTarget, z.ZodTypeDef, unknown> = z.object({});

    export type Outbound = {};

    export const outboundSchema: z.ZodType<Outbound, z.ZodTypeDef, LastRollbackTarget> = z.object(
        {}
    );
}

/** @internal */
export const JobStatus$: z.ZodNativeEnum<typeof JobStatus> = z.nativeEnum(JobStatus);

/** @internal */
export const UpdateProjectDataCacheProjectsResponseType$: z.ZodNativeEnum<
    typeof UpdateProjectDataCacheProjectsResponseType
> = z.nativeEnum(UpdateProjectDataCacheProjectsResponseType);

/** @internal */
export namespace LastAliasRequest$ {
    export const inboundSchema: z.ZodType<LastAliasRequest, z.ZodTypeDef, unknown> = z
        .object({
            fromDeploymentId: z.string(),
            toDeploymentId: z.string(),
            jobStatus: JobStatus$,
            requestedAt: z.number(),
            type: UpdateProjectDataCacheProjectsResponseType$,
        })
        .transform((v) => {
            return {
                fromDeploymentId: v.fromDeploymentId,
                toDeploymentId: v.toDeploymentId,
                jobStatus: v.jobStatus,
                requestedAt: v.requestedAt,
                type: v.type,
            };
        });

    export type Outbound = {
        fromDeploymentId: string;
        toDeploymentId: string;
        jobStatus: JobStatus;
        requestedAt: number;
        type: UpdateProjectDataCacheProjectsResponseType;
    };

    export const outboundSchema: z.ZodType<Outbound, z.ZodTypeDef, LastAliasRequest> = z
        .object({
            fromDeploymentId: z.string(),
            toDeploymentId: z.string(),
            jobStatus: JobStatus$,
            requestedAt: z.number(),
            type: UpdateProjectDataCacheProjectsResponseType$,
        })
        .transform((v) => {
            return {
                fromDeploymentId: v.fromDeploymentId,
                toDeploymentId: v.toDeploymentId,
                jobStatus: v.jobStatus,
                requestedAt: v.requestedAt,
                type: v.type,
            };
        });
}

/** @internal */
export const Scope$: z.ZodNativeEnum<typeof Scope> = z.nativeEnum(Scope);

/** @internal */
export namespace ProtectionBypass$ {
    export const inboundSchema: z.ZodType<ProtectionBypass, z.ZodTypeDef, unknown> = z
        .object({
            createdAt: z.number(),
            createdBy: z.string(),
            scope: Scope$,
        })
        .transform((v) => {
            return {
                createdAt: v.createdAt,
                createdBy: v.createdBy,
                scope: v.scope,
            };
        });

    export type Outbound = {
        createdAt: number;
        createdBy: string;
        scope: Scope;
    };

    export const outboundSchema: z.ZodType<Outbound, z.ZodTypeDef, ProtectionBypass> = z
        .object({
            createdAt: z.number(),
            createdBy: z.string(),
            scope: Scope$,
        })
        .transform((v) => {
            return {
                createdAt: v.createdAt,
                createdBy: v.createdBy,
                scope: v.scope,
            };
        });
}

/** @internal */
export const UpdateProjectDataCacheTrustedIpsDeploymentType$: z.ZodNativeEnum<
    typeof UpdateProjectDataCacheTrustedIpsDeploymentType
> = z.nativeEnum(UpdateProjectDataCacheTrustedIpsDeploymentType);

/** @internal */
export namespace TrustedIps2$ {
    export const inboundSchema: z.ZodType<TrustedIps2, z.ZodTypeDef, unknown> = z
        .object({
            deploymentType: UpdateProjectDataCacheTrustedIpsDeploymentType$,
        })
        .transform((v) => {
            return {
                deploymentType: v.deploymentType,
            };
        });

    export type Outbound = {
        deploymentType: UpdateProjectDataCacheTrustedIpsDeploymentType;
    };

    export const outboundSchema: z.ZodType<Outbound, z.ZodTypeDef, TrustedIps2> = z
        .object({
            deploymentType: UpdateProjectDataCacheTrustedIpsDeploymentType$,
        })
        .transform((v) => {
            return {
                deploymentType: v.deploymentType,
            };
        });
}

/** @internal */
export const TrustedIpsDeploymentType$: z.ZodNativeEnum<typeof TrustedIpsDeploymentType> =
    z.nativeEnum(TrustedIpsDeploymentType);

/** @internal */
export namespace UpdateProjectDataCacheTrustedIpsAddresses$ {
    export const inboundSchema: z.ZodType<
        UpdateProjectDataCacheTrustedIpsAddresses,
        z.ZodTypeDef,
        unknown
    > = z
        .object({
            value: z.string(),
            note: z.string().optional(),
        })
        .transform((v) => {
            return {
                value: v.value,
                ...(v.note === undefined ? null : { note: v.note }),
            };
        });

    export type Outbound = {
        value: string;
        note?: string | undefined;
    };

    export const outboundSchema: z.ZodType<
        Outbound,
        z.ZodTypeDef,
        UpdateProjectDataCacheTrustedIpsAddresses
    > = z
        .object({
            value: z.string(),
            note: z.string().optional(),
        })
        .transform((v) => {
            return {
                value: v.value,
                ...(v.note === undefined ? null : { note: v.note }),
            };
        });
}

/** @internal */
export const UpdateProjectDataCacheTrustedIpsProtectionMode$: z.ZodNativeEnum<
    typeof UpdateProjectDataCacheTrustedIpsProtectionMode
> = z.nativeEnum(UpdateProjectDataCacheTrustedIpsProtectionMode);

/** @internal */
export namespace TrustedIps1$ {
    export const inboundSchema: z.ZodType<TrustedIps1, z.ZodTypeDef, unknown> = z
        .object({
            deploymentType: TrustedIpsDeploymentType$,
            addresses: z.array(
                z.lazy(() => UpdateProjectDataCacheTrustedIpsAddresses$.inboundSchema)
            ),
            protectionMode: UpdateProjectDataCacheTrustedIpsProtectionMode$,
        })
        .transform((v) => {
            return {
                deploymentType: v.deploymentType,
                addresses: v.addresses,
                protectionMode: v.protectionMode,
            };
        });

    export type Outbound = {
        deploymentType: TrustedIpsDeploymentType;
        addresses: Array<UpdateProjectDataCacheTrustedIpsAddresses$.Outbound>;
        protectionMode: UpdateProjectDataCacheTrustedIpsProtectionMode;
    };

    export const outboundSchema: z.ZodType<Outbound, z.ZodTypeDef, TrustedIps1> = z
        .object({
            deploymentType: TrustedIpsDeploymentType$,
            addresses: z.array(
                z.lazy(() => UpdateProjectDataCacheTrustedIpsAddresses$.outboundSchema)
            ),
            protectionMode: UpdateProjectDataCacheTrustedIpsProtectionMode$,
        })
        .transform((v) => {
            return {
                deploymentType: v.deploymentType,
                addresses: v.addresses,
                protectionMode: v.protectionMode,
            };
        });
}

/** @internal */
export namespace UpdateProjectDataCacheTrustedIps$ {
    export const inboundSchema: z.ZodType<UpdateProjectDataCacheTrustedIps, z.ZodTypeDef, unknown> =
        z.union([
            z.lazy(() => TrustedIps2$.inboundSchema),
            z.lazy(() => TrustedIps1$.inboundSchema),
        ]);

    export type Outbound = TrustedIps2$.Outbound | TrustedIps1$.Outbound;
    export const outboundSchema: z.ZodType<
        Outbound,
        z.ZodTypeDef,
        UpdateProjectDataCacheTrustedIps
    > = z.union([
        z.lazy(() => TrustedIps2$.outboundSchema),
        z.lazy(() => TrustedIps1$.outboundSchema),
    ]);
}

/** @internal */
export namespace GitComments$ {
    export const inboundSchema: z.ZodType<GitComments, z.ZodTypeDef, unknown> = z
        .object({
            onPullRequest: z.boolean(),
            onCommit: z.boolean(),
        })
        .transform((v) => {
            return {
                onPullRequest: v.onPullRequest,
                onCommit: v.onCommit,
            };
        });

    export type Outbound = {
        onPullRequest: boolean;
        onCommit: boolean;
    };

    export const outboundSchema: z.ZodType<Outbound, z.ZodTypeDef, GitComments> = z
        .object({
            onPullRequest: z.boolean(),
            onCommit: z.boolean(),
        })
        .transform((v) => {
            return {
                onPullRequest: v.onPullRequest,
                onCommit: v.onCommit,
            };
        });
}

/** @internal */
export namespace WebAnalytics$ {
    export const inboundSchema: z.ZodType<WebAnalytics, z.ZodTypeDef, unknown> = z
        .object({
            id: z.string(),
            disabledAt: z.number().optional(),
            canceledAt: z.number().optional(),
            enabledAt: z.number().optional(),
            hasData: z.boolean().optional(),
        })
        .transform((v) => {
            return {
                id: v.id,
                ...(v.disabledAt === undefined ? null : { disabledAt: v.disabledAt }),
                ...(v.canceledAt === undefined ? null : { canceledAt: v.canceledAt }),
                ...(v.enabledAt === undefined ? null : { enabledAt: v.enabledAt }),
                ...(v.hasData === undefined ? null : { hasData: v.hasData }),
            };
        });

    export type Outbound = {
        id: string;
        disabledAt?: number | undefined;
        canceledAt?: number | undefined;
        enabledAt?: number | undefined;
        hasData?: boolean | undefined;
    };

    export const outboundSchema: z.ZodType<Outbound, z.ZodTypeDef, WebAnalytics> = z
        .object({
            id: z.string(),
            disabledAt: z.number().optional(),
            canceledAt: z.number().optional(),
            enabledAt: z.number().optional(),
            hasData: z.boolean().optional(),
        })
        .transform((v) => {
            return {
                id: v.id,
                ...(v.disabledAt === undefined ? null : { disabledAt: v.disabledAt }),
                ...(v.canceledAt === undefined ? null : { canceledAt: v.canceledAt }),
                ...(v.enabledAt === undefined ? null : { enabledAt: v.enabledAt }),
                ...(v.hasData === undefined ? null : { hasData: v.hasData }),
            };
        });
}

/** @internal */
export namespace Src2$ {
    export const inboundSchema: z.ZodType<Src2, z.ZodTypeDef, unknown> = z
        .object({
            re: z.string().optional(),
            eq: z.string().optional(),
            neq: z.string().optional(),
            inc: z.array(z.string()).optional(),
            ninc: z.array(z.string()).optional(),
            pre: z.string().optional(),
            suf: z.string().optional(),
            gt: z.number().optional(),
            gte: z.number().optional(),
            lt: z.number().optional(),
            lte: z.number().optional(),
        })
        .transform((v) => {
            return {
                ...(v.re === undefined ? null : { re: v.re }),
                ...(v.eq === undefined ? null : { eq: v.eq }),
                ...(v.neq === undefined ? null : { neq: v.neq }),
                ...(v.inc === undefined ? null : { inc: v.inc }),
                ...(v.ninc === undefined ? null : { ninc: v.ninc }),
                ...(v.pre === undefined ? null : { pre: v.pre }),
                ...(v.suf === undefined ? null : { suf: v.suf }),
                ...(v.gt === undefined ? null : { gt: v.gt }),
                ...(v.gte === undefined ? null : { gte: v.gte }),
                ...(v.lt === undefined ? null : { lt: v.lt }),
                ...(v.lte === undefined ? null : { lte: v.lte }),
            };
        });

    export type Outbound = {
        re?: string | undefined;
        eq?: string | undefined;
        neq?: string | undefined;
        inc?: Array<string> | undefined;
        ninc?: Array<string> | undefined;
        pre?: string | undefined;
        suf?: string | undefined;
        gt?: number | undefined;
        gte?: number | undefined;
        lt?: number | undefined;
        lte?: number | undefined;
    };

    export const outboundSchema: z.ZodType<Outbound, z.ZodTypeDef, Src2> = z
        .object({
            re: z.string().optional(),
            eq: z.string().optional(),
            neq: z.string().optional(),
            inc: z.array(z.string()).optional(),
            ninc: z.array(z.string()).optional(),
            pre: z.string().optional(),
            suf: z.string().optional(),
            gt: z.number().optional(),
            gte: z.number().optional(),
            lt: z.number().optional(),
            lte: z.number().optional(),
        })
        .transform((v) => {
            return {
                ...(v.re === undefined ? null : { re: v.re }),
                ...(v.eq === undefined ? null : { eq: v.eq }),
                ...(v.neq === undefined ? null : { neq: v.neq }),
                ...(v.inc === undefined ? null : { inc: v.inc }),
                ...(v.ninc === undefined ? null : { ninc: v.ninc }),
                ...(v.pre === undefined ? null : { pre: v.pre }),
                ...(v.suf === undefined ? null : { suf: v.suf }),
                ...(v.gt === undefined ? null : { gt: v.gt }),
                ...(v.gte === undefined ? null : { gte: v.gte }),
                ...(v.lt === undefined ? null : { lt: v.lt }),
                ...(v.lte === undefined ? null : { lte: v.lte }),
            };
        });
}

/** @internal */
export namespace Src$ {
    export const inboundSchema: z.ZodType<Src, z.ZodTypeDef, unknown> = z.union([
        z.lazy(() => Src2$.inboundSchema),
        z.string(),
    ]);

    export type Outbound = Src2$.Outbound | string;
    export const outboundSchema: z.ZodType<Outbound, z.ZodTypeDef, Src> = z.union([
        z.lazy(() => Src2$.outboundSchema),
        z.string(),
    ]);
}

/** @internal */
export const UpdateProjectDataCacheProjectsResponse200ApplicationJSONType$: z.ZodNativeEnum<
    typeof UpdateProjectDataCacheProjectsResponse200ApplicationJSONType
> = z.nativeEnum(UpdateProjectDataCacheProjectsResponse200ApplicationJSONType);

/** @internal */
export namespace UpdateProjectDataCacheValueProjects2$ {
    export const inboundSchema: z.ZodType<
        UpdateProjectDataCacheValueProjects2,
        z.ZodTypeDef,
        unknown
    > = z
        .object({
            re: z.string().optional(),
            eq: z.string().optional(),
            neq: z.string().optional(),
            inc: z.array(z.string()).optional(),
            ninc: z.array(z.string()).optional(),
            pre: z.string().optional(),
            suf: z.string().optional(),
            gt: z.number().optional(),
            gte: z.number().optional(),
            lt: z.number().optional(),
            lte: z.number().optional(),
        })
        .transform((v) => {
            return {
                ...(v.re === undefined ? null : { re: v.re }),
                ...(v.eq === undefined ? null : { eq: v.eq }),
                ...(v.neq === undefined ? null : { neq: v.neq }),
                ...(v.inc === undefined ? null : { inc: v.inc }),
                ...(v.ninc === undefined ? null : { ninc: v.ninc }),
                ...(v.pre === undefined ? null : { pre: v.pre }),
                ...(v.suf === undefined ? null : { suf: v.suf }),
                ...(v.gt === undefined ? null : { gt: v.gt }),
                ...(v.gte === undefined ? null : { gte: v.gte }),
                ...(v.lt === undefined ? null : { lt: v.lt }),
                ...(v.lte === undefined ? null : { lte: v.lte }),
            };
        });

    export type Outbound = {
        re?: string | undefined;
        eq?: string | undefined;
        neq?: string | undefined;
        inc?: Array<string> | undefined;
        ninc?: Array<string> | undefined;
        pre?: string | undefined;
        suf?: string | undefined;
        gt?: number | undefined;
        gte?: number | undefined;
        lt?: number | undefined;
        lte?: number | undefined;
    };

    export const outboundSchema: z.ZodType<
        Outbound,
        z.ZodTypeDef,
        UpdateProjectDataCacheValueProjects2
    > = z
        .object({
            re: z.string().optional(),
            eq: z.string().optional(),
            neq: z.string().optional(),
            inc: z.array(z.string()).optional(),
            ninc: z.array(z.string()).optional(),
            pre: z.string().optional(),
            suf: z.string().optional(),
            gt: z.number().optional(),
            gte: z.number().optional(),
            lt: z.number().optional(),
            lte: z.number().optional(),
        })
        .transform((v) => {
            return {
                ...(v.re === undefined ? null : { re: v.re }),
                ...(v.eq === undefined ? null : { eq: v.eq }),
                ...(v.neq === undefined ? null : { neq: v.neq }),
                ...(v.inc === undefined ? null : { inc: v.inc }),
                ...(v.ninc === undefined ? null : { ninc: v.ninc }),
                ...(v.pre === undefined ? null : { pre: v.pre }),
                ...(v.suf === undefined ? null : { suf: v.suf }),
                ...(v.gt === undefined ? null : { gt: v.gt }),
                ...(v.gte === undefined ? null : { gte: v.gte }),
                ...(v.lt === undefined ? null : { lt: v.lt }),
                ...(v.lte === undefined ? null : { lte: v.lte }),
            };
        });
}

/** @internal */
export namespace UpdateProjectDataCacheProjectsValue$ {
    export const inboundSchema: z.ZodType<
        UpdateProjectDataCacheProjectsValue,
        z.ZodTypeDef,
        unknown
    > = z.union([z.lazy(() => UpdateProjectDataCacheValueProjects2$.inboundSchema), z.string()]);

    export type Outbound = UpdateProjectDataCacheValueProjects2$.Outbound | string;
    export const outboundSchema: z.ZodType<
        Outbound,
        z.ZodTypeDef,
        UpdateProjectDataCacheProjectsValue
    > = z.union([z.lazy(() => UpdateProjectDataCacheValueProjects2$.outboundSchema), z.string()]);
}

/** @internal */
export namespace Has$ {
    export const inboundSchema: z.ZodType<Has, z.ZodTypeDef, unknown> = z
        .object({
            type: UpdateProjectDataCacheProjectsResponse200ApplicationJSONType$,
            key: z.string().optional(),
            value: z
                .union([
                    z.lazy(() => UpdateProjectDataCacheValueProjects2$.inboundSchema),
                    z.string(),
                ])
                .optional(),
        })
        .transform((v) => {
            return {
                type: v.type,
                ...(v.key === undefined ? null : { key: v.key }),
                ...(v.value === undefined ? null : { value: v.value }),
            };
        });

    export type Outbound = {
        type: UpdateProjectDataCacheProjectsResponse200ApplicationJSONType;
        key?: string | undefined;
        value?: UpdateProjectDataCacheValueProjects2$.Outbound | string | undefined;
    };

    export const outboundSchema: z.ZodType<Outbound, z.ZodTypeDef, Has> = z
        .object({
            type: UpdateProjectDataCacheProjectsResponse200ApplicationJSONType$,
            key: z.string().optional(),
            value: z
                .union([
                    z.lazy(() => UpdateProjectDataCacheValueProjects2$.outboundSchema),
                    z.string(),
                ])
                .optional(),
        })
        .transform((v) => {
            return {
                type: v.type,
                ...(v.key === undefined ? null : { key: v.key }),
                ...(v.value === undefined ? null : { value: v.value }),
            };
        });
}

/** @internal */
export const UpdateProjectDataCacheProjectsResponse200ApplicationJSONResponseBodyType$: z.ZodNativeEnum<
    typeof UpdateProjectDataCacheProjectsResponse200ApplicationJSONResponseBodyType
> = z.nativeEnum(UpdateProjectDataCacheProjectsResponse200ApplicationJSONResponseBodyType);

/** @internal */
export namespace UpdateProjectDataCacheValue2$ {
    export const inboundSchema: z.ZodType<UpdateProjectDataCacheValue2, z.ZodTypeDef, unknown> = z
        .object({
            re: z.string().optional(),
            eq: z.string().optional(),
            neq: z.string().optional(),
            inc: z.array(z.string()).optional(),
            ninc: z.array(z.string()).optional(),
            pre: z.string().optional(),
            suf: z.string().optional(),
            gt: z.number().optional(),
            gte: z.number().optional(),
            lt: z.number().optional(),
            lte: z.number().optional(),
        })
        .transform((v) => {
            return {
                ...(v.re === undefined ? null : { re: v.re }),
                ...(v.eq === undefined ? null : { eq: v.eq }),
                ...(v.neq === undefined ? null : { neq: v.neq }),
                ...(v.inc === undefined ? null : { inc: v.inc }),
                ...(v.ninc === undefined ? null : { ninc: v.ninc }),
                ...(v.pre === undefined ? null : { pre: v.pre }),
                ...(v.suf === undefined ? null : { suf: v.suf }),
                ...(v.gt === undefined ? null : { gt: v.gt }),
                ...(v.gte === undefined ? null : { gte: v.gte }),
                ...(v.lt === undefined ? null : { lt: v.lt }),
                ...(v.lte === undefined ? null : { lte: v.lte }),
            };
        });

    export type Outbound = {
        re?: string | undefined;
        eq?: string | undefined;
        neq?: string | undefined;
        inc?: Array<string> | undefined;
        ninc?: Array<string> | undefined;
        pre?: string | undefined;
        suf?: string | undefined;
        gt?: number | undefined;
        gte?: number | undefined;
        lt?: number | undefined;
        lte?: number | undefined;
    };

    export const outboundSchema: z.ZodType<Outbound, z.ZodTypeDef, UpdateProjectDataCacheValue2> = z
        .object({
            re: z.string().optional(),
            eq: z.string().optional(),
            neq: z.string().optional(),
            inc: z.array(z.string()).optional(),
            ninc: z.array(z.string()).optional(),
            pre: z.string().optional(),
            suf: z.string().optional(),
            gt: z.number().optional(),
            gte: z.number().optional(),
            lt: z.number().optional(),
            lte: z.number().optional(),
        })
        .transform((v) => {
            return {
                ...(v.re === undefined ? null : { re: v.re }),
                ...(v.eq === undefined ? null : { eq: v.eq }),
                ...(v.neq === undefined ? null : { neq: v.neq }),
                ...(v.inc === undefined ? null : { inc: v.inc }),
                ...(v.ninc === undefined ? null : { ninc: v.ninc }),
                ...(v.pre === undefined ? null : { pre: v.pre }),
                ...(v.suf === undefined ? null : { suf: v.suf }),
                ...(v.gt === undefined ? null : { gt: v.gt }),
                ...(v.gte === undefined ? null : { gte: v.gte }),
                ...(v.lt === undefined ? null : { lt: v.lt }),
                ...(v.lte === undefined ? null : { lte: v.lte }),
            };
        });
}

/** @internal */
export namespace UpdateProjectDataCacheValue$ {
    export const inboundSchema: z.ZodType<UpdateProjectDataCacheValue, z.ZodTypeDef, unknown> =
        z.union([z.lazy(() => UpdateProjectDataCacheValue2$.inboundSchema), z.string()]);

    export type Outbound = UpdateProjectDataCacheValue2$.Outbound | string;
    export const outboundSchema: z.ZodType<Outbound, z.ZodTypeDef, UpdateProjectDataCacheValue> =
        z.union([z.lazy(() => UpdateProjectDataCacheValue2$.outboundSchema), z.string()]);
}

/** @internal */
export namespace Missing$ {
    export const inboundSchema: z.ZodType<Missing, z.ZodTypeDef, unknown> = z
        .object({
            type: UpdateProjectDataCacheProjectsResponse200ApplicationJSONResponseBodyType$,
            key: z.string().optional(),
            value: z
                .union([z.lazy(() => UpdateProjectDataCacheValue2$.inboundSchema), z.string()])
                .optional(),
        })
        .transform((v) => {
            return {
                type: v.type,
                ...(v.key === undefined ? null : { key: v.key }),
                ...(v.value === undefined ? null : { value: v.value }),
            };
        });

    export type Outbound = {
        type: UpdateProjectDataCacheProjectsResponse200ApplicationJSONResponseBodyType;
        key?: string | undefined;
        value?: UpdateProjectDataCacheValue2$.Outbound | string | undefined;
    };

    export const outboundSchema: z.ZodType<Outbound, z.ZodTypeDef, Missing> = z
        .object({
            type: UpdateProjectDataCacheProjectsResponse200ApplicationJSONResponseBodyType$,
            key: z.string().optional(),
            value: z
                .union([z.lazy(() => UpdateProjectDataCacheValue2$.outboundSchema), z.string()])
                .optional(),
        })
        .transform((v) => {
            return {
                type: v.type,
                ...(v.key === undefined ? null : { key: v.key }),
                ...(v.value === undefined ? null : { value: v.value }),
            };
        });
}

/** @internal */
export const Handle$: z.ZodNativeEnum<typeof Handle> = z.nativeEnum(Handle);

/** @internal */
export const Action$: z.ZodNativeEnum<typeof Action> = z.nativeEnum(Action);

/** @internal */
export const Algo$: z.ZodNativeEnum<typeof Algo> = z.nativeEnum(Algo);

/** @internal */
export namespace Erl$ {
    export const inboundSchema: z.ZodType<Erl, z.ZodTypeDef, unknown> = z
        .object({
            algo: Algo$,
            window: z.number(),
            limit: z.number(),
            keys: z.array(z.string()),
        })
        .transform((v) => {
            return {
                algo: v.algo,
                window: v.window,
                limit: v.limit,
                keys: v.keys,
            };
        });

    export type Outbound = {
        algo: Algo;
        window: number;
        limit: number;
        keys: Array<string>;
    };

    export const outboundSchema: z.ZodType<Outbound, z.ZodTypeDef, Erl> = z
        .object({
            algo: Algo$,
            window: z.number(),
            limit: z.number(),
            keys: z.array(z.string()),
        })
        .transform((v) => {
            return {
                algo: v.algo,
                window: v.window,
                limit: v.limit,
                keys: v.keys,
            };
        });
}

/** @internal */
export namespace Mitigate$ {
    export const inboundSchema: z.ZodType<Mitigate, z.ZodTypeDef, unknown> = z
        .object({
            action: Action$,
            rule_id: z.string(),
            erl: z.lazy(() => Erl$.inboundSchema).optional(),
        })
        .transform((v) => {
            return {
                action: v.action,
                ruleId: v.rule_id,
                ...(v.erl === undefined ? null : { erl: v.erl }),
            };
        });

    export type Outbound = {
        action: Action;
        rule_id: string;
        erl?: Erl$.Outbound | undefined;
    };

    export const outboundSchema: z.ZodType<Outbound, z.ZodTypeDef, Mitigate> = z
        .object({
            action: Action$,
            ruleId: z.string(),
            erl: z.lazy(() => Erl$.outboundSchema).optional(),
        })
        .transform((v) => {
            return {
                action: v.action,
                rule_id: v.ruleId,
                ...(v.erl === undefined ? null : { erl: v.erl }),
            };
        });
}

/** @internal */
export namespace FirewallRoutes$ {
    export const inboundSchema: z.ZodType<FirewallRoutes, z.ZodTypeDef, unknown> = z
        .object({
            src: z.union([z.lazy(() => Src2$.inboundSchema), z.string()]).optional(),
            has: z.array(z.lazy(() => Has$.inboundSchema)).optional(),
            missing: z.array(z.lazy(() => Missing$.inboundSchema)).optional(),
            dest: z.string().optional(),
            status: z.number().optional(),
            handle: Handle$.optional(),
            mitigate: z.lazy(() => Mitigate$.inboundSchema).optional(),
        })
        .transform((v) => {
            return {
                ...(v.src === undefined ? null : { src: v.src }),
                ...(v.has === undefined ? null : { has: v.has }),
                ...(v.missing === undefined ? null : { missing: v.missing }),
                ...(v.dest === undefined ? null : { dest: v.dest }),
                ...(v.status === undefined ? null : { status: v.status }),
                ...(v.handle === undefined ? null : { handle: v.handle }),
                ...(v.mitigate === undefined ? null : { mitigate: v.mitigate }),
            };
        });

    export type Outbound = {
        src?: Src2$.Outbound | string | undefined;
        has?: Array<Has$.Outbound> | undefined;
        missing?: Array<Missing$.Outbound> | undefined;
        dest?: string | undefined;
        status?: number | undefined;
        handle?: Handle | undefined;
        mitigate?: Mitigate$.Outbound | undefined;
    };

    export const outboundSchema: z.ZodType<Outbound, z.ZodTypeDef, FirewallRoutes> = z
        .object({
            src: z.union([z.lazy(() => Src2$.outboundSchema), z.string()]).optional(),
            has: z.array(z.lazy(() => Has$.outboundSchema)).optional(),
            missing: z.array(z.lazy(() => Missing$.outboundSchema)).optional(),
            dest: z.string().optional(),
            status: z.number().optional(),
            handle: Handle$.optional(),
            mitigate: z.lazy(() => Mitigate$.outboundSchema).optional(),
        })
        .transform((v) => {
            return {
                ...(v.src === undefined ? null : { src: v.src }),
                ...(v.has === undefined ? null : { has: v.has }),
                ...(v.missing === undefined ? null : { missing: v.missing }),
                ...(v.dest === undefined ? null : { dest: v.dest }),
                ...(v.status === undefined ? null : { status: v.status }),
                ...(v.handle === undefined ? null : { handle: v.handle }),
                ...(v.mitigate === undefined ? null : { mitigate: v.mitigate }),
            };
        });
}

/** @internal */
export namespace Security$ {
    export const inboundSchema: z.ZodType<Security, z.ZodTypeDef, unknown> = z
        .object({
            attackModeEnabled: z.boolean().optional(),
            attackModeUpdatedAt: z.number().optional(),
            firewallEnabled: z.boolean().optional(),
            firewallUpdatedAt: z.number().optional(),
            attackModeActiveUntil: z.nullable(z.number()).optional(),
            firewallConfigVersion: z.number().optional(),
            firewallRoutes: z.array(z.lazy(() => FirewallRoutes$.inboundSchema)).optional(),
            firewallSeawallEnabled: z.boolean().optional(),
            ja3Enabled: z.boolean().optional(),
            ja4Enabled: z.boolean().optional(),
        })
        .transform((v) => {
            return {
                ...(v.attackModeEnabled === undefined
                    ? null
                    : { attackModeEnabled: v.attackModeEnabled }),
                ...(v.attackModeUpdatedAt === undefined
                    ? null
                    : { attackModeUpdatedAt: v.attackModeUpdatedAt }),
                ...(v.firewallEnabled === undefined
                    ? null
                    : { firewallEnabled: v.firewallEnabled }),
                ...(v.firewallUpdatedAt === undefined
                    ? null
                    : { firewallUpdatedAt: v.firewallUpdatedAt }),
                ...(v.attackModeActiveUntil === undefined
                    ? null
                    : { attackModeActiveUntil: v.attackModeActiveUntil }),
                ...(v.firewallConfigVersion === undefined
                    ? null
                    : { firewallConfigVersion: v.firewallConfigVersion }),
                ...(v.firewallRoutes === undefined ? null : { firewallRoutes: v.firewallRoutes }),
                ...(v.firewallSeawallEnabled === undefined
                    ? null
                    : { firewallSeawallEnabled: v.firewallSeawallEnabled }),
                ...(v.ja3Enabled === undefined ? null : { ja3Enabled: v.ja3Enabled }),
                ...(v.ja4Enabled === undefined ? null : { ja4Enabled: v.ja4Enabled }),
            };
        });

    export type Outbound = {
        attackModeEnabled?: boolean | undefined;
        attackModeUpdatedAt?: number | undefined;
        firewallEnabled?: boolean | undefined;
        firewallUpdatedAt?: number | undefined;
        attackModeActiveUntil?: number | null | undefined;
        firewallConfigVersion?: number | undefined;
        firewallRoutes?: Array<FirewallRoutes$.Outbound> | undefined;
        firewallSeawallEnabled?: boolean | undefined;
        ja3Enabled?: boolean | undefined;
        ja4Enabled?: boolean | undefined;
    };

    export const outboundSchema: z.ZodType<Outbound, z.ZodTypeDef, Security> = z
        .object({
            attackModeEnabled: z.boolean().optional(),
            attackModeUpdatedAt: z.number().optional(),
            firewallEnabled: z.boolean().optional(),
            firewallUpdatedAt: z.number().optional(),
            attackModeActiveUntil: z.nullable(z.number()).optional(),
            firewallConfigVersion: z.number().optional(),
            firewallRoutes: z.array(z.lazy(() => FirewallRoutes$.outboundSchema)).optional(),
            firewallSeawallEnabled: z.boolean().optional(),
            ja3Enabled: z.boolean().optional(),
            ja4Enabled: z.boolean().optional(),
        })
        .transform((v) => {
            return {
                ...(v.attackModeEnabled === undefined
                    ? null
                    : { attackModeEnabled: v.attackModeEnabled }),
                ...(v.attackModeUpdatedAt === undefined
                    ? null
                    : { attackModeUpdatedAt: v.attackModeUpdatedAt }),
                ...(v.firewallEnabled === undefined
                    ? null
                    : { firewallEnabled: v.firewallEnabled }),
                ...(v.firewallUpdatedAt === undefined
                    ? null
                    : { firewallUpdatedAt: v.firewallUpdatedAt }),
                ...(v.attackModeActiveUntil === undefined
                    ? null
                    : { attackModeActiveUntil: v.attackModeActiveUntil }),
                ...(v.firewallConfigVersion === undefined
                    ? null
                    : { firewallConfigVersion: v.firewallConfigVersion }),
                ...(v.firewallRoutes === undefined ? null : { firewallRoutes: v.firewallRoutes }),
                ...(v.firewallSeawallEnabled === undefined
                    ? null
                    : { firewallSeawallEnabled: v.firewallSeawallEnabled }),
                ...(v.ja3Enabled === undefined ? null : { ja3Enabled: v.ja3Enabled }),
                ...(v.ja4Enabled === undefined ? null : { ja4Enabled: v.ja4Enabled }),
            };
        });
}

/** @internal */
export namespace OidcTokenConfig$ {
    export const inboundSchema: z.ZodType<OidcTokenConfig, z.ZodTypeDef, unknown> = z
        .object({
            enabled: z.boolean(),
        })
        .transform((v) => {
            return {
                enabled: v.enabled,
            };
        });

    export type Outbound = {
        enabled: boolean;
    };

    export const outboundSchema: z.ZodType<Outbound, z.ZodTypeDef, OidcTokenConfig> = z
        .object({
            enabled: z.boolean(),
        })
        .transform((v) => {
            return {
                enabled: v.enabled,
            };
        });
}

/** @internal */
export namespace UpdateProjectDataCacheResponseBody$ {
    export const inboundSchema: z.ZodType<
        UpdateProjectDataCacheResponseBody,
        z.ZodTypeDef,
        unknown
    > = z
        .object({
            accountId: z.string(),
            analytics: z.lazy(() => Analytics$.inboundSchema).optional(),
            speedInsights: z.lazy(() => SpeedInsights$.inboundSchema).optional(),
            autoExposeSystemEnvs: z.boolean().optional(),
            autoAssignCustomDomains: z.boolean().optional(),
            autoAssignCustomDomainsUpdatedBy: z.string().optional(),
            buildCommand: z.nullable(z.string()).optional(),
            commandForIgnoringBuildStep: z.nullable(z.string()).optional(),
            connectConfigurationId: z.nullable(z.string()).optional(),
            connectBuildsEnabled: z.boolean().optional(),
            createdAt: z.number().optional(),
            customerSupportCodeVisibility: z.boolean().optional(),
            crons: z.lazy(() => Crons$.inboundSchema).optional(),
            dataCache: z.lazy(() => DataCache$.inboundSchema).optional(),
            devCommand: z.nullable(z.string()).optional(),
            directoryListing: z.boolean(),
            installCommand: z.nullable(z.string()).optional(),
            env: z.array(z.lazy(() => Env$.inboundSchema)).optional(),
            framework: z.nullable(UpdateProjectDataCacheFramework$).optional(),
            gitForkProtection: z.boolean().optional(),
            gitLFS: z.boolean().optional(),
            id: z.string(),
            latestDeployments: z.array(z.lazy(() => LatestDeployments$.inboundSchema)).optional(),
            link: z
                .union([
                    z.lazy(() => Link1$.inboundSchema),
                    z.lazy(() => Link2$.inboundSchema),
                    z.lazy(() => Link3$.inboundSchema),
                ])
                .optional(),
            name: z.string(),
            nodeVersion: UpdateProjectDataCacheNodeVersion$,
            optionsAllowlist: z
                .nullable(z.lazy(() => UpdateProjectDataCacheOptionsAllowlist$.inboundSchema))
                .optional(),
            outputDirectory: z.nullable(z.string()).optional(),
            passiveConnectConfigurationId: z.nullable(z.string()).optional(),
            passwordProtection: z
                .nullable(z.lazy(() => UpdateProjectDataCachePasswordProtection$.inboundSchema))
                .optional(),
            productionDeploymentsFastLane: z.boolean().optional(),
            publicSource: z.nullable(z.boolean()).optional(),
            rootDirectory: z.nullable(z.string()).optional(),
            serverlessFunctionRegion: z.nullable(z.string()).optional(),
            serverlessFunctionZeroConfigFailover: z.boolean().optional(),
            skewProtectionBoundaryAt: z.number().optional(),
            skewProtectionMaxAge: z.number().optional(),
            skipGitConnectDuringLink: z.boolean().optional(),
            sourceFilesOutsideRootDirectory: z.boolean().optional(),
            ssoProtection: z
                .nullable(z.lazy(() => UpdateProjectDataCacheSsoProtection$.inboundSchema))
                .optional(),
            targets: z.record(z.union([z.string(), z.array(z.string())])).optional(),
            transferCompletedAt: z.number().optional(),
            transferStartedAt: z.number().optional(),
            transferToAccountId: z.string().optional(),
            transferredFromAccountId: z.string().optional(),
            updatedAt: z.number().optional(),
            live: z.boolean().optional(),
            enablePreviewFeedback: z.nullable(z.boolean()).optional(),
            permissions: z.lazy(() => Permissions$.inboundSchema).optional(),
            lastRollbackTarget: z
                .nullable(z.lazy(() => LastRollbackTarget$.inboundSchema))
                .optional(),
            lastAliasRequest: z.nullable(z.lazy(() => LastAliasRequest$.inboundSchema)).optional(),
            hasFloatingAliases: z.boolean().optional(),
            protectionBypass: z.record(z.lazy(() => ProtectionBypass$.inboundSchema)).optional(),
            hasActiveBranches: z.boolean().optional(),
            trustedIps: z
                .nullable(
                    z.union([
                        z.lazy(() => TrustedIps2$.inboundSchema),
                        z.lazy(() => TrustedIps1$.inboundSchema),
                    ])
                )
                .optional(),
            gitComments: z.lazy(() => GitComments$.inboundSchema).optional(),
            paused: z.boolean().optional(),
            concurrencyBucketName: z.string().optional(),
            webAnalytics: z.lazy(() => WebAnalytics$.inboundSchema).optional(),
            security: z.lazy(() => Security$.inboundSchema).optional(),
            oidcTokenConfig: z.lazy(() => OidcTokenConfig$.inboundSchema).optional(),
        })
        .transform((v) => {
            return {
                accountId: v.accountId,
                ...(v.analytics === undefined ? null : { analytics: v.analytics }),
                ...(v.speedInsights === undefined ? null : { speedInsights: v.speedInsights }),
                ...(v.autoExposeSystemEnvs === undefined
                    ? null
                    : { autoExposeSystemEnvs: v.autoExposeSystemEnvs }),
                ...(v.autoAssignCustomDomains === undefined
                    ? null
                    : { autoAssignCustomDomains: v.autoAssignCustomDomains }),
                ...(v.autoAssignCustomDomainsUpdatedBy === undefined
                    ? null
                    : { autoAssignCustomDomainsUpdatedBy: v.autoAssignCustomDomainsUpdatedBy }),
                ...(v.buildCommand === undefined ? null : { buildCommand: v.buildCommand }),
                ...(v.commandForIgnoringBuildStep === undefined
                    ? null
                    : { commandForIgnoringBuildStep: v.commandForIgnoringBuildStep }),
                ...(v.connectConfigurationId === undefined
                    ? null
                    : { connectConfigurationId: v.connectConfigurationId }),
                ...(v.connectBuildsEnabled === undefined
                    ? null
                    : { connectBuildsEnabled: v.connectBuildsEnabled }),
                ...(v.createdAt === undefined ? null : { createdAt: v.createdAt }),
                ...(v.customerSupportCodeVisibility === undefined
                    ? null
                    : { customerSupportCodeVisibility: v.customerSupportCodeVisibility }),
                ...(v.crons === undefined ? null : { crons: v.crons }),
                ...(v.dataCache === undefined ? null : { dataCache: v.dataCache }),
                ...(v.devCommand === undefined ? null : { devCommand: v.devCommand }),
                directoryListing: v.directoryListing,
                ...(v.installCommand === undefined ? null : { installCommand: v.installCommand }),
                ...(v.env === undefined ? null : { env: v.env }),
                ...(v.framework === undefined ? null : { framework: v.framework }),
                ...(v.gitForkProtection === undefined
                    ? null
                    : { gitForkProtection: v.gitForkProtection }),
                ...(v.gitLFS === undefined ? null : { gitLFS: v.gitLFS }),
                id: v.id,
                ...(v.latestDeployments === undefined
                    ? null
                    : { latestDeployments: v.latestDeployments }),
                ...(v.link === undefined ? null : { link: v.link }),
                name: v.name,
                nodeVersion: v.nodeVersion,
                ...(v.optionsAllowlist === undefined
                    ? null
                    : { optionsAllowlist: v.optionsAllowlist }),
                ...(v.outputDirectory === undefined
                    ? null
                    : { outputDirectory: v.outputDirectory }),
                ...(v.passiveConnectConfigurationId === undefined
                    ? null
                    : { passiveConnectConfigurationId: v.passiveConnectConfigurationId }),
                ...(v.passwordProtection === undefined
                    ? null
                    : { passwordProtection: v.passwordProtection }),
                ...(v.productionDeploymentsFastLane === undefined
                    ? null
                    : { productionDeploymentsFastLane: v.productionDeploymentsFastLane }),
                ...(v.publicSource === undefined ? null : { publicSource: v.publicSource }),
                ...(v.rootDirectory === undefined ? null : { rootDirectory: v.rootDirectory }),
                ...(v.serverlessFunctionRegion === undefined
                    ? null
                    : { serverlessFunctionRegion: v.serverlessFunctionRegion }),
                ...(v.serverlessFunctionZeroConfigFailover === undefined
                    ? null
                    : {
                          serverlessFunctionZeroConfigFailover:
                              v.serverlessFunctionZeroConfigFailover,
                      }),
                ...(v.skewProtectionBoundaryAt === undefined
                    ? null
                    : { skewProtectionBoundaryAt: v.skewProtectionBoundaryAt }),
                ...(v.skewProtectionMaxAge === undefined
                    ? null
                    : { skewProtectionMaxAge: v.skewProtectionMaxAge }),
                ...(v.skipGitConnectDuringLink === undefined
                    ? null
                    : { skipGitConnectDuringLink: v.skipGitConnectDuringLink }),
                ...(v.sourceFilesOutsideRootDirectory === undefined
                    ? null
                    : { sourceFilesOutsideRootDirectory: v.sourceFilesOutsideRootDirectory }),
                ...(v.ssoProtection === undefined ? null : { ssoProtection: v.ssoProtection }),
                ...(v.targets === undefined ? null : { targets: v.targets }),
                ...(v.transferCompletedAt === undefined
                    ? null
                    : { transferCompletedAt: v.transferCompletedAt }),
                ...(v.transferStartedAt === undefined
                    ? null
                    : { transferStartedAt: v.transferStartedAt }),
                ...(v.transferToAccountId === undefined
                    ? null
                    : { transferToAccountId: v.transferToAccountId }),
                ...(v.transferredFromAccountId === undefined
                    ? null
                    : { transferredFromAccountId: v.transferredFromAccountId }),
                ...(v.updatedAt === undefined ? null : { updatedAt: v.updatedAt }),
                ...(v.live === undefined ? null : { live: v.live }),
                ...(v.enablePreviewFeedback === undefined
                    ? null
                    : { enablePreviewFeedback: v.enablePreviewFeedback }),
                ...(v.permissions === undefined ? null : { permissions: v.permissions }),
                ...(v.lastRollbackTarget === undefined
                    ? null
                    : { lastRollbackTarget: v.lastRollbackTarget }),
                ...(v.lastAliasRequest === undefined
                    ? null
                    : { lastAliasRequest: v.lastAliasRequest }),
                ...(v.hasFloatingAliases === undefined
                    ? null
                    : { hasFloatingAliases: v.hasFloatingAliases }),
                ...(v.protectionBypass === undefined
                    ? null
                    : { protectionBypass: v.protectionBypass }),
                ...(v.hasActiveBranches === undefined
                    ? null
                    : { hasActiveBranches: v.hasActiveBranches }),
                ...(v.trustedIps === undefined ? null : { trustedIps: v.trustedIps }),
                ...(v.gitComments === undefined ? null : { gitComments: v.gitComments }),
                ...(v.paused === undefined ? null : { paused: v.paused }),
                ...(v.concurrencyBucketName === undefined
                    ? null
                    : { concurrencyBucketName: v.concurrencyBucketName }),
                ...(v.webAnalytics === undefined ? null : { webAnalytics: v.webAnalytics }),
                ...(v.security === undefined ? null : { security: v.security }),
                ...(v.oidcTokenConfig === undefined
                    ? null
                    : { oidcTokenConfig: v.oidcTokenConfig }),
            };
        });

    export type Outbound = {
        accountId: string;
        analytics?: Analytics$.Outbound | undefined;
        speedInsights?: SpeedInsights$.Outbound | undefined;
        autoExposeSystemEnvs?: boolean | undefined;
        autoAssignCustomDomains?: boolean | undefined;
        autoAssignCustomDomainsUpdatedBy?: string | undefined;
        buildCommand?: string | null | undefined;
        commandForIgnoringBuildStep?: string | null | undefined;
        connectConfigurationId?: string | null | undefined;
        connectBuildsEnabled?: boolean | undefined;
        createdAt?: number | undefined;
        customerSupportCodeVisibility?: boolean | undefined;
        crons?: Crons$.Outbound | undefined;
        dataCache?: DataCache$.Outbound | undefined;
        devCommand?: string | null | undefined;
        directoryListing: boolean;
        installCommand?: string | null | undefined;
        env?: Array<Env$.Outbound> | undefined;
        framework?: UpdateProjectDataCacheFramework | null | undefined;
        gitForkProtection?: boolean | undefined;
        gitLFS?: boolean | undefined;
        id: string;
        latestDeployments?: Array<LatestDeployments$.Outbound> | undefined;
        link?: Link1$.Outbound | Link2$.Outbound | Link3$.Outbound | undefined;
        name: string;
        nodeVersion: UpdateProjectDataCacheNodeVersion;
        optionsAllowlist?: UpdateProjectDataCacheOptionsAllowlist$.Outbound | null | undefined;
        outputDirectory?: string | null | undefined;
        passiveConnectConfigurationId?: string | null | undefined;
        passwordProtection?: UpdateProjectDataCachePasswordProtection$.Outbound | null | undefined;
        productionDeploymentsFastLane?: boolean | undefined;
        publicSource?: boolean | null | undefined;
        rootDirectory?: string | null | undefined;
        serverlessFunctionRegion?: string | null | undefined;
        serverlessFunctionZeroConfigFailover?: boolean | undefined;
        skewProtectionBoundaryAt?: number | undefined;
        skewProtectionMaxAge?: number | undefined;
        skipGitConnectDuringLink?: boolean | undefined;
        sourceFilesOutsideRootDirectory?: boolean | undefined;
        ssoProtection?: UpdateProjectDataCacheSsoProtection$.Outbound | null | undefined;
        targets?: Record<string, string | Array<string>> | undefined;
        transferCompletedAt?: number | undefined;
        transferStartedAt?: number | undefined;
        transferToAccountId?: string | undefined;
        transferredFromAccountId?: string | undefined;
        updatedAt?: number | undefined;
        live?: boolean | undefined;
        enablePreviewFeedback?: boolean | null | undefined;
        permissions?: Permissions$.Outbound | undefined;
        lastRollbackTarget?: LastRollbackTarget$.Outbound | null | undefined;
        lastAliasRequest?: LastAliasRequest$.Outbound | null | undefined;
        hasFloatingAliases?: boolean | undefined;
        protectionBypass?: Record<string, ProtectionBypass$.Outbound> | undefined;
        hasActiveBranches?: boolean | undefined;
        trustedIps?: TrustedIps2$.Outbound | TrustedIps1$.Outbound | null | undefined;
        gitComments?: GitComments$.Outbound | undefined;
        paused?: boolean | undefined;
        concurrencyBucketName?: string | undefined;
        webAnalytics?: WebAnalytics$.Outbound | undefined;
        security?: Security$.Outbound | undefined;
        oidcTokenConfig?: OidcTokenConfig$.Outbound | undefined;
    };

    export const outboundSchema: z.ZodType<
        Outbound,
        z.ZodTypeDef,
        UpdateProjectDataCacheResponseBody
    > = z
        .object({
            accountId: z.string(),
            analytics: z.lazy(() => Analytics$.outboundSchema).optional(),
            speedInsights: z.lazy(() => SpeedInsights$.outboundSchema).optional(),
            autoExposeSystemEnvs: z.boolean().optional(),
            autoAssignCustomDomains: z.boolean().optional(),
            autoAssignCustomDomainsUpdatedBy: z.string().optional(),
            buildCommand: z.nullable(z.string()).optional(),
            commandForIgnoringBuildStep: z.nullable(z.string()).optional(),
            connectConfigurationId: z.nullable(z.string()).optional(),
            connectBuildsEnabled: z.boolean().optional(),
            createdAt: z.number().optional(),
            customerSupportCodeVisibility: z.boolean().optional(),
            crons: z.lazy(() => Crons$.outboundSchema).optional(),
            dataCache: z.lazy(() => DataCache$.outboundSchema).optional(),
            devCommand: z.nullable(z.string()).optional(),
            directoryListing: z.boolean(),
            installCommand: z.nullable(z.string()).optional(),
            env: z.array(z.lazy(() => Env$.outboundSchema)).optional(),
            framework: z.nullable(UpdateProjectDataCacheFramework$).optional(),
            gitForkProtection: z.boolean().optional(),
            gitLFS: z.boolean().optional(),
            id: z.string(),
            latestDeployments: z.array(z.lazy(() => LatestDeployments$.outboundSchema)).optional(),
            link: z
                .union([
                    z.lazy(() => Link1$.outboundSchema),
                    z.lazy(() => Link2$.outboundSchema),
                    z.lazy(() => Link3$.outboundSchema),
                ])
                .optional(),
            name: z.string(),
            nodeVersion: UpdateProjectDataCacheNodeVersion$,
            optionsAllowlist: z
                .nullable(z.lazy(() => UpdateProjectDataCacheOptionsAllowlist$.outboundSchema))
                .optional(),
            outputDirectory: z.nullable(z.string()).optional(),
            passiveConnectConfigurationId: z.nullable(z.string()).optional(),
            passwordProtection: z
                .nullable(z.lazy(() => UpdateProjectDataCachePasswordProtection$.outboundSchema))
                .optional(),
            productionDeploymentsFastLane: z.boolean().optional(),
            publicSource: z.nullable(z.boolean()).optional(),
            rootDirectory: z.nullable(z.string()).optional(),
            serverlessFunctionRegion: z.nullable(z.string()).optional(),
            serverlessFunctionZeroConfigFailover: z.boolean().optional(),
            skewProtectionBoundaryAt: z.number().optional(),
            skewProtectionMaxAge: z.number().optional(),
            skipGitConnectDuringLink: z.boolean().optional(),
            sourceFilesOutsideRootDirectory: z.boolean().optional(),
            ssoProtection: z
                .nullable(z.lazy(() => UpdateProjectDataCacheSsoProtection$.outboundSchema))
                .optional(),
            targets: z.record(z.union([z.string(), z.array(z.string())])).optional(),
            transferCompletedAt: z.number().optional(),
            transferStartedAt: z.number().optional(),
            transferToAccountId: z.string().optional(),
            transferredFromAccountId: z.string().optional(),
            updatedAt: z.number().optional(),
            live: z.boolean().optional(),
            enablePreviewFeedback: z.nullable(z.boolean()).optional(),
            permissions: z.lazy(() => Permissions$.outboundSchema).optional(),
            lastRollbackTarget: z
                .nullable(z.lazy(() => LastRollbackTarget$.outboundSchema))
                .optional(),
            lastAliasRequest: z.nullable(z.lazy(() => LastAliasRequest$.outboundSchema)).optional(),
            hasFloatingAliases: z.boolean().optional(),
            protectionBypass: z.record(z.lazy(() => ProtectionBypass$.outboundSchema)).optional(),
            hasActiveBranches: z.boolean().optional(),
            trustedIps: z
                .nullable(
                    z.union([
                        z.lazy(() => TrustedIps2$.outboundSchema),
                        z.lazy(() => TrustedIps1$.outboundSchema),
                    ])
                )
                .optional(),
            gitComments: z.lazy(() => GitComments$.outboundSchema).optional(),
            paused: z.boolean().optional(),
            concurrencyBucketName: z.string().optional(),
            webAnalytics: z.lazy(() => WebAnalytics$.outboundSchema).optional(),
            security: z.lazy(() => Security$.outboundSchema).optional(),
            oidcTokenConfig: z.lazy(() => OidcTokenConfig$.outboundSchema).optional(),
        })
        .transform((v) => {
            return {
                accountId: v.accountId,
                ...(v.analytics === undefined ? null : { analytics: v.analytics }),
                ...(v.speedInsights === undefined ? null : { speedInsights: v.speedInsights }),
                ...(v.autoExposeSystemEnvs === undefined
                    ? null
                    : { autoExposeSystemEnvs: v.autoExposeSystemEnvs }),
                ...(v.autoAssignCustomDomains === undefined
                    ? null
                    : { autoAssignCustomDomains: v.autoAssignCustomDomains }),
                ...(v.autoAssignCustomDomainsUpdatedBy === undefined
                    ? null
                    : { autoAssignCustomDomainsUpdatedBy: v.autoAssignCustomDomainsUpdatedBy }),
                ...(v.buildCommand === undefined ? null : { buildCommand: v.buildCommand }),
                ...(v.commandForIgnoringBuildStep === undefined
                    ? null
                    : { commandForIgnoringBuildStep: v.commandForIgnoringBuildStep }),
                ...(v.connectConfigurationId === undefined
                    ? null
                    : { connectConfigurationId: v.connectConfigurationId }),
                ...(v.connectBuildsEnabled === undefined
                    ? null
                    : { connectBuildsEnabled: v.connectBuildsEnabled }),
                ...(v.createdAt === undefined ? null : { createdAt: v.createdAt }),
                ...(v.customerSupportCodeVisibility === undefined
                    ? null
                    : { customerSupportCodeVisibility: v.customerSupportCodeVisibility }),
                ...(v.crons === undefined ? null : { crons: v.crons }),
                ...(v.dataCache === undefined ? null : { dataCache: v.dataCache }),
                ...(v.devCommand === undefined ? null : { devCommand: v.devCommand }),
                directoryListing: v.directoryListing,
                ...(v.installCommand === undefined ? null : { installCommand: v.installCommand }),
                ...(v.env === undefined ? null : { env: v.env }),
                ...(v.framework === undefined ? null : { framework: v.framework }),
                ...(v.gitForkProtection === undefined
                    ? null
                    : { gitForkProtection: v.gitForkProtection }),
                ...(v.gitLFS === undefined ? null : { gitLFS: v.gitLFS }),
                id: v.id,
                ...(v.latestDeployments === undefined
                    ? null
                    : { latestDeployments: v.latestDeployments }),
                ...(v.link === undefined ? null : { link: v.link }),
                name: v.name,
                nodeVersion: v.nodeVersion,
                ...(v.optionsAllowlist === undefined
                    ? null
                    : { optionsAllowlist: v.optionsAllowlist }),
                ...(v.outputDirectory === undefined
                    ? null
                    : { outputDirectory: v.outputDirectory }),
                ...(v.passiveConnectConfigurationId === undefined
                    ? null
                    : { passiveConnectConfigurationId: v.passiveConnectConfigurationId }),
                ...(v.passwordProtection === undefined
                    ? null
                    : { passwordProtection: v.passwordProtection }),
                ...(v.productionDeploymentsFastLane === undefined
                    ? null
                    : { productionDeploymentsFastLane: v.productionDeploymentsFastLane }),
                ...(v.publicSource === undefined ? null : { publicSource: v.publicSource }),
                ...(v.rootDirectory === undefined ? null : { rootDirectory: v.rootDirectory }),
                ...(v.serverlessFunctionRegion === undefined
                    ? null
                    : { serverlessFunctionRegion: v.serverlessFunctionRegion }),
                ...(v.serverlessFunctionZeroConfigFailover === undefined
                    ? null
                    : {
                          serverlessFunctionZeroConfigFailover:
                              v.serverlessFunctionZeroConfigFailover,
                      }),
                ...(v.skewProtectionBoundaryAt === undefined
                    ? null
                    : { skewProtectionBoundaryAt: v.skewProtectionBoundaryAt }),
                ...(v.skewProtectionMaxAge === undefined
                    ? null
                    : { skewProtectionMaxAge: v.skewProtectionMaxAge }),
                ...(v.skipGitConnectDuringLink === undefined
                    ? null
                    : { skipGitConnectDuringLink: v.skipGitConnectDuringLink }),
                ...(v.sourceFilesOutsideRootDirectory === undefined
                    ? null
                    : { sourceFilesOutsideRootDirectory: v.sourceFilesOutsideRootDirectory }),
                ...(v.ssoProtection === undefined ? null : { ssoProtection: v.ssoProtection }),
                ...(v.targets === undefined ? null : { targets: v.targets }),
                ...(v.transferCompletedAt === undefined
                    ? null
                    : { transferCompletedAt: v.transferCompletedAt }),
                ...(v.transferStartedAt === undefined
                    ? null
                    : { transferStartedAt: v.transferStartedAt }),
                ...(v.transferToAccountId === undefined
                    ? null
                    : { transferToAccountId: v.transferToAccountId }),
                ...(v.transferredFromAccountId === undefined
                    ? null
                    : { transferredFromAccountId: v.transferredFromAccountId }),
                ...(v.updatedAt === undefined ? null : { updatedAt: v.updatedAt }),
                ...(v.live === undefined ? null : { live: v.live }),
                ...(v.enablePreviewFeedback === undefined
                    ? null
                    : { enablePreviewFeedback: v.enablePreviewFeedback }),
                ...(v.permissions === undefined ? null : { permissions: v.permissions }),
                ...(v.lastRollbackTarget === undefined
                    ? null
                    : { lastRollbackTarget: v.lastRollbackTarget }),
                ...(v.lastAliasRequest === undefined
                    ? null
                    : { lastAliasRequest: v.lastAliasRequest }),
                ...(v.hasFloatingAliases === undefined
                    ? null
                    : { hasFloatingAliases: v.hasFloatingAliases }),
                ...(v.protectionBypass === undefined
                    ? null
                    : { protectionBypass: v.protectionBypass }),
                ...(v.hasActiveBranches === undefined
                    ? null
                    : { hasActiveBranches: v.hasActiveBranches }),
                ...(v.trustedIps === undefined ? null : { trustedIps: v.trustedIps }),
                ...(v.gitComments === undefined ? null : { gitComments: v.gitComments }),
                ...(v.paused === undefined ? null : { paused: v.paused }),
                ...(v.concurrencyBucketName === undefined
                    ? null
                    : { concurrencyBucketName: v.concurrencyBucketName }),
                ...(v.webAnalytics === undefined ? null : { webAnalytics: v.webAnalytics }),
                ...(v.security === undefined ? null : { security: v.security }),
                ...(v.oidcTokenConfig === undefined
                    ? null
                    : { oidcTokenConfig: v.oidcTokenConfig }),
            };
        });
}

/** @internal */
export namespace UpdateProjectDataCacheResponse$ {
    export const inboundSchema: z.ZodType<UpdateProjectDataCacheResponse, z.ZodTypeDef, unknown> = z
        .object({
            HttpMeta: components.HTTPMetadata$.inboundSchema,
            object: z.lazy(() => UpdateProjectDataCacheResponseBody$.inboundSchema).optional(),
        })
        .transform((v) => {
            return {
                httpMeta: v.HttpMeta,
                ...(v.object === undefined ? null : { object: v.object }),
            };
        });

    export type Outbound = {
        HttpMeta: components.HTTPMetadata$.Outbound;
        object?: UpdateProjectDataCacheResponseBody$.Outbound | undefined;
    };

    export const outboundSchema: z.ZodType<Outbound, z.ZodTypeDef, UpdateProjectDataCacheResponse> =
        z
            .object({
                httpMeta: components.HTTPMetadata$.outboundSchema,
                object: z.lazy(() => UpdateProjectDataCacheResponseBody$.outboundSchema).optional(),
            })
            .transform((v) => {
                return {
                    HttpMeta: v.httpMeta,
                    ...(v.object === undefined ? null : { object: v.object }),
                };
            });
}
