/*
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

import * as components from "../components";
import * as z from "zod";

export type GetTeamRequest = {
    /**
     * The Team identifier to perform the request on behalf of.
     */
    teamId: string;
    /**
     * The Team slug to perform the request on behalf of.
     */
    slug?: string | undefined;
};

export type GetTeamResponse = {
    httpMeta: components.HTTPMetadata;
    /**
     * The requested team
     */
    team?: components.Team | undefined;
};

/** @internal */
export namespace GetTeamRequest$ {
    export const inboundSchema: z.ZodType<GetTeamRequest, z.ZodTypeDef, unknown> = z
        .object({
            teamId: z.string(),
            slug: z.string().optional(),
        })
        .transform((v) => {
            return {
                teamId: v.teamId,
                ...(v.slug === undefined ? null : { slug: v.slug }),
            };
        });

    export type Outbound = {
        teamId: string;
        slug?: string | undefined;
    };

    export const outboundSchema: z.ZodType<Outbound, z.ZodTypeDef, GetTeamRequest> = z
        .object({
            teamId: z.string(),
            slug: z.string().optional(),
        })
        .transform((v) => {
            return {
                teamId: v.teamId,
                ...(v.slug === undefined ? null : { slug: v.slug }),
            };
        });
}

/** @internal */
export namespace GetTeamResponse$ {
    export const inboundSchema: z.ZodType<GetTeamResponse, z.ZodTypeDef, unknown> = z
        .object({
            HttpMeta: components.HTTPMetadata$.inboundSchema,
            Team: components.Team$.inboundSchema.optional(),
        })
        .transform((v) => {
            return {
                httpMeta: v.HttpMeta,
                ...(v.Team === undefined ? null : { team: v.Team }),
            };
        });

    export type Outbound = {
        HttpMeta: components.HTTPMetadata$.Outbound;
        Team?: components.Team$.Outbound | undefined;
    };

    export const outboundSchema: z.ZodType<Outbound, z.ZodTypeDef, GetTeamResponse> = z
        .object({
            httpMeta: components.HTTPMetadata$.outboundSchema,
            team: components.Team$.outboundSchema.optional(),
        })
        .transform((v) => {
            return {
                HttpMeta: v.httpMeta,
                ...(v.team === undefined ? null : { Team: v.team }),
            };
        });
}
