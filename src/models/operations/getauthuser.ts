/*
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

import * as components from "../components";
import * as z from "zod";

export type User = components.AuthUserLimited | components.AuthUser;

/**
 * Successful response.
 */
export type GetAuthUserResponseBody = {
    user: components.AuthUserLimited | components.AuthUser;
};

export type GetAuthUserResponse = {
    httpMeta: components.HTTPMetadata;
    /**
     * Successful response.
     */
    object?: GetAuthUserResponseBody | undefined;
};

/** @internal */
export namespace User$ {
    export const inboundSchema: z.ZodType<User, z.ZodTypeDef, unknown> = z.union([
        components.AuthUserLimited$.inboundSchema,
        components.AuthUser$.inboundSchema,
    ]);

    export type Outbound = components.AuthUserLimited$.Outbound | components.AuthUser$.Outbound;
    export const outboundSchema: z.ZodType<Outbound, z.ZodTypeDef, User> = z.union([
        components.AuthUserLimited$.outboundSchema,
        components.AuthUser$.outboundSchema,
    ]);
}

/** @internal */
export namespace GetAuthUserResponseBody$ {
    export const inboundSchema: z.ZodType<GetAuthUserResponseBody, z.ZodTypeDef, unknown> = z
        .object({
            user: z.union([
                components.AuthUserLimited$.inboundSchema,
                components.AuthUser$.inboundSchema,
            ]),
        })
        .transform((v) => {
            return {
                user: v.user,
            };
        });

    export type Outbound = {
        user: components.AuthUserLimited$.Outbound | components.AuthUser$.Outbound;
    };

    export const outboundSchema: z.ZodType<Outbound, z.ZodTypeDef, GetAuthUserResponseBody> = z
        .object({
            user: z.union([
                components.AuthUserLimited$.outboundSchema,
                components.AuthUser$.outboundSchema,
            ]),
        })
        .transform((v) => {
            return {
                user: v.user,
            };
        });
}

/** @internal */
export namespace GetAuthUserResponse$ {
    export const inboundSchema: z.ZodType<GetAuthUserResponse, z.ZodTypeDef, unknown> = z
        .object({
            HttpMeta: components.HTTPMetadata$.inboundSchema,
            object: z.lazy(() => GetAuthUserResponseBody$.inboundSchema).optional(),
        })
        .transform((v) => {
            return {
                httpMeta: v.HttpMeta,
                ...(v.object === undefined ? null : { object: v.object }),
            };
        });

    export type Outbound = {
        HttpMeta: components.HTTPMetadata$.Outbound;
        object?: GetAuthUserResponseBody$.Outbound | undefined;
    };

    export const outboundSchema: z.ZodType<Outbound, z.ZodTypeDef, GetAuthUserResponse> = z
        .object({
            httpMeta: components.HTTPMetadata$.outboundSchema,
            object: z.lazy(() => GetAuthUserResponseBody$.outboundSchema).optional(),
        })
        .transform((v) => {
            return {
                HttpMeta: v.httpMeta,
                ...(v.object === undefined ? null : { object: v.object }),
            };
        });
}
