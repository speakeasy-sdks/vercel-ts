/*
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

import * as components from "../components";
import * as z from "zod";

/**
 * transfer-in
 */
export type CreateOrTransferDomainRequestBody3 = {
    /**
     * The domain name you want to add.
     */
    name: string;
    /**
     * The domain operation to perform. It can be either `add` or `transfer-in`.
     */
    method: string;
    /**
     * The authorization code assigned to the domain.
     */
    authCode?: string | undefined;
    /**
     * The price you expect to be charged for the required 1 year renewal.
     */
    expectedPrice?: number | undefined;
};

/**
 * move-in
 */
export type CreateOrTransferDomainRequestBody2 = {
    /**
     * The domain name you want to add.
     */
    name: string;
    /**
     * The domain operation to perform. It can be either `add` or `transfer-in`.
     */
    method: string;
    /**
     * The move-in token from Move Requested email.
     */
    token?: string | undefined;
};

/**
 * add
 */
export type CreateOrTransferDomainRequestBody1 = {
    /**
     * The domain name you want to add.
     */
    name: string;
    /**
     * Whether the domain has the Vercel Edge Network enabled or not.
     */
    cdnEnabled?: boolean | undefined;
    zone?: boolean | undefined;
    /**
     * The domain operation to perform. It can be either `add` or `transfer-in`.
     */
    method?: string | undefined;
};

export type CreateOrTransferDomainRequestBody =
    | CreateOrTransferDomainRequestBody2
    | CreateOrTransferDomainRequestBody1
    | CreateOrTransferDomainRequestBody3;

export type CreateOrTransferDomainRequest = {
    /**
     * The Team identifier to perform the request on behalf of.
     */
    teamId?: string | undefined;
    /**
     * The Team slug to perform the request on behalf of.
     */
    slug?: string | undefined;
    requestBody?:
        | CreateOrTransferDomainRequestBody2
        | CreateOrTransferDomainRequestBody1
        | CreateOrTransferDomainRequestBody3
        | undefined;
};

/**
 * An object containing information of the domain creator, including the user's id, username, and email.
 */
export type CreateOrTransferDomainCreator = {
    username: string;
    email: string;
    customerId?: string | null | undefined;
    isDomainReseller?: boolean | undefined;
    id: string;
};

/**
 * The type of service the domain is handled by. `external` if the DNS is externally handled, `zeit.world` if handled with Vercel, or `na` if the service is not available.
 */
export enum CreateOrTransferDomainServiceType {
    ZeitWorld = "zeit.world",
    External = "external",
    Na = "na",
}

export type CreateOrTransferDomainDomain = {
    /**
     * If the domain has the ownership verified.
     */
    verified: boolean;
    /**
     * A list of the current nameservers of the domain.
     */
    nameservers: Array<string>;
    /**
     * A list of the intended nameservers for the domain to point to Vercel DNS.
     */
    intendedNameservers: Array<string>;
    /**
     * A list of custom nameservers for the domain to point to. Only applies to domains purchased with Vercel.
     */
    customNameservers?: Array<string> | undefined;
    /**
     * An object containing information of the domain creator, including the user's id, username, and email.
     */
    creator: CreateOrTransferDomainCreator;
    /**
     * If it was purchased through Vercel, the timestamp in milliseconds when it was purchased.
     */
    boughtAt: number | null;
    /**
     * Timestamp in milliseconds when the domain was created in the registry.
     */
    createdAt: number;
    /**
     * Timestamp in milliseconds at which the domain is set to expire. `null` if not bought with Vercel.
     */
    expiresAt: number | null;
    /**
     * The unique identifier of the domain.
     */
    id: string;
    /**
     * The domain name.
     */
    name: string;
    /**
     * Timestamp in milliseconds at which the domain was ordered.
     */
    orderedAt?: number | undefined;
    /**
     * Indicates whether the domain is set to automatically renew.
     */
    renew?: boolean | undefined;
    /**
     * The type of service the domain is handled by. `external` if the DNS is externally handled, `zeit.world` if handled with Vercel, or `na` if the service is not available.
     */
    serviceType: CreateOrTransferDomainServiceType;
    /**
     * Timestamp in milliseconds at which the domain was successfully transferred into Vercel. `null` if the transfer is still processing or was never transferred in.
     */
    transferredAt?: number | null | undefined;
    /**
     * If transferred into Vercel, timestamp in milliseconds when the domain transfer was initiated.
     */
    transferStartedAt?: number | undefined;
};

export type CreateOrTransferDomainResponseBody = {
    domain: CreateOrTransferDomainDomain;
};

export type CreateOrTransferDomainResponse = {
    httpMeta: components.HTTPMetadata;
    object?: CreateOrTransferDomainResponseBody | undefined;
};

/** @internal */
export namespace CreateOrTransferDomainRequestBody3$ {
    export const inboundSchema: z.ZodType<
        CreateOrTransferDomainRequestBody3,
        z.ZodTypeDef,
        unknown
    > = z
        .object({
            name: z.string(),
            method: z.string(),
            authCode: z.string().optional(),
            expectedPrice: z.number().optional(),
        })
        .transform((v) => {
            return {
                name: v.name,
                method: v.method,
                ...(v.authCode === undefined ? null : { authCode: v.authCode }),
                ...(v.expectedPrice === undefined ? null : { expectedPrice: v.expectedPrice }),
            };
        });

    export type Outbound = {
        name: string;
        method: string;
        authCode?: string | undefined;
        expectedPrice?: number | undefined;
    };

    export const outboundSchema: z.ZodType<
        Outbound,
        z.ZodTypeDef,
        CreateOrTransferDomainRequestBody3
    > = z
        .object({
            name: z.string(),
            method: z.string(),
            authCode: z.string().optional(),
            expectedPrice: z.number().optional(),
        })
        .transform((v) => {
            return {
                name: v.name,
                method: v.method,
                ...(v.authCode === undefined ? null : { authCode: v.authCode }),
                ...(v.expectedPrice === undefined ? null : { expectedPrice: v.expectedPrice }),
            };
        });
}

/** @internal */
export namespace CreateOrTransferDomainRequestBody2$ {
    export const inboundSchema: z.ZodType<
        CreateOrTransferDomainRequestBody2,
        z.ZodTypeDef,
        unknown
    > = z
        .object({
            name: z.string(),
            method: z.string(),
            token: z.string().optional(),
        })
        .transform((v) => {
            return {
                name: v.name,
                method: v.method,
                ...(v.token === undefined ? null : { token: v.token }),
            };
        });

    export type Outbound = {
        name: string;
        method: string;
        token?: string | undefined;
    };

    export const outboundSchema: z.ZodType<
        Outbound,
        z.ZodTypeDef,
        CreateOrTransferDomainRequestBody2
    > = z
        .object({
            name: z.string(),
            method: z.string(),
            token: z.string().optional(),
        })
        .transform((v) => {
            return {
                name: v.name,
                method: v.method,
                ...(v.token === undefined ? null : { token: v.token }),
            };
        });
}

/** @internal */
export namespace CreateOrTransferDomainRequestBody1$ {
    export const inboundSchema: z.ZodType<
        CreateOrTransferDomainRequestBody1,
        z.ZodTypeDef,
        unknown
    > = z
        .object({
            name: z.string(),
            cdnEnabled: z.boolean().optional(),
            zone: z.boolean().optional(),
            method: z.string().optional(),
        })
        .transform((v) => {
            return {
                name: v.name,
                ...(v.cdnEnabled === undefined ? null : { cdnEnabled: v.cdnEnabled }),
                ...(v.zone === undefined ? null : { zone: v.zone }),
                ...(v.method === undefined ? null : { method: v.method }),
            };
        });

    export type Outbound = {
        name: string;
        cdnEnabled?: boolean | undefined;
        zone?: boolean | undefined;
        method?: string | undefined;
    };

    export const outboundSchema: z.ZodType<
        Outbound,
        z.ZodTypeDef,
        CreateOrTransferDomainRequestBody1
    > = z
        .object({
            name: z.string(),
            cdnEnabled: z.boolean().optional(),
            zone: z.boolean().optional(),
            method: z.string().optional(),
        })
        .transform((v) => {
            return {
                name: v.name,
                ...(v.cdnEnabled === undefined ? null : { cdnEnabled: v.cdnEnabled }),
                ...(v.zone === undefined ? null : { zone: v.zone }),
                ...(v.method === undefined ? null : { method: v.method }),
            };
        });
}

/** @internal */
export namespace CreateOrTransferDomainRequestBody$ {
    export const inboundSchema: z.ZodType<
        CreateOrTransferDomainRequestBody,
        z.ZodTypeDef,
        unknown
    > = z.union([
        z.lazy(() => CreateOrTransferDomainRequestBody2$.inboundSchema),
        z.lazy(() => CreateOrTransferDomainRequestBody1$.inboundSchema),
        z.lazy(() => CreateOrTransferDomainRequestBody3$.inboundSchema),
    ]);

    export type Outbound =
        | CreateOrTransferDomainRequestBody2$.Outbound
        | CreateOrTransferDomainRequestBody1$.Outbound
        | CreateOrTransferDomainRequestBody3$.Outbound;
    export const outboundSchema: z.ZodType<
        Outbound,
        z.ZodTypeDef,
        CreateOrTransferDomainRequestBody
    > = z.union([
        z.lazy(() => CreateOrTransferDomainRequestBody2$.outboundSchema),
        z.lazy(() => CreateOrTransferDomainRequestBody1$.outboundSchema),
        z.lazy(() => CreateOrTransferDomainRequestBody3$.outboundSchema),
    ]);
}

/** @internal */
export namespace CreateOrTransferDomainRequest$ {
    export const inboundSchema: z.ZodType<CreateOrTransferDomainRequest, z.ZodTypeDef, unknown> = z
        .object({
            teamId: z.string().optional(),
            slug: z.string().optional(),
            RequestBody: z
                .union([
                    z.lazy(() => CreateOrTransferDomainRequestBody2$.inboundSchema),
                    z.lazy(() => CreateOrTransferDomainRequestBody1$.inboundSchema),
                    z.lazy(() => CreateOrTransferDomainRequestBody3$.inboundSchema),
                ])
                .optional(),
        })
        .transform((v) => {
            return {
                ...(v.teamId === undefined ? null : { teamId: v.teamId }),
                ...(v.slug === undefined ? null : { slug: v.slug }),
                ...(v.RequestBody === undefined ? null : { requestBody: v.RequestBody }),
            };
        });

    export type Outbound = {
        teamId?: string | undefined;
        slug?: string | undefined;
        RequestBody?:
            | CreateOrTransferDomainRequestBody2$.Outbound
            | CreateOrTransferDomainRequestBody1$.Outbound
            | CreateOrTransferDomainRequestBody3$.Outbound
            | undefined;
    };

    export const outboundSchema: z.ZodType<Outbound, z.ZodTypeDef, CreateOrTransferDomainRequest> =
        z
            .object({
                teamId: z.string().optional(),
                slug: z.string().optional(),
                requestBody: z
                    .union([
                        z.lazy(() => CreateOrTransferDomainRequestBody2$.outboundSchema),
                        z.lazy(() => CreateOrTransferDomainRequestBody1$.outboundSchema),
                        z.lazy(() => CreateOrTransferDomainRequestBody3$.outboundSchema),
                    ])
                    .optional(),
            })
            .transform((v) => {
                return {
                    ...(v.teamId === undefined ? null : { teamId: v.teamId }),
                    ...(v.slug === undefined ? null : { slug: v.slug }),
                    ...(v.requestBody === undefined ? null : { RequestBody: v.requestBody }),
                };
            });
}

/** @internal */
export namespace CreateOrTransferDomainCreator$ {
    export const inboundSchema: z.ZodType<CreateOrTransferDomainCreator, z.ZodTypeDef, unknown> = z
        .object({
            username: z.string(),
            email: z.string(),
            customerId: z.nullable(z.string()).optional(),
            isDomainReseller: z.boolean().optional(),
            id: z.string(),
        })
        .transform((v) => {
            return {
                username: v.username,
                email: v.email,
                ...(v.customerId === undefined ? null : { customerId: v.customerId }),
                ...(v.isDomainReseller === undefined
                    ? null
                    : { isDomainReseller: v.isDomainReseller }),
                id: v.id,
            };
        });

    export type Outbound = {
        username: string;
        email: string;
        customerId?: string | null | undefined;
        isDomainReseller?: boolean | undefined;
        id: string;
    };

    export const outboundSchema: z.ZodType<Outbound, z.ZodTypeDef, CreateOrTransferDomainCreator> =
        z
            .object({
                username: z.string(),
                email: z.string(),
                customerId: z.nullable(z.string()).optional(),
                isDomainReseller: z.boolean().optional(),
                id: z.string(),
            })
            .transform((v) => {
                return {
                    username: v.username,
                    email: v.email,
                    ...(v.customerId === undefined ? null : { customerId: v.customerId }),
                    ...(v.isDomainReseller === undefined
                        ? null
                        : { isDomainReseller: v.isDomainReseller }),
                    id: v.id,
                };
            });
}

/** @internal */
export const CreateOrTransferDomainServiceType$: z.ZodNativeEnum<
    typeof CreateOrTransferDomainServiceType
> = z.nativeEnum(CreateOrTransferDomainServiceType);

/** @internal */
export namespace CreateOrTransferDomainDomain$ {
    export const inboundSchema: z.ZodType<CreateOrTransferDomainDomain, z.ZodTypeDef, unknown> = z
        .object({
            verified: z.boolean(),
            nameservers: z.array(z.string()),
            intendedNameservers: z.array(z.string()),
            customNameservers: z.array(z.string()).optional(),
            creator: z.lazy(() => CreateOrTransferDomainCreator$.inboundSchema),
            boughtAt: z.nullable(z.number()),
            createdAt: z.number(),
            expiresAt: z.nullable(z.number()),
            id: z.string(),
            name: z.string(),
            orderedAt: z.number().optional(),
            renew: z.boolean().optional(),
            serviceType: CreateOrTransferDomainServiceType$,
            transferredAt: z.nullable(z.number()).optional(),
            transferStartedAt: z.number().optional(),
        })
        .transform((v) => {
            return {
                verified: v.verified,
                nameservers: v.nameservers,
                intendedNameservers: v.intendedNameservers,
                ...(v.customNameservers === undefined
                    ? null
                    : { customNameservers: v.customNameservers }),
                creator: v.creator,
                boughtAt: v.boughtAt,
                createdAt: v.createdAt,
                expiresAt: v.expiresAt,
                id: v.id,
                name: v.name,
                ...(v.orderedAt === undefined ? null : { orderedAt: v.orderedAt }),
                ...(v.renew === undefined ? null : { renew: v.renew }),
                serviceType: v.serviceType,
                ...(v.transferredAt === undefined ? null : { transferredAt: v.transferredAt }),
                ...(v.transferStartedAt === undefined
                    ? null
                    : { transferStartedAt: v.transferStartedAt }),
            };
        });

    export type Outbound = {
        verified: boolean;
        nameservers: Array<string>;
        intendedNameservers: Array<string>;
        customNameservers?: Array<string> | undefined;
        creator: CreateOrTransferDomainCreator$.Outbound;
        boughtAt: number | null;
        createdAt: number;
        expiresAt: number | null;
        id: string;
        name: string;
        orderedAt?: number | undefined;
        renew?: boolean | undefined;
        serviceType: CreateOrTransferDomainServiceType;
        transferredAt?: number | null | undefined;
        transferStartedAt?: number | undefined;
    };

    export const outboundSchema: z.ZodType<Outbound, z.ZodTypeDef, CreateOrTransferDomainDomain> = z
        .object({
            verified: z.boolean(),
            nameservers: z.array(z.string()),
            intendedNameservers: z.array(z.string()),
            customNameservers: z.array(z.string()).optional(),
            creator: z.lazy(() => CreateOrTransferDomainCreator$.outboundSchema),
            boughtAt: z.nullable(z.number()),
            createdAt: z.number(),
            expiresAt: z.nullable(z.number()),
            id: z.string(),
            name: z.string(),
            orderedAt: z.number().optional(),
            renew: z.boolean().optional(),
            serviceType: CreateOrTransferDomainServiceType$,
            transferredAt: z.nullable(z.number()).optional(),
            transferStartedAt: z.number().optional(),
        })
        .transform((v) => {
            return {
                verified: v.verified,
                nameservers: v.nameservers,
                intendedNameservers: v.intendedNameservers,
                ...(v.customNameservers === undefined
                    ? null
                    : { customNameservers: v.customNameservers }),
                creator: v.creator,
                boughtAt: v.boughtAt,
                createdAt: v.createdAt,
                expiresAt: v.expiresAt,
                id: v.id,
                name: v.name,
                ...(v.orderedAt === undefined ? null : { orderedAt: v.orderedAt }),
                ...(v.renew === undefined ? null : { renew: v.renew }),
                serviceType: v.serviceType,
                ...(v.transferredAt === undefined ? null : { transferredAt: v.transferredAt }),
                ...(v.transferStartedAt === undefined
                    ? null
                    : { transferStartedAt: v.transferStartedAt }),
            };
        });
}

/** @internal */
export namespace CreateOrTransferDomainResponseBody$ {
    export const inboundSchema: z.ZodType<
        CreateOrTransferDomainResponseBody,
        z.ZodTypeDef,
        unknown
    > = z
        .object({
            domain: z.lazy(() => CreateOrTransferDomainDomain$.inboundSchema),
        })
        .transform((v) => {
            return {
                domain: v.domain,
            };
        });

    export type Outbound = {
        domain: CreateOrTransferDomainDomain$.Outbound;
    };

    export const outboundSchema: z.ZodType<
        Outbound,
        z.ZodTypeDef,
        CreateOrTransferDomainResponseBody
    > = z
        .object({
            domain: z.lazy(() => CreateOrTransferDomainDomain$.outboundSchema),
        })
        .transform((v) => {
            return {
                domain: v.domain,
            };
        });
}

/** @internal */
export namespace CreateOrTransferDomainResponse$ {
    export const inboundSchema: z.ZodType<CreateOrTransferDomainResponse, z.ZodTypeDef, unknown> = z
        .object({
            HttpMeta: components.HTTPMetadata$.inboundSchema,
            object: z.lazy(() => CreateOrTransferDomainResponseBody$.inboundSchema).optional(),
        })
        .transform((v) => {
            return {
                httpMeta: v.HttpMeta,
                ...(v.object === undefined ? null : { object: v.object }),
            };
        });

    export type Outbound = {
        HttpMeta: components.HTTPMetadata$.Outbound;
        object?: CreateOrTransferDomainResponseBody$.Outbound | undefined;
    };

    export const outboundSchema: z.ZodType<Outbound, z.ZodTypeDef, CreateOrTransferDomainResponse> =
        z
            .object({
                httpMeta: components.HTTPMetadata$.outboundSchema,
                object: z.lazy(() => CreateOrTransferDomainResponseBody$.outboundSchema).optional(),
            })
            .transform((v) => {
                return {
                    HttpMeta: v.httpMeta,
                    ...(v.object === undefined ? null : { object: v.object }),
                };
            });
}
