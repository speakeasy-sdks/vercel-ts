/*
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

import * as components from "../components";
import * as z from "zod";

export type GetAuthTokenRequest = {
    /**
     * The identifier of the token to retrieve. The special value \"current\" may be supplied, which returns the metadata for the token that the current HTTP request is authenticated with.
     */
    tokenId: string;
};

/**
 * Successful response.
 */
export type GetAuthTokenResponseBody = {
    /**
     * Authentication token metadata.
     */
    token: components.AuthToken;
};

export type GetAuthTokenResponse = {
    httpMeta: components.HTTPMetadata;
    /**
     * Successful response.
     */
    object?: GetAuthTokenResponseBody | undefined;
};

/** @internal */
export namespace GetAuthTokenRequest$ {
    export const inboundSchema: z.ZodType<GetAuthTokenRequest, z.ZodTypeDef, unknown> = z
        .object({
            tokenId: z.string(),
        })
        .transform((v) => {
            return {
                tokenId: v.tokenId,
            };
        });

    export type Outbound = {
        tokenId: string;
    };

    export const outboundSchema: z.ZodType<Outbound, z.ZodTypeDef, GetAuthTokenRequest> = z
        .object({
            tokenId: z.string(),
        })
        .transform((v) => {
            return {
                tokenId: v.tokenId,
            };
        });
}

/** @internal */
export namespace GetAuthTokenResponseBody$ {
    export const inboundSchema: z.ZodType<GetAuthTokenResponseBody, z.ZodTypeDef, unknown> = z
        .object({
            token: components.AuthToken$.inboundSchema,
        })
        .transform((v) => {
            return {
                token: v.token,
            };
        });

    export type Outbound = {
        token: components.AuthToken$.Outbound;
    };

    export const outboundSchema: z.ZodType<Outbound, z.ZodTypeDef, GetAuthTokenResponseBody> = z
        .object({
            token: components.AuthToken$.outboundSchema,
        })
        .transform((v) => {
            return {
                token: v.token,
            };
        });
}

/** @internal */
export namespace GetAuthTokenResponse$ {
    export const inboundSchema: z.ZodType<GetAuthTokenResponse, z.ZodTypeDef, unknown> = z
        .object({
            HttpMeta: components.HTTPMetadata$.inboundSchema,
            object: z.lazy(() => GetAuthTokenResponseBody$.inboundSchema).optional(),
        })
        .transform((v) => {
            return {
                httpMeta: v.HttpMeta,
                ...(v.object === undefined ? null : { object: v.object }),
            };
        });

    export type Outbound = {
        HttpMeta: components.HTTPMetadata$.Outbound;
        object?: GetAuthTokenResponseBody$.Outbound | undefined;
    };

    export const outboundSchema: z.ZodType<Outbound, z.ZodTypeDef, GetAuthTokenResponse> = z
        .object({
            httpMeta: components.HTTPMetadata$.outboundSchema,
            object: z.lazy(() => GetAuthTokenResponseBody$.outboundSchema).optional(),
        })
        .transform((v) => {
            return {
                HttpMeta: v.httpMeta,
                ...(v.object === undefined ? null : { object: v.object }),
            };
        });
}
