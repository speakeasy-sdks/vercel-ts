/*
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

import * as components from "../components";
import * as z from "zod";

/**
 * The delivery log format
 */
export enum CreateConfigurableLogDrainDeliveryFormat {
    Json = "json",
    Ndjson = "ndjson",
}

export enum CreateConfigurableLogDrainSources {
    Static = "static",
    Lambda = "lambda",
    Build = "build",
    Edge = "edge",
    External = "external",
}

export enum CreateConfigurableLogDrainEnvironments {
    Preview = "preview",
    Production = "production",
}

export type CreateConfigurableLogDrainRequestBody = {
    /**
     * The delivery log format
     */
    deliveryFormat: CreateConfigurableLogDrainDeliveryFormat;
    /**
     * The log drain url
     */
    url: string;
    /**
     * Headers to be sent together with the request
     */
    headers?: Record<string, string> | undefined;
    projectIds?: Array<string> | undefined;
    sources: Array<CreateConfigurableLogDrainSources>;
    environments?: Array<CreateConfigurableLogDrainEnvironments> | undefined;
    /**
     * Custom secret of log drain
     */
    secret?: string | undefined;
    /**
     * The sampling rate for this log drain. It should be a percentage rate between 0 and 100. With max 2 decimal points
     */
    samplingRate?: number | undefined;
};

export type CreateConfigurableLogDrainRequest = {
    /**
     * The Team identifier to perform the request on behalf of.
     */
    teamId?: string | undefined;
    /**
     * The Team slug to perform the request on behalf of.
     */
    slug?: string | undefined;
    requestBody?: CreateConfigurableLogDrainRequestBody | undefined;
};

export enum CreateConfigurableLogDrainLogDrainsDeliveryFormat {
    Json = "json",
    Ndjson = "ndjson",
    Syslog = "syslog",
}

export enum CreateConfigurableLogDrainLogDrainsSources {
    Build = "build",
    Edge = "edge",
    Lambda = "lambda",
    Static = "static",
    External = "external",
}

export enum CreateConfigurableLogDrainLogDrainsEnvironments {
    Production = "production",
    Preview = "preview",
}

export enum CreateConfigurableLogDrainStatus {
    Enabled = "enabled",
    Disabled = "disabled",
    Errored = "errored",
}

export enum CreateConfigurableLogDrainDisabledReason {
    DisabledByOwner = "disabled-by-owner",
    FeatureNotAvailable = "feature-not-available",
    DisabledByAdmin = "disabled-by-admin",
}

export enum CreateConfigurableLogDrainCompression {
    Gzip = "gzip",
    Zstd = "zstd",
    None = "none",
}

export enum CreateConfigurableLogDrainCreatedFrom {
    SelfServed = "self-served",
}

export type CreateConfigurableLogDrainResponseBody = {
    /**
     * The secret to validate the log-drain payload
     */
    secret?: string | undefined;
    id: string;
    deliveryFormat: CreateConfigurableLogDrainLogDrainsDeliveryFormat;
    url: string;
    name: string;
    clientId?: string | undefined;
    configurationId?: string | undefined;
    teamId?: string | null | undefined;
    ownerId: string;
    projectIds?: Array<string> | undefined;
    createdAt: number;
    sources?: Array<CreateConfigurableLogDrainLogDrainsSources> | undefined;
    headers?: Record<string, string> | undefined;
    environments: Array<CreateConfigurableLogDrainLogDrainsEnvironments>;
    status?: CreateConfigurableLogDrainStatus | undefined;
    disabledAt?: number | undefined;
    disabledReason?: CreateConfigurableLogDrainDisabledReason | undefined;
    disabledBy?: string | undefined;
    firstErrorTimestamp?: number | undefined;
    samplingRate?: number | undefined;
    compression?: CreateConfigurableLogDrainCompression | undefined;
    createdFrom?: CreateConfigurableLogDrainCreatedFrom | undefined;
};

export type CreateConfigurableLogDrainResponse = {
    httpMeta: components.HTTPMetadata;
    object?: CreateConfigurableLogDrainResponseBody | undefined;
};

/** @internal */
export const CreateConfigurableLogDrainDeliveryFormat$: z.ZodNativeEnum<
    typeof CreateConfigurableLogDrainDeliveryFormat
> = z.nativeEnum(CreateConfigurableLogDrainDeliveryFormat);

/** @internal */
export const CreateConfigurableLogDrainSources$: z.ZodNativeEnum<
    typeof CreateConfigurableLogDrainSources
> = z.nativeEnum(CreateConfigurableLogDrainSources);

/** @internal */
export const CreateConfigurableLogDrainEnvironments$: z.ZodNativeEnum<
    typeof CreateConfigurableLogDrainEnvironments
> = z.nativeEnum(CreateConfigurableLogDrainEnvironments);

/** @internal */
export namespace CreateConfigurableLogDrainRequestBody$ {
    export const inboundSchema: z.ZodType<
        CreateConfigurableLogDrainRequestBody,
        z.ZodTypeDef,
        unknown
    > = z
        .object({
            deliveryFormat: CreateConfigurableLogDrainDeliveryFormat$,
            url: z.string(),
            headers: z.record(z.string()).optional(),
            projectIds: z.array(z.string()).optional(),
            sources: z.array(CreateConfigurableLogDrainSources$),
            environments: z.array(CreateConfigurableLogDrainEnvironments$).optional(),
            secret: z.string().optional(),
            samplingRate: z.number().optional(),
        })
        .transform((v) => {
            return {
                deliveryFormat: v.deliveryFormat,
                url: v.url,
                ...(v.headers === undefined ? null : { headers: v.headers }),
                ...(v.projectIds === undefined ? null : { projectIds: v.projectIds }),
                sources: v.sources,
                ...(v.environments === undefined ? null : { environments: v.environments }),
                ...(v.secret === undefined ? null : { secret: v.secret }),
                ...(v.samplingRate === undefined ? null : { samplingRate: v.samplingRate }),
            };
        });

    export type Outbound = {
        deliveryFormat: CreateConfigurableLogDrainDeliveryFormat;
        url: string;
        headers?: Record<string, string> | undefined;
        projectIds?: Array<string> | undefined;
        sources: Array<CreateConfigurableLogDrainSources>;
        environments?: Array<CreateConfigurableLogDrainEnvironments> | undefined;
        secret?: string | undefined;
        samplingRate?: number | undefined;
    };

    export const outboundSchema: z.ZodType<
        Outbound,
        z.ZodTypeDef,
        CreateConfigurableLogDrainRequestBody
    > = z
        .object({
            deliveryFormat: CreateConfigurableLogDrainDeliveryFormat$,
            url: z.string(),
            headers: z.record(z.string()).optional(),
            projectIds: z.array(z.string()).optional(),
            sources: z.array(CreateConfigurableLogDrainSources$),
            environments: z.array(CreateConfigurableLogDrainEnvironments$).optional(),
            secret: z.string().optional(),
            samplingRate: z.number().optional(),
        })
        .transform((v) => {
            return {
                deliveryFormat: v.deliveryFormat,
                url: v.url,
                ...(v.headers === undefined ? null : { headers: v.headers }),
                ...(v.projectIds === undefined ? null : { projectIds: v.projectIds }),
                sources: v.sources,
                ...(v.environments === undefined ? null : { environments: v.environments }),
                ...(v.secret === undefined ? null : { secret: v.secret }),
                ...(v.samplingRate === undefined ? null : { samplingRate: v.samplingRate }),
            };
        });
}

/** @internal */
export namespace CreateConfigurableLogDrainRequest$ {
    export const inboundSchema: z.ZodType<
        CreateConfigurableLogDrainRequest,
        z.ZodTypeDef,
        unknown
    > = z
        .object({
            teamId: z.string().optional(),
            slug: z.string().optional(),
            RequestBody: z
                .lazy(() => CreateConfigurableLogDrainRequestBody$.inboundSchema)
                .optional(),
        })
        .transform((v) => {
            return {
                ...(v.teamId === undefined ? null : { teamId: v.teamId }),
                ...(v.slug === undefined ? null : { slug: v.slug }),
                ...(v.RequestBody === undefined ? null : { requestBody: v.RequestBody }),
            };
        });

    export type Outbound = {
        teamId?: string | undefined;
        slug?: string | undefined;
        RequestBody?: CreateConfigurableLogDrainRequestBody$.Outbound | undefined;
    };

    export const outboundSchema: z.ZodType<
        Outbound,
        z.ZodTypeDef,
        CreateConfigurableLogDrainRequest
    > = z
        .object({
            teamId: z.string().optional(),
            slug: z.string().optional(),
            requestBody: z
                .lazy(() => CreateConfigurableLogDrainRequestBody$.outboundSchema)
                .optional(),
        })
        .transform((v) => {
            return {
                ...(v.teamId === undefined ? null : { teamId: v.teamId }),
                ...(v.slug === undefined ? null : { slug: v.slug }),
                ...(v.requestBody === undefined ? null : { RequestBody: v.requestBody }),
            };
        });
}

/** @internal */
export const CreateConfigurableLogDrainLogDrainsDeliveryFormat$: z.ZodNativeEnum<
    typeof CreateConfigurableLogDrainLogDrainsDeliveryFormat
> = z.nativeEnum(CreateConfigurableLogDrainLogDrainsDeliveryFormat);

/** @internal */
export const CreateConfigurableLogDrainLogDrainsSources$: z.ZodNativeEnum<
    typeof CreateConfigurableLogDrainLogDrainsSources
> = z.nativeEnum(CreateConfigurableLogDrainLogDrainsSources);

/** @internal */
export const CreateConfigurableLogDrainLogDrainsEnvironments$: z.ZodNativeEnum<
    typeof CreateConfigurableLogDrainLogDrainsEnvironments
> = z.nativeEnum(CreateConfigurableLogDrainLogDrainsEnvironments);

/** @internal */
export const CreateConfigurableLogDrainStatus$: z.ZodNativeEnum<
    typeof CreateConfigurableLogDrainStatus
> = z.nativeEnum(CreateConfigurableLogDrainStatus);

/** @internal */
export const CreateConfigurableLogDrainDisabledReason$: z.ZodNativeEnum<
    typeof CreateConfigurableLogDrainDisabledReason
> = z.nativeEnum(CreateConfigurableLogDrainDisabledReason);

/** @internal */
export const CreateConfigurableLogDrainCompression$: z.ZodNativeEnum<
    typeof CreateConfigurableLogDrainCompression
> = z.nativeEnum(CreateConfigurableLogDrainCompression);

/** @internal */
export const CreateConfigurableLogDrainCreatedFrom$: z.ZodNativeEnum<
    typeof CreateConfigurableLogDrainCreatedFrom
> = z.nativeEnum(CreateConfigurableLogDrainCreatedFrom);

/** @internal */
export namespace CreateConfigurableLogDrainResponseBody$ {
    export const inboundSchema: z.ZodType<
        CreateConfigurableLogDrainResponseBody,
        z.ZodTypeDef,
        unknown
    > = z
        .object({
            secret: z.string().optional(),
            id: z.string(),
            deliveryFormat: CreateConfigurableLogDrainLogDrainsDeliveryFormat$,
            url: z.string(),
            name: z.string(),
            clientId: z.string().optional(),
            configurationId: z.string().optional(),
            teamId: z.nullable(z.string()).optional(),
            ownerId: z.string(),
            projectIds: z.array(z.string()).optional(),
            createdAt: z.number(),
            sources: z.array(CreateConfigurableLogDrainLogDrainsSources$).optional(),
            headers: z.record(z.string()).optional(),
            environments: z.array(CreateConfigurableLogDrainLogDrainsEnvironments$),
            status: CreateConfigurableLogDrainStatus$.optional(),
            disabledAt: z.number().optional(),
            disabledReason: CreateConfigurableLogDrainDisabledReason$.optional(),
            disabledBy: z.string().optional(),
            firstErrorTimestamp: z.number().optional(),
            samplingRate: z.number().optional(),
            compression: CreateConfigurableLogDrainCompression$.optional(),
            createdFrom: CreateConfigurableLogDrainCreatedFrom$.optional(),
        })
        .transform((v) => {
            return {
                ...(v.secret === undefined ? null : { secret: v.secret }),
                id: v.id,
                deliveryFormat: v.deliveryFormat,
                url: v.url,
                name: v.name,
                ...(v.clientId === undefined ? null : { clientId: v.clientId }),
                ...(v.configurationId === undefined
                    ? null
                    : { configurationId: v.configurationId }),
                ...(v.teamId === undefined ? null : { teamId: v.teamId }),
                ownerId: v.ownerId,
                ...(v.projectIds === undefined ? null : { projectIds: v.projectIds }),
                createdAt: v.createdAt,
                ...(v.sources === undefined ? null : { sources: v.sources }),
                ...(v.headers === undefined ? null : { headers: v.headers }),
                environments: v.environments,
                ...(v.status === undefined ? null : { status: v.status }),
                ...(v.disabledAt === undefined ? null : { disabledAt: v.disabledAt }),
                ...(v.disabledReason === undefined ? null : { disabledReason: v.disabledReason }),
                ...(v.disabledBy === undefined ? null : { disabledBy: v.disabledBy }),
                ...(v.firstErrorTimestamp === undefined
                    ? null
                    : { firstErrorTimestamp: v.firstErrorTimestamp }),
                ...(v.samplingRate === undefined ? null : { samplingRate: v.samplingRate }),
                ...(v.compression === undefined ? null : { compression: v.compression }),
                ...(v.createdFrom === undefined ? null : { createdFrom: v.createdFrom }),
            };
        });

    export type Outbound = {
        secret?: string | undefined;
        id: string;
        deliveryFormat: CreateConfigurableLogDrainLogDrainsDeliveryFormat;
        url: string;
        name: string;
        clientId?: string | undefined;
        configurationId?: string | undefined;
        teamId?: string | null | undefined;
        ownerId: string;
        projectIds?: Array<string> | undefined;
        createdAt: number;
        sources?: Array<CreateConfigurableLogDrainLogDrainsSources> | undefined;
        headers?: Record<string, string> | undefined;
        environments: Array<CreateConfigurableLogDrainLogDrainsEnvironments>;
        status?: CreateConfigurableLogDrainStatus | undefined;
        disabledAt?: number | undefined;
        disabledReason?: CreateConfigurableLogDrainDisabledReason | undefined;
        disabledBy?: string | undefined;
        firstErrorTimestamp?: number | undefined;
        samplingRate?: number | undefined;
        compression?: CreateConfigurableLogDrainCompression | undefined;
        createdFrom?: CreateConfigurableLogDrainCreatedFrom | undefined;
    };

    export const outboundSchema: z.ZodType<
        Outbound,
        z.ZodTypeDef,
        CreateConfigurableLogDrainResponseBody
    > = z
        .object({
            secret: z.string().optional(),
            id: z.string(),
            deliveryFormat: CreateConfigurableLogDrainLogDrainsDeliveryFormat$,
            url: z.string(),
            name: z.string(),
            clientId: z.string().optional(),
            configurationId: z.string().optional(),
            teamId: z.nullable(z.string()).optional(),
            ownerId: z.string(),
            projectIds: z.array(z.string()).optional(),
            createdAt: z.number(),
            sources: z.array(CreateConfigurableLogDrainLogDrainsSources$).optional(),
            headers: z.record(z.string()).optional(),
            environments: z.array(CreateConfigurableLogDrainLogDrainsEnvironments$),
            status: CreateConfigurableLogDrainStatus$.optional(),
            disabledAt: z.number().optional(),
            disabledReason: CreateConfigurableLogDrainDisabledReason$.optional(),
            disabledBy: z.string().optional(),
            firstErrorTimestamp: z.number().optional(),
            samplingRate: z.number().optional(),
            compression: CreateConfigurableLogDrainCompression$.optional(),
            createdFrom: CreateConfigurableLogDrainCreatedFrom$.optional(),
        })
        .transform((v) => {
            return {
                ...(v.secret === undefined ? null : { secret: v.secret }),
                id: v.id,
                deliveryFormat: v.deliveryFormat,
                url: v.url,
                name: v.name,
                ...(v.clientId === undefined ? null : { clientId: v.clientId }),
                ...(v.configurationId === undefined
                    ? null
                    : { configurationId: v.configurationId }),
                ...(v.teamId === undefined ? null : { teamId: v.teamId }),
                ownerId: v.ownerId,
                ...(v.projectIds === undefined ? null : { projectIds: v.projectIds }),
                createdAt: v.createdAt,
                ...(v.sources === undefined ? null : { sources: v.sources }),
                ...(v.headers === undefined ? null : { headers: v.headers }),
                environments: v.environments,
                ...(v.status === undefined ? null : { status: v.status }),
                ...(v.disabledAt === undefined ? null : { disabledAt: v.disabledAt }),
                ...(v.disabledReason === undefined ? null : { disabledReason: v.disabledReason }),
                ...(v.disabledBy === undefined ? null : { disabledBy: v.disabledBy }),
                ...(v.firstErrorTimestamp === undefined
                    ? null
                    : { firstErrorTimestamp: v.firstErrorTimestamp }),
                ...(v.samplingRate === undefined ? null : { samplingRate: v.samplingRate }),
                ...(v.compression === undefined ? null : { compression: v.compression }),
                ...(v.createdFrom === undefined ? null : { createdFrom: v.createdFrom }),
            };
        });
}

/** @internal */
export namespace CreateConfigurableLogDrainResponse$ {
    export const inboundSchema: z.ZodType<
        CreateConfigurableLogDrainResponse,
        z.ZodTypeDef,
        unknown
    > = z
        .object({
            HttpMeta: components.HTTPMetadata$.inboundSchema,
            object: z.lazy(() => CreateConfigurableLogDrainResponseBody$.inboundSchema).optional(),
        })
        .transform((v) => {
            return {
                httpMeta: v.HttpMeta,
                ...(v.object === undefined ? null : { object: v.object }),
            };
        });

    export type Outbound = {
        HttpMeta: components.HTTPMetadata$.Outbound;
        object?: CreateConfigurableLogDrainResponseBody$.Outbound | undefined;
    };

    export const outboundSchema: z.ZodType<
        Outbound,
        z.ZodTypeDef,
        CreateConfigurableLogDrainResponse
    > = z
        .object({
            httpMeta: components.HTTPMetadata$.outboundSchema,
            object: z.lazy(() => CreateConfigurableLogDrainResponseBody$.outboundSchema).optional(),
        })
        .transform((v) => {
            return {
                HttpMeta: v.httpMeta,
                ...(v.object === undefined ? null : { object: v.object }),
            };
        });
}
