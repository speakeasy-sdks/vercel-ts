/*
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

import * as components from "../components";
import * as z from "zod";

export type DeleteAliasRequest = {
    /**
     * The ID or alias that will be removed
     */
    aliasId: string;
    /**
     * The Team identifier to perform the request on behalf of.
     */
    teamId?: string | undefined;
    /**
     * The Team slug to perform the request on behalf of.
     */
    slug?: string | undefined;
};

export enum DeleteAliasStatus {
    Success = "SUCCESS",
}

/**
 * The alias was successfully removed
 */
export type DeleteAliasResponseBody = {
    status: DeleteAliasStatus;
};

export type DeleteAliasResponse = {
    httpMeta: components.HTTPMetadata;
    /**
     * The alias was successfully removed
     */
    object?: DeleteAliasResponseBody | undefined;
};

/** @internal */
export namespace DeleteAliasRequest$ {
    export const inboundSchema: z.ZodType<DeleteAliasRequest, z.ZodTypeDef, unknown> = z
        .object({
            aliasId: z.string(),
            teamId: z.string().optional(),
            slug: z.string().optional(),
        })
        .transform((v) => {
            return {
                aliasId: v.aliasId,
                ...(v.teamId === undefined ? null : { teamId: v.teamId }),
                ...(v.slug === undefined ? null : { slug: v.slug }),
            };
        });

    export type Outbound = {
        aliasId: string;
        teamId?: string | undefined;
        slug?: string | undefined;
    };

    export const outboundSchema: z.ZodType<Outbound, z.ZodTypeDef, DeleteAliasRequest> = z
        .object({
            aliasId: z.string(),
            teamId: z.string().optional(),
            slug: z.string().optional(),
        })
        .transform((v) => {
            return {
                aliasId: v.aliasId,
                ...(v.teamId === undefined ? null : { teamId: v.teamId }),
                ...(v.slug === undefined ? null : { slug: v.slug }),
            };
        });
}

/** @internal */
export namespace DeleteAliasStatus$ {
    export const inboundSchema = z.nativeEnum(DeleteAliasStatus);
    export const outboundSchema = inboundSchema;
}

/** @internal */
export namespace DeleteAliasResponseBody$ {
    export const inboundSchema: z.ZodType<DeleteAliasResponseBody, z.ZodTypeDef, unknown> = z
        .object({
            status: DeleteAliasStatus$.inboundSchema,
        })
        .transform((v) => {
            return {
                status: v.status,
            };
        });

    export type Outbound = {
        status: string;
    };

    export const outboundSchema: z.ZodType<Outbound, z.ZodTypeDef, DeleteAliasResponseBody> = z
        .object({
            status: DeleteAliasStatus$.outboundSchema,
        })
        .transform((v) => {
            return {
                status: v.status,
            };
        });
}

/** @internal */
export namespace DeleteAliasResponse$ {
    export const inboundSchema: z.ZodType<DeleteAliasResponse, z.ZodTypeDef, unknown> = z
        .object({
            HttpMeta: components.HTTPMetadata$.inboundSchema,
            object: z.lazy(() => DeleteAliasResponseBody$.inboundSchema).optional(),
        })
        .transform((v) => {
            return {
                httpMeta: v.HttpMeta,
                ...(v.object === undefined ? null : { object: v.object }),
            };
        });

    export type Outbound = {
        HttpMeta: components.HTTPMetadata$.Outbound;
        object?: DeleteAliasResponseBody$.Outbound | undefined;
    };

    export const outboundSchema: z.ZodType<Outbound, z.ZodTypeDef, DeleteAliasResponse> = z
        .object({
            httpMeta: components.HTTPMetadata$.outboundSchema,
            object: z.lazy(() => DeleteAliasResponseBody$.outboundSchema).optional(),
        })
        .transform((v) => {
            return {
                HttpMeta: v.httpMeta,
                ...(v.object === undefined ? null : { object: v.object }),
            };
        });
}
