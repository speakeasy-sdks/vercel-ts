/*
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

import * as components from "../components";
import * as z from "zod";

export type DeleteAuthTokenRequest = {
    /**
     * The identifier of the token to invalidate. The special value \"current\" may be supplied, which invalidates the token that the HTTP request was authenticated with.
     */
    tokenId: string;
};

/**
 * Authentication token successfully deleted.
 */
export type DeleteAuthTokenResponseBody = {
    /**
     * The unique identifier of the token that was deleted.
     */
    tokenId: string;
};

export type DeleteAuthTokenResponse = {
    httpMeta: components.HTTPMetadata;
    /**
     * Authentication token successfully deleted.
     */
    object?: DeleteAuthTokenResponseBody | undefined;
};

/** @internal */
export namespace DeleteAuthTokenRequest$ {
    export const inboundSchema: z.ZodType<DeleteAuthTokenRequest, z.ZodTypeDef, unknown> = z
        .object({
            tokenId: z.string(),
        })
        .transform((v) => {
            return {
                tokenId: v.tokenId,
            };
        });

    export type Outbound = {
        tokenId: string;
    };

    export const outboundSchema: z.ZodType<Outbound, z.ZodTypeDef, DeleteAuthTokenRequest> = z
        .object({
            tokenId: z.string(),
        })
        .transform((v) => {
            return {
                tokenId: v.tokenId,
            };
        });
}

/** @internal */
export namespace DeleteAuthTokenResponseBody$ {
    export const inboundSchema: z.ZodType<DeleteAuthTokenResponseBody, z.ZodTypeDef, unknown> = z
        .object({
            tokenId: z.string(),
        })
        .transform((v) => {
            return {
                tokenId: v.tokenId,
            };
        });

    export type Outbound = {
        tokenId: string;
    };

    export const outboundSchema: z.ZodType<Outbound, z.ZodTypeDef, DeleteAuthTokenResponseBody> = z
        .object({
            tokenId: z.string(),
        })
        .transform((v) => {
            return {
                tokenId: v.tokenId,
            };
        });
}

/** @internal */
export namespace DeleteAuthTokenResponse$ {
    export const inboundSchema: z.ZodType<DeleteAuthTokenResponse, z.ZodTypeDef, unknown> = z
        .object({
            HttpMeta: components.HTTPMetadata$.inboundSchema,
            object: z.lazy(() => DeleteAuthTokenResponseBody$.inboundSchema).optional(),
        })
        .transform((v) => {
            return {
                httpMeta: v.HttpMeta,
                ...(v.object === undefined ? null : { object: v.object }),
            };
        });

    export type Outbound = {
        HttpMeta: components.HTTPMetadata$.Outbound;
        object?: DeleteAuthTokenResponseBody$.Outbound | undefined;
    };

    export const outboundSchema: z.ZodType<Outbound, z.ZodTypeDef, DeleteAuthTokenResponse> = z
        .object({
            httpMeta: components.HTTPMetadata$.outboundSchema,
            object: z.lazy(() => DeleteAuthTokenResponseBody$.outboundSchema).optional(),
        })
        .transform((v) => {
            return {
                HttpMeta: v.httpMeta,
                ...(v.object === undefined ? null : { object: v.object }),
            };
        });
}
