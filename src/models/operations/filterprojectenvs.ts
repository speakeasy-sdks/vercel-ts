/*
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

import * as components from "../components";
import * as z from "zod";

/**
 * If true, the environment variable value will be decrypted
 *
 * @deprecated enum: This will be removed in a future release, please migrate away from it as soon as possible.
 */
export enum Decrypt {
    True = "true",
    False = "false",
}

export type FilterProjectEnvsRequest = {
    /**
     * The unique project identifier or the project name
     */
    idOrName: string;
    /**
     * If defined, the git branch of the environment variable to filter the results (must have target=preview)
     */
    gitBranch?: string | undefined;
    /**
     * If true, the environment variable value will be decrypted
     */
    decrypt?: Decrypt | undefined;
    /**
     * The source that is calling the endpoint.
     */
    source?: string | undefined;
    customEnvironmentId?: string | undefined;
    /**
     * The Team identifier to perform the request on behalf of.
     */
    teamId?: string | undefined;
    /**
     * The Team slug to perform the request on behalf of.
     */
    slug?: string | undefined;
};

export enum FilterProjectEnvsTargetProjectsResponse2 {
    Production = "production",
    Preview = "preview",
    Development = "development",
}

export enum FilterProjectEnvsTargetProjectsResponse1 {
    Production = "production",
    Preview = "preview",
    Development = "development",
}

export type FilterProjectEnvsResponseBodyProjectsResponseTarget =
    | Array<FilterProjectEnvsTargetProjectsResponse1>
    | FilterProjectEnvsTargetProjectsResponse2;

export enum FilterProjectEnvsResponseBodyProjectsResponse200Type {
    Secret = "secret",
    System = "system",
    Encrypted = "encrypted",
    Plain = "plain",
    Sensitive = "sensitive",
}

export enum FilterProjectEnvsContentHintProjectsResponse200ApplicationJSONResponseBody3Envs14Type {
    IntegrationStoreSecret = "integration-store-secret",
}

export type FilterProjectEnvsContentHintProjectsResponse14 = {
    type: FilterProjectEnvsContentHintProjectsResponse200ApplicationJSONResponseBody3Envs14Type;
    storeId: string;
};

export enum FilterProjectEnvsContentHintProjectsResponse200ApplicationJSONResponseBody3Envs13Type {
    PostgresUrlNoSsl = "postgres-url-no-ssl",
}

export type FilterProjectEnvsContentHintProjectsResponse13 = {
    type: FilterProjectEnvsContentHintProjectsResponse200ApplicationJSONResponseBody3Envs13Type;
    storeId: string;
};

export enum FilterProjectEnvsContentHintProjectsResponse200ApplicationJSONResponseBody3Envs12Type {
    PostgresDatabase = "postgres-database",
}

export type FilterProjectEnvsContentHintProjectsResponse12 = {
    type: FilterProjectEnvsContentHintProjectsResponse200ApplicationJSONResponseBody3Envs12Type;
    storeId: string;
};

export enum FilterProjectEnvsContentHintProjectsResponse200ApplicationJSONResponseBody3Envs11Type {
    PostgresPassword = "postgres-password",
}

export type FilterProjectEnvsContentHintProjectsResponse11 = {
    type: FilterProjectEnvsContentHintProjectsResponse200ApplicationJSONResponseBody3Envs11Type;
    storeId: string;
};

export enum FilterProjectEnvsContentHintProjectsResponse200ApplicationJSONResponseBody3Envs10Type {
    PostgresHost = "postgres-host",
}

export type FilterProjectEnvsContentHintProjectsResponse10 = {
    type: FilterProjectEnvsContentHintProjectsResponse200ApplicationJSONResponseBody3Envs10Type;
    storeId: string;
};

export enum FilterProjectEnvsContentHintProjectsResponse200ApplicationJSONResponseBody3Envs9Type {
    PostgresUser = "postgres-user",
}

export type FilterProjectEnvsContentHintProjectsResponse9 = {
    type: FilterProjectEnvsContentHintProjectsResponse200ApplicationJSONResponseBody3Envs9Type;
    storeId: string;
};

export enum FilterProjectEnvsContentHintProjectsResponse200ApplicationJSONResponseBody3Envs8Type {
    PostgresPrismaUrl = "postgres-prisma-url",
}

export type FilterProjectEnvsContentHintProjectsResponse8 = {
    type: FilterProjectEnvsContentHintProjectsResponse200ApplicationJSONResponseBody3Envs8Type;
    storeId: string;
};

export enum FilterProjectEnvsContentHintProjectsResponse200ApplicationJSONResponseBody3Envs7Type {
    PostgresUrlNonPooling = "postgres-url-non-pooling",
}

export type FilterProjectEnvsContentHintProjectsResponse7 = {
    type: FilterProjectEnvsContentHintProjectsResponse200ApplicationJSONResponseBody3Envs7Type;
    storeId: string;
};

export enum FilterProjectEnvsContentHintProjectsResponse200ApplicationJSONResponseBody3Envs6Type {
    PostgresUrl = "postgres-url",
}

export type FilterProjectEnvsContentHintProjectsResponse6 = {
    type: FilterProjectEnvsContentHintProjectsResponse200ApplicationJSONResponseBody3Envs6Type;
    storeId: string;
};

export enum FilterProjectEnvsContentHintProjectsResponse200ApplicationJSONResponseBody3Envs5Type {
    BlobReadWriteToken = "blob-read-write-token",
}

export type FilterProjectEnvsContentHintProjectsResponse5 = {
    type: FilterProjectEnvsContentHintProjectsResponse200ApplicationJSONResponseBody3Envs5Type;
    storeId: string;
};

export enum FilterProjectEnvsContentHintProjectsResponse200ApplicationJSONResponseBody3Envs4Type {
    RedisRestApiReadOnlyToken = "redis-rest-api-read-only-token",
}

export type FilterProjectEnvsContentHintProjectsResponse4 = {
    type: FilterProjectEnvsContentHintProjectsResponse200ApplicationJSONResponseBody3Envs4Type;
    storeId: string;
};

export enum FilterProjectEnvsContentHintProjectsResponse200ApplicationJSONResponseBody3Envs3Type {
    RedisRestApiToken = "redis-rest-api-token",
}

export type FilterProjectEnvsContentHintProjectsResponse3 = {
    type: FilterProjectEnvsContentHintProjectsResponse200ApplicationJSONResponseBody3Envs3Type;
    storeId: string;
};

export enum FilterProjectEnvsContentHintProjectsResponse200ApplicationJSONResponseBody3EnvsType {
    RedisRestApiUrl = "redis-rest-api-url",
}

export type FilterProjectEnvsContentHintProjectsResponse2 = {
    type: FilterProjectEnvsContentHintProjectsResponse200ApplicationJSONResponseBody3EnvsType;
    storeId: string;
};

export enum FilterProjectEnvsContentHintProjectsResponse200ApplicationJSONResponseBody3Type {
    RedisUrl = "redis-url",
}

export type FilterProjectEnvsContentHintProjectsResponse1 = {
    type: FilterProjectEnvsContentHintProjectsResponse200ApplicationJSONResponseBody3Type;
    storeId: string;
};

export type FilterProjectEnvsResponseBodyProjectsContentHint =
    | FilterProjectEnvsContentHintProjectsResponse1
    | FilterProjectEnvsContentHintProjectsResponse2
    | FilterProjectEnvsContentHintProjectsResponse3
    | FilterProjectEnvsContentHintProjectsResponse4
    | FilterProjectEnvsContentHintProjectsResponse5
    | FilterProjectEnvsContentHintProjectsResponse6
    | FilterProjectEnvsContentHintProjectsResponse7
    | FilterProjectEnvsContentHintProjectsResponse8
    | FilterProjectEnvsContentHintProjectsResponse9
    | FilterProjectEnvsContentHintProjectsResponse10
    | FilterProjectEnvsContentHintProjectsResponse11
    | FilterProjectEnvsContentHintProjectsResponse12
    | FilterProjectEnvsContentHintProjectsResponse13
    | FilterProjectEnvsContentHintProjectsResponse14;

export enum FilterProjectEnvsResponseBodyProjectsResponse200ApplicationJson3Type {
    FlagsSecret = "flags-secret",
}

/**
 * Similar to `contentHints`, but should not be exposed to the user.
 */
export type FilterProjectEnvsResponseBodyProjectsInternalContentHint = {
    type: FilterProjectEnvsResponseBodyProjectsResponse200ApplicationJson3Type;
    /**
     * Contains the `value` of the env variable, encrypted with a special key to make decryption possible in the subscriber Lambda.
     */
    encryptedValue: string;
};

export type ResponseBodyEnvs = {
    target?:
        | Array<FilterProjectEnvsTargetProjectsResponse1>
        | FilterProjectEnvsTargetProjectsResponse2
        | undefined;
    type?: FilterProjectEnvsResponseBodyProjectsResponse200Type | undefined;
    id?: string | undefined;
    key?: string | undefined;
    value?: string | undefined;
    configurationId?: string | null | undefined;
    createdAt?: number | undefined;
    updatedAt?: number | undefined;
    createdBy?: string | null | undefined;
    updatedBy?: string | null | undefined;
    gitBranch?: string | undefined;
    edgeConfigId?: string | null | undefined;
    edgeConfigTokenId?: string | null | undefined;
    contentHint?:
        | FilterProjectEnvsContentHintProjectsResponse1
        | FilterProjectEnvsContentHintProjectsResponse2
        | FilterProjectEnvsContentHintProjectsResponse3
        | FilterProjectEnvsContentHintProjectsResponse4
        | FilterProjectEnvsContentHintProjectsResponse5
        | FilterProjectEnvsContentHintProjectsResponse6
        | FilterProjectEnvsContentHintProjectsResponse7
        | FilterProjectEnvsContentHintProjectsResponse8
        | FilterProjectEnvsContentHintProjectsResponse9
        | FilterProjectEnvsContentHintProjectsResponse10
        | FilterProjectEnvsContentHintProjectsResponse11
        | FilterProjectEnvsContentHintProjectsResponse12
        | FilterProjectEnvsContentHintProjectsResponse13
        | FilterProjectEnvsContentHintProjectsResponse14
        | null
        | undefined;
    /**
     * Similar to `contentHints`, but should not be exposed to the user.
     */
    internalContentHint?:
        | FilterProjectEnvsResponseBodyProjectsInternalContentHint
        | null
        | undefined;
    /**
     * Whether `value` is decrypted.
     */
    decrypted?: boolean | undefined;
    comment?: string | undefined;
    customEnvironmentId?: string | undefined;
    system?: boolean | undefined;
};

/**
 * The list of environment variables for the given project
 */
export type FilterProjectEnvsResponseBody3 = {
    envs: Array<ResponseBodyEnvs>;
};

export enum FilterProjectEnvsTargetProjects2 {
    Production = "production",
    Preview = "preview",
    Development = "development",
}

export enum FilterProjectEnvsTargetProjects1 {
    Production = "production",
    Preview = "preview",
    Development = "development",
}

export type FilterProjectEnvsResponseBodyProjectsTarget =
    | Array<FilterProjectEnvsTargetProjects1>
    | FilterProjectEnvsTargetProjects2;

export enum FilterProjectEnvsResponseBodyProjectsResponseType {
    Secret = "secret",
    System = "system",
    Encrypted = "encrypted",
    Plain = "plain",
    Sensitive = "sensitive",
}

export enum FilterProjectEnvsContentHintProjectsResponse200ApplicationJSONResponseBody2Envs14Type {
    IntegrationStoreSecret = "integration-store-secret",
}

export type FilterProjectEnvsContentHintProjects14 = {
    type: FilterProjectEnvsContentHintProjectsResponse200ApplicationJSONResponseBody2Envs14Type;
    storeId: string;
};

export enum FilterProjectEnvsContentHintProjectsResponse200ApplicationJSONResponseBody2Envs13Type {
    PostgresUrlNoSsl = "postgres-url-no-ssl",
}

export type FilterProjectEnvsContentHintProjects13 = {
    type: FilterProjectEnvsContentHintProjectsResponse200ApplicationJSONResponseBody2Envs13Type;
    storeId: string;
};

export enum FilterProjectEnvsContentHintProjectsResponse200ApplicationJSONResponseBody2Envs12Type {
    PostgresDatabase = "postgres-database",
}

export type FilterProjectEnvsContentHintProjects12 = {
    type: FilterProjectEnvsContentHintProjectsResponse200ApplicationJSONResponseBody2Envs12Type;
    storeId: string;
};

export enum FilterProjectEnvsContentHintProjectsResponse200ApplicationJSONResponseBody2Envs11Type {
    PostgresPassword = "postgres-password",
}

export type FilterProjectEnvsContentHintProjects11 = {
    type: FilterProjectEnvsContentHintProjectsResponse200ApplicationJSONResponseBody2Envs11Type;
    storeId: string;
};

export enum FilterProjectEnvsContentHintProjectsResponse200ApplicationJSONResponseBody2Envs10Type {
    PostgresHost = "postgres-host",
}

export type FilterProjectEnvsContentHintProjects10 = {
    type: FilterProjectEnvsContentHintProjectsResponse200ApplicationJSONResponseBody2Envs10Type;
    storeId: string;
};

export enum FilterProjectEnvsContentHintProjectsResponse200ApplicationJSONResponseBody2Envs9Type {
    PostgresUser = "postgres-user",
}

export type FilterProjectEnvsContentHintProjects9 = {
    type: FilterProjectEnvsContentHintProjectsResponse200ApplicationJSONResponseBody2Envs9Type;
    storeId: string;
};

export enum FilterProjectEnvsContentHintProjectsResponse200ApplicationJSONResponseBody2Envs8Type {
    PostgresPrismaUrl = "postgres-prisma-url",
}

export type FilterProjectEnvsContentHintProjects8 = {
    type: FilterProjectEnvsContentHintProjectsResponse200ApplicationJSONResponseBody2Envs8Type;
    storeId: string;
};

export enum FilterProjectEnvsContentHintProjectsResponse200ApplicationJSONResponseBody2Envs7Type {
    PostgresUrlNonPooling = "postgres-url-non-pooling",
}

export type FilterProjectEnvsContentHintProjects7 = {
    type: FilterProjectEnvsContentHintProjectsResponse200ApplicationJSONResponseBody2Envs7Type;
    storeId: string;
};

export enum FilterProjectEnvsContentHintProjectsResponse200ApplicationJSONResponseBody2Envs6Type {
    PostgresUrl = "postgres-url",
}

export type FilterProjectEnvsContentHintProjects6 = {
    type: FilterProjectEnvsContentHintProjectsResponse200ApplicationJSONResponseBody2Envs6Type;
    storeId: string;
};

export enum FilterProjectEnvsContentHintProjectsResponse200ApplicationJSONResponseBody2Envs5Type {
    BlobReadWriteToken = "blob-read-write-token",
}

export type FilterProjectEnvsContentHintProjects5 = {
    type: FilterProjectEnvsContentHintProjectsResponse200ApplicationJSONResponseBody2Envs5Type;
    storeId: string;
};

export enum FilterProjectEnvsContentHintProjectsResponse200ApplicationJSONResponseBody2Envs4Type {
    RedisRestApiReadOnlyToken = "redis-rest-api-read-only-token",
}

export type FilterProjectEnvsContentHintProjects4 = {
    type: FilterProjectEnvsContentHintProjectsResponse200ApplicationJSONResponseBody2Envs4Type;
    storeId: string;
};

export enum FilterProjectEnvsContentHintProjectsResponse200ApplicationJSONResponseBody2Envs3Type {
    RedisRestApiToken = "redis-rest-api-token",
}

export type FilterProjectEnvsContentHintProjects3 = {
    type: FilterProjectEnvsContentHintProjectsResponse200ApplicationJSONResponseBody2Envs3Type;
    storeId: string;
};

export enum FilterProjectEnvsContentHintProjectsResponse200ApplicationJSONResponseBody2EnvsType {
    RedisRestApiUrl = "redis-rest-api-url",
}

export type FilterProjectEnvsContentHintProjects2 = {
    type: FilterProjectEnvsContentHintProjectsResponse200ApplicationJSONResponseBody2EnvsType;
    storeId: string;
};

export enum FilterProjectEnvsContentHintProjectsResponse200ApplicationJSONResponseBody2Type {
    RedisUrl = "redis-url",
}

export type FilterProjectEnvsContentHintProjects1 = {
    type: FilterProjectEnvsContentHintProjectsResponse200ApplicationJSONResponseBody2Type;
    storeId: string;
};

export type FilterProjectEnvsResponseBodyContentHint =
    | FilterProjectEnvsContentHintProjects1
    | FilterProjectEnvsContentHintProjects2
    | FilterProjectEnvsContentHintProjects3
    | FilterProjectEnvsContentHintProjects4
    | FilterProjectEnvsContentHintProjects5
    | FilterProjectEnvsContentHintProjects6
    | FilterProjectEnvsContentHintProjects7
    | FilterProjectEnvsContentHintProjects8
    | FilterProjectEnvsContentHintProjects9
    | FilterProjectEnvsContentHintProjects10
    | FilterProjectEnvsContentHintProjects11
    | FilterProjectEnvsContentHintProjects12
    | FilterProjectEnvsContentHintProjects13
    | FilterProjectEnvsContentHintProjects14;

export enum FilterProjectEnvsResponseBodyProjectsResponse200ApplicationJSONType {
    FlagsSecret = "flags-secret",
}

/**
 * Similar to `contentHints`, but should not be exposed to the user.
 */
export type FilterProjectEnvsResponseBodyInternalContentHint = {
    type: FilterProjectEnvsResponseBodyProjectsResponse200ApplicationJSONType;
    /**
     * Contains the `value` of the env variable, encrypted with a special key to make decryption possible in the subscriber Lambda.
     */
    encryptedValue: string;
};

export type Envs = {
    target?: Array<FilterProjectEnvsTargetProjects1> | FilterProjectEnvsTargetProjects2 | undefined;
    type?: FilterProjectEnvsResponseBodyProjectsResponseType | undefined;
    id?: string | undefined;
    key?: string | undefined;
    value?: string | undefined;
    configurationId?: string | null | undefined;
    createdAt?: number | undefined;
    updatedAt?: number | undefined;
    createdBy?: string | null | undefined;
    updatedBy?: string | null | undefined;
    gitBranch?: string | undefined;
    edgeConfigId?: string | null | undefined;
    edgeConfigTokenId?: string | null | undefined;
    contentHint?:
        | FilterProjectEnvsContentHintProjects1
        | FilterProjectEnvsContentHintProjects2
        | FilterProjectEnvsContentHintProjects3
        | FilterProjectEnvsContentHintProjects4
        | FilterProjectEnvsContentHintProjects5
        | FilterProjectEnvsContentHintProjects6
        | FilterProjectEnvsContentHintProjects7
        | FilterProjectEnvsContentHintProjects8
        | FilterProjectEnvsContentHintProjects9
        | FilterProjectEnvsContentHintProjects10
        | FilterProjectEnvsContentHintProjects11
        | FilterProjectEnvsContentHintProjects12
        | FilterProjectEnvsContentHintProjects13
        | FilterProjectEnvsContentHintProjects14
        | null
        | undefined;
    /**
     * Similar to `contentHints`, but should not be exposed to the user.
     */
    internalContentHint?: FilterProjectEnvsResponseBodyInternalContentHint | null | undefined;
    /**
     * Whether `value` is decrypted.
     */
    decrypted?: boolean | undefined;
    comment?: string | undefined;
    customEnvironmentId?: string | undefined;
    system?: boolean | undefined;
};

export type FilterProjectEnvsResponseBody2 = {
    envs: Array<Envs>;
    /**
     * This object contains information related to the pagination of the current request, including the necessary parameters to get the next or previous page of data.
     */
    pagination: components.Pagination;
};

export enum FilterProjectEnvsTarget2 {
    Production = "production",
    Preview = "preview",
    Development = "development",
}

export enum FilterProjectEnvsTarget1 {
    Production = "production",
    Preview = "preview",
    Development = "development",
}

export type FilterProjectEnvsResponseBodyTarget =
    | Array<FilterProjectEnvsTarget1>
    | FilterProjectEnvsTarget2;

export enum FilterProjectEnvsResponseBodyType {
    Secret = "secret",
    System = "system",
    Encrypted = "encrypted",
    Plain = "plain",
    Sensitive = "sensitive",
}

export enum FilterProjectEnvsContentHintProjectsResponse200ApplicationJSONResponseBody114Type {
    IntegrationStoreSecret = "integration-store-secret",
}

export type FilterProjectEnvsContentHint14 = {
    type: FilterProjectEnvsContentHintProjectsResponse200ApplicationJSONResponseBody114Type;
    storeId: string;
};

export enum FilterProjectEnvsContentHintProjectsResponse200ApplicationJSONResponseBody113Type {
    PostgresUrlNoSsl = "postgres-url-no-ssl",
}

export type FilterProjectEnvsContentHint13 = {
    type: FilterProjectEnvsContentHintProjectsResponse200ApplicationJSONResponseBody113Type;
    storeId: string;
};

export enum FilterProjectEnvsContentHintProjectsResponse200ApplicationJSONResponseBody112Type {
    PostgresDatabase = "postgres-database",
}

export type FilterProjectEnvsContentHint12 = {
    type: FilterProjectEnvsContentHintProjectsResponse200ApplicationJSONResponseBody112Type;
    storeId: string;
};

export enum FilterProjectEnvsContentHintProjectsResponse200ApplicationJSONResponseBody111Type {
    PostgresPassword = "postgres-password",
}

export type FilterProjectEnvsContentHint11 = {
    type: FilterProjectEnvsContentHintProjectsResponse200ApplicationJSONResponseBody111Type;
    storeId: string;
};

export enum FilterProjectEnvsContentHintProjectsResponse200ApplicationJSONResponseBody110Type {
    PostgresHost = "postgres-host",
}

export type FilterProjectEnvsContentHint10 = {
    type: FilterProjectEnvsContentHintProjectsResponse200ApplicationJSONResponseBody110Type;
    storeId: string;
};

export enum FilterProjectEnvsContentHintProjectsResponse200ApplicationJSONResponseBody19Type {
    PostgresUser = "postgres-user",
}

export type FilterProjectEnvsContentHint9 = {
    type: FilterProjectEnvsContentHintProjectsResponse200ApplicationJSONResponseBody19Type;
    storeId: string;
};

export enum FilterProjectEnvsContentHintProjectsResponse200ApplicationJSONResponseBody18Type {
    PostgresPrismaUrl = "postgres-prisma-url",
}

export type FilterProjectEnvsContentHint8 = {
    type: FilterProjectEnvsContentHintProjectsResponse200ApplicationJSONResponseBody18Type;
    storeId: string;
};

export enum FilterProjectEnvsContentHintProjectsResponse200ApplicationJSONResponseBody1Type {
    PostgresUrlNonPooling = "postgres-url-non-pooling",
}

export type FilterProjectEnvsContentHint7 = {
    type: FilterProjectEnvsContentHintProjectsResponse200ApplicationJSONResponseBody1Type;
    storeId: string;
};

export enum FilterProjectEnvsContentHintProjectsResponse200ApplicationJSONResponseBodyType {
    PostgresUrl = "postgres-url",
}

export type FilterProjectEnvsContentHint6 = {
    type: FilterProjectEnvsContentHintProjectsResponse200ApplicationJSONResponseBodyType;
    storeId: string;
};

export enum FilterProjectEnvsContentHintProjectsResponse200ApplicationJSONType {
    BlobReadWriteToken = "blob-read-write-token",
}

export type FilterProjectEnvsContentHint5 = {
    type: FilterProjectEnvsContentHintProjectsResponse200ApplicationJSONType;
    storeId: string;
};

export enum FilterProjectEnvsContentHintProjectsResponse200Type {
    RedisRestApiReadOnlyToken = "redis-rest-api-read-only-token",
}

export type FilterProjectEnvsContentHint4 = {
    type: FilterProjectEnvsContentHintProjectsResponse200Type;
    storeId: string;
};

export enum FilterProjectEnvsContentHintProjectsResponseType {
    RedisRestApiToken = "redis-rest-api-token",
}

export type FilterProjectEnvsContentHint3 = {
    type: FilterProjectEnvsContentHintProjectsResponseType;
    storeId: string;
};

export enum FilterProjectEnvsContentHintProjectsType {
    RedisRestApiUrl = "redis-rest-api-url",
}

export type FilterProjectEnvsContentHint2 = {
    type: FilterProjectEnvsContentHintProjectsType;
    storeId: string;
};

export enum FilterProjectEnvsContentHintType {
    RedisUrl = "redis-url",
}

export type FilterProjectEnvsContentHint1 = {
    type: FilterProjectEnvsContentHintType;
    storeId: string;
};

export type ResponseBodyContentHint =
    | FilterProjectEnvsContentHint1
    | FilterProjectEnvsContentHint2
    | FilterProjectEnvsContentHint3
    | FilterProjectEnvsContentHint4
    | FilterProjectEnvsContentHint5
    | FilterProjectEnvsContentHint6
    | FilterProjectEnvsContentHint7
    | FilterProjectEnvsContentHint8
    | FilterProjectEnvsContentHint9
    | FilterProjectEnvsContentHint10
    | FilterProjectEnvsContentHint11
    | FilterProjectEnvsContentHint12
    | FilterProjectEnvsContentHint13
    | FilterProjectEnvsContentHint14;

export enum FilterProjectEnvsResponseBodyProjectsType {
    FlagsSecret = "flags-secret",
}

/**
 * Similar to `contentHints`, but should not be exposed to the user.
 */
export type ResponseBodyInternalContentHint = {
    type: FilterProjectEnvsResponseBodyProjectsType;
    /**
     * Contains the `value` of the env variable, encrypted with a special key to make decryption possible in the subscriber Lambda.
     */
    encryptedValue: string;
};

export type FilterProjectEnvsResponseBody1 = {
    target?: Array<FilterProjectEnvsTarget1> | FilterProjectEnvsTarget2 | undefined;
    type?: FilterProjectEnvsResponseBodyType | undefined;
    id?: string | undefined;
    key?: string | undefined;
    value?: string | undefined;
    configurationId?: string | null | undefined;
    createdAt?: number | undefined;
    updatedAt?: number | undefined;
    createdBy?: string | null | undefined;
    updatedBy?: string | null | undefined;
    gitBranch?: string | undefined;
    edgeConfigId?: string | null | undefined;
    edgeConfigTokenId?: string | null | undefined;
    contentHint?:
        | FilterProjectEnvsContentHint1
        | FilterProjectEnvsContentHint2
        | FilterProjectEnvsContentHint3
        | FilterProjectEnvsContentHint4
        | FilterProjectEnvsContentHint5
        | FilterProjectEnvsContentHint6
        | FilterProjectEnvsContentHint7
        | FilterProjectEnvsContentHint8
        | FilterProjectEnvsContentHint9
        | FilterProjectEnvsContentHint10
        | FilterProjectEnvsContentHint11
        | FilterProjectEnvsContentHint12
        | FilterProjectEnvsContentHint13
        | FilterProjectEnvsContentHint14
        | null
        | undefined;
    /**
     * Similar to `contentHints`, but should not be exposed to the user.
     */
    internalContentHint?: ResponseBodyInternalContentHint | null | undefined;
    /**
     * Whether `value` is decrypted.
     */
    decrypted?: boolean | undefined;
    comment?: string | undefined;
    customEnvironmentId?: string | undefined;
    system?: boolean | undefined;
};

/**
 * The list of environment variables for the given project
 */
export type FilterProjectEnvsResponseBody =
    | FilterProjectEnvsResponseBody3
    | FilterProjectEnvsResponseBody2
    | FilterProjectEnvsResponseBody1;

export type FilterProjectEnvsResponse = {
    httpMeta: components.HTTPMetadata;
    /**
     * The list of environment variables for the given project
     */
    oneOf?:
        | FilterProjectEnvsResponseBody3
        | FilterProjectEnvsResponseBody2
        | FilterProjectEnvsResponseBody1
        | undefined;
};

/** @internal */
export const Decrypt$: z.ZodNativeEnum<typeof Decrypt> = z.nativeEnum(Decrypt);

/** @internal */
export namespace FilterProjectEnvsRequest$ {
    export const inboundSchema: z.ZodType<FilterProjectEnvsRequest, z.ZodTypeDef, unknown> = z
        .object({
            idOrName: z.string(),
            gitBranch: z.string().optional(),
            decrypt: Decrypt$.optional(),
            source: z.string().optional(),
            customEnvironmentId: z.string().optional(),
            teamId: z.string().optional(),
            slug: z.string().optional(),
        })
        .transform((v) => {
            return {
                idOrName: v.idOrName,
                ...(v.gitBranch === undefined ? null : { gitBranch: v.gitBranch }),
                ...(v.decrypt === undefined ? null : { decrypt: v.decrypt }),
                ...(v.source === undefined ? null : { source: v.source }),
                ...(v.customEnvironmentId === undefined
                    ? null
                    : { customEnvironmentId: v.customEnvironmentId }),
                ...(v.teamId === undefined ? null : { teamId: v.teamId }),
                ...(v.slug === undefined ? null : { slug: v.slug }),
            };
        });

    export type Outbound = {
        idOrName: string;
        gitBranch?: string | undefined;
        decrypt?: Decrypt | undefined;
        source?: string | undefined;
        customEnvironmentId?: string | undefined;
        teamId?: string | undefined;
        slug?: string | undefined;
    };

    export const outboundSchema: z.ZodType<Outbound, z.ZodTypeDef, FilterProjectEnvsRequest> = z
        .object({
            idOrName: z.string(),
            gitBranch: z.string().optional(),
            decrypt: Decrypt$.optional(),
            source: z.string().optional(),
            customEnvironmentId: z.string().optional(),
            teamId: z.string().optional(),
            slug: z.string().optional(),
        })
        .transform((v) => {
            return {
                idOrName: v.idOrName,
                ...(v.gitBranch === undefined ? null : { gitBranch: v.gitBranch }),
                ...(v.decrypt === undefined ? null : { decrypt: v.decrypt }),
                ...(v.source === undefined ? null : { source: v.source }),
                ...(v.customEnvironmentId === undefined
                    ? null
                    : { customEnvironmentId: v.customEnvironmentId }),
                ...(v.teamId === undefined ? null : { teamId: v.teamId }),
                ...(v.slug === undefined ? null : { slug: v.slug }),
            };
        });
}

/** @internal */
export const FilterProjectEnvsTargetProjectsResponse2$: z.ZodNativeEnum<
    typeof FilterProjectEnvsTargetProjectsResponse2
> = z.nativeEnum(FilterProjectEnvsTargetProjectsResponse2);

/** @internal */
export const FilterProjectEnvsTargetProjectsResponse1$: z.ZodNativeEnum<
    typeof FilterProjectEnvsTargetProjectsResponse1
> = z.nativeEnum(FilterProjectEnvsTargetProjectsResponse1);

/** @internal */
export namespace FilterProjectEnvsResponseBodyProjectsResponseTarget$ {
    export const inboundSchema: z.ZodType<
        FilterProjectEnvsResponseBodyProjectsResponseTarget,
        z.ZodTypeDef,
        unknown
    > = z.union([
        z.array(FilterProjectEnvsTargetProjectsResponse1$),
        FilterProjectEnvsTargetProjectsResponse2$,
    ]);

    export type Outbound =
        | Array<FilterProjectEnvsTargetProjectsResponse1>
        | FilterProjectEnvsTargetProjectsResponse2;
    export const outboundSchema: z.ZodType<
        Outbound,
        z.ZodTypeDef,
        FilterProjectEnvsResponseBodyProjectsResponseTarget
    > = z.union([
        z.array(FilterProjectEnvsTargetProjectsResponse1$),
        FilterProjectEnvsTargetProjectsResponse2$,
    ]);
}

/** @internal */
export const FilterProjectEnvsResponseBodyProjectsResponse200Type$: z.ZodNativeEnum<
    typeof FilterProjectEnvsResponseBodyProjectsResponse200Type
> = z.nativeEnum(FilterProjectEnvsResponseBodyProjectsResponse200Type);

/** @internal */
export const FilterProjectEnvsContentHintProjectsResponse200ApplicationJSONResponseBody3Envs14Type$: z.ZodNativeEnum<
    typeof FilterProjectEnvsContentHintProjectsResponse200ApplicationJSONResponseBody3Envs14Type
> = z.nativeEnum(
    FilterProjectEnvsContentHintProjectsResponse200ApplicationJSONResponseBody3Envs14Type
);

/** @internal */
export namespace FilterProjectEnvsContentHintProjectsResponse14$ {
    export const inboundSchema: z.ZodType<
        FilterProjectEnvsContentHintProjectsResponse14,
        z.ZodTypeDef,
        unknown
    > = z
        .object({
            type: FilterProjectEnvsContentHintProjectsResponse200ApplicationJSONResponseBody3Envs14Type$,
            storeId: z.string(),
        })
        .transform((v) => {
            return {
                type: v.type,
                storeId: v.storeId,
            };
        });

    export type Outbound = {
        type: FilterProjectEnvsContentHintProjectsResponse200ApplicationJSONResponseBody3Envs14Type;
        storeId: string;
    };

    export const outboundSchema: z.ZodType<
        Outbound,
        z.ZodTypeDef,
        FilterProjectEnvsContentHintProjectsResponse14
    > = z
        .object({
            type: FilterProjectEnvsContentHintProjectsResponse200ApplicationJSONResponseBody3Envs14Type$,
            storeId: z.string(),
        })
        .transform((v) => {
            return {
                type: v.type,
                storeId: v.storeId,
            };
        });
}

/** @internal */
export const FilterProjectEnvsContentHintProjectsResponse200ApplicationJSONResponseBody3Envs13Type$: z.ZodNativeEnum<
    typeof FilterProjectEnvsContentHintProjectsResponse200ApplicationJSONResponseBody3Envs13Type
> = z.nativeEnum(
    FilterProjectEnvsContentHintProjectsResponse200ApplicationJSONResponseBody3Envs13Type
);

/** @internal */
export namespace FilterProjectEnvsContentHintProjectsResponse13$ {
    export const inboundSchema: z.ZodType<
        FilterProjectEnvsContentHintProjectsResponse13,
        z.ZodTypeDef,
        unknown
    > = z
        .object({
            type: FilterProjectEnvsContentHintProjectsResponse200ApplicationJSONResponseBody3Envs13Type$,
            storeId: z.string(),
        })
        .transform((v) => {
            return {
                type: v.type,
                storeId: v.storeId,
            };
        });

    export type Outbound = {
        type: FilterProjectEnvsContentHintProjectsResponse200ApplicationJSONResponseBody3Envs13Type;
        storeId: string;
    };

    export const outboundSchema: z.ZodType<
        Outbound,
        z.ZodTypeDef,
        FilterProjectEnvsContentHintProjectsResponse13
    > = z
        .object({
            type: FilterProjectEnvsContentHintProjectsResponse200ApplicationJSONResponseBody3Envs13Type$,
            storeId: z.string(),
        })
        .transform((v) => {
            return {
                type: v.type,
                storeId: v.storeId,
            };
        });
}

/** @internal */
export const FilterProjectEnvsContentHintProjectsResponse200ApplicationJSONResponseBody3Envs12Type$: z.ZodNativeEnum<
    typeof FilterProjectEnvsContentHintProjectsResponse200ApplicationJSONResponseBody3Envs12Type
> = z.nativeEnum(
    FilterProjectEnvsContentHintProjectsResponse200ApplicationJSONResponseBody3Envs12Type
);

/** @internal */
export namespace FilterProjectEnvsContentHintProjectsResponse12$ {
    export const inboundSchema: z.ZodType<
        FilterProjectEnvsContentHintProjectsResponse12,
        z.ZodTypeDef,
        unknown
    > = z
        .object({
            type: FilterProjectEnvsContentHintProjectsResponse200ApplicationJSONResponseBody3Envs12Type$,
            storeId: z.string(),
        })
        .transform((v) => {
            return {
                type: v.type,
                storeId: v.storeId,
            };
        });

    export type Outbound = {
        type: FilterProjectEnvsContentHintProjectsResponse200ApplicationJSONResponseBody3Envs12Type;
        storeId: string;
    };

    export const outboundSchema: z.ZodType<
        Outbound,
        z.ZodTypeDef,
        FilterProjectEnvsContentHintProjectsResponse12
    > = z
        .object({
            type: FilterProjectEnvsContentHintProjectsResponse200ApplicationJSONResponseBody3Envs12Type$,
            storeId: z.string(),
        })
        .transform((v) => {
            return {
                type: v.type,
                storeId: v.storeId,
            };
        });
}

/** @internal */
export const FilterProjectEnvsContentHintProjectsResponse200ApplicationJSONResponseBody3Envs11Type$: z.ZodNativeEnum<
    typeof FilterProjectEnvsContentHintProjectsResponse200ApplicationJSONResponseBody3Envs11Type
> = z.nativeEnum(
    FilterProjectEnvsContentHintProjectsResponse200ApplicationJSONResponseBody3Envs11Type
);

/** @internal */
export namespace FilterProjectEnvsContentHintProjectsResponse11$ {
    export const inboundSchema: z.ZodType<
        FilterProjectEnvsContentHintProjectsResponse11,
        z.ZodTypeDef,
        unknown
    > = z
        .object({
            type: FilterProjectEnvsContentHintProjectsResponse200ApplicationJSONResponseBody3Envs11Type$,
            storeId: z.string(),
        })
        .transform((v) => {
            return {
                type: v.type,
                storeId: v.storeId,
            };
        });

    export type Outbound = {
        type: FilterProjectEnvsContentHintProjectsResponse200ApplicationJSONResponseBody3Envs11Type;
        storeId: string;
    };

    export const outboundSchema: z.ZodType<
        Outbound,
        z.ZodTypeDef,
        FilterProjectEnvsContentHintProjectsResponse11
    > = z
        .object({
            type: FilterProjectEnvsContentHintProjectsResponse200ApplicationJSONResponseBody3Envs11Type$,
            storeId: z.string(),
        })
        .transform((v) => {
            return {
                type: v.type,
                storeId: v.storeId,
            };
        });
}

/** @internal */
export const FilterProjectEnvsContentHintProjectsResponse200ApplicationJSONResponseBody3Envs10Type$: z.ZodNativeEnum<
    typeof FilterProjectEnvsContentHintProjectsResponse200ApplicationJSONResponseBody3Envs10Type
> = z.nativeEnum(
    FilterProjectEnvsContentHintProjectsResponse200ApplicationJSONResponseBody3Envs10Type
);

/** @internal */
export namespace FilterProjectEnvsContentHintProjectsResponse10$ {
    export const inboundSchema: z.ZodType<
        FilterProjectEnvsContentHintProjectsResponse10,
        z.ZodTypeDef,
        unknown
    > = z
        .object({
            type: FilterProjectEnvsContentHintProjectsResponse200ApplicationJSONResponseBody3Envs10Type$,
            storeId: z.string(),
        })
        .transform((v) => {
            return {
                type: v.type,
                storeId: v.storeId,
            };
        });

    export type Outbound = {
        type: FilterProjectEnvsContentHintProjectsResponse200ApplicationJSONResponseBody3Envs10Type;
        storeId: string;
    };

    export const outboundSchema: z.ZodType<
        Outbound,
        z.ZodTypeDef,
        FilterProjectEnvsContentHintProjectsResponse10
    > = z
        .object({
            type: FilterProjectEnvsContentHintProjectsResponse200ApplicationJSONResponseBody3Envs10Type$,
            storeId: z.string(),
        })
        .transform((v) => {
            return {
                type: v.type,
                storeId: v.storeId,
            };
        });
}

/** @internal */
export const FilterProjectEnvsContentHintProjectsResponse200ApplicationJSONResponseBody3Envs9Type$: z.ZodNativeEnum<
    typeof FilterProjectEnvsContentHintProjectsResponse200ApplicationJSONResponseBody3Envs9Type
> = z.nativeEnum(
    FilterProjectEnvsContentHintProjectsResponse200ApplicationJSONResponseBody3Envs9Type
);

/** @internal */
export namespace FilterProjectEnvsContentHintProjectsResponse9$ {
    export const inboundSchema: z.ZodType<
        FilterProjectEnvsContentHintProjectsResponse9,
        z.ZodTypeDef,
        unknown
    > = z
        .object({
            type: FilterProjectEnvsContentHintProjectsResponse200ApplicationJSONResponseBody3Envs9Type$,
            storeId: z.string(),
        })
        .transform((v) => {
            return {
                type: v.type,
                storeId: v.storeId,
            };
        });

    export type Outbound = {
        type: FilterProjectEnvsContentHintProjectsResponse200ApplicationJSONResponseBody3Envs9Type;
        storeId: string;
    };

    export const outboundSchema: z.ZodType<
        Outbound,
        z.ZodTypeDef,
        FilterProjectEnvsContentHintProjectsResponse9
    > = z
        .object({
            type: FilterProjectEnvsContentHintProjectsResponse200ApplicationJSONResponseBody3Envs9Type$,
            storeId: z.string(),
        })
        .transform((v) => {
            return {
                type: v.type,
                storeId: v.storeId,
            };
        });
}

/** @internal */
export const FilterProjectEnvsContentHintProjectsResponse200ApplicationJSONResponseBody3Envs8Type$: z.ZodNativeEnum<
    typeof FilterProjectEnvsContentHintProjectsResponse200ApplicationJSONResponseBody3Envs8Type
> = z.nativeEnum(
    FilterProjectEnvsContentHintProjectsResponse200ApplicationJSONResponseBody3Envs8Type
);

/** @internal */
export namespace FilterProjectEnvsContentHintProjectsResponse8$ {
    export const inboundSchema: z.ZodType<
        FilterProjectEnvsContentHintProjectsResponse8,
        z.ZodTypeDef,
        unknown
    > = z
        .object({
            type: FilterProjectEnvsContentHintProjectsResponse200ApplicationJSONResponseBody3Envs8Type$,
            storeId: z.string(),
        })
        .transform((v) => {
            return {
                type: v.type,
                storeId: v.storeId,
            };
        });

    export type Outbound = {
        type: FilterProjectEnvsContentHintProjectsResponse200ApplicationJSONResponseBody3Envs8Type;
        storeId: string;
    };

    export const outboundSchema: z.ZodType<
        Outbound,
        z.ZodTypeDef,
        FilterProjectEnvsContentHintProjectsResponse8
    > = z
        .object({
            type: FilterProjectEnvsContentHintProjectsResponse200ApplicationJSONResponseBody3Envs8Type$,
            storeId: z.string(),
        })
        .transform((v) => {
            return {
                type: v.type,
                storeId: v.storeId,
            };
        });
}

/** @internal */
export const FilterProjectEnvsContentHintProjectsResponse200ApplicationJSONResponseBody3Envs7Type$: z.ZodNativeEnum<
    typeof FilterProjectEnvsContentHintProjectsResponse200ApplicationJSONResponseBody3Envs7Type
> = z.nativeEnum(
    FilterProjectEnvsContentHintProjectsResponse200ApplicationJSONResponseBody3Envs7Type
);

/** @internal */
export namespace FilterProjectEnvsContentHintProjectsResponse7$ {
    export const inboundSchema: z.ZodType<
        FilterProjectEnvsContentHintProjectsResponse7,
        z.ZodTypeDef,
        unknown
    > = z
        .object({
            type: FilterProjectEnvsContentHintProjectsResponse200ApplicationJSONResponseBody3Envs7Type$,
            storeId: z.string(),
        })
        .transform((v) => {
            return {
                type: v.type,
                storeId: v.storeId,
            };
        });

    export type Outbound = {
        type: FilterProjectEnvsContentHintProjectsResponse200ApplicationJSONResponseBody3Envs7Type;
        storeId: string;
    };

    export const outboundSchema: z.ZodType<
        Outbound,
        z.ZodTypeDef,
        FilterProjectEnvsContentHintProjectsResponse7
    > = z
        .object({
            type: FilterProjectEnvsContentHintProjectsResponse200ApplicationJSONResponseBody3Envs7Type$,
            storeId: z.string(),
        })
        .transform((v) => {
            return {
                type: v.type,
                storeId: v.storeId,
            };
        });
}

/** @internal */
export const FilterProjectEnvsContentHintProjectsResponse200ApplicationJSONResponseBody3Envs6Type$: z.ZodNativeEnum<
    typeof FilterProjectEnvsContentHintProjectsResponse200ApplicationJSONResponseBody3Envs6Type
> = z.nativeEnum(
    FilterProjectEnvsContentHintProjectsResponse200ApplicationJSONResponseBody3Envs6Type
);

/** @internal */
export namespace FilterProjectEnvsContentHintProjectsResponse6$ {
    export const inboundSchema: z.ZodType<
        FilterProjectEnvsContentHintProjectsResponse6,
        z.ZodTypeDef,
        unknown
    > = z
        .object({
            type: FilterProjectEnvsContentHintProjectsResponse200ApplicationJSONResponseBody3Envs6Type$,
            storeId: z.string(),
        })
        .transform((v) => {
            return {
                type: v.type,
                storeId: v.storeId,
            };
        });

    export type Outbound = {
        type: FilterProjectEnvsContentHintProjectsResponse200ApplicationJSONResponseBody3Envs6Type;
        storeId: string;
    };

    export const outboundSchema: z.ZodType<
        Outbound,
        z.ZodTypeDef,
        FilterProjectEnvsContentHintProjectsResponse6
    > = z
        .object({
            type: FilterProjectEnvsContentHintProjectsResponse200ApplicationJSONResponseBody3Envs6Type$,
            storeId: z.string(),
        })
        .transform((v) => {
            return {
                type: v.type,
                storeId: v.storeId,
            };
        });
}

/** @internal */
export const FilterProjectEnvsContentHintProjectsResponse200ApplicationJSONResponseBody3Envs5Type$: z.ZodNativeEnum<
    typeof FilterProjectEnvsContentHintProjectsResponse200ApplicationJSONResponseBody3Envs5Type
> = z.nativeEnum(
    FilterProjectEnvsContentHintProjectsResponse200ApplicationJSONResponseBody3Envs5Type
);

/** @internal */
export namespace FilterProjectEnvsContentHintProjectsResponse5$ {
    export const inboundSchema: z.ZodType<
        FilterProjectEnvsContentHintProjectsResponse5,
        z.ZodTypeDef,
        unknown
    > = z
        .object({
            type: FilterProjectEnvsContentHintProjectsResponse200ApplicationJSONResponseBody3Envs5Type$,
            storeId: z.string(),
        })
        .transform((v) => {
            return {
                type: v.type,
                storeId: v.storeId,
            };
        });

    export type Outbound = {
        type: FilterProjectEnvsContentHintProjectsResponse200ApplicationJSONResponseBody3Envs5Type;
        storeId: string;
    };

    export const outboundSchema: z.ZodType<
        Outbound,
        z.ZodTypeDef,
        FilterProjectEnvsContentHintProjectsResponse5
    > = z
        .object({
            type: FilterProjectEnvsContentHintProjectsResponse200ApplicationJSONResponseBody3Envs5Type$,
            storeId: z.string(),
        })
        .transform((v) => {
            return {
                type: v.type,
                storeId: v.storeId,
            };
        });
}

/** @internal */
export const FilterProjectEnvsContentHintProjectsResponse200ApplicationJSONResponseBody3Envs4Type$: z.ZodNativeEnum<
    typeof FilterProjectEnvsContentHintProjectsResponse200ApplicationJSONResponseBody3Envs4Type
> = z.nativeEnum(
    FilterProjectEnvsContentHintProjectsResponse200ApplicationJSONResponseBody3Envs4Type
);

/** @internal */
export namespace FilterProjectEnvsContentHintProjectsResponse4$ {
    export const inboundSchema: z.ZodType<
        FilterProjectEnvsContentHintProjectsResponse4,
        z.ZodTypeDef,
        unknown
    > = z
        .object({
            type: FilterProjectEnvsContentHintProjectsResponse200ApplicationJSONResponseBody3Envs4Type$,
            storeId: z.string(),
        })
        .transform((v) => {
            return {
                type: v.type,
                storeId: v.storeId,
            };
        });

    export type Outbound = {
        type: FilterProjectEnvsContentHintProjectsResponse200ApplicationJSONResponseBody3Envs4Type;
        storeId: string;
    };

    export const outboundSchema: z.ZodType<
        Outbound,
        z.ZodTypeDef,
        FilterProjectEnvsContentHintProjectsResponse4
    > = z
        .object({
            type: FilterProjectEnvsContentHintProjectsResponse200ApplicationJSONResponseBody3Envs4Type$,
            storeId: z.string(),
        })
        .transform((v) => {
            return {
                type: v.type,
                storeId: v.storeId,
            };
        });
}

/** @internal */
export const FilterProjectEnvsContentHintProjectsResponse200ApplicationJSONResponseBody3Envs3Type$: z.ZodNativeEnum<
    typeof FilterProjectEnvsContentHintProjectsResponse200ApplicationJSONResponseBody3Envs3Type
> = z.nativeEnum(
    FilterProjectEnvsContentHintProjectsResponse200ApplicationJSONResponseBody3Envs3Type
);

/** @internal */
export namespace FilterProjectEnvsContentHintProjectsResponse3$ {
    export const inboundSchema: z.ZodType<
        FilterProjectEnvsContentHintProjectsResponse3,
        z.ZodTypeDef,
        unknown
    > = z
        .object({
            type: FilterProjectEnvsContentHintProjectsResponse200ApplicationJSONResponseBody3Envs3Type$,
            storeId: z.string(),
        })
        .transform((v) => {
            return {
                type: v.type,
                storeId: v.storeId,
            };
        });

    export type Outbound = {
        type: FilterProjectEnvsContentHintProjectsResponse200ApplicationJSONResponseBody3Envs3Type;
        storeId: string;
    };

    export const outboundSchema: z.ZodType<
        Outbound,
        z.ZodTypeDef,
        FilterProjectEnvsContentHintProjectsResponse3
    > = z
        .object({
            type: FilterProjectEnvsContentHintProjectsResponse200ApplicationJSONResponseBody3Envs3Type$,
            storeId: z.string(),
        })
        .transform((v) => {
            return {
                type: v.type,
                storeId: v.storeId,
            };
        });
}

/** @internal */
export const FilterProjectEnvsContentHintProjectsResponse200ApplicationJSONResponseBody3EnvsType$: z.ZodNativeEnum<
    typeof FilterProjectEnvsContentHintProjectsResponse200ApplicationJSONResponseBody3EnvsType
> = z.nativeEnum(
    FilterProjectEnvsContentHintProjectsResponse200ApplicationJSONResponseBody3EnvsType
);

/** @internal */
export namespace FilterProjectEnvsContentHintProjectsResponse2$ {
    export const inboundSchema: z.ZodType<
        FilterProjectEnvsContentHintProjectsResponse2,
        z.ZodTypeDef,
        unknown
    > = z
        .object({
            type: FilterProjectEnvsContentHintProjectsResponse200ApplicationJSONResponseBody3EnvsType$,
            storeId: z.string(),
        })
        .transform((v) => {
            return {
                type: v.type,
                storeId: v.storeId,
            };
        });

    export type Outbound = {
        type: FilterProjectEnvsContentHintProjectsResponse200ApplicationJSONResponseBody3EnvsType;
        storeId: string;
    };

    export const outboundSchema: z.ZodType<
        Outbound,
        z.ZodTypeDef,
        FilterProjectEnvsContentHintProjectsResponse2
    > = z
        .object({
            type: FilterProjectEnvsContentHintProjectsResponse200ApplicationJSONResponseBody3EnvsType$,
            storeId: z.string(),
        })
        .transform((v) => {
            return {
                type: v.type,
                storeId: v.storeId,
            };
        });
}

/** @internal */
export const FilterProjectEnvsContentHintProjectsResponse200ApplicationJSONResponseBody3Type$: z.ZodNativeEnum<
    typeof FilterProjectEnvsContentHintProjectsResponse200ApplicationJSONResponseBody3Type
> = z.nativeEnum(FilterProjectEnvsContentHintProjectsResponse200ApplicationJSONResponseBody3Type);

/** @internal */
export namespace FilterProjectEnvsContentHintProjectsResponse1$ {
    export const inboundSchema: z.ZodType<
        FilterProjectEnvsContentHintProjectsResponse1,
        z.ZodTypeDef,
        unknown
    > = z
        .object({
            type: FilterProjectEnvsContentHintProjectsResponse200ApplicationJSONResponseBody3Type$,
            storeId: z.string(),
        })
        .transform((v) => {
            return {
                type: v.type,
                storeId: v.storeId,
            };
        });

    export type Outbound = {
        type: FilterProjectEnvsContentHintProjectsResponse200ApplicationJSONResponseBody3Type;
        storeId: string;
    };

    export const outboundSchema: z.ZodType<
        Outbound,
        z.ZodTypeDef,
        FilterProjectEnvsContentHintProjectsResponse1
    > = z
        .object({
            type: FilterProjectEnvsContentHintProjectsResponse200ApplicationJSONResponseBody3Type$,
            storeId: z.string(),
        })
        .transform((v) => {
            return {
                type: v.type,
                storeId: v.storeId,
            };
        });
}

/** @internal */
export namespace FilterProjectEnvsResponseBodyProjectsContentHint$ {
    export const inboundSchema: z.ZodType<
        FilterProjectEnvsResponseBodyProjectsContentHint,
        z.ZodTypeDef,
        unknown
    > = z.union([
        z.lazy(() => FilterProjectEnvsContentHintProjectsResponse1$.inboundSchema),
        z.lazy(() => FilterProjectEnvsContentHintProjectsResponse2$.inboundSchema),
        z.lazy(() => FilterProjectEnvsContentHintProjectsResponse3$.inboundSchema),
        z.lazy(() => FilterProjectEnvsContentHintProjectsResponse4$.inboundSchema),
        z.lazy(() => FilterProjectEnvsContentHintProjectsResponse5$.inboundSchema),
        z.lazy(() => FilterProjectEnvsContentHintProjectsResponse6$.inboundSchema),
        z.lazy(() => FilterProjectEnvsContentHintProjectsResponse7$.inboundSchema),
        z.lazy(() => FilterProjectEnvsContentHintProjectsResponse8$.inboundSchema),
        z.lazy(() => FilterProjectEnvsContentHintProjectsResponse9$.inboundSchema),
        z.lazy(() => FilterProjectEnvsContentHintProjectsResponse10$.inboundSchema),
        z.lazy(() => FilterProjectEnvsContentHintProjectsResponse11$.inboundSchema),
        z.lazy(() => FilterProjectEnvsContentHintProjectsResponse12$.inboundSchema),
        z.lazy(() => FilterProjectEnvsContentHintProjectsResponse13$.inboundSchema),
        z.lazy(() => FilterProjectEnvsContentHintProjectsResponse14$.inboundSchema),
    ]);

    export type Outbound =
        | FilterProjectEnvsContentHintProjectsResponse1$.Outbound
        | FilterProjectEnvsContentHintProjectsResponse2$.Outbound
        | FilterProjectEnvsContentHintProjectsResponse3$.Outbound
        | FilterProjectEnvsContentHintProjectsResponse4$.Outbound
        | FilterProjectEnvsContentHintProjectsResponse5$.Outbound
        | FilterProjectEnvsContentHintProjectsResponse6$.Outbound
        | FilterProjectEnvsContentHintProjectsResponse7$.Outbound
        | FilterProjectEnvsContentHintProjectsResponse8$.Outbound
        | FilterProjectEnvsContentHintProjectsResponse9$.Outbound
        | FilterProjectEnvsContentHintProjectsResponse10$.Outbound
        | FilterProjectEnvsContentHintProjectsResponse11$.Outbound
        | FilterProjectEnvsContentHintProjectsResponse12$.Outbound
        | FilterProjectEnvsContentHintProjectsResponse13$.Outbound
        | FilterProjectEnvsContentHintProjectsResponse14$.Outbound;
    export const outboundSchema: z.ZodType<
        Outbound,
        z.ZodTypeDef,
        FilterProjectEnvsResponseBodyProjectsContentHint
    > = z.union([
        z.lazy(() => FilterProjectEnvsContentHintProjectsResponse1$.outboundSchema),
        z.lazy(() => FilterProjectEnvsContentHintProjectsResponse2$.outboundSchema),
        z.lazy(() => FilterProjectEnvsContentHintProjectsResponse3$.outboundSchema),
        z.lazy(() => FilterProjectEnvsContentHintProjectsResponse4$.outboundSchema),
        z.lazy(() => FilterProjectEnvsContentHintProjectsResponse5$.outboundSchema),
        z.lazy(() => FilterProjectEnvsContentHintProjectsResponse6$.outboundSchema),
        z.lazy(() => FilterProjectEnvsContentHintProjectsResponse7$.outboundSchema),
        z.lazy(() => FilterProjectEnvsContentHintProjectsResponse8$.outboundSchema),
        z.lazy(() => FilterProjectEnvsContentHintProjectsResponse9$.outboundSchema),
        z.lazy(() => FilterProjectEnvsContentHintProjectsResponse10$.outboundSchema),
        z.lazy(() => FilterProjectEnvsContentHintProjectsResponse11$.outboundSchema),
        z.lazy(() => FilterProjectEnvsContentHintProjectsResponse12$.outboundSchema),
        z.lazy(() => FilterProjectEnvsContentHintProjectsResponse13$.outboundSchema),
        z.lazy(() => FilterProjectEnvsContentHintProjectsResponse14$.outboundSchema),
    ]);
}

/** @internal */
export const FilterProjectEnvsResponseBodyProjectsResponse200ApplicationJson3Type$: z.ZodNativeEnum<
    typeof FilterProjectEnvsResponseBodyProjectsResponse200ApplicationJson3Type
> = z.nativeEnum(FilterProjectEnvsResponseBodyProjectsResponse200ApplicationJson3Type);

/** @internal */
export namespace FilterProjectEnvsResponseBodyProjectsInternalContentHint$ {
    export const inboundSchema: z.ZodType<
        FilterProjectEnvsResponseBodyProjectsInternalContentHint,
        z.ZodTypeDef,
        unknown
    > = z
        .object({
            type: FilterProjectEnvsResponseBodyProjectsResponse200ApplicationJson3Type$,
            encryptedValue: z.string(),
        })
        .transform((v) => {
            return {
                type: v.type,
                encryptedValue: v.encryptedValue,
            };
        });

    export type Outbound = {
        type: FilterProjectEnvsResponseBodyProjectsResponse200ApplicationJson3Type;
        encryptedValue: string;
    };

    export const outboundSchema: z.ZodType<
        Outbound,
        z.ZodTypeDef,
        FilterProjectEnvsResponseBodyProjectsInternalContentHint
    > = z
        .object({
            type: FilterProjectEnvsResponseBodyProjectsResponse200ApplicationJson3Type$,
            encryptedValue: z.string(),
        })
        .transform((v) => {
            return {
                type: v.type,
                encryptedValue: v.encryptedValue,
            };
        });
}

/** @internal */
export namespace ResponseBodyEnvs$ {
    export const inboundSchema: z.ZodType<ResponseBodyEnvs, z.ZodTypeDef, unknown> = z
        .object({
            target: z
                .union([
                    z.array(FilterProjectEnvsTargetProjectsResponse1$),
                    FilterProjectEnvsTargetProjectsResponse2$,
                ])
                .optional(),
            type: FilterProjectEnvsResponseBodyProjectsResponse200Type$.optional(),
            id: z.string().optional(),
            key: z.string().optional(),
            value: z.string().optional(),
            configurationId: z.nullable(z.string()).optional(),
            createdAt: z.number().optional(),
            updatedAt: z.number().optional(),
            createdBy: z.nullable(z.string()).optional(),
            updatedBy: z.nullable(z.string()).optional(),
            gitBranch: z.string().optional(),
            edgeConfigId: z.nullable(z.string()).optional(),
            edgeConfigTokenId: z.nullable(z.string()).optional(),
            contentHint: z
                .nullable(
                    z.union([
                        z.lazy(() => FilterProjectEnvsContentHintProjectsResponse1$.inboundSchema),
                        z.lazy(() => FilterProjectEnvsContentHintProjectsResponse2$.inboundSchema),
                        z.lazy(() => FilterProjectEnvsContentHintProjectsResponse3$.inboundSchema),
                        z.lazy(() => FilterProjectEnvsContentHintProjectsResponse4$.inboundSchema),
                        z.lazy(() => FilterProjectEnvsContentHintProjectsResponse5$.inboundSchema),
                        z.lazy(() => FilterProjectEnvsContentHintProjectsResponse6$.inboundSchema),
                        z.lazy(() => FilterProjectEnvsContentHintProjectsResponse7$.inboundSchema),
                        z.lazy(() => FilterProjectEnvsContentHintProjectsResponse8$.inboundSchema),
                        z.lazy(() => FilterProjectEnvsContentHintProjectsResponse9$.inboundSchema),
                        z.lazy(() => FilterProjectEnvsContentHintProjectsResponse10$.inboundSchema),
                        z.lazy(() => FilterProjectEnvsContentHintProjectsResponse11$.inboundSchema),
                        z.lazy(() => FilterProjectEnvsContentHintProjectsResponse12$.inboundSchema),
                        z.lazy(() => FilterProjectEnvsContentHintProjectsResponse13$.inboundSchema),
                        z.lazy(() => FilterProjectEnvsContentHintProjectsResponse14$.inboundSchema),
                    ])
                )
                .optional(),
            internalContentHint: z
                .nullable(
                    z.lazy(
                        () =>
                            FilterProjectEnvsResponseBodyProjectsInternalContentHint$.inboundSchema
                    )
                )
                .optional(),
            decrypted: z.boolean().optional(),
            comment: z.string().optional(),
            customEnvironmentId: z.string().optional(),
            system: z.boolean().optional(),
        })
        .transform((v) => {
            return {
                ...(v.target === undefined ? null : { target: v.target }),
                ...(v.type === undefined ? null : { type: v.type }),
                ...(v.id === undefined ? null : { id: v.id }),
                ...(v.key === undefined ? null : { key: v.key }),
                ...(v.value === undefined ? null : { value: v.value }),
                ...(v.configurationId === undefined
                    ? null
                    : { configurationId: v.configurationId }),
                ...(v.createdAt === undefined ? null : { createdAt: v.createdAt }),
                ...(v.updatedAt === undefined ? null : { updatedAt: v.updatedAt }),
                ...(v.createdBy === undefined ? null : { createdBy: v.createdBy }),
                ...(v.updatedBy === undefined ? null : { updatedBy: v.updatedBy }),
                ...(v.gitBranch === undefined ? null : { gitBranch: v.gitBranch }),
                ...(v.edgeConfigId === undefined ? null : { edgeConfigId: v.edgeConfigId }),
                ...(v.edgeConfigTokenId === undefined
                    ? null
                    : { edgeConfigTokenId: v.edgeConfigTokenId }),
                ...(v.contentHint === undefined ? null : { contentHint: v.contentHint }),
                ...(v.internalContentHint === undefined
                    ? null
                    : { internalContentHint: v.internalContentHint }),
                ...(v.decrypted === undefined ? null : { decrypted: v.decrypted }),
                ...(v.comment === undefined ? null : { comment: v.comment }),
                ...(v.customEnvironmentId === undefined
                    ? null
                    : { customEnvironmentId: v.customEnvironmentId }),
                ...(v.system === undefined ? null : { system: v.system }),
            };
        });

    export type Outbound = {
        target?:
            | Array<FilterProjectEnvsTargetProjectsResponse1>
            | FilterProjectEnvsTargetProjectsResponse2
            | undefined;
        type?: FilterProjectEnvsResponseBodyProjectsResponse200Type | undefined;
        id?: string | undefined;
        key?: string | undefined;
        value?: string | undefined;
        configurationId?: string | null | undefined;
        createdAt?: number | undefined;
        updatedAt?: number | undefined;
        createdBy?: string | null | undefined;
        updatedBy?: string | null | undefined;
        gitBranch?: string | undefined;
        edgeConfigId?: string | null | undefined;
        edgeConfigTokenId?: string | null | undefined;
        contentHint?:
            | FilterProjectEnvsContentHintProjectsResponse1$.Outbound
            | FilterProjectEnvsContentHintProjectsResponse2$.Outbound
            | FilterProjectEnvsContentHintProjectsResponse3$.Outbound
            | FilterProjectEnvsContentHintProjectsResponse4$.Outbound
            | FilterProjectEnvsContentHintProjectsResponse5$.Outbound
            | FilterProjectEnvsContentHintProjectsResponse6$.Outbound
            | FilterProjectEnvsContentHintProjectsResponse7$.Outbound
            | FilterProjectEnvsContentHintProjectsResponse8$.Outbound
            | FilterProjectEnvsContentHintProjectsResponse9$.Outbound
            | FilterProjectEnvsContentHintProjectsResponse10$.Outbound
            | FilterProjectEnvsContentHintProjectsResponse11$.Outbound
            | FilterProjectEnvsContentHintProjectsResponse12$.Outbound
            | FilterProjectEnvsContentHintProjectsResponse13$.Outbound
            | FilterProjectEnvsContentHintProjectsResponse14$.Outbound
            | null
            | undefined;
        internalContentHint?:
            | FilterProjectEnvsResponseBodyProjectsInternalContentHint$.Outbound
            | null
            | undefined;
        decrypted?: boolean | undefined;
        comment?: string | undefined;
        customEnvironmentId?: string | undefined;
        system?: boolean | undefined;
    };

    export const outboundSchema: z.ZodType<Outbound, z.ZodTypeDef, ResponseBodyEnvs> = z
        .object({
            target: z
                .union([
                    z.array(FilterProjectEnvsTargetProjectsResponse1$),
                    FilterProjectEnvsTargetProjectsResponse2$,
                ])
                .optional(),
            type: FilterProjectEnvsResponseBodyProjectsResponse200Type$.optional(),
            id: z.string().optional(),
            key: z.string().optional(),
            value: z.string().optional(),
            configurationId: z.nullable(z.string()).optional(),
            createdAt: z.number().optional(),
            updatedAt: z.number().optional(),
            createdBy: z.nullable(z.string()).optional(),
            updatedBy: z.nullable(z.string()).optional(),
            gitBranch: z.string().optional(),
            edgeConfigId: z.nullable(z.string()).optional(),
            edgeConfigTokenId: z.nullable(z.string()).optional(),
            contentHint: z
                .nullable(
                    z.union([
                        z.lazy(() => FilterProjectEnvsContentHintProjectsResponse1$.outboundSchema),
                        z.lazy(() => FilterProjectEnvsContentHintProjectsResponse2$.outboundSchema),
                        z.lazy(() => FilterProjectEnvsContentHintProjectsResponse3$.outboundSchema),
                        z.lazy(() => FilterProjectEnvsContentHintProjectsResponse4$.outboundSchema),
                        z.lazy(() => FilterProjectEnvsContentHintProjectsResponse5$.outboundSchema),
                        z.lazy(() => FilterProjectEnvsContentHintProjectsResponse6$.outboundSchema),
                        z.lazy(() => FilterProjectEnvsContentHintProjectsResponse7$.outboundSchema),
                        z.lazy(() => FilterProjectEnvsContentHintProjectsResponse8$.outboundSchema),
                        z.lazy(() => FilterProjectEnvsContentHintProjectsResponse9$.outboundSchema),
                        z.lazy(
                            () => FilterProjectEnvsContentHintProjectsResponse10$.outboundSchema
                        ),
                        z.lazy(
                            () => FilterProjectEnvsContentHintProjectsResponse11$.outboundSchema
                        ),
                        z.lazy(
                            () => FilterProjectEnvsContentHintProjectsResponse12$.outboundSchema
                        ),
                        z.lazy(
                            () => FilterProjectEnvsContentHintProjectsResponse13$.outboundSchema
                        ),
                        z.lazy(
                            () => FilterProjectEnvsContentHintProjectsResponse14$.outboundSchema
                        ),
                    ])
                )
                .optional(),
            internalContentHint: z
                .nullable(
                    z.lazy(
                        () =>
                            FilterProjectEnvsResponseBodyProjectsInternalContentHint$.outboundSchema
                    )
                )
                .optional(),
            decrypted: z.boolean().optional(),
            comment: z.string().optional(),
            customEnvironmentId: z.string().optional(),
            system: z.boolean().optional(),
        })
        .transform((v) => {
            return {
                ...(v.target === undefined ? null : { target: v.target }),
                ...(v.type === undefined ? null : { type: v.type }),
                ...(v.id === undefined ? null : { id: v.id }),
                ...(v.key === undefined ? null : { key: v.key }),
                ...(v.value === undefined ? null : { value: v.value }),
                ...(v.configurationId === undefined
                    ? null
                    : { configurationId: v.configurationId }),
                ...(v.createdAt === undefined ? null : { createdAt: v.createdAt }),
                ...(v.updatedAt === undefined ? null : { updatedAt: v.updatedAt }),
                ...(v.createdBy === undefined ? null : { createdBy: v.createdBy }),
                ...(v.updatedBy === undefined ? null : { updatedBy: v.updatedBy }),
                ...(v.gitBranch === undefined ? null : { gitBranch: v.gitBranch }),
                ...(v.edgeConfigId === undefined ? null : { edgeConfigId: v.edgeConfigId }),
                ...(v.edgeConfigTokenId === undefined
                    ? null
                    : { edgeConfigTokenId: v.edgeConfigTokenId }),
                ...(v.contentHint === undefined ? null : { contentHint: v.contentHint }),
                ...(v.internalContentHint === undefined
                    ? null
                    : { internalContentHint: v.internalContentHint }),
                ...(v.decrypted === undefined ? null : { decrypted: v.decrypted }),
                ...(v.comment === undefined ? null : { comment: v.comment }),
                ...(v.customEnvironmentId === undefined
                    ? null
                    : { customEnvironmentId: v.customEnvironmentId }),
                ...(v.system === undefined ? null : { system: v.system }),
            };
        });
}

/** @internal */
export namespace FilterProjectEnvsResponseBody3$ {
    export const inboundSchema: z.ZodType<FilterProjectEnvsResponseBody3, z.ZodTypeDef, unknown> = z
        .object({
            envs: z.array(z.lazy(() => ResponseBodyEnvs$.inboundSchema)),
        })
        .transform((v) => {
            return {
                envs: v.envs,
            };
        });

    export type Outbound = {
        envs: Array<ResponseBodyEnvs$.Outbound>;
    };

    export const outboundSchema: z.ZodType<Outbound, z.ZodTypeDef, FilterProjectEnvsResponseBody3> =
        z
            .object({
                envs: z.array(z.lazy(() => ResponseBodyEnvs$.outboundSchema)),
            })
            .transform((v) => {
                return {
                    envs: v.envs,
                };
            });
}

/** @internal */
export const FilterProjectEnvsTargetProjects2$: z.ZodNativeEnum<
    typeof FilterProjectEnvsTargetProjects2
> = z.nativeEnum(FilterProjectEnvsTargetProjects2);

/** @internal */
export const FilterProjectEnvsTargetProjects1$: z.ZodNativeEnum<
    typeof FilterProjectEnvsTargetProjects1
> = z.nativeEnum(FilterProjectEnvsTargetProjects1);

/** @internal */
export namespace FilterProjectEnvsResponseBodyProjectsTarget$ {
    export const inboundSchema: z.ZodType<
        FilterProjectEnvsResponseBodyProjectsTarget,
        z.ZodTypeDef,
        unknown
    > = z.union([z.array(FilterProjectEnvsTargetProjects1$), FilterProjectEnvsTargetProjects2$]);

    export type Outbound =
        | Array<FilterProjectEnvsTargetProjects1>
        | FilterProjectEnvsTargetProjects2;
    export const outboundSchema: z.ZodType<
        Outbound,
        z.ZodTypeDef,
        FilterProjectEnvsResponseBodyProjectsTarget
    > = z.union([z.array(FilterProjectEnvsTargetProjects1$), FilterProjectEnvsTargetProjects2$]);
}

/** @internal */
export const FilterProjectEnvsResponseBodyProjectsResponseType$: z.ZodNativeEnum<
    typeof FilterProjectEnvsResponseBodyProjectsResponseType
> = z.nativeEnum(FilterProjectEnvsResponseBodyProjectsResponseType);

/** @internal */
export const FilterProjectEnvsContentHintProjectsResponse200ApplicationJSONResponseBody2Envs14Type$: z.ZodNativeEnum<
    typeof FilterProjectEnvsContentHintProjectsResponse200ApplicationJSONResponseBody2Envs14Type
> = z.nativeEnum(
    FilterProjectEnvsContentHintProjectsResponse200ApplicationJSONResponseBody2Envs14Type
);

/** @internal */
export namespace FilterProjectEnvsContentHintProjects14$ {
    export const inboundSchema: z.ZodType<
        FilterProjectEnvsContentHintProjects14,
        z.ZodTypeDef,
        unknown
    > = z
        .object({
            type: FilterProjectEnvsContentHintProjectsResponse200ApplicationJSONResponseBody2Envs14Type$,
            storeId: z.string(),
        })
        .transform((v) => {
            return {
                type: v.type,
                storeId: v.storeId,
            };
        });

    export type Outbound = {
        type: FilterProjectEnvsContentHintProjectsResponse200ApplicationJSONResponseBody2Envs14Type;
        storeId: string;
    };

    export const outboundSchema: z.ZodType<
        Outbound,
        z.ZodTypeDef,
        FilterProjectEnvsContentHintProjects14
    > = z
        .object({
            type: FilterProjectEnvsContentHintProjectsResponse200ApplicationJSONResponseBody2Envs14Type$,
            storeId: z.string(),
        })
        .transform((v) => {
            return {
                type: v.type,
                storeId: v.storeId,
            };
        });
}

/** @internal */
export const FilterProjectEnvsContentHintProjectsResponse200ApplicationJSONResponseBody2Envs13Type$: z.ZodNativeEnum<
    typeof FilterProjectEnvsContentHintProjectsResponse200ApplicationJSONResponseBody2Envs13Type
> = z.nativeEnum(
    FilterProjectEnvsContentHintProjectsResponse200ApplicationJSONResponseBody2Envs13Type
);

/** @internal */
export namespace FilterProjectEnvsContentHintProjects13$ {
    export const inboundSchema: z.ZodType<
        FilterProjectEnvsContentHintProjects13,
        z.ZodTypeDef,
        unknown
    > = z
        .object({
            type: FilterProjectEnvsContentHintProjectsResponse200ApplicationJSONResponseBody2Envs13Type$,
            storeId: z.string(),
        })
        .transform((v) => {
            return {
                type: v.type,
                storeId: v.storeId,
            };
        });

    export type Outbound = {
        type: FilterProjectEnvsContentHintProjectsResponse200ApplicationJSONResponseBody2Envs13Type;
        storeId: string;
    };

    export const outboundSchema: z.ZodType<
        Outbound,
        z.ZodTypeDef,
        FilterProjectEnvsContentHintProjects13
    > = z
        .object({
            type: FilterProjectEnvsContentHintProjectsResponse200ApplicationJSONResponseBody2Envs13Type$,
            storeId: z.string(),
        })
        .transform((v) => {
            return {
                type: v.type,
                storeId: v.storeId,
            };
        });
}

/** @internal */
export const FilterProjectEnvsContentHintProjectsResponse200ApplicationJSONResponseBody2Envs12Type$: z.ZodNativeEnum<
    typeof FilterProjectEnvsContentHintProjectsResponse200ApplicationJSONResponseBody2Envs12Type
> = z.nativeEnum(
    FilterProjectEnvsContentHintProjectsResponse200ApplicationJSONResponseBody2Envs12Type
);

/** @internal */
export namespace FilterProjectEnvsContentHintProjects12$ {
    export const inboundSchema: z.ZodType<
        FilterProjectEnvsContentHintProjects12,
        z.ZodTypeDef,
        unknown
    > = z
        .object({
            type: FilterProjectEnvsContentHintProjectsResponse200ApplicationJSONResponseBody2Envs12Type$,
            storeId: z.string(),
        })
        .transform((v) => {
            return {
                type: v.type,
                storeId: v.storeId,
            };
        });

    export type Outbound = {
        type: FilterProjectEnvsContentHintProjectsResponse200ApplicationJSONResponseBody2Envs12Type;
        storeId: string;
    };

    export const outboundSchema: z.ZodType<
        Outbound,
        z.ZodTypeDef,
        FilterProjectEnvsContentHintProjects12
    > = z
        .object({
            type: FilterProjectEnvsContentHintProjectsResponse200ApplicationJSONResponseBody2Envs12Type$,
            storeId: z.string(),
        })
        .transform((v) => {
            return {
                type: v.type,
                storeId: v.storeId,
            };
        });
}

/** @internal */
export const FilterProjectEnvsContentHintProjectsResponse200ApplicationJSONResponseBody2Envs11Type$: z.ZodNativeEnum<
    typeof FilterProjectEnvsContentHintProjectsResponse200ApplicationJSONResponseBody2Envs11Type
> = z.nativeEnum(
    FilterProjectEnvsContentHintProjectsResponse200ApplicationJSONResponseBody2Envs11Type
);

/** @internal */
export namespace FilterProjectEnvsContentHintProjects11$ {
    export const inboundSchema: z.ZodType<
        FilterProjectEnvsContentHintProjects11,
        z.ZodTypeDef,
        unknown
    > = z
        .object({
            type: FilterProjectEnvsContentHintProjectsResponse200ApplicationJSONResponseBody2Envs11Type$,
            storeId: z.string(),
        })
        .transform((v) => {
            return {
                type: v.type,
                storeId: v.storeId,
            };
        });

    export type Outbound = {
        type: FilterProjectEnvsContentHintProjectsResponse200ApplicationJSONResponseBody2Envs11Type;
        storeId: string;
    };

    export const outboundSchema: z.ZodType<
        Outbound,
        z.ZodTypeDef,
        FilterProjectEnvsContentHintProjects11
    > = z
        .object({
            type: FilterProjectEnvsContentHintProjectsResponse200ApplicationJSONResponseBody2Envs11Type$,
            storeId: z.string(),
        })
        .transform((v) => {
            return {
                type: v.type,
                storeId: v.storeId,
            };
        });
}

/** @internal */
export const FilterProjectEnvsContentHintProjectsResponse200ApplicationJSONResponseBody2Envs10Type$: z.ZodNativeEnum<
    typeof FilterProjectEnvsContentHintProjectsResponse200ApplicationJSONResponseBody2Envs10Type
> = z.nativeEnum(
    FilterProjectEnvsContentHintProjectsResponse200ApplicationJSONResponseBody2Envs10Type
);

/** @internal */
export namespace FilterProjectEnvsContentHintProjects10$ {
    export const inboundSchema: z.ZodType<
        FilterProjectEnvsContentHintProjects10,
        z.ZodTypeDef,
        unknown
    > = z
        .object({
            type: FilterProjectEnvsContentHintProjectsResponse200ApplicationJSONResponseBody2Envs10Type$,
            storeId: z.string(),
        })
        .transform((v) => {
            return {
                type: v.type,
                storeId: v.storeId,
            };
        });

    export type Outbound = {
        type: FilterProjectEnvsContentHintProjectsResponse200ApplicationJSONResponseBody2Envs10Type;
        storeId: string;
    };

    export const outboundSchema: z.ZodType<
        Outbound,
        z.ZodTypeDef,
        FilterProjectEnvsContentHintProjects10
    > = z
        .object({
            type: FilterProjectEnvsContentHintProjectsResponse200ApplicationJSONResponseBody2Envs10Type$,
            storeId: z.string(),
        })
        .transform((v) => {
            return {
                type: v.type,
                storeId: v.storeId,
            };
        });
}

/** @internal */
export const FilterProjectEnvsContentHintProjectsResponse200ApplicationJSONResponseBody2Envs9Type$: z.ZodNativeEnum<
    typeof FilterProjectEnvsContentHintProjectsResponse200ApplicationJSONResponseBody2Envs9Type
> = z.nativeEnum(
    FilterProjectEnvsContentHintProjectsResponse200ApplicationJSONResponseBody2Envs9Type
);

/** @internal */
export namespace FilterProjectEnvsContentHintProjects9$ {
    export const inboundSchema: z.ZodType<
        FilterProjectEnvsContentHintProjects9,
        z.ZodTypeDef,
        unknown
    > = z
        .object({
            type: FilterProjectEnvsContentHintProjectsResponse200ApplicationJSONResponseBody2Envs9Type$,
            storeId: z.string(),
        })
        .transform((v) => {
            return {
                type: v.type,
                storeId: v.storeId,
            };
        });

    export type Outbound = {
        type: FilterProjectEnvsContentHintProjectsResponse200ApplicationJSONResponseBody2Envs9Type;
        storeId: string;
    };

    export const outboundSchema: z.ZodType<
        Outbound,
        z.ZodTypeDef,
        FilterProjectEnvsContentHintProjects9
    > = z
        .object({
            type: FilterProjectEnvsContentHintProjectsResponse200ApplicationJSONResponseBody2Envs9Type$,
            storeId: z.string(),
        })
        .transform((v) => {
            return {
                type: v.type,
                storeId: v.storeId,
            };
        });
}

/** @internal */
export const FilterProjectEnvsContentHintProjectsResponse200ApplicationJSONResponseBody2Envs8Type$: z.ZodNativeEnum<
    typeof FilterProjectEnvsContentHintProjectsResponse200ApplicationJSONResponseBody2Envs8Type
> = z.nativeEnum(
    FilterProjectEnvsContentHintProjectsResponse200ApplicationJSONResponseBody2Envs8Type
);

/** @internal */
export namespace FilterProjectEnvsContentHintProjects8$ {
    export const inboundSchema: z.ZodType<
        FilterProjectEnvsContentHintProjects8,
        z.ZodTypeDef,
        unknown
    > = z
        .object({
            type: FilterProjectEnvsContentHintProjectsResponse200ApplicationJSONResponseBody2Envs8Type$,
            storeId: z.string(),
        })
        .transform((v) => {
            return {
                type: v.type,
                storeId: v.storeId,
            };
        });

    export type Outbound = {
        type: FilterProjectEnvsContentHintProjectsResponse200ApplicationJSONResponseBody2Envs8Type;
        storeId: string;
    };

    export const outboundSchema: z.ZodType<
        Outbound,
        z.ZodTypeDef,
        FilterProjectEnvsContentHintProjects8
    > = z
        .object({
            type: FilterProjectEnvsContentHintProjectsResponse200ApplicationJSONResponseBody2Envs8Type$,
            storeId: z.string(),
        })
        .transform((v) => {
            return {
                type: v.type,
                storeId: v.storeId,
            };
        });
}

/** @internal */
export const FilterProjectEnvsContentHintProjectsResponse200ApplicationJSONResponseBody2Envs7Type$: z.ZodNativeEnum<
    typeof FilterProjectEnvsContentHintProjectsResponse200ApplicationJSONResponseBody2Envs7Type
> = z.nativeEnum(
    FilterProjectEnvsContentHintProjectsResponse200ApplicationJSONResponseBody2Envs7Type
);

/** @internal */
export namespace FilterProjectEnvsContentHintProjects7$ {
    export const inboundSchema: z.ZodType<
        FilterProjectEnvsContentHintProjects7,
        z.ZodTypeDef,
        unknown
    > = z
        .object({
            type: FilterProjectEnvsContentHintProjectsResponse200ApplicationJSONResponseBody2Envs7Type$,
            storeId: z.string(),
        })
        .transform((v) => {
            return {
                type: v.type,
                storeId: v.storeId,
            };
        });

    export type Outbound = {
        type: FilterProjectEnvsContentHintProjectsResponse200ApplicationJSONResponseBody2Envs7Type;
        storeId: string;
    };

    export const outboundSchema: z.ZodType<
        Outbound,
        z.ZodTypeDef,
        FilterProjectEnvsContentHintProjects7
    > = z
        .object({
            type: FilterProjectEnvsContentHintProjectsResponse200ApplicationJSONResponseBody2Envs7Type$,
            storeId: z.string(),
        })
        .transform((v) => {
            return {
                type: v.type,
                storeId: v.storeId,
            };
        });
}

/** @internal */
export const FilterProjectEnvsContentHintProjectsResponse200ApplicationJSONResponseBody2Envs6Type$: z.ZodNativeEnum<
    typeof FilterProjectEnvsContentHintProjectsResponse200ApplicationJSONResponseBody2Envs6Type
> = z.nativeEnum(
    FilterProjectEnvsContentHintProjectsResponse200ApplicationJSONResponseBody2Envs6Type
);

/** @internal */
export namespace FilterProjectEnvsContentHintProjects6$ {
    export const inboundSchema: z.ZodType<
        FilterProjectEnvsContentHintProjects6,
        z.ZodTypeDef,
        unknown
    > = z
        .object({
            type: FilterProjectEnvsContentHintProjectsResponse200ApplicationJSONResponseBody2Envs6Type$,
            storeId: z.string(),
        })
        .transform((v) => {
            return {
                type: v.type,
                storeId: v.storeId,
            };
        });

    export type Outbound = {
        type: FilterProjectEnvsContentHintProjectsResponse200ApplicationJSONResponseBody2Envs6Type;
        storeId: string;
    };

    export const outboundSchema: z.ZodType<
        Outbound,
        z.ZodTypeDef,
        FilterProjectEnvsContentHintProjects6
    > = z
        .object({
            type: FilterProjectEnvsContentHintProjectsResponse200ApplicationJSONResponseBody2Envs6Type$,
            storeId: z.string(),
        })
        .transform((v) => {
            return {
                type: v.type,
                storeId: v.storeId,
            };
        });
}

/** @internal */
export const FilterProjectEnvsContentHintProjectsResponse200ApplicationJSONResponseBody2Envs5Type$: z.ZodNativeEnum<
    typeof FilterProjectEnvsContentHintProjectsResponse200ApplicationJSONResponseBody2Envs5Type
> = z.nativeEnum(
    FilterProjectEnvsContentHintProjectsResponse200ApplicationJSONResponseBody2Envs5Type
);

/** @internal */
export namespace FilterProjectEnvsContentHintProjects5$ {
    export const inboundSchema: z.ZodType<
        FilterProjectEnvsContentHintProjects5,
        z.ZodTypeDef,
        unknown
    > = z
        .object({
            type: FilterProjectEnvsContentHintProjectsResponse200ApplicationJSONResponseBody2Envs5Type$,
            storeId: z.string(),
        })
        .transform((v) => {
            return {
                type: v.type,
                storeId: v.storeId,
            };
        });

    export type Outbound = {
        type: FilterProjectEnvsContentHintProjectsResponse200ApplicationJSONResponseBody2Envs5Type;
        storeId: string;
    };

    export const outboundSchema: z.ZodType<
        Outbound,
        z.ZodTypeDef,
        FilterProjectEnvsContentHintProjects5
    > = z
        .object({
            type: FilterProjectEnvsContentHintProjectsResponse200ApplicationJSONResponseBody2Envs5Type$,
            storeId: z.string(),
        })
        .transform((v) => {
            return {
                type: v.type,
                storeId: v.storeId,
            };
        });
}

/** @internal */
export const FilterProjectEnvsContentHintProjectsResponse200ApplicationJSONResponseBody2Envs4Type$: z.ZodNativeEnum<
    typeof FilterProjectEnvsContentHintProjectsResponse200ApplicationJSONResponseBody2Envs4Type
> = z.nativeEnum(
    FilterProjectEnvsContentHintProjectsResponse200ApplicationJSONResponseBody2Envs4Type
);

/** @internal */
export namespace FilterProjectEnvsContentHintProjects4$ {
    export const inboundSchema: z.ZodType<
        FilterProjectEnvsContentHintProjects4,
        z.ZodTypeDef,
        unknown
    > = z
        .object({
            type: FilterProjectEnvsContentHintProjectsResponse200ApplicationJSONResponseBody2Envs4Type$,
            storeId: z.string(),
        })
        .transform((v) => {
            return {
                type: v.type,
                storeId: v.storeId,
            };
        });

    export type Outbound = {
        type: FilterProjectEnvsContentHintProjectsResponse200ApplicationJSONResponseBody2Envs4Type;
        storeId: string;
    };

    export const outboundSchema: z.ZodType<
        Outbound,
        z.ZodTypeDef,
        FilterProjectEnvsContentHintProjects4
    > = z
        .object({
            type: FilterProjectEnvsContentHintProjectsResponse200ApplicationJSONResponseBody2Envs4Type$,
            storeId: z.string(),
        })
        .transform((v) => {
            return {
                type: v.type,
                storeId: v.storeId,
            };
        });
}

/** @internal */
export const FilterProjectEnvsContentHintProjectsResponse200ApplicationJSONResponseBody2Envs3Type$: z.ZodNativeEnum<
    typeof FilterProjectEnvsContentHintProjectsResponse200ApplicationJSONResponseBody2Envs3Type
> = z.nativeEnum(
    FilterProjectEnvsContentHintProjectsResponse200ApplicationJSONResponseBody2Envs3Type
);

/** @internal */
export namespace FilterProjectEnvsContentHintProjects3$ {
    export const inboundSchema: z.ZodType<
        FilterProjectEnvsContentHintProjects3,
        z.ZodTypeDef,
        unknown
    > = z
        .object({
            type: FilterProjectEnvsContentHintProjectsResponse200ApplicationJSONResponseBody2Envs3Type$,
            storeId: z.string(),
        })
        .transform((v) => {
            return {
                type: v.type,
                storeId: v.storeId,
            };
        });

    export type Outbound = {
        type: FilterProjectEnvsContentHintProjectsResponse200ApplicationJSONResponseBody2Envs3Type;
        storeId: string;
    };

    export const outboundSchema: z.ZodType<
        Outbound,
        z.ZodTypeDef,
        FilterProjectEnvsContentHintProjects3
    > = z
        .object({
            type: FilterProjectEnvsContentHintProjectsResponse200ApplicationJSONResponseBody2Envs3Type$,
            storeId: z.string(),
        })
        .transform((v) => {
            return {
                type: v.type,
                storeId: v.storeId,
            };
        });
}

/** @internal */
export const FilterProjectEnvsContentHintProjectsResponse200ApplicationJSONResponseBody2EnvsType$: z.ZodNativeEnum<
    typeof FilterProjectEnvsContentHintProjectsResponse200ApplicationJSONResponseBody2EnvsType
> = z.nativeEnum(
    FilterProjectEnvsContentHintProjectsResponse200ApplicationJSONResponseBody2EnvsType
);

/** @internal */
export namespace FilterProjectEnvsContentHintProjects2$ {
    export const inboundSchema: z.ZodType<
        FilterProjectEnvsContentHintProjects2,
        z.ZodTypeDef,
        unknown
    > = z
        .object({
            type: FilterProjectEnvsContentHintProjectsResponse200ApplicationJSONResponseBody2EnvsType$,
            storeId: z.string(),
        })
        .transform((v) => {
            return {
                type: v.type,
                storeId: v.storeId,
            };
        });

    export type Outbound = {
        type: FilterProjectEnvsContentHintProjectsResponse200ApplicationJSONResponseBody2EnvsType;
        storeId: string;
    };

    export const outboundSchema: z.ZodType<
        Outbound,
        z.ZodTypeDef,
        FilterProjectEnvsContentHintProjects2
    > = z
        .object({
            type: FilterProjectEnvsContentHintProjectsResponse200ApplicationJSONResponseBody2EnvsType$,
            storeId: z.string(),
        })
        .transform((v) => {
            return {
                type: v.type,
                storeId: v.storeId,
            };
        });
}

/** @internal */
export const FilterProjectEnvsContentHintProjectsResponse200ApplicationJSONResponseBody2Type$: z.ZodNativeEnum<
    typeof FilterProjectEnvsContentHintProjectsResponse200ApplicationJSONResponseBody2Type
> = z.nativeEnum(FilterProjectEnvsContentHintProjectsResponse200ApplicationJSONResponseBody2Type);

/** @internal */
export namespace FilterProjectEnvsContentHintProjects1$ {
    export const inboundSchema: z.ZodType<
        FilterProjectEnvsContentHintProjects1,
        z.ZodTypeDef,
        unknown
    > = z
        .object({
            type: FilterProjectEnvsContentHintProjectsResponse200ApplicationJSONResponseBody2Type$,
            storeId: z.string(),
        })
        .transform((v) => {
            return {
                type: v.type,
                storeId: v.storeId,
            };
        });

    export type Outbound = {
        type: FilterProjectEnvsContentHintProjectsResponse200ApplicationJSONResponseBody2Type;
        storeId: string;
    };

    export const outboundSchema: z.ZodType<
        Outbound,
        z.ZodTypeDef,
        FilterProjectEnvsContentHintProjects1
    > = z
        .object({
            type: FilterProjectEnvsContentHintProjectsResponse200ApplicationJSONResponseBody2Type$,
            storeId: z.string(),
        })
        .transform((v) => {
            return {
                type: v.type,
                storeId: v.storeId,
            };
        });
}

/** @internal */
export namespace FilterProjectEnvsResponseBodyContentHint$ {
    export const inboundSchema: z.ZodType<
        FilterProjectEnvsResponseBodyContentHint,
        z.ZodTypeDef,
        unknown
    > = z.union([
        z.lazy(() => FilterProjectEnvsContentHintProjects1$.inboundSchema),
        z.lazy(() => FilterProjectEnvsContentHintProjects2$.inboundSchema),
        z.lazy(() => FilterProjectEnvsContentHintProjects3$.inboundSchema),
        z.lazy(() => FilterProjectEnvsContentHintProjects4$.inboundSchema),
        z.lazy(() => FilterProjectEnvsContentHintProjects5$.inboundSchema),
        z.lazy(() => FilterProjectEnvsContentHintProjects6$.inboundSchema),
        z.lazy(() => FilterProjectEnvsContentHintProjects7$.inboundSchema),
        z.lazy(() => FilterProjectEnvsContentHintProjects8$.inboundSchema),
        z.lazy(() => FilterProjectEnvsContentHintProjects9$.inboundSchema),
        z.lazy(() => FilterProjectEnvsContentHintProjects10$.inboundSchema),
        z.lazy(() => FilterProjectEnvsContentHintProjects11$.inboundSchema),
        z.lazy(() => FilterProjectEnvsContentHintProjects12$.inboundSchema),
        z.lazy(() => FilterProjectEnvsContentHintProjects13$.inboundSchema),
        z.lazy(() => FilterProjectEnvsContentHintProjects14$.inboundSchema),
    ]);

    export type Outbound =
        | FilterProjectEnvsContentHintProjects1$.Outbound
        | FilterProjectEnvsContentHintProjects2$.Outbound
        | FilterProjectEnvsContentHintProjects3$.Outbound
        | FilterProjectEnvsContentHintProjects4$.Outbound
        | FilterProjectEnvsContentHintProjects5$.Outbound
        | FilterProjectEnvsContentHintProjects6$.Outbound
        | FilterProjectEnvsContentHintProjects7$.Outbound
        | FilterProjectEnvsContentHintProjects8$.Outbound
        | FilterProjectEnvsContentHintProjects9$.Outbound
        | FilterProjectEnvsContentHintProjects10$.Outbound
        | FilterProjectEnvsContentHintProjects11$.Outbound
        | FilterProjectEnvsContentHintProjects12$.Outbound
        | FilterProjectEnvsContentHintProjects13$.Outbound
        | FilterProjectEnvsContentHintProjects14$.Outbound;
    export const outboundSchema: z.ZodType<
        Outbound,
        z.ZodTypeDef,
        FilterProjectEnvsResponseBodyContentHint
    > = z.union([
        z.lazy(() => FilterProjectEnvsContentHintProjects1$.outboundSchema),
        z.lazy(() => FilterProjectEnvsContentHintProjects2$.outboundSchema),
        z.lazy(() => FilterProjectEnvsContentHintProjects3$.outboundSchema),
        z.lazy(() => FilterProjectEnvsContentHintProjects4$.outboundSchema),
        z.lazy(() => FilterProjectEnvsContentHintProjects5$.outboundSchema),
        z.lazy(() => FilterProjectEnvsContentHintProjects6$.outboundSchema),
        z.lazy(() => FilterProjectEnvsContentHintProjects7$.outboundSchema),
        z.lazy(() => FilterProjectEnvsContentHintProjects8$.outboundSchema),
        z.lazy(() => FilterProjectEnvsContentHintProjects9$.outboundSchema),
        z.lazy(() => FilterProjectEnvsContentHintProjects10$.outboundSchema),
        z.lazy(() => FilterProjectEnvsContentHintProjects11$.outboundSchema),
        z.lazy(() => FilterProjectEnvsContentHintProjects12$.outboundSchema),
        z.lazy(() => FilterProjectEnvsContentHintProjects13$.outboundSchema),
        z.lazy(() => FilterProjectEnvsContentHintProjects14$.outboundSchema),
    ]);
}

/** @internal */
export const FilterProjectEnvsResponseBodyProjectsResponse200ApplicationJSONType$: z.ZodNativeEnum<
    typeof FilterProjectEnvsResponseBodyProjectsResponse200ApplicationJSONType
> = z.nativeEnum(FilterProjectEnvsResponseBodyProjectsResponse200ApplicationJSONType);

/** @internal */
export namespace FilterProjectEnvsResponseBodyInternalContentHint$ {
    export const inboundSchema: z.ZodType<
        FilterProjectEnvsResponseBodyInternalContentHint,
        z.ZodTypeDef,
        unknown
    > = z
        .object({
            type: FilterProjectEnvsResponseBodyProjectsResponse200ApplicationJSONType$,
            encryptedValue: z.string(),
        })
        .transform((v) => {
            return {
                type: v.type,
                encryptedValue: v.encryptedValue,
            };
        });

    export type Outbound = {
        type: FilterProjectEnvsResponseBodyProjectsResponse200ApplicationJSONType;
        encryptedValue: string;
    };

    export const outboundSchema: z.ZodType<
        Outbound,
        z.ZodTypeDef,
        FilterProjectEnvsResponseBodyInternalContentHint
    > = z
        .object({
            type: FilterProjectEnvsResponseBodyProjectsResponse200ApplicationJSONType$,
            encryptedValue: z.string(),
        })
        .transform((v) => {
            return {
                type: v.type,
                encryptedValue: v.encryptedValue,
            };
        });
}

/** @internal */
export namespace Envs$ {
    export const inboundSchema: z.ZodType<Envs, z.ZodTypeDef, unknown> = z
        .object({
            target: z
                .union([
                    z.array(FilterProjectEnvsTargetProjects1$),
                    FilterProjectEnvsTargetProjects2$,
                ])
                .optional(),
            type: FilterProjectEnvsResponseBodyProjectsResponseType$.optional(),
            id: z.string().optional(),
            key: z.string().optional(),
            value: z.string().optional(),
            configurationId: z.nullable(z.string()).optional(),
            createdAt: z.number().optional(),
            updatedAt: z.number().optional(),
            createdBy: z.nullable(z.string()).optional(),
            updatedBy: z.nullable(z.string()).optional(),
            gitBranch: z.string().optional(),
            edgeConfigId: z.nullable(z.string()).optional(),
            edgeConfigTokenId: z.nullable(z.string()).optional(),
            contentHint: z
                .nullable(
                    z.union([
                        z.lazy(() => FilterProjectEnvsContentHintProjects1$.inboundSchema),
                        z.lazy(() => FilterProjectEnvsContentHintProjects2$.inboundSchema),
                        z.lazy(() => FilterProjectEnvsContentHintProjects3$.inboundSchema),
                        z.lazy(() => FilterProjectEnvsContentHintProjects4$.inboundSchema),
                        z.lazy(() => FilterProjectEnvsContentHintProjects5$.inboundSchema),
                        z.lazy(() => FilterProjectEnvsContentHintProjects6$.inboundSchema),
                        z.lazy(() => FilterProjectEnvsContentHintProjects7$.inboundSchema),
                        z.lazy(() => FilterProjectEnvsContentHintProjects8$.inboundSchema),
                        z.lazy(() => FilterProjectEnvsContentHintProjects9$.inboundSchema),
                        z.lazy(() => FilterProjectEnvsContentHintProjects10$.inboundSchema),
                        z.lazy(() => FilterProjectEnvsContentHintProjects11$.inboundSchema),
                        z.lazy(() => FilterProjectEnvsContentHintProjects12$.inboundSchema),
                        z.lazy(() => FilterProjectEnvsContentHintProjects13$.inboundSchema),
                        z.lazy(() => FilterProjectEnvsContentHintProjects14$.inboundSchema),
                    ])
                )
                .optional(),
            internalContentHint: z
                .nullable(
                    z.lazy(() => FilterProjectEnvsResponseBodyInternalContentHint$.inboundSchema)
                )
                .optional(),
            decrypted: z.boolean().optional(),
            comment: z.string().optional(),
            customEnvironmentId: z.string().optional(),
            system: z.boolean().optional(),
        })
        .transform((v) => {
            return {
                ...(v.target === undefined ? null : { target: v.target }),
                ...(v.type === undefined ? null : { type: v.type }),
                ...(v.id === undefined ? null : { id: v.id }),
                ...(v.key === undefined ? null : { key: v.key }),
                ...(v.value === undefined ? null : { value: v.value }),
                ...(v.configurationId === undefined
                    ? null
                    : { configurationId: v.configurationId }),
                ...(v.createdAt === undefined ? null : { createdAt: v.createdAt }),
                ...(v.updatedAt === undefined ? null : { updatedAt: v.updatedAt }),
                ...(v.createdBy === undefined ? null : { createdBy: v.createdBy }),
                ...(v.updatedBy === undefined ? null : { updatedBy: v.updatedBy }),
                ...(v.gitBranch === undefined ? null : { gitBranch: v.gitBranch }),
                ...(v.edgeConfigId === undefined ? null : { edgeConfigId: v.edgeConfigId }),
                ...(v.edgeConfigTokenId === undefined
                    ? null
                    : { edgeConfigTokenId: v.edgeConfigTokenId }),
                ...(v.contentHint === undefined ? null : { contentHint: v.contentHint }),
                ...(v.internalContentHint === undefined
                    ? null
                    : { internalContentHint: v.internalContentHint }),
                ...(v.decrypted === undefined ? null : { decrypted: v.decrypted }),
                ...(v.comment === undefined ? null : { comment: v.comment }),
                ...(v.customEnvironmentId === undefined
                    ? null
                    : { customEnvironmentId: v.customEnvironmentId }),
                ...(v.system === undefined ? null : { system: v.system }),
            };
        });

    export type Outbound = {
        target?:
            | Array<FilterProjectEnvsTargetProjects1>
            | FilterProjectEnvsTargetProjects2
            | undefined;
        type?: FilterProjectEnvsResponseBodyProjectsResponseType | undefined;
        id?: string | undefined;
        key?: string | undefined;
        value?: string | undefined;
        configurationId?: string | null | undefined;
        createdAt?: number | undefined;
        updatedAt?: number | undefined;
        createdBy?: string | null | undefined;
        updatedBy?: string | null | undefined;
        gitBranch?: string | undefined;
        edgeConfigId?: string | null | undefined;
        edgeConfigTokenId?: string | null | undefined;
        contentHint?:
            | FilterProjectEnvsContentHintProjects1$.Outbound
            | FilterProjectEnvsContentHintProjects2$.Outbound
            | FilterProjectEnvsContentHintProjects3$.Outbound
            | FilterProjectEnvsContentHintProjects4$.Outbound
            | FilterProjectEnvsContentHintProjects5$.Outbound
            | FilterProjectEnvsContentHintProjects6$.Outbound
            | FilterProjectEnvsContentHintProjects7$.Outbound
            | FilterProjectEnvsContentHintProjects8$.Outbound
            | FilterProjectEnvsContentHintProjects9$.Outbound
            | FilterProjectEnvsContentHintProjects10$.Outbound
            | FilterProjectEnvsContentHintProjects11$.Outbound
            | FilterProjectEnvsContentHintProjects12$.Outbound
            | FilterProjectEnvsContentHintProjects13$.Outbound
            | FilterProjectEnvsContentHintProjects14$.Outbound
            | null
            | undefined;
        internalContentHint?:
            | FilterProjectEnvsResponseBodyInternalContentHint$.Outbound
            | null
            | undefined;
        decrypted?: boolean | undefined;
        comment?: string | undefined;
        customEnvironmentId?: string | undefined;
        system?: boolean | undefined;
    };

    export const outboundSchema: z.ZodType<Outbound, z.ZodTypeDef, Envs> = z
        .object({
            target: z
                .union([
                    z.array(FilterProjectEnvsTargetProjects1$),
                    FilterProjectEnvsTargetProjects2$,
                ])
                .optional(),
            type: FilterProjectEnvsResponseBodyProjectsResponseType$.optional(),
            id: z.string().optional(),
            key: z.string().optional(),
            value: z.string().optional(),
            configurationId: z.nullable(z.string()).optional(),
            createdAt: z.number().optional(),
            updatedAt: z.number().optional(),
            createdBy: z.nullable(z.string()).optional(),
            updatedBy: z.nullable(z.string()).optional(),
            gitBranch: z.string().optional(),
            edgeConfigId: z.nullable(z.string()).optional(),
            edgeConfigTokenId: z.nullable(z.string()).optional(),
            contentHint: z
                .nullable(
                    z.union([
                        z.lazy(() => FilterProjectEnvsContentHintProjects1$.outboundSchema),
                        z.lazy(() => FilterProjectEnvsContentHintProjects2$.outboundSchema),
                        z.lazy(() => FilterProjectEnvsContentHintProjects3$.outboundSchema),
                        z.lazy(() => FilterProjectEnvsContentHintProjects4$.outboundSchema),
                        z.lazy(() => FilterProjectEnvsContentHintProjects5$.outboundSchema),
                        z.lazy(() => FilterProjectEnvsContentHintProjects6$.outboundSchema),
                        z.lazy(() => FilterProjectEnvsContentHintProjects7$.outboundSchema),
                        z.lazy(() => FilterProjectEnvsContentHintProjects8$.outboundSchema),
                        z.lazy(() => FilterProjectEnvsContentHintProjects9$.outboundSchema),
                        z.lazy(() => FilterProjectEnvsContentHintProjects10$.outboundSchema),
                        z.lazy(() => FilterProjectEnvsContentHintProjects11$.outboundSchema),
                        z.lazy(() => FilterProjectEnvsContentHintProjects12$.outboundSchema),
                        z.lazy(() => FilterProjectEnvsContentHintProjects13$.outboundSchema),
                        z.lazy(() => FilterProjectEnvsContentHintProjects14$.outboundSchema),
                    ])
                )
                .optional(),
            internalContentHint: z
                .nullable(
                    z.lazy(() => FilterProjectEnvsResponseBodyInternalContentHint$.outboundSchema)
                )
                .optional(),
            decrypted: z.boolean().optional(),
            comment: z.string().optional(),
            customEnvironmentId: z.string().optional(),
            system: z.boolean().optional(),
        })
        .transform((v) => {
            return {
                ...(v.target === undefined ? null : { target: v.target }),
                ...(v.type === undefined ? null : { type: v.type }),
                ...(v.id === undefined ? null : { id: v.id }),
                ...(v.key === undefined ? null : { key: v.key }),
                ...(v.value === undefined ? null : { value: v.value }),
                ...(v.configurationId === undefined
                    ? null
                    : { configurationId: v.configurationId }),
                ...(v.createdAt === undefined ? null : { createdAt: v.createdAt }),
                ...(v.updatedAt === undefined ? null : { updatedAt: v.updatedAt }),
                ...(v.createdBy === undefined ? null : { createdBy: v.createdBy }),
                ...(v.updatedBy === undefined ? null : { updatedBy: v.updatedBy }),
                ...(v.gitBranch === undefined ? null : { gitBranch: v.gitBranch }),
                ...(v.edgeConfigId === undefined ? null : { edgeConfigId: v.edgeConfigId }),
                ...(v.edgeConfigTokenId === undefined
                    ? null
                    : { edgeConfigTokenId: v.edgeConfigTokenId }),
                ...(v.contentHint === undefined ? null : { contentHint: v.contentHint }),
                ...(v.internalContentHint === undefined
                    ? null
                    : { internalContentHint: v.internalContentHint }),
                ...(v.decrypted === undefined ? null : { decrypted: v.decrypted }),
                ...(v.comment === undefined ? null : { comment: v.comment }),
                ...(v.customEnvironmentId === undefined
                    ? null
                    : { customEnvironmentId: v.customEnvironmentId }),
                ...(v.system === undefined ? null : { system: v.system }),
            };
        });
}

/** @internal */
export namespace FilterProjectEnvsResponseBody2$ {
    export const inboundSchema: z.ZodType<FilterProjectEnvsResponseBody2, z.ZodTypeDef, unknown> = z
        .object({
            envs: z.array(z.lazy(() => Envs$.inboundSchema)),
            pagination: components.Pagination$.inboundSchema,
        })
        .transform((v) => {
            return {
                envs: v.envs,
                pagination: v.pagination,
            };
        });

    export type Outbound = {
        envs: Array<Envs$.Outbound>;
        pagination: components.Pagination$.Outbound;
    };

    export const outboundSchema: z.ZodType<Outbound, z.ZodTypeDef, FilterProjectEnvsResponseBody2> =
        z
            .object({
                envs: z.array(z.lazy(() => Envs$.outboundSchema)),
                pagination: components.Pagination$.outboundSchema,
            })
            .transform((v) => {
                return {
                    envs: v.envs,
                    pagination: v.pagination,
                };
            });
}

/** @internal */
export const FilterProjectEnvsTarget2$: z.ZodNativeEnum<typeof FilterProjectEnvsTarget2> =
    z.nativeEnum(FilterProjectEnvsTarget2);

/** @internal */
export const FilterProjectEnvsTarget1$: z.ZodNativeEnum<typeof FilterProjectEnvsTarget1> =
    z.nativeEnum(FilterProjectEnvsTarget1);

/** @internal */
export namespace FilterProjectEnvsResponseBodyTarget$ {
    export const inboundSchema: z.ZodType<
        FilterProjectEnvsResponseBodyTarget,
        z.ZodTypeDef,
        unknown
    > = z.union([z.array(FilterProjectEnvsTarget1$), FilterProjectEnvsTarget2$]);

    export type Outbound = Array<FilterProjectEnvsTarget1> | FilterProjectEnvsTarget2;
    export const outboundSchema: z.ZodType<
        Outbound,
        z.ZodTypeDef,
        FilterProjectEnvsResponseBodyTarget
    > = z.union([z.array(FilterProjectEnvsTarget1$), FilterProjectEnvsTarget2$]);
}

/** @internal */
export const FilterProjectEnvsResponseBodyType$: z.ZodNativeEnum<
    typeof FilterProjectEnvsResponseBodyType
> = z.nativeEnum(FilterProjectEnvsResponseBodyType);

/** @internal */
export const FilterProjectEnvsContentHintProjectsResponse200ApplicationJSONResponseBody114Type$: z.ZodNativeEnum<
    typeof FilterProjectEnvsContentHintProjectsResponse200ApplicationJSONResponseBody114Type
> = z.nativeEnum(FilterProjectEnvsContentHintProjectsResponse200ApplicationJSONResponseBody114Type);

/** @internal */
export namespace FilterProjectEnvsContentHint14$ {
    export const inboundSchema: z.ZodType<FilterProjectEnvsContentHint14, z.ZodTypeDef, unknown> = z
        .object({
            type: FilterProjectEnvsContentHintProjectsResponse200ApplicationJSONResponseBody114Type$,
            storeId: z.string(),
        })
        .transform((v) => {
            return {
                type: v.type,
                storeId: v.storeId,
            };
        });

    export type Outbound = {
        type: FilterProjectEnvsContentHintProjectsResponse200ApplicationJSONResponseBody114Type;
        storeId: string;
    };

    export const outboundSchema: z.ZodType<Outbound, z.ZodTypeDef, FilterProjectEnvsContentHint14> =
        z
            .object({
                type: FilterProjectEnvsContentHintProjectsResponse200ApplicationJSONResponseBody114Type$,
                storeId: z.string(),
            })
            .transform((v) => {
                return {
                    type: v.type,
                    storeId: v.storeId,
                };
            });
}

/** @internal */
export const FilterProjectEnvsContentHintProjectsResponse200ApplicationJSONResponseBody113Type$: z.ZodNativeEnum<
    typeof FilterProjectEnvsContentHintProjectsResponse200ApplicationJSONResponseBody113Type
> = z.nativeEnum(FilterProjectEnvsContentHintProjectsResponse200ApplicationJSONResponseBody113Type);

/** @internal */
export namespace FilterProjectEnvsContentHint13$ {
    export const inboundSchema: z.ZodType<FilterProjectEnvsContentHint13, z.ZodTypeDef, unknown> = z
        .object({
            type: FilterProjectEnvsContentHintProjectsResponse200ApplicationJSONResponseBody113Type$,
            storeId: z.string(),
        })
        .transform((v) => {
            return {
                type: v.type,
                storeId: v.storeId,
            };
        });

    export type Outbound = {
        type: FilterProjectEnvsContentHintProjectsResponse200ApplicationJSONResponseBody113Type;
        storeId: string;
    };

    export const outboundSchema: z.ZodType<Outbound, z.ZodTypeDef, FilterProjectEnvsContentHint13> =
        z
            .object({
                type: FilterProjectEnvsContentHintProjectsResponse200ApplicationJSONResponseBody113Type$,
                storeId: z.string(),
            })
            .transform((v) => {
                return {
                    type: v.type,
                    storeId: v.storeId,
                };
            });
}

/** @internal */
export const FilterProjectEnvsContentHintProjectsResponse200ApplicationJSONResponseBody112Type$: z.ZodNativeEnum<
    typeof FilterProjectEnvsContentHintProjectsResponse200ApplicationJSONResponseBody112Type
> = z.nativeEnum(FilterProjectEnvsContentHintProjectsResponse200ApplicationJSONResponseBody112Type);

/** @internal */
export namespace FilterProjectEnvsContentHint12$ {
    export const inboundSchema: z.ZodType<FilterProjectEnvsContentHint12, z.ZodTypeDef, unknown> = z
        .object({
            type: FilterProjectEnvsContentHintProjectsResponse200ApplicationJSONResponseBody112Type$,
            storeId: z.string(),
        })
        .transform((v) => {
            return {
                type: v.type,
                storeId: v.storeId,
            };
        });

    export type Outbound = {
        type: FilterProjectEnvsContentHintProjectsResponse200ApplicationJSONResponseBody112Type;
        storeId: string;
    };

    export const outboundSchema: z.ZodType<Outbound, z.ZodTypeDef, FilterProjectEnvsContentHint12> =
        z
            .object({
                type: FilterProjectEnvsContentHintProjectsResponse200ApplicationJSONResponseBody112Type$,
                storeId: z.string(),
            })
            .transform((v) => {
                return {
                    type: v.type,
                    storeId: v.storeId,
                };
            });
}

/** @internal */
export const FilterProjectEnvsContentHintProjectsResponse200ApplicationJSONResponseBody111Type$: z.ZodNativeEnum<
    typeof FilterProjectEnvsContentHintProjectsResponse200ApplicationJSONResponseBody111Type
> = z.nativeEnum(FilterProjectEnvsContentHintProjectsResponse200ApplicationJSONResponseBody111Type);

/** @internal */
export namespace FilterProjectEnvsContentHint11$ {
    export const inboundSchema: z.ZodType<FilterProjectEnvsContentHint11, z.ZodTypeDef, unknown> = z
        .object({
            type: FilterProjectEnvsContentHintProjectsResponse200ApplicationJSONResponseBody111Type$,
            storeId: z.string(),
        })
        .transform((v) => {
            return {
                type: v.type,
                storeId: v.storeId,
            };
        });

    export type Outbound = {
        type: FilterProjectEnvsContentHintProjectsResponse200ApplicationJSONResponseBody111Type;
        storeId: string;
    };

    export const outboundSchema: z.ZodType<Outbound, z.ZodTypeDef, FilterProjectEnvsContentHint11> =
        z
            .object({
                type: FilterProjectEnvsContentHintProjectsResponse200ApplicationJSONResponseBody111Type$,
                storeId: z.string(),
            })
            .transform((v) => {
                return {
                    type: v.type,
                    storeId: v.storeId,
                };
            });
}

/** @internal */
export const FilterProjectEnvsContentHintProjectsResponse200ApplicationJSONResponseBody110Type$: z.ZodNativeEnum<
    typeof FilterProjectEnvsContentHintProjectsResponse200ApplicationJSONResponseBody110Type
> = z.nativeEnum(FilterProjectEnvsContentHintProjectsResponse200ApplicationJSONResponseBody110Type);

/** @internal */
export namespace FilterProjectEnvsContentHint10$ {
    export const inboundSchema: z.ZodType<FilterProjectEnvsContentHint10, z.ZodTypeDef, unknown> = z
        .object({
            type: FilterProjectEnvsContentHintProjectsResponse200ApplicationJSONResponseBody110Type$,
            storeId: z.string(),
        })
        .transform((v) => {
            return {
                type: v.type,
                storeId: v.storeId,
            };
        });

    export type Outbound = {
        type: FilterProjectEnvsContentHintProjectsResponse200ApplicationJSONResponseBody110Type;
        storeId: string;
    };

    export const outboundSchema: z.ZodType<Outbound, z.ZodTypeDef, FilterProjectEnvsContentHint10> =
        z
            .object({
                type: FilterProjectEnvsContentHintProjectsResponse200ApplicationJSONResponseBody110Type$,
                storeId: z.string(),
            })
            .transform((v) => {
                return {
                    type: v.type,
                    storeId: v.storeId,
                };
            });
}

/** @internal */
export const FilterProjectEnvsContentHintProjectsResponse200ApplicationJSONResponseBody19Type$: z.ZodNativeEnum<
    typeof FilterProjectEnvsContentHintProjectsResponse200ApplicationJSONResponseBody19Type
> = z.nativeEnum(FilterProjectEnvsContentHintProjectsResponse200ApplicationJSONResponseBody19Type);

/** @internal */
export namespace FilterProjectEnvsContentHint9$ {
    export const inboundSchema: z.ZodType<FilterProjectEnvsContentHint9, z.ZodTypeDef, unknown> = z
        .object({
            type: FilterProjectEnvsContentHintProjectsResponse200ApplicationJSONResponseBody19Type$,
            storeId: z.string(),
        })
        .transform((v) => {
            return {
                type: v.type,
                storeId: v.storeId,
            };
        });

    export type Outbound = {
        type: FilterProjectEnvsContentHintProjectsResponse200ApplicationJSONResponseBody19Type;
        storeId: string;
    };

    export const outboundSchema: z.ZodType<Outbound, z.ZodTypeDef, FilterProjectEnvsContentHint9> =
        z
            .object({
                type: FilterProjectEnvsContentHintProjectsResponse200ApplicationJSONResponseBody19Type$,
                storeId: z.string(),
            })
            .transform((v) => {
                return {
                    type: v.type,
                    storeId: v.storeId,
                };
            });
}

/** @internal */
export const FilterProjectEnvsContentHintProjectsResponse200ApplicationJSONResponseBody18Type$: z.ZodNativeEnum<
    typeof FilterProjectEnvsContentHintProjectsResponse200ApplicationJSONResponseBody18Type
> = z.nativeEnum(FilterProjectEnvsContentHintProjectsResponse200ApplicationJSONResponseBody18Type);

/** @internal */
export namespace FilterProjectEnvsContentHint8$ {
    export const inboundSchema: z.ZodType<FilterProjectEnvsContentHint8, z.ZodTypeDef, unknown> = z
        .object({
            type: FilterProjectEnvsContentHintProjectsResponse200ApplicationJSONResponseBody18Type$,
            storeId: z.string(),
        })
        .transform((v) => {
            return {
                type: v.type,
                storeId: v.storeId,
            };
        });

    export type Outbound = {
        type: FilterProjectEnvsContentHintProjectsResponse200ApplicationJSONResponseBody18Type;
        storeId: string;
    };

    export const outboundSchema: z.ZodType<Outbound, z.ZodTypeDef, FilterProjectEnvsContentHint8> =
        z
            .object({
                type: FilterProjectEnvsContentHintProjectsResponse200ApplicationJSONResponseBody18Type$,
                storeId: z.string(),
            })
            .transform((v) => {
                return {
                    type: v.type,
                    storeId: v.storeId,
                };
            });
}

/** @internal */
export const FilterProjectEnvsContentHintProjectsResponse200ApplicationJSONResponseBody1Type$: z.ZodNativeEnum<
    typeof FilterProjectEnvsContentHintProjectsResponse200ApplicationJSONResponseBody1Type
> = z.nativeEnum(FilterProjectEnvsContentHintProjectsResponse200ApplicationJSONResponseBody1Type);

/** @internal */
export namespace FilterProjectEnvsContentHint7$ {
    export const inboundSchema: z.ZodType<FilterProjectEnvsContentHint7, z.ZodTypeDef, unknown> = z
        .object({
            type: FilterProjectEnvsContentHintProjectsResponse200ApplicationJSONResponseBody1Type$,
            storeId: z.string(),
        })
        .transform((v) => {
            return {
                type: v.type,
                storeId: v.storeId,
            };
        });

    export type Outbound = {
        type: FilterProjectEnvsContentHintProjectsResponse200ApplicationJSONResponseBody1Type;
        storeId: string;
    };

    export const outboundSchema: z.ZodType<Outbound, z.ZodTypeDef, FilterProjectEnvsContentHint7> =
        z
            .object({
                type: FilterProjectEnvsContentHintProjectsResponse200ApplicationJSONResponseBody1Type$,
                storeId: z.string(),
            })
            .transform((v) => {
                return {
                    type: v.type,
                    storeId: v.storeId,
                };
            });
}

/** @internal */
export const FilterProjectEnvsContentHintProjectsResponse200ApplicationJSONResponseBodyType$: z.ZodNativeEnum<
    typeof FilterProjectEnvsContentHintProjectsResponse200ApplicationJSONResponseBodyType
> = z.nativeEnum(FilterProjectEnvsContentHintProjectsResponse200ApplicationJSONResponseBodyType);

/** @internal */
export namespace FilterProjectEnvsContentHint6$ {
    export const inboundSchema: z.ZodType<FilterProjectEnvsContentHint6, z.ZodTypeDef, unknown> = z
        .object({
            type: FilterProjectEnvsContentHintProjectsResponse200ApplicationJSONResponseBodyType$,
            storeId: z.string(),
        })
        .transform((v) => {
            return {
                type: v.type,
                storeId: v.storeId,
            };
        });

    export type Outbound = {
        type: FilterProjectEnvsContentHintProjectsResponse200ApplicationJSONResponseBodyType;
        storeId: string;
    };

    export const outboundSchema: z.ZodType<Outbound, z.ZodTypeDef, FilterProjectEnvsContentHint6> =
        z
            .object({
                type: FilterProjectEnvsContentHintProjectsResponse200ApplicationJSONResponseBodyType$,
                storeId: z.string(),
            })
            .transform((v) => {
                return {
                    type: v.type,
                    storeId: v.storeId,
                };
            });
}

/** @internal */
export const FilterProjectEnvsContentHintProjectsResponse200ApplicationJSONType$: z.ZodNativeEnum<
    typeof FilterProjectEnvsContentHintProjectsResponse200ApplicationJSONType
> = z.nativeEnum(FilterProjectEnvsContentHintProjectsResponse200ApplicationJSONType);

/** @internal */
export namespace FilterProjectEnvsContentHint5$ {
    export const inboundSchema: z.ZodType<FilterProjectEnvsContentHint5, z.ZodTypeDef, unknown> = z
        .object({
            type: FilterProjectEnvsContentHintProjectsResponse200ApplicationJSONType$,
            storeId: z.string(),
        })
        .transform((v) => {
            return {
                type: v.type,
                storeId: v.storeId,
            };
        });

    export type Outbound = {
        type: FilterProjectEnvsContentHintProjectsResponse200ApplicationJSONType;
        storeId: string;
    };

    export const outboundSchema: z.ZodType<Outbound, z.ZodTypeDef, FilterProjectEnvsContentHint5> =
        z
            .object({
                type: FilterProjectEnvsContentHintProjectsResponse200ApplicationJSONType$,
                storeId: z.string(),
            })
            .transform((v) => {
                return {
                    type: v.type,
                    storeId: v.storeId,
                };
            });
}

/** @internal */
export const FilterProjectEnvsContentHintProjectsResponse200Type$: z.ZodNativeEnum<
    typeof FilterProjectEnvsContentHintProjectsResponse200Type
> = z.nativeEnum(FilterProjectEnvsContentHintProjectsResponse200Type);

/** @internal */
export namespace FilterProjectEnvsContentHint4$ {
    export const inboundSchema: z.ZodType<FilterProjectEnvsContentHint4, z.ZodTypeDef, unknown> = z
        .object({
            type: FilterProjectEnvsContentHintProjectsResponse200Type$,
            storeId: z.string(),
        })
        .transform((v) => {
            return {
                type: v.type,
                storeId: v.storeId,
            };
        });

    export type Outbound = {
        type: FilterProjectEnvsContentHintProjectsResponse200Type;
        storeId: string;
    };

    export const outboundSchema: z.ZodType<Outbound, z.ZodTypeDef, FilterProjectEnvsContentHint4> =
        z
            .object({
                type: FilterProjectEnvsContentHintProjectsResponse200Type$,
                storeId: z.string(),
            })
            .transform((v) => {
                return {
                    type: v.type,
                    storeId: v.storeId,
                };
            });
}

/** @internal */
export const FilterProjectEnvsContentHintProjectsResponseType$: z.ZodNativeEnum<
    typeof FilterProjectEnvsContentHintProjectsResponseType
> = z.nativeEnum(FilterProjectEnvsContentHintProjectsResponseType);

/** @internal */
export namespace FilterProjectEnvsContentHint3$ {
    export const inboundSchema: z.ZodType<FilterProjectEnvsContentHint3, z.ZodTypeDef, unknown> = z
        .object({
            type: FilterProjectEnvsContentHintProjectsResponseType$,
            storeId: z.string(),
        })
        .transform((v) => {
            return {
                type: v.type,
                storeId: v.storeId,
            };
        });

    export type Outbound = {
        type: FilterProjectEnvsContentHintProjectsResponseType;
        storeId: string;
    };

    export const outboundSchema: z.ZodType<Outbound, z.ZodTypeDef, FilterProjectEnvsContentHint3> =
        z
            .object({
                type: FilterProjectEnvsContentHintProjectsResponseType$,
                storeId: z.string(),
            })
            .transform((v) => {
                return {
                    type: v.type,
                    storeId: v.storeId,
                };
            });
}

/** @internal */
export const FilterProjectEnvsContentHintProjectsType$: z.ZodNativeEnum<
    typeof FilterProjectEnvsContentHintProjectsType
> = z.nativeEnum(FilterProjectEnvsContentHintProjectsType);

/** @internal */
export namespace FilterProjectEnvsContentHint2$ {
    export const inboundSchema: z.ZodType<FilterProjectEnvsContentHint2, z.ZodTypeDef, unknown> = z
        .object({
            type: FilterProjectEnvsContentHintProjectsType$,
            storeId: z.string(),
        })
        .transform((v) => {
            return {
                type: v.type,
                storeId: v.storeId,
            };
        });

    export type Outbound = {
        type: FilterProjectEnvsContentHintProjectsType;
        storeId: string;
    };

    export const outboundSchema: z.ZodType<Outbound, z.ZodTypeDef, FilterProjectEnvsContentHint2> =
        z
            .object({
                type: FilterProjectEnvsContentHintProjectsType$,
                storeId: z.string(),
            })
            .transform((v) => {
                return {
                    type: v.type,
                    storeId: v.storeId,
                };
            });
}

/** @internal */
export const FilterProjectEnvsContentHintType$: z.ZodNativeEnum<
    typeof FilterProjectEnvsContentHintType
> = z.nativeEnum(FilterProjectEnvsContentHintType);

/** @internal */
export namespace FilterProjectEnvsContentHint1$ {
    export const inboundSchema: z.ZodType<FilterProjectEnvsContentHint1, z.ZodTypeDef, unknown> = z
        .object({
            type: FilterProjectEnvsContentHintType$,
            storeId: z.string(),
        })
        .transform((v) => {
            return {
                type: v.type,
                storeId: v.storeId,
            };
        });

    export type Outbound = {
        type: FilterProjectEnvsContentHintType;
        storeId: string;
    };

    export const outboundSchema: z.ZodType<Outbound, z.ZodTypeDef, FilterProjectEnvsContentHint1> =
        z
            .object({
                type: FilterProjectEnvsContentHintType$,
                storeId: z.string(),
            })
            .transform((v) => {
                return {
                    type: v.type,
                    storeId: v.storeId,
                };
            });
}

/** @internal */
export namespace ResponseBodyContentHint$ {
    export const inboundSchema: z.ZodType<ResponseBodyContentHint, z.ZodTypeDef, unknown> = z.union(
        [
            z.lazy(() => FilterProjectEnvsContentHint1$.inboundSchema),
            z.lazy(() => FilterProjectEnvsContentHint2$.inboundSchema),
            z.lazy(() => FilterProjectEnvsContentHint3$.inboundSchema),
            z.lazy(() => FilterProjectEnvsContentHint4$.inboundSchema),
            z.lazy(() => FilterProjectEnvsContentHint5$.inboundSchema),
            z.lazy(() => FilterProjectEnvsContentHint6$.inboundSchema),
            z.lazy(() => FilterProjectEnvsContentHint7$.inboundSchema),
            z.lazy(() => FilterProjectEnvsContentHint8$.inboundSchema),
            z.lazy(() => FilterProjectEnvsContentHint9$.inboundSchema),
            z.lazy(() => FilterProjectEnvsContentHint10$.inboundSchema),
            z.lazy(() => FilterProjectEnvsContentHint11$.inboundSchema),
            z.lazy(() => FilterProjectEnvsContentHint12$.inboundSchema),
            z.lazy(() => FilterProjectEnvsContentHint13$.inboundSchema),
            z.lazy(() => FilterProjectEnvsContentHint14$.inboundSchema),
        ]
    );

    export type Outbound =
        | FilterProjectEnvsContentHint1$.Outbound
        | FilterProjectEnvsContentHint2$.Outbound
        | FilterProjectEnvsContentHint3$.Outbound
        | FilterProjectEnvsContentHint4$.Outbound
        | FilterProjectEnvsContentHint5$.Outbound
        | FilterProjectEnvsContentHint6$.Outbound
        | FilterProjectEnvsContentHint7$.Outbound
        | FilterProjectEnvsContentHint8$.Outbound
        | FilterProjectEnvsContentHint9$.Outbound
        | FilterProjectEnvsContentHint10$.Outbound
        | FilterProjectEnvsContentHint11$.Outbound
        | FilterProjectEnvsContentHint12$.Outbound
        | FilterProjectEnvsContentHint13$.Outbound
        | FilterProjectEnvsContentHint14$.Outbound;
    export const outboundSchema: z.ZodType<Outbound, z.ZodTypeDef, ResponseBodyContentHint> =
        z.union([
            z.lazy(() => FilterProjectEnvsContentHint1$.outboundSchema),
            z.lazy(() => FilterProjectEnvsContentHint2$.outboundSchema),
            z.lazy(() => FilterProjectEnvsContentHint3$.outboundSchema),
            z.lazy(() => FilterProjectEnvsContentHint4$.outboundSchema),
            z.lazy(() => FilterProjectEnvsContentHint5$.outboundSchema),
            z.lazy(() => FilterProjectEnvsContentHint6$.outboundSchema),
            z.lazy(() => FilterProjectEnvsContentHint7$.outboundSchema),
            z.lazy(() => FilterProjectEnvsContentHint8$.outboundSchema),
            z.lazy(() => FilterProjectEnvsContentHint9$.outboundSchema),
            z.lazy(() => FilterProjectEnvsContentHint10$.outboundSchema),
            z.lazy(() => FilterProjectEnvsContentHint11$.outboundSchema),
            z.lazy(() => FilterProjectEnvsContentHint12$.outboundSchema),
            z.lazy(() => FilterProjectEnvsContentHint13$.outboundSchema),
            z.lazy(() => FilterProjectEnvsContentHint14$.outboundSchema),
        ]);
}

/** @internal */
export const FilterProjectEnvsResponseBodyProjectsType$: z.ZodNativeEnum<
    typeof FilterProjectEnvsResponseBodyProjectsType
> = z.nativeEnum(FilterProjectEnvsResponseBodyProjectsType);

/** @internal */
export namespace ResponseBodyInternalContentHint$ {
    export const inboundSchema: z.ZodType<ResponseBodyInternalContentHint, z.ZodTypeDef, unknown> =
        z
            .object({
                type: FilterProjectEnvsResponseBodyProjectsType$,
                encryptedValue: z.string(),
            })
            .transform((v) => {
                return {
                    type: v.type,
                    encryptedValue: v.encryptedValue,
                };
            });

    export type Outbound = {
        type: FilterProjectEnvsResponseBodyProjectsType;
        encryptedValue: string;
    };

    export const outboundSchema: z.ZodType<
        Outbound,
        z.ZodTypeDef,
        ResponseBodyInternalContentHint
    > = z
        .object({
            type: FilterProjectEnvsResponseBodyProjectsType$,
            encryptedValue: z.string(),
        })
        .transform((v) => {
            return {
                type: v.type,
                encryptedValue: v.encryptedValue,
            };
        });
}

/** @internal */
export namespace FilterProjectEnvsResponseBody1$ {
    export const inboundSchema: z.ZodType<FilterProjectEnvsResponseBody1, z.ZodTypeDef, unknown> = z
        .object({
            target: z
                .union([z.array(FilterProjectEnvsTarget1$), FilterProjectEnvsTarget2$])
                .optional(),
            type: FilterProjectEnvsResponseBodyType$.optional(),
            id: z.string().optional(),
            key: z.string().optional(),
            value: z.string().optional(),
            configurationId: z.nullable(z.string()).optional(),
            createdAt: z.number().optional(),
            updatedAt: z.number().optional(),
            createdBy: z.nullable(z.string()).optional(),
            updatedBy: z.nullable(z.string()).optional(),
            gitBranch: z.string().optional(),
            edgeConfigId: z.nullable(z.string()).optional(),
            edgeConfigTokenId: z.nullable(z.string()).optional(),
            contentHint: z
                .nullable(
                    z.union([
                        z.lazy(() => FilterProjectEnvsContentHint1$.inboundSchema),
                        z.lazy(() => FilterProjectEnvsContentHint2$.inboundSchema),
                        z.lazy(() => FilterProjectEnvsContentHint3$.inboundSchema),
                        z.lazy(() => FilterProjectEnvsContentHint4$.inboundSchema),
                        z.lazy(() => FilterProjectEnvsContentHint5$.inboundSchema),
                        z.lazy(() => FilterProjectEnvsContentHint6$.inboundSchema),
                        z.lazy(() => FilterProjectEnvsContentHint7$.inboundSchema),
                        z.lazy(() => FilterProjectEnvsContentHint8$.inboundSchema),
                        z.lazy(() => FilterProjectEnvsContentHint9$.inboundSchema),
                        z.lazy(() => FilterProjectEnvsContentHint10$.inboundSchema),
                        z.lazy(() => FilterProjectEnvsContentHint11$.inboundSchema),
                        z.lazy(() => FilterProjectEnvsContentHint12$.inboundSchema),
                        z.lazy(() => FilterProjectEnvsContentHint13$.inboundSchema),
                        z.lazy(() => FilterProjectEnvsContentHint14$.inboundSchema),
                    ])
                )
                .optional(),
            internalContentHint: z
                .nullable(z.lazy(() => ResponseBodyInternalContentHint$.inboundSchema))
                .optional(),
            decrypted: z.boolean().optional(),
            comment: z.string().optional(),
            customEnvironmentId: z.string().optional(),
            system: z.boolean().optional(),
        })
        .transform((v) => {
            return {
                ...(v.target === undefined ? null : { target: v.target }),
                ...(v.type === undefined ? null : { type: v.type }),
                ...(v.id === undefined ? null : { id: v.id }),
                ...(v.key === undefined ? null : { key: v.key }),
                ...(v.value === undefined ? null : { value: v.value }),
                ...(v.configurationId === undefined
                    ? null
                    : { configurationId: v.configurationId }),
                ...(v.createdAt === undefined ? null : { createdAt: v.createdAt }),
                ...(v.updatedAt === undefined ? null : { updatedAt: v.updatedAt }),
                ...(v.createdBy === undefined ? null : { createdBy: v.createdBy }),
                ...(v.updatedBy === undefined ? null : { updatedBy: v.updatedBy }),
                ...(v.gitBranch === undefined ? null : { gitBranch: v.gitBranch }),
                ...(v.edgeConfigId === undefined ? null : { edgeConfigId: v.edgeConfigId }),
                ...(v.edgeConfigTokenId === undefined
                    ? null
                    : { edgeConfigTokenId: v.edgeConfigTokenId }),
                ...(v.contentHint === undefined ? null : { contentHint: v.contentHint }),
                ...(v.internalContentHint === undefined
                    ? null
                    : { internalContentHint: v.internalContentHint }),
                ...(v.decrypted === undefined ? null : { decrypted: v.decrypted }),
                ...(v.comment === undefined ? null : { comment: v.comment }),
                ...(v.customEnvironmentId === undefined
                    ? null
                    : { customEnvironmentId: v.customEnvironmentId }),
                ...(v.system === undefined ? null : { system: v.system }),
            };
        });

    export type Outbound = {
        target?: Array<FilterProjectEnvsTarget1> | FilterProjectEnvsTarget2 | undefined;
        type?: FilterProjectEnvsResponseBodyType | undefined;
        id?: string | undefined;
        key?: string | undefined;
        value?: string | undefined;
        configurationId?: string | null | undefined;
        createdAt?: number | undefined;
        updatedAt?: number | undefined;
        createdBy?: string | null | undefined;
        updatedBy?: string | null | undefined;
        gitBranch?: string | undefined;
        edgeConfigId?: string | null | undefined;
        edgeConfigTokenId?: string | null | undefined;
        contentHint?:
            | FilterProjectEnvsContentHint1$.Outbound
            | FilterProjectEnvsContentHint2$.Outbound
            | FilterProjectEnvsContentHint3$.Outbound
            | FilterProjectEnvsContentHint4$.Outbound
            | FilterProjectEnvsContentHint5$.Outbound
            | FilterProjectEnvsContentHint6$.Outbound
            | FilterProjectEnvsContentHint7$.Outbound
            | FilterProjectEnvsContentHint8$.Outbound
            | FilterProjectEnvsContentHint9$.Outbound
            | FilterProjectEnvsContentHint10$.Outbound
            | FilterProjectEnvsContentHint11$.Outbound
            | FilterProjectEnvsContentHint12$.Outbound
            | FilterProjectEnvsContentHint13$.Outbound
            | FilterProjectEnvsContentHint14$.Outbound
            | null
            | undefined;
        internalContentHint?: ResponseBodyInternalContentHint$.Outbound | null | undefined;
        decrypted?: boolean | undefined;
        comment?: string | undefined;
        customEnvironmentId?: string | undefined;
        system?: boolean | undefined;
    };

    export const outboundSchema: z.ZodType<Outbound, z.ZodTypeDef, FilterProjectEnvsResponseBody1> =
        z
            .object({
                target: z
                    .union([z.array(FilterProjectEnvsTarget1$), FilterProjectEnvsTarget2$])
                    .optional(),
                type: FilterProjectEnvsResponseBodyType$.optional(),
                id: z.string().optional(),
                key: z.string().optional(),
                value: z.string().optional(),
                configurationId: z.nullable(z.string()).optional(),
                createdAt: z.number().optional(),
                updatedAt: z.number().optional(),
                createdBy: z.nullable(z.string()).optional(),
                updatedBy: z.nullable(z.string()).optional(),
                gitBranch: z.string().optional(),
                edgeConfigId: z.nullable(z.string()).optional(),
                edgeConfigTokenId: z.nullable(z.string()).optional(),
                contentHint: z
                    .nullable(
                        z.union([
                            z.lazy(() => FilterProjectEnvsContentHint1$.outboundSchema),
                            z.lazy(() => FilterProjectEnvsContentHint2$.outboundSchema),
                            z.lazy(() => FilterProjectEnvsContentHint3$.outboundSchema),
                            z.lazy(() => FilterProjectEnvsContentHint4$.outboundSchema),
                            z.lazy(() => FilterProjectEnvsContentHint5$.outboundSchema),
                            z.lazy(() => FilterProjectEnvsContentHint6$.outboundSchema),
                            z.lazy(() => FilterProjectEnvsContentHint7$.outboundSchema),
                            z.lazy(() => FilterProjectEnvsContentHint8$.outboundSchema),
                            z.lazy(() => FilterProjectEnvsContentHint9$.outboundSchema),
                            z.lazy(() => FilterProjectEnvsContentHint10$.outboundSchema),
                            z.lazy(() => FilterProjectEnvsContentHint11$.outboundSchema),
                            z.lazy(() => FilterProjectEnvsContentHint12$.outboundSchema),
                            z.lazy(() => FilterProjectEnvsContentHint13$.outboundSchema),
                            z.lazy(() => FilterProjectEnvsContentHint14$.outboundSchema),
                        ])
                    )
                    .optional(),
                internalContentHint: z
                    .nullable(z.lazy(() => ResponseBodyInternalContentHint$.outboundSchema))
                    .optional(),
                decrypted: z.boolean().optional(),
                comment: z.string().optional(),
                customEnvironmentId: z.string().optional(),
                system: z.boolean().optional(),
            })
            .transform((v) => {
                return {
                    ...(v.target === undefined ? null : { target: v.target }),
                    ...(v.type === undefined ? null : { type: v.type }),
                    ...(v.id === undefined ? null : { id: v.id }),
                    ...(v.key === undefined ? null : { key: v.key }),
                    ...(v.value === undefined ? null : { value: v.value }),
                    ...(v.configurationId === undefined
                        ? null
                        : { configurationId: v.configurationId }),
                    ...(v.createdAt === undefined ? null : { createdAt: v.createdAt }),
                    ...(v.updatedAt === undefined ? null : { updatedAt: v.updatedAt }),
                    ...(v.createdBy === undefined ? null : { createdBy: v.createdBy }),
                    ...(v.updatedBy === undefined ? null : { updatedBy: v.updatedBy }),
                    ...(v.gitBranch === undefined ? null : { gitBranch: v.gitBranch }),
                    ...(v.edgeConfigId === undefined ? null : { edgeConfigId: v.edgeConfigId }),
                    ...(v.edgeConfigTokenId === undefined
                        ? null
                        : { edgeConfigTokenId: v.edgeConfigTokenId }),
                    ...(v.contentHint === undefined ? null : { contentHint: v.contentHint }),
                    ...(v.internalContentHint === undefined
                        ? null
                        : { internalContentHint: v.internalContentHint }),
                    ...(v.decrypted === undefined ? null : { decrypted: v.decrypted }),
                    ...(v.comment === undefined ? null : { comment: v.comment }),
                    ...(v.customEnvironmentId === undefined
                        ? null
                        : { customEnvironmentId: v.customEnvironmentId }),
                    ...(v.system === undefined ? null : { system: v.system }),
                };
            });
}

/** @internal */
export namespace FilterProjectEnvsResponseBody$ {
    export const inboundSchema: z.ZodType<FilterProjectEnvsResponseBody, z.ZodTypeDef, unknown> =
        z.union([
            z.lazy(() => FilterProjectEnvsResponseBody3$.inboundSchema),
            z.lazy(() => FilterProjectEnvsResponseBody2$.inboundSchema),
            z.lazy(() => FilterProjectEnvsResponseBody1$.inboundSchema),
        ]);

    export type Outbound =
        | FilterProjectEnvsResponseBody3$.Outbound
        | FilterProjectEnvsResponseBody2$.Outbound
        | FilterProjectEnvsResponseBody1$.Outbound;
    export const outboundSchema: z.ZodType<Outbound, z.ZodTypeDef, FilterProjectEnvsResponseBody> =
        z.union([
            z.lazy(() => FilterProjectEnvsResponseBody3$.outboundSchema),
            z.lazy(() => FilterProjectEnvsResponseBody2$.outboundSchema),
            z.lazy(() => FilterProjectEnvsResponseBody1$.outboundSchema),
        ]);
}

/** @internal */
export namespace FilterProjectEnvsResponse$ {
    export const inboundSchema: z.ZodType<FilterProjectEnvsResponse, z.ZodTypeDef, unknown> = z
        .object({
            HttpMeta: components.HTTPMetadata$.inboundSchema,
            oneOf: z
                .union([
                    z.lazy(() => FilterProjectEnvsResponseBody3$.inboundSchema),
                    z.lazy(() => FilterProjectEnvsResponseBody2$.inboundSchema),
                    z.lazy(() => FilterProjectEnvsResponseBody1$.inboundSchema),
                ])
                .optional(),
        })
        .transform((v) => {
            return {
                httpMeta: v.HttpMeta,
                ...(v.oneOf === undefined ? null : { oneOf: v.oneOf }),
            };
        });

    export type Outbound = {
        HttpMeta: components.HTTPMetadata$.Outbound;
        oneOf?:
            | FilterProjectEnvsResponseBody3$.Outbound
            | FilterProjectEnvsResponseBody2$.Outbound
            | FilterProjectEnvsResponseBody1$.Outbound
            | undefined;
    };

    export const outboundSchema: z.ZodType<Outbound, z.ZodTypeDef, FilterProjectEnvsResponse> = z
        .object({
            httpMeta: components.HTTPMetadata$.outboundSchema,
            oneOf: z
                .union([
                    z.lazy(() => FilterProjectEnvsResponseBody3$.outboundSchema),
                    z.lazy(() => FilterProjectEnvsResponseBody2$.outboundSchema),
                    z.lazy(() => FilterProjectEnvsResponseBody1$.outboundSchema),
                ])
                .optional(),
        })
        .transform((v) => {
            return {
                HttpMeta: v.httpMeta,
                ...(v.oneOf === undefined ? null : { oneOf: v.oneOf }),
            };
        });
}
