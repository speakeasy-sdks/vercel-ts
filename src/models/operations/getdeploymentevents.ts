/*
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

import * as components from "../components";
import * as z from "zod";

/**
 * Order of the returned events based on the timestamp.
 */
export enum Direction {
    Backward = "backward",
    Forward = "forward",
}

/**
 * HTTP status code range to filter events by.
 */
export type StatusCode = number | string;

export type GetDeploymentEventsRequest = {
    /**
     * The unique identifier or hostname of the deployment.
     */
    idOrUrl: string;
    /**
     * Order of the returned events based on the timestamp.
     */
    direction?: Direction | undefined;
    /**
     * When enabled, this endpoint will return live events as they happen.
     */
    follow?: number | undefined;
    /**
     * Maximum number of events to return. Provide `-1` to return all available logs.
     */
    limit?: number | undefined;
    /**
     * Deployment build ID.
     */
    name?: string | undefined;
    /**
     * Timestamp for when build logs should be pulled from.
     */
    since?: number | undefined;
    /**
     * Timestamp for when the build logs should be pulled up until.
     */
    until?: number | undefined;
    /**
     * HTTP status code range to filter events by.
     */
    statusCode?: number | string | undefined;
    delimiter?: number | undefined;
    builds?: number | undefined;
    /**
     * The Team identifier to perform the request on behalf of.
     */
    teamId?: string | undefined;
    /**
     * The Team slug to perform the request on behalf of.
     */
    slug?: string | undefined;
};

export enum GetDeploymentEvents3Type {
    Command = "command",
    Stdout = "stdout",
    Stderr = "stderr",
    Exit = "exit",
    DeploymentState = "deployment-state",
    Delimiter = "delimiter",
    Middleware = "middleware",
    MiddlewareInvocation = "middleware-invocation",
    EdgeFunctionInvocation = "edge-function-invocation",
    Fatal = "fatal",
}

export type GetDeploymentEvents3Info = {
    type: string;
    name: string;
    entrypoint?: string | undefined;
    path?: string | undefined;
    step?: string | undefined;
    readyState?: string | undefined;
};

export enum GetDeploymentEvents3VercelCache {
    Miss = "MISS",
    Hit = "HIT",
    Stale = "STALE",
    Bypass = "BYPASS",
    Prerender = "PRERENDER",
    Revalidated = "REVALIDATED",
}

export type GetDeploymentEvents3Proxy = {
    timestamp: number;
    method: string;
    host: string;
    path: string;
    statusCode?: number | undefined;
    userAgent: Array<string>;
    referer: string;
    clientIp: string;
    region: string;
    scheme?: string | undefined;
    responseByteSize?: number | undefined;
    cacheId?: string | undefined;
    pathType?: string | undefined;
    vercelId?: string | undefined;
    vercelCache?: GetDeploymentEvents3VercelCache | undefined;
    lambdaRegion?: string | undefined;
};

export type ThreePayload = {
    deploymentId: string;
    info?: GetDeploymentEvents3Info | undefined;
    text?: string | undefined;
    id: string;
    date: number;
    serial: string;
    created?: number | undefined;
    statusCode?: number | undefined;
    requestId?: string | undefined;
    proxy?: GetDeploymentEvents3Proxy | undefined;
};

export type Three2 = {
    type: GetDeploymentEvents3Type;
    created: number;
    payload: ThreePayload;
};

export type ThreeInfo = {
    type: string;
    name: string;
    entrypoint?: string | undefined;
    path?: string | undefined;
    step?: string | undefined;
    readyState?: string | undefined;
};

export enum ThreeVercelCache {
    Miss = "MISS",
    Hit = "HIT",
    Stale = "STALE",
    Bypass = "BYPASS",
    Prerender = "PRERENDER",
    Revalidated = "REVALIDATED",
}

export type ThreeProxy = {
    timestamp: number;
    method: string;
    host: string;
    path: string;
    statusCode?: number | undefined;
    userAgent: Array<string>;
    referer: string;
    clientIp: string;
    region: string;
    scheme?: string | undefined;
    responseByteSize?: number | undefined;
    cacheId?: string | undefined;
    pathType?: string | undefined;
    vercelId?: string | undefined;
    vercelCache?: ThreeVercelCache | undefined;
    lambdaRegion?: string | undefined;
};

export enum ThreeType {
    Command = "command",
    Stdout = "stdout",
    Stderr = "stderr",
    Exit = "exit",
    DeploymentState = "deployment-state",
    Delimiter = "delimiter",
    Middleware = "middleware",
    MiddlewareInvocation = "middleware-invocation",
    EdgeFunctionInvocation = "edge-function-invocation",
    Fatal = "fatal",
}

export type Three1 = {
    created: number;
    date: number;
    deploymentId: string;
    id: string;
    info: ThreeInfo;
    proxy?: ThreeProxy | undefined;
    requestId?: string | undefined;
    serial: string;
    statusCode?: number | undefined;
    text?: string | undefined;
    type: ThreeType;
};

export type ResponseBody3 = Three2 | Three1;

export enum GetDeploymentEventsResponseBodyDeploymentsResponseType {
    Command = "command",
    Stdout = "stdout",
    Stderr = "stderr",
    Exit = "exit",
    DeploymentState = "deployment-state",
    Delimiter = "delimiter",
    Middleware = "middleware",
    MiddlewareInvocation = "middleware-invocation",
    EdgeFunctionInvocation = "edge-function-invocation",
    Fatal = "fatal",
}

export type GetDeploymentEventsResponseBodyDeploymentsInfo = {
    type: string;
    name: string;
    entrypoint?: string | undefined;
    path?: string | undefined;
    step?: string | undefined;
    readyState?: string | undefined;
};

export enum GetDeploymentEventsResponseBodyDeploymentsVercelCache {
    Miss = "MISS",
    Hit = "HIT",
    Stale = "STALE",
    Bypass = "BYPASS",
    Prerender = "PRERENDER",
    Revalidated = "REVALIDATED",
}

export type GetDeploymentEventsResponseBodyDeploymentsProxy = {
    timestamp: number;
    method: string;
    host: string;
    path: string;
    statusCode?: number | undefined;
    userAgent: Array<string>;
    referer: string;
    clientIp: string;
    region: string;
    scheme?: string | undefined;
    responseByteSize?: number | undefined;
    cacheId?: string | undefined;
    pathType?: string | undefined;
    vercelId?: string | undefined;
    vercelCache?: GetDeploymentEventsResponseBodyDeploymentsVercelCache | undefined;
    lambdaRegion?: string | undefined;
};

export type ResponseBodyPayload = {
    deploymentId: string;
    info?: GetDeploymentEventsResponseBodyDeploymentsInfo | undefined;
    text?: string | undefined;
    id: string;
    date: number;
    serial: string;
    created?: number | undefined;
    statusCode?: number | undefined;
    requestId?: string | undefined;
    proxy?: GetDeploymentEventsResponseBodyDeploymentsProxy | undefined;
};

export type GetDeploymentEventsResponseBody2 = {
    type: GetDeploymentEventsResponseBodyDeploymentsResponseType;
    created: number;
    payload: ResponseBodyPayload;
};

export type ResponseBodyInfo = {
    type: string;
    name: string;
    entrypoint?: string | undefined;
    path?: string | undefined;
    step?: string | undefined;
    readyState?: string | undefined;
};

export enum ResponseBodyVercelCache {
    Miss = "MISS",
    Hit = "HIT",
    Stale = "STALE",
    Bypass = "BYPASS",
    Prerender = "PRERENDER",
    Revalidated = "REVALIDATED",
}

export type ResponseBodyProxy = {
    timestamp: number;
    method: string;
    host: string;
    path: string;
    statusCode?: number | undefined;
    userAgent: Array<string>;
    referer: string;
    clientIp: string;
    region: string;
    scheme?: string | undefined;
    responseByteSize?: number | undefined;
    cacheId?: string | undefined;
    pathType?: string | undefined;
    vercelId?: string | undefined;
    vercelCache?: ResponseBodyVercelCache | undefined;
    lambdaRegion?: string | undefined;
};

export enum GetDeploymentEventsResponseBodyDeploymentsType {
    Command = "command",
    Stdout = "stdout",
    Stderr = "stderr",
    Exit = "exit",
    DeploymentState = "deployment-state",
    Delimiter = "delimiter",
    Middleware = "middleware",
    MiddlewareInvocation = "middleware-invocation",
    EdgeFunctionInvocation = "edge-function-invocation",
    Fatal = "fatal",
}

export type GetDeploymentEventsResponseBody1 = {
    created: number;
    date: number;
    deploymentId: string;
    id: string;
    info: ResponseBodyInfo;
    proxy?: ResponseBodyProxy | undefined;
    requestId?: string | undefined;
    serial: string;
    statusCode?: number | undefined;
    text?: string | undefined;
    type: GetDeploymentEventsResponseBodyDeploymentsType;
};

/**
 * A stream of jsonlines where each line is a deployment log item.
 *
 * @remarks
 * Array of deployment logs for the provided query.
 */
export type GetDeploymentEventsResponseBody =
    | GetDeploymentEventsResponseBody2
    | GetDeploymentEventsResponseBody1
    | Three2
    | Three1;

export enum GetDeploymentEventsResponseBodyType {
    Command = "command",
    Stdout = "stdout",
    Stderr = "stderr",
    Exit = "exit",
    DeploymentState = "deployment-state",
    Delimiter = "delimiter",
    Middleware = "middleware",
    MiddlewareInvocation = "middleware-invocation",
    EdgeFunctionInvocation = "edge-function-invocation",
    Fatal = "fatal",
}

export type GetDeploymentEventsResponseBodyInfo = {
    type: string;
    name: string;
    entrypoint?: string | undefined;
    path?: string | undefined;
    step?: string | undefined;
    readyState?: string | undefined;
};

export enum GetDeploymentEventsResponseBodyVercelCache {
    Miss = "MISS",
    Hit = "HIT",
    Stale = "STALE",
    Bypass = "BYPASS",
    Prerender = "PRERENDER",
    Revalidated = "REVALIDATED",
}

export type GetDeploymentEventsResponseBodyProxy = {
    timestamp: number;
    method: string;
    host: string;
    path: string;
    statusCode?: number | undefined;
    userAgent: Array<string>;
    referer: string;
    clientIp: string;
    region: string;
    scheme?: string | undefined;
    responseByteSize?: number | undefined;
    cacheId?: string | undefined;
    pathType?: string | undefined;
    vercelId?: string | undefined;
    vercelCache?: GetDeploymentEventsResponseBodyVercelCache | undefined;
    lambdaRegion?: string | undefined;
};

export type Payload = {
    deploymentId: string;
    info?: GetDeploymentEventsResponseBodyInfo | undefined;
    text?: string | undefined;
    id: string;
    date: number;
    serial: string;
    created?: number | undefined;
    statusCode?: number | undefined;
    requestId?: string | undefined;
    proxy?: GetDeploymentEventsResponseBodyProxy | undefined;
};

export type ResponseBody2 = {
    type: GetDeploymentEventsResponseBodyType;
    created: number;
    payload: Payload;
};

export type Info = {
    type: string;
    name: string;
    entrypoint?: string | undefined;
    path?: string | undefined;
    step?: string | undefined;
    readyState?: string | undefined;
};

export enum VercelCache {
    Miss = "MISS",
    Hit = "HIT",
    Stale = "STALE",
    Bypass = "BYPASS",
    Prerender = "PRERENDER",
    Revalidated = "REVALIDATED",
}

export type Proxy = {
    timestamp: number;
    method: string;
    host: string;
    path: string;
    statusCode?: number | undefined;
    userAgent: Array<string>;
    referer: string;
    clientIp: string;
    region: string;
    scheme?: string | undefined;
    responseByteSize?: number | undefined;
    cacheId?: string | undefined;
    pathType?: string | undefined;
    vercelId?: string | undefined;
    vercelCache?: VercelCache | undefined;
    lambdaRegion?: string | undefined;
};

export enum ResponseBodyType {
    Command = "command",
    Stdout = "stdout",
    Stderr = "stderr",
    Exit = "exit",
    DeploymentState = "deployment-state",
    Delimiter = "delimiter",
    Middleware = "middleware",
    MiddlewareInvocation = "middleware-invocation",
    EdgeFunctionInvocation = "edge-function-invocation",
    Fatal = "fatal",
}

export type ResponseBody1 = {
    created: number;
    date: number;
    deploymentId: string;
    id: string;
    info: Info;
    proxy?: Proxy | undefined;
    requestId?: string | undefined;
    serial: string;
    statusCode?: number | undefined;
    text?: string | undefined;
    type: ResponseBodyType;
};

export type GetDeploymentEventsDeploymentsResponseBody = ResponseBody2 | ResponseBody1;

export type GetDeploymentEventsResponse = {
    httpMeta: components.HTTPMetadata;
    /**
     * A stream of jsonlines where each line is a deployment log item.
     *
     * @remarks
     * Array of deployment logs for the provided query.
     */
    responseBodies?: Array<ResponseBody2 | ResponseBody1> | undefined;
    /**
     * A stream of jsonlines where each line is a deployment log item.
     *
     * @remarks
     * Array of deployment logs for the provided query.
     */
    oneOf?:
        | GetDeploymentEventsResponseBody2
        | GetDeploymentEventsResponseBody1
        | Three2
        | Three1
        | undefined;
};

/** @internal */
export const Direction$: z.ZodNativeEnum<typeof Direction> = z.nativeEnum(Direction);

/** @internal */
export namespace StatusCode$ {
    export const inboundSchema: z.ZodType<StatusCode, z.ZodTypeDef, unknown> = z.union([
        z.number(),
        z.string(),
    ]);

    export type Outbound = number | string;
    export const outboundSchema: z.ZodType<Outbound, z.ZodTypeDef, StatusCode> = z.union([
        z.number(),
        z.string(),
    ]);
}

/** @internal */
export namespace GetDeploymentEventsRequest$ {
    export const inboundSchema: z.ZodType<GetDeploymentEventsRequest, z.ZodTypeDef, unknown> = z
        .object({
            idOrUrl: z.string(),
            direction: Direction$.default(Direction.Forward),
            follow: z.number().optional(),
            limit: z.number().optional(),
            name: z.string().optional(),
            since: z.number().optional(),
            until: z.number().optional(),
            statusCode: z.union([z.number(), z.string()]).optional(),
            delimiter: z.number().optional(),
            builds: z.number().optional(),
            teamId: z.string().optional(),
            slug: z.string().optional(),
        })
        .transform((v) => {
            return {
                idOrUrl: v.idOrUrl,
                direction: v.direction,
                ...(v.follow === undefined ? null : { follow: v.follow }),
                ...(v.limit === undefined ? null : { limit: v.limit }),
                ...(v.name === undefined ? null : { name: v.name }),
                ...(v.since === undefined ? null : { since: v.since }),
                ...(v.until === undefined ? null : { until: v.until }),
                ...(v.statusCode === undefined ? null : { statusCode: v.statusCode }),
                ...(v.delimiter === undefined ? null : { delimiter: v.delimiter }),
                ...(v.builds === undefined ? null : { builds: v.builds }),
                ...(v.teamId === undefined ? null : { teamId: v.teamId }),
                ...(v.slug === undefined ? null : { slug: v.slug }),
            };
        });

    export type Outbound = {
        idOrUrl: string;
        direction: Direction;
        follow?: number | undefined;
        limit?: number | undefined;
        name?: string | undefined;
        since?: number | undefined;
        until?: number | undefined;
        statusCode?: number | string | undefined;
        delimiter?: number | undefined;
        builds?: number | undefined;
        teamId?: string | undefined;
        slug?: string | undefined;
    };

    export const outboundSchema: z.ZodType<Outbound, z.ZodTypeDef, GetDeploymentEventsRequest> = z
        .object({
            idOrUrl: z.string(),
            direction: Direction$.default(Direction.Forward),
            follow: z.number().optional(),
            limit: z.number().optional(),
            name: z.string().optional(),
            since: z.number().optional(),
            until: z.number().optional(),
            statusCode: z.union([z.number(), z.string()]).optional(),
            delimiter: z.number().optional(),
            builds: z.number().optional(),
            teamId: z.string().optional(),
            slug: z.string().optional(),
        })
        .transform((v) => {
            return {
                idOrUrl: v.idOrUrl,
                direction: v.direction,
                ...(v.follow === undefined ? null : { follow: v.follow }),
                ...(v.limit === undefined ? null : { limit: v.limit }),
                ...(v.name === undefined ? null : { name: v.name }),
                ...(v.since === undefined ? null : { since: v.since }),
                ...(v.until === undefined ? null : { until: v.until }),
                ...(v.statusCode === undefined ? null : { statusCode: v.statusCode }),
                ...(v.delimiter === undefined ? null : { delimiter: v.delimiter }),
                ...(v.builds === undefined ? null : { builds: v.builds }),
                ...(v.teamId === undefined ? null : { teamId: v.teamId }),
                ...(v.slug === undefined ? null : { slug: v.slug }),
            };
        });
}

/** @internal */
export const GetDeploymentEvents3Type$: z.ZodNativeEnum<typeof GetDeploymentEvents3Type> =
    z.nativeEnum(GetDeploymentEvents3Type);

/** @internal */
export namespace GetDeploymentEvents3Info$ {
    export const inboundSchema: z.ZodType<GetDeploymentEvents3Info, z.ZodTypeDef, unknown> = z
        .object({
            type: z.string(),
            name: z.string(),
            entrypoint: z.string().optional(),
            path: z.string().optional(),
            step: z.string().optional(),
            readyState: z.string().optional(),
        })
        .transform((v) => {
            return {
                type: v.type,
                name: v.name,
                ...(v.entrypoint === undefined ? null : { entrypoint: v.entrypoint }),
                ...(v.path === undefined ? null : { path: v.path }),
                ...(v.step === undefined ? null : { step: v.step }),
                ...(v.readyState === undefined ? null : { readyState: v.readyState }),
            };
        });

    export type Outbound = {
        type: string;
        name: string;
        entrypoint?: string | undefined;
        path?: string | undefined;
        step?: string | undefined;
        readyState?: string | undefined;
    };

    export const outboundSchema: z.ZodType<Outbound, z.ZodTypeDef, GetDeploymentEvents3Info> = z
        .object({
            type: z.string(),
            name: z.string(),
            entrypoint: z.string().optional(),
            path: z.string().optional(),
            step: z.string().optional(),
            readyState: z.string().optional(),
        })
        .transform((v) => {
            return {
                type: v.type,
                name: v.name,
                ...(v.entrypoint === undefined ? null : { entrypoint: v.entrypoint }),
                ...(v.path === undefined ? null : { path: v.path }),
                ...(v.step === undefined ? null : { step: v.step }),
                ...(v.readyState === undefined ? null : { readyState: v.readyState }),
            };
        });
}

/** @internal */
export const GetDeploymentEvents3VercelCache$: z.ZodNativeEnum<
    typeof GetDeploymentEvents3VercelCache
> = z.nativeEnum(GetDeploymentEvents3VercelCache);

/** @internal */
export namespace GetDeploymentEvents3Proxy$ {
    export const inboundSchema: z.ZodType<GetDeploymentEvents3Proxy, z.ZodTypeDef, unknown> = z
        .object({
            timestamp: z.number(),
            method: z.string(),
            host: z.string(),
            path: z.string(),
            statusCode: z.number().optional(),
            userAgent: z.array(z.string()),
            referer: z.string(),
            clientIp: z.string(),
            region: z.string(),
            scheme: z.string().optional(),
            responseByteSize: z.number().optional(),
            cacheId: z.string().optional(),
            pathType: z.string().optional(),
            vercelId: z.string().optional(),
            vercelCache: GetDeploymentEvents3VercelCache$.optional(),
            lambdaRegion: z.string().optional(),
        })
        .transform((v) => {
            return {
                timestamp: v.timestamp,
                method: v.method,
                host: v.host,
                path: v.path,
                ...(v.statusCode === undefined ? null : { statusCode: v.statusCode }),
                userAgent: v.userAgent,
                referer: v.referer,
                clientIp: v.clientIp,
                region: v.region,
                ...(v.scheme === undefined ? null : { scheme: v.scheme }),
                ...(v.responseByteSize === undefined
                    ? null
                    : { responseByteSize: v.responseByteSize }),
                ...(v.cacheId === undefined ? null : { cacheId: v.cacheId }),
                ...(v.pathType === undefined ? null : { pathType: v.pathType }),
                ...(v.vercelId === undefined ? null : { vercelId: v.vercelId }),
                ...(v.vercelCache === undefined ? null : { vercelCache: v.vercelCache }),
                ...(v.lambdaRegion === undefined ? null : { lambdaRegion: v.lambdaRegion }),
            };
        });

    export type Outbound = {
        timestamp: number;
        method: string;
        host: string;
        path: string;
        statusCode?: number | undefined;
        userAgent: Array<string>;
        referer: string;
        clientIp: string;
        region: string;
        scheme?: string | undefined;
        responseByteSize?: number | undefined;
        cacheId?: string | undefined;
        pathType?: string | undefined;
        vercelId?: string | undefined;
        vercelCache?: GetDeploymentEvents3VercelCache | undefined;
        lambdaRegion?: string | undefined;
    };

    export const outboundSchema: z.ZodType<Outbound, z.ZodTypeDef, GetDeploymentEvents3Proxy> = z
        .object({
            timestamp: z.number(),
            method: z.string(),
            host: z.string(),
            path: z.string(),
            statusCode: z.number().optional(),
            userAgent: z.array(z.string()),
            referer: z.string(),
            clientIp: z.string(),
            region: z.string(),
            scheme: z.string().optional(),
            responseByteSize: z.number().optional(),
            cacheId: z.string().optional(),
            pathType: z.string().optional(),
            vercelId: z.string().optional(),
            vercelCache: GetDeploymentEvents3VercelCache$.optional(),
            lambdaRegion: z.string().optional(),
        })
        .transform((v) => {
            return {
                timestamp: v.timestamp,
                method: v.method,
                host: v.host,
                path: v.path,
                ...(v.statusCode === undefined ? null : { statusCode: v.statusCode }),
                userAgent: v.userAgent,
                referer: v.referer,
                clientIp: v.clientIp,
                region: v.region,
                ...(v.scheme === undefined ? null : { scheme: v.scheme }),
                ...(v.responseByteSize === undefined
                    ? null
                    : { responseByteSize: v.responseByteSize }),
                ...(v.cacheId === undefined ? null : { cacheId: v.cacheId }),
                ...(v.pathType === undefined ? null : { pathType: v.pathType }),
                ...(v.vercelId === undefined ? null : { vercelId: v.vercelId }),
                ...(v.vercelCache === undefined ? null : { vercelCache: v.vercelCache }),
                ...(v.lambdaRegion === undefined ? null : { lambdaRegion: v.lambdaRegion }),
            };
        });
}

/** @internal */
export namespace ThreePayload$ {
    export const inboundSchema: z.ZodType<ThreePayload, z.ZodTypeDef, unknown> = z
        .object({
            deploymentId: z.string(),
            info: z.lazy(() => GetDeploymentEvents3Info$.inboundSchema).optional(),
            text: z.string().optional(),
            id: z.string(),
            date: z.number(),
            serial: z.string(),
            created: z.number().optional(),
            statusCode: z.number().optional(),
            requestId: z.string().optional(),
            proxy: z.lazy(() => GetDeploymentEvents3Proxy$.inboundSchema).optional(),
        })
        .transform((v) => {
            return {
                deploymentId: v.deploymentId,
                ...(v.info === undefined ? null : { info: v.info }),
                ...(v.text === undefined ? null : { text: v.text }),
                id: v.id,
                date: v.date,
                serial: v.serial,
                ...(v.created === undefined ? null : { created: v.created }),
                ...(v.statusCode === undefined ? null : { statusCode: v.statusCode }),
                ...(v.requestId === undefined ? null : { requestId: v.requestId }),
                ...(v.proxy === undefined ? null : { proxy: v.proxy }),
            };
        });

    export type Outbound = {
        deploymentId: string;
        info?: GetDeploymentEvents3Info$.Outbound | undefined;
        text?: string | undefined;
        id: string;
        date: number;
        serial: string;
        created?: number | undefined;
        statusCode?: number | undefined;
        requestId?: string | undefined;
        proxy?: GetDeploymentEvents3Proxy$.Outbound | undefined;
    };

    export const outboundSchema: z.ZodType<Outbound, z.ZodTypeDef, ThreePayload> = z
        .object({
            deploymentId: z.string(),
            info: z.lazy(() => GetDeploymentEvents3Info$.outboundSchema).optional(),
            text: z.string().optional(),
            id: z.string(),
            date: z.number(),
            serial: z.string(),
            created: z.number().optional(),
            statusCode: z.number().optional(),
            requestId: z.string().optional(),
            proxy: z.lazy(() => GetDeploymentEvents3Proxy$.outboundSchema).optional(),
        })
        .transform((v) => {
            return {
                deploymentId: v.deploymentId,
                ...(v.info === undefined ? null : { info: v.info }),
                ...(v.text === undefined ? null : { text: v.text }),
                id: v.id,
                date: v.date,
                serial: v.serial,
                ...(v.created === undefined ? null : { created: v.created }),
                ...(v.statusCode === undefined ? null : { statusCode: v.statusCode }),
                ...(v.requestId === undefined ? null : { requestId: v.requestId }),
                ...(v.proxy === undefined ? null : { proxy: v.proxy }),
            };
        });
}

/** @internal */
export namespace Three2$ {
    export const inboundSchema: z.ZodType<Three2, z.ZodTypeDef, unknown> = z
        .object({
            type: GetDeploymentEvents3Type$,
            created: z.number(),
            payload: z.lazy(() => ThreePayload$.inboundSchema),
        })
        .transform((v) => {
            return {
                type: v.type,
                created: v.created,
                payload: v.payload,
            };
        });

    export type Outbound = {
        type: GetDeploymentEvents3Type;
        created: number;
        payload: ThreePayload$.Outbound;
    };

    export const outboundSchema: z.ZodType<Outbound, z.ZodTypeDef, Three2> = z
        .object({
            type: GetDeploymentEvents3Type$,
            created: z.number(),
            payload: z.lazy(() => ThreePayload$.outboundSchema),
        })
        .transform((v) => {
            return {
                type: v.type,
                created: v.created,
                payload: v.payload,
            };
        });
}

/** @internal */
export namespace ThreeInfo$ {
    export const inboundSchema: z.ZodType<ThreeInfo, z.ZodTypeDef, unknown> = z
        .object({
            type: z.string(),
            name: z.string(),
            entrypoint: z.string().optional(),
            path: z.string().optional(),
            step: z.string().optional(),
            readyState: z.string().optional(),
        })
        .transform((v) => {
            return {
                type: v.type,
                name: v.name,
                ...(v.entrypoint === undefined ? null : { entrypoint: v.entrypoint }),
                ...(v.path === undefined ? null : { path: v.path }),
                ...(v.step === undefined ? null : { step: v.step }),
                ...(v.readyState === undefined ? null : { readyState: v.readyState }),
            };
        });

    export type Outbound = {
        type: string;
        name: string;
        entrypoint?: string | undefined;
        path?: string | undefined;
        step?: string | undefined;
        readyState?: string | undefined;
    };

    export const outboundSchema: z.ZodType<Outbound, z.ZodTypeDef, ThreeInfo> = z
        .object({
            type: z.string(),
            name: z.string(),
            entrypoint: z.string().optional(),
            path: z.string().optional(),
            step: z.string().optional(),
            readyState: z.string().optional(),
        })
        .transform((v) => {
            return {
                type: v.type,
                name: v.name,
                ...(v.entrypoint === undefined ? null : { entrypoint: v.entrypoint }),
                ...(v.path === undefined ? null : { path: v.path }),
                ...(v.step === undefined ? null : { step: v.step }),
                ...(v.readyState === undefined ? null : { readyState: v.readyState }),
            };
        });
}

/** @internal */
export const ThreeVercelCache$: z.ZodNativeEnum<typeof ThreeVercelCache> =
    z.nativeEnum(ThreeVercelCache);

/** @internal */
export namespace ThreeProxy$ {
    export const inboundSchema: z.ZodType<ThreeProxy, z.ZodTypeDef, unknown> = z
        .object({
            timestamp: z.number(),
            method: z.string(),
            host: z.string(),
            path: z.string(),
            statusCode: z.number().optional(),
            userAgent: z.array(z.string()),
            referer: z.string(),
            clientIp: z.string(),
            region: z.string(),
            scheme: z.string().optional(),
            responseByteSize: z.number().optional(),
            cacheId: z.string().optional(),
            pathType: z.string().optional(),
            vercelId: z.string().optional(),
            vercelCache: ThreeVercelCache$.optional(),
            lambdaRegion: z.string().optional(),
        })
        .transform((v) => {
            return {
                timestamp: v.timestamp,
                method: v.method,
                host: v.host,
                path: v.path,
                ...(v.statusCode === undefined ? null : { statusCode: v.statusCode }),
                userAgent: v.userAgent,
                referer: v.referer,
                clientIp: v.clientIp,
                region: v.region,
                ...(v.scheme === undefined ? null : { scheme: v.scheme }),
                ...(v.responseByteSize === undefined
                    ? null
                    : { responseByteSize: v.responseByteSize }),
                ...(v.cacheId === undefined ? null : { cacheId: v.cacheId }),
                ...(v.pathType === undefined ? null : { pathType: v.pathType }),
                ...(v.vercelId === undefined ? null : { vercelId: v.vercelId }),
                ...(v.vercelCache === undefined ? null : { vercelCache: v.vercelCache }),
                ...(v.lambdaRegion === undefined ? null : { lambdaRegion: v.lambdaRegion }),
            };
        });

    export type Outbound = {
        timestamp: number;
        method: string;
        host: string;
        path: string;
        statusCode?: number | undefined;
        userAgent: Array<string>;
        referer: string;
        clientIp: string;
        region: string;
        scheme?: string | undefined;
        responseByteSize?: number | undefined;
        cacheId?: string | undefined;
        pathType?: string | undefined;
        vercelId?: string | undefined;
        vercelCache?: ThreeVercelCache | undefined;
        lambdaRegion?: string | undefined;
    };

    export const outboundSchema: z.ZodType<Outbound, z.ZodTypeDef, ThreeProxy> = z
        .object({
            timestamp: z.number(),
            method: z.string(),
            host: z.string(),
            path: z.string(),
            statusCode: z.number().optional(),
            userAgent: z.array(z.string()),
            referer: z.string(),
            clientIp: z.string(),
            region: z.string(),
            scheme: z.string().optional(),
            responseByteSize: z.number().optional(),
            cacheId: z.string().optional(),
            pathType: z.string().optional(),
            vercelId: z.string().optional(),
            vercelCache: ThreeVercelCache$.optional(),
            lambdaRegion: z.string().optional(),
        })
        .transform((v) => {
            return {
                timestamp: v.timestamp,
                method: v.method,
                host: v.host,
                path: v.path,
                ...(v.statusCode === undefined ? null : { statusCode: v.statusCode }),
                userAgent: v.userAgent,
                referer: v.referer,
                clientIp: v.clientIp,
                region: v.region,
                ...(v.scheme === undefined ? null : { scheme: v.scheme }),
                ...(v.responseByteSize === undefined
                    ? null
                    : { responseByteSize: v.responseByteSize }),
                ...(v.cacheId === undefined ? null : { cacheId: v.cacheId }),
                ...(v.pathType === undefined ? null : { pathType: v.pathType }),
                ...(v.vercelId === undefined ? null : { vercelId: v.vercelId }),
                ...(v.vercelCache === undefined ? null : { vercelCache: v.vercelCache }),
                ...(v.lambdaRegion === undefined ? null : { lambdaRegion: v.lambdaRegion }),
            };
        });
}

/** @internal */
export const ThreeType$: z.ZodNativeEnum<typeof ThreeType> = z.nativeEnum(ThreeType);

/** @internal */
export namespace Three1$ {
    export const inboundSchema: z.ZodType<Three1, z.ZodTypeDef, unknown> = z
        .object({
            created: z.number(),
            date: z.number(),
            deploymentId: z.string(),
            id: z.string(),
            info: z.lazy(() => ThreeInfo$.inboundSchema),
            proxy: z.lazy(() => ThreeProxy$.inboundSchema).optional(),
            requestId: z.string().optional(),
            serial: z.string(),
            statusCode: z.number().optional(),
            text: z.string().optional(),
            type: ThreeType$,
        })
        .transform((v) => {
            return {
                created: v.created,
                date: v.date,
                deploymentId: v.deploymentId,
                id: v.id,
                info: v.info,
                ...(v.proxy === undefined ? null : { proxy: v.proxy }),
                ...(v.requestId === undefined ? null : { requestId: v.requestId }),
                serial: v.serial,
                ...(v.statusCode === undefined ? null : { statusCode: v.statusCode }),
                ...(v.text === undefined ? null : { text: v.text }),
                type: v.type,
            };
        });

    export type Outbound = {
        created: number;
        date: number;
        deploymentId: string;
        id: string;
        info: ThreeInfo$.Outbound;
        proxy?: ThreeProxy$.Outbound | undefined;
        requestId?: string | undefined;
        serial: string;
        statusCode?: number | undefined;
        text?: string | undefined;
        type: ThreeType;
    };

    export const outboundSchema: z.ZodType<Outbound, z.ZodTypeDef, Three1> = z
        .object({
            created: z.number(),
            date: z.number(),
            deploymentId: z.string(),
            id: z.string(),
            info: z.lazy(() => ThreeInfo$.outboundSchema),
            proxy: z.lazy(() => ThreeProxy$.outboundSchema).optional(),
            requestId: z.string().optional(),
            serial: z.string(),
            statusCode: z.number().optional(),
            text: z.string().optional(),
            type: ThreeType$,
        })
        .transform((v) => {
            return {
                created: v.created,
                date: v.date,
                deploymentId: v.deploymentId,
                id: v.id,
                info: v.info,
                ...(v.proxy === undefined ? null : { proxy: v.proxy }),
                ...(v.requestId === undefined ? null : { requestId: v.requestId }),
                serial: v.serial,
                ...(v.statusCode === undefined ? null : { statusCode: v.statusCode }),
                ...(v.text === undefined ? null : { text: v.text }),
                type: v.type,
            };
        });
}

/** @internal */
export namespace ResponseBody3$ {
    export const inboundSchema: z.ZodType<ResponseBody3, z.ZodTypeDef, unknown> = z.union([
        z.lazy(() => Three2$.inboundSchema),
        z.lazy(() => Three1$.inboundSchema),
    ]);

    export type Outbound = Three2$.Outbound | Three1$.Outbound;
    export const outboundSchema: z.ZodType<Outbound, z.ZodTypeDef, ResponseBody3> = z.union([
        z.lazy(() => Three2$.outboundSchema),
        z.lazy(() => Three1$.outboundSchema),
    ]);
}

/** @internal */
export const GetDeploymentEventsResponseBodyDeploymentsResponseType$: z.ZodNativeEnum<
    typeof GetDeploymentEventsResponseBodyDeploymentsResponseType
> = z.nativeEnum(GetDeploymentEventsResponseBodyDeploymentsResponseType);

/** @internal */
export namespace GetDeploymentEventsResponseBodyDeploymentsInfo$ {
    export const inboundSchema: z.ZodType<
        GetDeploymentEventsResponseBodyDeploymentsInfo,
        z.ZodTypeDef,
        unknown
    > = z
        .object({
            type: z.string(),
            name: z.string(),
            entrypoint: z.string().optional(),
            path: z.string().optional(),
            step: z.string().optional(),
            readyState: z.string().optional(),
        })
        .transform((v) => {
            return {
                type: v.type,
                name: v.name,
                ...(v.entrypoint === undefined ? null : { entrypoint: v.entrypoint }),
                ...(v.path === undefined ? null : { path: v.path }),
                ...(v.step === undefined ? null : { step: v.step }),
                ...(v.readyState === undefined ? null : { readyState: v.readyState }),
            };
        });

    export type Outbound = {
        type: string;
        name: string;
        entrypoint?: string | undefined;
        path?: string | undefined;
        step?: string | undefined;
        readyState?: string | undefined;
    };

    export const outboundSchema: z.ZodType<
        Outbound,
        z.ZodTypeDef,
        GetDeploymentEventsResponseBodyDeploymentsInfo
    > = z
        .object({
            type: z.string(),
            name: z.string(),
            entrypoint: z.string().optional(),
            path: z.string().optional(),
            step: z.string().optional(),
            readyState: z.string().optional(),
        })
        .transform((v) => {
            return {
                type: v.type,
                name: v.name,
                ...(v.entrypoint === undefined ? null : { entrypoint: v.entrypoint }),
                ...(v.path === undefined ? null : { path: v.path }),
                ...(v.step === undefined ? null : { step: v.step }),
                ...(v.readyState === undefined ? null : { readyState: v.readyState }),
            };
        });
}

/** @internal */
export const GetDeploymentEventsResponseBodyDeploymentsVercelCache$: z.ZodNativeEnum<
    typeof GetDeploymentEventsResponseBodyDeploymentsVercelCache
> = z.nativeEnum(GetDeploymentEventsResponseBodyDeploymentsVercelCache);

/** @internal */
export namespace GetDeploymentEventsResponseBodyDeploymentsProxy$ {
    export const inboundSchema: z.ZodType<
        GetDeploymentEventsResponseBodyDeploymentsProxy,
        z.ZodTypeDef,
        unknown
    > = z
        .object({
            timestamp: z.number(),
            method: z.string(),
            host: z.string(),
            path: z.string(),
            statusCode: z.number().optional(),
            userAgent: z.array(z.string()),
            referer: z.string(),
            clientIp: z.string(),
            region: z.string(),
            scheme: z.string().optional(),
            responseByteSize: z.number().optional(),
            cacheId: z.string().optional(),
            pathType: z.string().optional(),
            vercelId: z.string().optional(),
            vercelCache: GetDeploymentEventsResponseBodyDeploymentsVercelCache$.optional(),
            lambdaRegion: z.string().optional(),
        })
        .transform((v) => {
            return {
                timestamp: v.timestamp,
                method: v.method,
                host: v.host,
                path: v.path,
                ...(v.statusCode === undefined ? null : { statusCode: v.statusCode }),
                userAgent: v.userAgent,
                referer: v.referer,
                clientIp: v.clientIp,
                region: v.region,
                ...(v.scheme === undefined ? null : { scheme: v.scheme }),
                ...(v.responseByteSize === undefined
                    ? null
                    : { responseByteSize: v.responseByteSize }),
                ...(v.cacheId === undefined ? null : { cacheId: v.cacheId }),
                ...(v.pathType === undefined ? null : { pathType: v.pathType }),
                ...(v.vercelId === undefined ? null : { vercelId: v.vercelId }),
                ...(v.vercelCache === undefined ? null : { vercelCache: v.vercelCache }),
                ...(v.lambdaRegion === undefined ? null : { lambdaRegion: v.lambdaRegion }),
            };
        });

    export type Outbound = {
        timestamp: number;
        method: string;
        host: string;
        path: string;
        statusCode?: number | undefined;
        userAgent: Array<string>;
        referer: string;
        clientIp: string;
        region: string;
        scheme?: string | undefined;
        responseByteSize?: number | undefined;
        cacheId?: string | undefined;
        pathType?: string | undefined;
        vercelId?: string | undefined;
        vercelCache?: GetDeploymentEventsResponseBodyDeploymentsVercelCache | undefined;
        lambdaRegion?: string | undefined;
    };

    export const outboundSchema: z.ZodType<
        Outbound,
        z.ZodTypeDef,
        GetDeploymentEventsResponseBodyDeploymentsProxy
    > = z
        .object({
            timestamp: z.number(),
            method: z.string(),
            host: z.string(),
            path: z.string(),
            statusCode: z.number().optional(),
            userAgent: z.array(z.string()),
            referer: z.string(),
            clientIp: z.string(),
            region: z.string(),
            scheme: z.string().optional(),
            responseByteSize: z.number().optional(),
            cacheId: z.string().optional(),
            pathType: z.string().optional(),
            vercelId: z.string().optional(),
            vercelCache: GetDeploymentEventsResponseBodyDeploymentsVercelCache$.optional(),
            lambdaRegion: z.string().optional(),
        })
        .transform((v) => {
            return {
                timestamp: v.timestamp,
                method: v.method,
                host: v.host,
                path: v.path,
                ...(v.statusCode === undefined ? null : { statusCode: v.statusCode }),
                userAgent: v.userAgent,
                referer: v.referer,
                clientIp: v.clientIp,
                region: v.region,
                ...(v.scheme === undefined ? null : { scheme: v.scheme }),
                ...(v.responseByteSize === undefined
                    ? null
                    : { responseByteSize: v.responseByteSize }),
                ...(v.cacheId === undefined ? null : { cacheId: v.cacheId }),
                ...(v.pathType === undefined ? null : { pathType: v.pathType }),
                ...(v.vercelId === undefined ? null : { vercelId: v.vercelId }),
                ...(v.vercelCache === undefined ? null : { vercelCache: v.vercelCache }),
                ...(v.lambdaRegion === undefined ? null : { lambdaRegion: v.lambdaRegion }),
            };
        });
}

/** @internal */
export namespace ResponseBodyPayload$ {
    export const inboundSchema: z.ZodType<ResponseBodyPayload, z.ZodTypeDef, unknown> = z
        .object({
            deploymentId: z.string(),
            info: z
                .lazy(() => GetDeploymentEventsResponseBodyDeploymentsInfo$.inboundSchema)
                .optional(),
            text: z.string().optional(),
            id: z.string(),
            date: z.number(),
            serial: z.string(),
            created: z.number().optional(),
            statusCode: z.number().optional(),
            requestId: z.string().optional(),
            proxy: z
                .lazy(() => GetDeploymentEventsResponseBodyDeploymentsProxy$.inboundSchema)
                .optional(),
        })
        .transform((v) => {
            return {
                deploymentId: v.deploymentId,
                ...(v.info === undefined ? null : { info: v.info }),
                ...(v.text === undefined ? null : { text: v.text }),
                id: v.id,
                date: v.date,
                serial: v.serial,
                ...(v.created === undefined ? null : { created: v.created }),
                ...(v.statusCode === undefined ? null : { statusCode: v.statusCode }),
                ...(v.requestId === undefined ? null : { requestId: v.requestId }),
                ...(v.proxy === undefined ? null : { proxy: v.proxy }),
            };
        });

    export type Outbound = {
        deploymentId: string;
        info?: GetDeploymentEventsResponseBodyDeploymentsInfo$.Outbound | undefined;
        text?: string | undefined;
        id: string;
        date: number;
        serial: string;
        created?: number | undefined;
        statusCode?: number | undefined;
        requestId?: string | undefined;
        proxy?: GetDeploymentEventsResponseBodyDeploymentsProxy$.Outbound | undefined;
    };

    export const outboundSchema: z.ZodType<Outbound, z.ZodTypeDef, ResponseBodyPayload> = z
        .object({
            deploymentId: z.string(),
            info: z
                .lazy(() => GetDeploymentEventsResponseBodyDeploymentsInfo$.outboundSchema)
                .optional(),
            text: z.string().optional(),
            id: z.string(),
            date: z.number(),
            serial: z.string(),
            created: z.number().optional(),
            statusCode: z.number().optional(),
            requestId: z.string().optional(),
            proxy: z
                .lazy(() => GetDeploymentEventsResponseBodyDeploymentsProxy$.outboundSchema)
                .optional(),
        })
        .transform((v) => {
            return {
                deploymentId: v.deploymentId,
                ...(v.info === undefined ? null : { info: v.info }),
                ...(v.text === undefined ? null : { text: v.text }),
                id: v.id,
                date: v.date,
                serial: v.serial,
                ...(v.created === undefined ? null : { created: v.created }),
                ...(v.statusCode === undefined ? null : { statusCode: v.statusCode }),
                ...(v.requestId === undefined ? null : { requestId: v.requestId }),
                ...(v.proxy === undefined ? null : { proxy: v.proxy }),
            };
        });
}

/** @internal */
export namespace GetDeploymentEventsResponseBody2$ {
    export const inboundSchema: z.ZodType<GetDeploymentEventsResponseBody2, z.ZodTypeDef, unknown> =
        z
            .object({
                type: GetDeploymentEventsResponseBodyDeploymentsResponseType$,
                created: z.number(),
                payload: z.lazy(() => ResponseBodyPayload$.inboundSchema),
            })
            .transform((v) => {
                return {
                    type: v.type,
                    created: v.created,
                    payload: v.payload,
                };
            });

    export type Outbound = {
        type: GetDeploymentEventsResponseBodyDeploymentsResponseType;
        created: number;
        payload: ResponseBodyPayload$.Outbound;
    };

    export const outboundSchema: z.ZodType<
        Outbound,
        z.ZodTypeDef,
        GetDeploymentEventsResponseBody2
    > = z
        .object({
            type: GetDeploymentEventsResponseBodyDeploymentsResponseType$,
            created: z.number(),
            payload: z.lazy(() => ResponseBodyPayload$.outboundSchema),
        })
        .transform((v) => {
            return {
                type: v.type,
                created: v.created,
                payload: v.payload,
            };
        });
}

/** @internal */
export namespace ResponseBodyInfo$ {
    export const inboundSchema: z.ZodType<ResponseBodyInfo, z.ZodTypeDef, unknown> = z
        .object({
            type: z.string(),
            name: z.string(),
            entrypoint: z.string().optional(),
            path: z.string().optional(),
            step: z.string().optional(),
            readyState: z.string().optional(),
        })
        .transform((v) => {
            return {
                type: v.type,
                name: v.name,
                ...(v.entrypoint === undefined ? null : { entrypoint: v.entrypoint }),
                ...(v.path === undefined ? null : { path: v.path }),
                ...(v.step === undefined ? null : { step: v.step }),
                ...(v.readyState === undefined ? null : { readyState: v.readyState }),
            };
        });

    export type Outbound = {
        type: string;
        name: string;
        entrypoint?: string | undefined;
        path?: string | undefined;
        step?: string | undefined;
        readyState?: string | undefined;
    };

    export const outboundSchema: z.ZodType<Outbound, z.ZodTypeDef, ResponseBodyInfo> = z
        .object({
            type: z.string(),
            name: z.string(),
            entrypoint: z.string().optional(),
            path: z.string().optional(),
            step: z.string().optional(),
            readyState: z.string().optional(),
        })
        .transform((v) => {
            return {
                type: v.type,
                name: v.name,
                ...(v.entrypoint === undefined ? null : { entrypoint: v.entrypoint }),
                ...(v.path === undefined ? null : { path: v.path }),
                ...(v.step === undefined ? null : { step: v.step }),
                ...(v.readyState === undefined ? null : { readyState: v.readyState }),
            };
        });
}

/** @internal */
export const ResponseBodyVercelCache$: z.ZodNativeEnum<typeof ResponseBodyVercelCache> =
    z.nativeEnum(ResponseBodyVercelCache);

/** @internal */
export namespace ResponseBodyProxy$ {
    export const inboundSchema: z.ZodType<ResponseBodyProxy, z.ZodTypeDef, unknown> = z
        .object({
            timestamp: z.number(),
            method: z.string(),
            host: z.string(),
            path: z.string(),
            statusCode: z.number().optional(),
            userAgent: z.array(z.string()),
            referer: z.string(),
            clientIp: z.string(),
            region: z.string(),
            scheme: z.string().optional(),
            responseByteSize: z.number().optional(),
            cacheId: z.string().optional(),
            pathType: z.string().optional(),
            vercelId: z.string().optional(),
            vercelCache: ResponseBodyVercelCache$.optional(),
            lambdaRegion: z.string().optional(),
        })
        .transform((v) => {
            return {
                timestamp: v.timestamp,
                method: v.method,
                host: v.host,
                path: v.path,
                ...(v.statusCode === undefined ? null : { statusCode: v.statusCode }),
                userAgent: v.userAgent,
                referer: v.referer,
                clientIp: v.clientIp,
                region: v.region,
                ...(v.scheme === undefined ? null : { scheme: v.scheme }),
                ...(v.responseByteSize === undefined
                    ? null
                    : { responseByteSize: v.responseByteSize }),
                ...(v.cacheId === undefined ? null : { cacheId: v.cacheId }),
                ...(v.pathType === undefined ? null : { pathType: v.pathType }),
                ...(v.vercelId === undefined ? null : { vercelId: v.vercelId }),
                ...(v.vercelCache === undefined ? null : { vercelCache: v.vercelCache }),
                ...(v.lambdaRegion === undefined ? null : { lambdaRegion: v.lambdaRegion }),
            };
        });

    export type Outbound = {
        timestamp: number;
        method: string;
        host: string;
        path: string;
        statusCode?: number | undefined;
        userAgent: Array<string>;
        referer: string;
        clientIp: string;
        region: string;
        scheme?: string | undefined;
        responseByteSize?: number | undefined;
        cacheId?: string | undefined;
        pathType?: string | undefined;
        vercelId?: string | undefined;
        vercelCache?: ResponseBodyVercelCache | undefined;
        lambdaRegion?: string | undefined;
    };

    export const outboundSchema: z.ZodType<Outbound, z.ZodTypeDef, ResponseBodyProxy> = z
        .object({
            timestamp: z.number(),
            method: z.string(),
            host: z.string(),
            path: z.string(),
            statusCode: z.number().optional(),
            userAgent: z.array(z.string()),
            referer: z.string(),
            clientIp: z.string(),
            region: z.string(),
            scheme: z.string().optional(),
            responseByteSize: z.number().optional(),
            cacheId: z.string().optional(),
            pathType: z.string().optional(),
            vercelId: z.string().optional(),
            vercelCache: ResponseBodyVercelCache$.optional(),
            lambdaRegion: z.string().optional(),
        })
        .transform((v) => {
            return {
                timestamp: v.timestamp,
                method: v.method,
                host: v.host,
                path: v.path,
                ...(v.statusCode === undefined ? null : { statusCode: v.statusCode }),
                userAgent: v.userAgent,
                referer: v.referer,
                clientIp: v.clientIp,
                region: v.region,
                ...(v.scheme === undefined ? null : { scheme: v.scheme }),
                ...(v.responseByteSize === undefined
                    ? null
                    : { responseByteSize: v.responseByteSize }),
                ...(v.cacheId === undefined ? null : { cacheId: v.cacheId }),
                ...(v.pathType === undefined ? null : { pathType: v.pathType }),
                ...(v.vercelId === undefined ? null : { vercelId: v.vercelId }),
                ...(v.vercelCache === undefined ? null : { vercelCache: v.vercelCache }),
                ...(v.lambdaRegion === undefined ? null : { lambdaRegion: v.lambdaRegion }),
            };
        });
}

/** @internal */
export const GetDeploymentEventsResponseBodyDeploymentsType$: z.ZodNativeEnum<
    typeof GetDeploymentEventsResponseBodyDeploymentsType
> = z.nativeEnum(GetDeploymentEventsResponseBodyDeploymentsType);

/** @internal */
export namespace GetDeploymentEventsResponseBody1$ {
    export const inboundSchema: z.ZodType<GetDeploymentEventsResponseBody1, z.ZodTypeDef, unknown> =
        z
            .object({
                created: z.number(),
                date: z.number(),
                deploymentId: z.string(),
                id: z.string(),
                info: z.lazy(() => ResponseBodyInfo$.inboundSchema),
                proxy: z.lazy(() => ResponseBodyProxy$.inboundSchema).optional(),
                requestId: z.string().optional(),
                serial: z.string(),
                statusCode: z.number().optional(),
                text: z.string().optional(),
                type: GetDeploymentEventsResponseBodyDeploymentsType$,
            })
            .transform((v) => {
                return {
                    created: v.created,
                    date: v.date,
                    deploymentId: v.deploymentId,
                    id: v.id,
                    info: v.info,
                    ...(v.proxy === undefined ? null : { proxy: v.proxy }),
                    ...(v.requestId === undefined ? null : { requestId: v.requestId }),
                    serial: v.serial,
                    ...(v.statusCode === undefined ? null : { statusCode: v.statusCode }),
                    ...(v.text === undefined ? null : { text: v.text }),
                    type: v.type,
                };
            });

    export type Outbound = {
        created: number;
        date: number;
        deploymentId: string;
        id: string;
        info: ResponseBodyInfo$.Outbound;
        proxy?: ResponseBodyProxy$.Outbound | undefined;
        requestId?: string | undefined;
        serial: string;
        statusCode?: number | undefined;
        text?: string | undefined;
        type: GetDeploymentEventsResponseBodyDeploymentsType;
    };

    export const outboundSchema: z.ZodType<
        Outbound,
        z.ZodTypeDef,
        GetDeploymentEventsResponseBody1
    > = z
        .object({
            created: z.number(),
            date: z.number(),
            deploymentId: z.string(),
            id: z.string(),
            info: z.lazy(() => ResponseBodyInfo$.outboundSchema),
            proxy: z.lazy(() => ResponseBodyProxy$.outboundSchema).optional(),
            requestId: z.string().optional(),
            serial: z.string(),
            statusCode: z.number().optional(),
            text: z.string().optional(),
            type: GetDeploymentEventsResponseBodyDeploymentsType$,
        })
        .transform((v) => {
            return {
                created: v.created,
                date: v.date,
                deploymentId: v.deploymentId,
                id: v.id,
                info: v.info,
                ...(v.proxy === undefined ? null : { proxy: v.proxy }),
                ...(v.requestId === undefined ? null : { requestId: v.requestId }),
                serial: v.serial,
                ...(v.statusCode === undefined ? null : { statusCode: v.statusCode }),
                ...(v.text === undefined ? null : { text: v.text }),
                type: v.type,
            };
        });
}

/** @internal */
export namespace GetDeploymentEventsResponseBody$ {
    export const inboundSchema: z.ZodType<GetDeploymentEventsResponseBody, z.ZodTypeDef, unknown> =
        z.union([
            z.lazy(() => GetDeploymentEventsResponseBody2$.inboundSchema),
            z.lazy(() => GetDeploymentEventsResponseBody1$.inboundSchema),
            z.union([z.lazy(() => Three2$.inboundSchema), z.lazy(() => Three1$.inboundSchema)]),
        ]);

    export type Outbound =
        | GetDeploymentEventsResponseBody2$.Outbound
        | GetDeploymentEventsResponseBody1$.Outbound
        | Three2$.Outbound
        | Three1$.Outbound;
    export const outboundSchema: z.ZodType<
        Outbound,
        z.ZodTypeDef,
        GetDeploymentEventsResponseBody
    > = z.union([
        z.lazy(() => GetDeploymentEventsResponseBody2$.outboundSchema),
        z.lazy(() => GetDeploymentEventsResponseBody1$.outboundSchema),
        z.union([z.lazy(() => Three2$.outboundSchema), z.lazy(() => Three1$.outboundSchema)]),
    ]);
}

/** @internal */
export const GetDeploymentEventsResponseBodyType$: z.ZodNativeEnum<
    typeof GetDeploymentEventsResponseBodyType
> = z.nativeEnum(GetDeploymentEventsResponseBodyType);

/** @internal */
export namespace GetDeploymentEventsResponseBodyInfo$ {
    export const inboundSchema: z.ZodType<
        GetDeploymentEventsResponseBodyInfo,
        z.ZodTypeDef,
        unknown
    > = z
        .object({
            type: z.string(),
            name: z.string(),
            entrypoint: z.string().optional(),
            path: z.string().optional(),
            step: z.string().optional(),
            readyState: z.string().optional(),
        })
        .transform((v) => {
            return {
                type: v.type,
                name: v.name,
                ...(v.entrypoint === undefined ? null : { entrypoint: v.entrypoint }),
                ...(v.path === undefined ? null : { path: v.path }),
                ...(v.step === undefined ? null : { step: v.step }),
                ...(v.readyState === undefined ? null : { readyState: v.readyState }),
            };
        });

    export type Outbound = {
        type: string;
        name: string;
        entrypoint?: string | undefined;
        path?: string | undefined;
        step?: string | undefined;
        readyState?: string | undefined;
    };

    export const outboundSchema: z.ZodType<
        Outbound,
        z.ZodTypeDef,
        GetDeploymentEventsResponseBodyInfo
    > = z
        .object({
            type: z.string(),
            name: z.string(),
            entrypoint: z.string().optional(),
            path: z.string().optional(),
            step: z.string().optional(),
            readyState: z.string().optional(),
        })
        .transform((v) => {
            return {
                type: v.type,
                name: v.name,
                ...(v.entrypoint === undefined ? null : { entrypoint: v.entrypoint }),
                ...(v.path === undefined ? null : { path: v.path }),
                ...(v.step === undefined ? null : { step: v.step }),
                ...(v.readyState === undefined ? null : { readyState: v.readyState }),
            };
        });
}

/** @internal */
export const GetDeploymentEventsResponseBodyVercelCache$: z.ZodNativeEnum<
    typeof GetDeploymentEventsResponseBodyVercelCache
> = z.nativeEnum(GetDeploymentEventsResponseBodyVercelCache);

/** @internal */
export namespace GetDeploymentEventsResponseBodyProxy$ {
    export const inboundSchema: z.ZodType<
        GetDeploymentEventsResponseBodyProxy,
        z.ZodTypeDef,
        unknown
    > = z
        .object({
            timestamp: z.number(),
            method: z.string(),
            host: z.string(),
            path: z.string(),
            statusCode: z.number().optional(),
            userAgent: z.array(z.string()),
            referer: z.string(),
            clientIp: z.string(),
            region: z.string(),
            scheme: z.string().optional(),
            responseByteSize: z.number().optional(),
            cacheId: z.string().optional(),
            pathType: z.string().optional(),
            vercelId: z.string().optional(),
            vercelCache: GetDeploymentEventsResponseBodyVercelCache$.optional(),
            lambdaRegion: z.string().optional(),
        })
        .transform((v) => {
            return {
                timestamp: v.timestamp,
                method: v.method,
                host: v.host,
                path: v.path,
                ...(v.statusCode === undefined ? null : { statusCode: v.statusCode }),
                userAgent: v.userAgent,
                referer: v.referer,
                clientIp: v.clientIp,
                region: v.region,
                ...(v.scheme === undefined ? null : { scheme: v.scheme }),
                ...(v.responseByteSize === undefined
                    ? null
                    : { responseByteSize: v.responseByteSize }),
                ...(v.cacheId === undefined ? null : { cacheId: v.cacheId }),
                ...(v.pathType === undefined ? null : { pathType: v.pathType }),
                ...(v.vercelId === undefined ? null : { vercelId: v.vercelId }),
                ...(v.vercelCache === undefined ? null : { vercelCache: v.vercelCache }),
                ...(v.lambdaRegion === undefined ? null : { lambdaRegion: v.lambdaRegion }),
            };
        });

    export type Outbound = {
        timestamp: number;
        method: string;
        host: string;
        path: string;
        statusCode?: number | undefined;
        userAgent: Array<string>;
        referer: string;
        clientIp: string;
        region: string;
        scheme?: string | undefined;
        responseByteSize?: number | undefined;
        cacheId?: string | undefined;
        pathType?: string | undefined;
        vercelId?: string | undefined;
        vercelCache?: GetDeploymentEventsResponseBodyVercelCache | undefined;
        lambdaRegion?: string | undefined;
    };

    export const outboundSchema: z.ZodType<
        Outbound,
        z.ZodTypeDef,
        GetDeploymentEventsResponseBodyProxy
    > = z
        .object({
            timestamp: z.number(),
            method: z.string(),
            host: z.string(),
            path: z.string(),
            statusCode: z.number().optional(),
            userAgent: z.array(z.string()),
            referer: z.string(),
            clientIp: z.string(),
            region: z.string(),
            scheme: z.string().optional(),
            responseByteSize: z.number().optional(),
            cacheId: z.string().optional(),
            pathType: z.string().optional(),
            vercelId: z.string().optional(),
            vercelCache: GetDeploymentEventsResponseBodyVercelCache$.optional(),
            lambdaRegion: z.string().optional(),
        })
        .transform((v) => {
            return {
                timestamp: v.timestamp,
                method: v.method,
                host: v.host,
                path: v.path,
                ...(v.statusCode === undefined ? null : { statusCode: v.statusCode }),
                userAgent: v.userAgent,
                referer: v.referer,
                clientIp: v.clientIp,
                region: v.region,
                ...(v.scheme === undefined ? null : { scheme: v.scheme }),
                ...(v.responseByteSize === undefined
                    ? null
                    : { responseByteSize: v.responseByteSize }),
                ...(v.cacheId === undefined ? null : { cacheId: v.cacheId }),
                ...(v.pathType === undefined ? null : { pathType: v.pathType }),
                ...(v.vercelId === undefined ? null : { vercelId: v.vercelId }),
                ...(v.vercelCache === undefined ? null : { vercelCache: v.vercelCache }),
                ...(v.lambdaRegion === undefined ? null : { lambdaRegion: v.lambdaRegion }),
            };
        });
}

/** @internal */
export namespace Payload$ {
    export const inboundSchema: z.ZodType<Payload, z.ZodTypeDef, unknown> = z
        .object({
            deploymentId: z.string(),
            info: z.lazy(() => GetDeploymentEventsResponseBodyInfo$.inboundSchema).optional(),
            text: z.string().optional(),
            id: z.string(),
            date: z.number(),
            serial: z.string(),
            created: z.number().optional(),
            statusCode: z.number().optional(),
            requestId: z.string().optional(),
            proxy: z.lazy(() => GetDeploymentEventsResponseBodyProxy$.inboundSchema).optional(),
        })
        .transform((v) => {
            return {
                deploymentId: v.deploymentId,
                ...(v.info === undefined ? null : { info: v.info }),
                ...(v.text === undefined ? null : { text: v.text }),
                id: v.id,
                date: v.date,
                serial: v.serial,
                ...(v.created === undefined ? null : { created: v.created }),
                ...(v.statusCode === undefined ? null : { statusCode: v.statusCode }),
                ...(v.requestId === undefined ? null : { requestId: v.requestId }),
                ...(v.proxy === undefined ? null : { proxy: v.proxy }),
            };
        });

    export type Outbound = {
        deploymentId: string;
        info?: GetDeploymentEventsResponseBodyInfo$.Outbound | undefined;
        text?: string | undefined;
        id: string;
        date: number;
        serial: string;
        created?: number | undefined;
        statusCode?: number | undefined;
        requestId?: string | undefined;
        proxy?: GetDeploymentEventsResponseBodyProxy$.Outbound | undefined;
    };

    export const outboundSchema: z.ZodType<Outbound, z.ZodTypeDef, Payload> = z
        .object({
            deploymentId: z.string(),
            info: z.lazy(() => GetDeploymentEventsResponseBodyInfo$.outboundSchema).optional(),
            text: z.string().optional(),
            id: z.string(),
            date: z.number(),
            serial: z.string(),
            created: z.number().optional(),
            statusCode: z.number().optional(),
            requestId: z.string().optional(),
            proxy: z.lazy(() => GetDeploymentEventsResponseBodyProxy$.outboundSchema).optional(),
        })
        .transform((v) => {
            return {
                deploymentId: v.deploymentId,
                ...(v.info === undefined ? null : { info: v.info }),
                ...(v.text === undefined ? null : { text: v.text }),
                id: v.id,
                date: v.date,
                serial: v.serial,
                ...(v.created === undefined ? null : { created: v.created }),
                ...(v.statusCode === undefined ? null : { statusCode: v.statusCode }),
                ...(v.requestId === undefined ? null : { requestId: v.requestId }),
                ...(v.proxy === undefined ? null : { proxy: v.proxy }),
            };
        });
}

/** @internal */
export namespace ResponseBody2$ {
    export const inboundSchema: z.ZodType<ResponseBody2, z.ZodTypeDef, unknown> = z
        .object({
            type: GetDeploymentEventsResponseBodyType$,
            created: z.number(),
            payload: z.lazy(() => Payload$.inboundSchema),
        })
        .transform((v) => {
            return {
                type: v.type,
                created: v.created,
                payload: v.payload,
            };
        });

    export type Outbound = {
        type: GetDeploymentEventsResponseBodyType;
        created: number;
        payload: Payload$.Outbound;
    };

    export const outboundSchema: z.ZodType<Outbound, z.ZodTypeDef, ResponseBody2> = z
        .object({
            type: GetDeploymentEventsResponseBodyType$,
            created: z.number(),
            payload: z.lazy(() => Payload$.outboundSchema),
        })
        .transform((v) => {
            return {
                type: v.type,
                created: v.created,
                payload: v.payload,
            };
        });
}

/** @internal */
export namespace Info$ {
    export const inboundSchema: z.ZodType<Info, z.ZodTypeDef, unknown> = z
        .object({
            type: z.string(),
            name: z.string(),
            entrypoint: z.string().optional(),
            path: z.string().optional(),
            step: z.string().optional(),
            readyState: z.string().optional(),
        })
        .transform((v) => {
            return {
                type: v.type,
                name: v.name,
                ...(v.entrypoint === undefined ? null : { entrypoint: v.entrypoint }),
                ...(v.path === undefined ? null : { path: v.path }),
                ...(v.step === undefined ? null : { step: v.step }),
                ...(v.readyState === undefined ? null : { readyState: v.readyState }),
            };
        });

    export type Outbound = {
        type: string;
        name: string;
        entrypoint?: string | undefined;
        path?: string | undefined;
        step?: string | undefined;
        readyState?: string | undefined;
    };

    export const outboundSchema: z.ZodType<Outbound, z.ZodTypeDef, Info> = z
        .object({
            type: z.string(),
            name: z.string(),
            entrypoint: z.string().optional(),
            path: z.string().optional(),
            step: z.string().optional(),
            readyState: z.string().optional(),
        })
        .transform((v) => {
            return {
                type: v.type,
                name: v.name,
                ...(v.entrypoint === undefined ? null : { entrypoint: v.entrypoint }),
                ...(v.path === undefined ? null : { path: v.path }),
                ...(v.step === undefined ? null : { step: v.step }),
                ...(v.readyState === undefined ? null : { readyState: v.readyState }),
            };
        });
}

/** @internal */
export const VercelCache$: z.ZodNativeEnum<typeof VercelCache> = z.nativeEnum(VercelCache);

/** @internal */
export namespace Proxy$ {
    export const inboundSchema: z.ZodType<Proxy, z.ZodTypeDef, unknown> = z
        .object({
            timestamp: z.number(),
            method: z.string(),
            host: z.string(),
            path: z.string(),
            statusCode: z.number().optional(),
            userAgent: z.array(z.string()),
            referer: z.string(),
            clientIp: z.string(),
            region: z.string(),
            scheme: z.string().optional(),
            responseByteSize: z.number().optional(),
            cacheId: z.string().optional(),
            pathType: z.string().optional(),
            vercelId: z.string().optional(),
            vercelCache: VercelCache$.optional(),
            lambdaRegion: z.string().optional(),
        })
        .transform((v) => {
            return {
                timestamp: v.timestamp,
                method: v.method,
                host: v.host,
                path: v.path,
                ...(v.statusCode === undefined ? null : { statusCode: v.statusCode }),
                userAgent: v.userAgent,
                referer: v.referer,
                clientIp: v.clientIp,
                region: v.region,
                ...(v.scheme === undefined ? null : { scheme: v.scheme }),
                ...(v.responseByteSize === undefined
                    ? null
                    : { responseByteSize: v.responseByteSize }),
                ...(v.cacheId === undefined ? null : { cacheId: v.cacheId }),
                ...(v.pathType === undefined ? null : { pathType: v.pathType }),
                ...(v.vercelId === undefined ? null : { vercelId: v.vercelId }),
                ...(v.vercelCache === undefined ? null : { vercelCache: v.vercelCache }),
                ...(v.lambdaRegion === undefined ? null : { lambdaRegion: v.lambdaRegion }),
            };
        });

    export type Outbound = {
        timestamp: number;
        method: string;
        host: string;
        path: string;
        statusCode?: number | undefined;
        userAgent: Array<string>;
        referer: string;
        clientIp: string;
        region: string;
        scheme?: string | undefined;
        responseByteSize?: number | undefined;
        cacheId?: string | undefined;
        pathType?: string | undefined;
        vercelId?: string | undefined;
        vercelCache?: VercelCache | undefined;
        lambdaRegion?: string | undefined;
    };

    export const outboundSchema: z.ZodType<Outbound, z.ZodTypeDef, Proxy> = z
        .object({
            timestamp: z.number(),
            method: z.string(),
            host: z.string(),
            path: z.string(),
            statusCode: z.number().optional(),
            userAgent: z.array(z.string()),
            referer: z.string(),
            clientIp: z.string(),
            region: z.string(),
            scheme: z.string().optional(),
            responseByteSize: z.number().optional(),
            cacheId: z.string().optional(),
            pathType: z.string().optional(),
            vercelId: z.string().optional(),
            vercelCache: VercelCache$.optional(),
            lambdaRegion: z.string().optional(),
        })
        .transform((v) => {
            return {
                timestamp: v.timestamp,
                method: v.method,
                host: v.host,
                path: v.path,
                ...(v.statusCode === undefined ? null : { statusCode: v.statusCode }),
                userAgent: v.userAgent,
                referer: v.referer,
                clientIp: v.clientIp,
                region: v.region,
                ...(v.scheme === undefined ? null : { scheme: v.scheme }),
                ...(v.responseByteSize === undefined
                    ? null
                    : { responseByteSize: v.responseByteSize }),
                ...(v.cacheId === undefined ? null : { cacheId: v.cacheId }),
                ...(v.pathType === undefined ? null : { pathType: v.pathType }),
                ...(v.vercelId === undefined ? null : { vercelId: v.vercelId }),
                ...(v.vercelCache === undefined ? null : { vercelCache: v.vercelCache }),
                ...(v.lambdaRegion === undefined ? null : { lambdaRegion: v.lambdaRegion }),
            };
        });
}

/** @internal */
export const ResponseBodyType$: z.ZodNativeEnum<typeof ResponseBodyType> =
    z.nativeEnum(ResponseBodyType);

/** @internal */
export namespace ResponseBody1$ {
    export const inboundSchema: z.ZodType<ResponseBody1, z.ZodTypeDef, unknown> = z
        .object({
            created: z.number(),
            date: z.number(),
            deploymentId: z.string(),
            id: z.string(),
            info: z.lazy(() => Info$.inboundSchema),
            proxy: z.lazy(() => Proxy$.inboundSchema).optional(),
            requestId: z.string().optional(),
            serial: z.string(),
            statusCode: z.number().optional(),
            text: z.string().optional(),
            type: ResponseBodyType$,
        })
        .transform((v) => {
            return {
                created: v.created,
                date: v.date,
                deploymentId: v.deploymentId,
                id: v.id,
                info: v.info,
                ...(v.proxy === undefined ? null : { proxy: v.proxy }),
                ...(v.requestId === undefined ? null : { requestId: v.requestId }),
                serial: v.serial,
                ...(v.statusCode === undefined ? null : { statusCode: v.statusCode }),
                ...(v.text === undefined ? null : { text: v.text }),
                type: v.type,
            };
        });

    export type Outbound = {
        created: number;
        date: number;
        deploymentId: string;
        id: string;
        info: Info$.Outbound;
        proxy?: Proxy$.Outbound | undefined;
        requestId?: string | undefined;
        serial: string;
        statusCode?: number | undefined;
        text?: string | undefined;
        type: ResponseBodyType;
    };

    export const outboundSchema: z.ZodType<Outbound, z.ZodTypeDef, ResponseBody1> = z
        .object({
            created: z.number(),
            date: z.number(),
            deploymentId: z.string(),
            id: z.string(),
            info: z.lazy(() => Info$.outboundSchema),
            proxy: z.lazy(() => Proxy$.outboundSchema).optional(),
            requestId: z.string().optional(),
            serial: z.string(),
            statusCode: z.number().optional(),
            text: z.string().optional(),
            type: ResponseBodyType$,
        })
        .transform((v) => {
            return {
                created: v.created,
                date: v.date,
                deploymentId: v.deploymentId,
                id: v.id,
                info: v.info,
                ...(v.proxy === undefined ? null : { proxy: v.proxy }),
                ...(v.requestId === undefined ? null : { requestId: v.requestId }),
                serial: v.serial,
                ...(v.statusCode === undefined ? null : { statusCode: v.statusCode }),
                ...(v.text === undefined ? null : { text: v.text }),
                type: v.type,
            };
        });
}

/** @internal */
export namespace GetDeploymentEventsDeploymentsResponseBody$ {
    export const inboundSchema: z.ZodType<
        GetDeploymentEventsDeploymentsResponseBody,
        z.ZodTypeDef,
        unknown
    > = z.union([
        z.lazy(() => ResponseBody2$.inboundSchema),
        z.lazy(() => ResponseBody1$.inboundSchema),
    ]);

    export type Outbound = ResponseBody2$.Outbound | ResponseBody1$.Outbound;
    export const outboundSchema: z.ZodType<
        Outbound,
        z.ZodTypeDef,
        GetDeploymentEventsDeploymentsResponseBody
    > = z.union([
        z.lazy(() => ResponseBody2$.outboundSchema),
        z.lazy(() => ResponseBody1$.outboundSchema),
    ]);
}

/** @internal */
export namespace GetDeploymentEventsResponse$ {
    export const inboundSchema: z.ZodType<GetDeploymentEventsResponse, z.ZodTypeDef, unknown> = z
        .object({
            HttpMeta: components.HTTPMetadata$.inboundSchema,
            responseBodies: z
                .array(
                    z.union([
                        z.lazy(() => ResponseBody2$.inboundSchema),
                        z.lazy(() => ResponseBody1$.inboundSchema),
                    ])
                )
                .optional(),
            oneOf: z
                .union([
                    z.lazy(() => GetDeploymentEventsResponseBody2$.inboundSchema),
                    z.lazy(() => GetDeploymentEventsResponseBody1$.inboundSchema),
                    z.union([
                        z.lazy(() => Three2$.inboundSchema),
                        z.lazy(() => Three1$.inboundSchema),
                    ]),
                ])
                .optional(),
        })
        .transform((v) => {
            return {
                httpMeta: v.HttpMeta,
                ...(v.responseBodies === undefined ? null : { responseBodies: v.responseBodies }),
                ...(v.oneOf === undefined ? null : { oneOf: v.oneOf }),
            };
        });

    export type Outbound = {
        HttpMeta: components.HTTPMetadata$.Outbound;
        responseBodies?: Array<ResponseBody2$.Outbound | ResponseBody1$.Outbound> | undefined;
        oneOf?:
            | GetDeploymentEventsResponseBody2$.Outbound
            | GetDeploymentEventsResponseBody1$.Outbound
            | Three2$.Outbound
            | Three1$.Outbound
            | undefined;
    };

    export const outboundSchema: z.ZodType<Outbound, z.ZodTypeDef, GetDeploymentEventsResponse> = z
        .object({
            httpMeta: components.HTTPMetadata$.outboundSchema,
            responseBodies: z
                .array(
                    z.union([
                        z.lazy(() => ResponseBody2$.outboundSchema),
                        z.lazy(() => ResponseBody1$.outboundSchema),
                    ])
                )
                .optional(),
            oneOf: z
                .union([
                    z.lazy(() => GetDeploymentEventsResponseBody2$.outboundSchema),
                    z.lazy(() => GetDeploymentEventsResponseBody1$.outboundSchema),
                    z.union([
                        z.lazy(() => Three2$.outboundSchema),
                        z.lazy(() => Three1$.outboundSchema),
                    ]),
                ])
                .optional(),
        })
        .transform((v) => {
            return {
                HttpMeta: v.httpMeta,
                ...(v.responseBodies === undefined ? null : { responseBodies: v.responseBodies }),
                ...(v.oneOf === undefined ? null : { oneOf: v.oneOf }),
            };
        });
}
