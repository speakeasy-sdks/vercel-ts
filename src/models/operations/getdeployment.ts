/*
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

import * as components from "../components";
import * as z from "zod";

export type GetDeploymentRequest = {
    /**
     * The unique identifier or hostname of the deployment.
     */
    idOrUrl: string;
    /**
     * Whether to add in gitRepo information.
     */
    withGitRepoInfo?: string | undefined;
    /**
     * The Team identifier to perform the request on behalf of.
     */
    teamId?: string | undefined;
    /**
     * The Team slug to perform the request on behalf of.
     */
    slug?: string | undefined;
};

export enum GetDeploymentResponseBodyDeploymentsReadyState {
    Building = "BUILDING",
    Error = "ERROR",
    Initializing = "INITIALIZING",
    Ready = "READY",
}

export type GetDeploymentResponseBodyOutput = {
    path: string;
    functionName: string;
};

export type ResponseBodyLambdas = {
    id: string;
    createdAt?: number | undefined;
    entrypoint?: string | null | undefined;
    readyState?: GetDeploymentResponseBodyDeploymentsReadyState | undefined;
    readyStateAt?: number | undefined;
    output: Array<GetDeploymentResponseBodyOutput>;
};

/**
 * The public project information associated with the deployment.
 */
export type ResponseBodyProject = {
    id: string;
    name: string;
    framework?: string | null | undefined;
};

/**
 * The state of the deployment depending on the process of deploying, or if it is ready or in an error state
 */
export enum GetDeploymentResponseBodyReadyState {
    Queued = "QUEUED",
    Building = "BUILDING",
    Error = "ERROR",
    Initializing = "INITIALIZING",
    Ready = "READY",
    Canceled = "CANCELED",
}

/**
 * The substate of the deployment when the state is "READY"
 */
export enum GetDeploymentResponseBodyReadySubstate {
    Staged = "STAGED",
    Promoted = "PROMOTED",
}

/**
 * Where was the deployment created from
 */
export enum GetDeploymentResponseBodySource {
    ApiTriggerGitDeploy = "api-trigger-git-deploy",
    Cli = "cli",
    CloneRepo = "clone/repo",
    Git = "git",
    Import = "import",
    ImportRepo = "import/repo",
}

/**
 * If defined, either `staging` if a staging alias in the format `<project>.<team>.now.sh` was assigned upon creation, or `production` if the aliases from `alias` were assigned
 */
export enum GetDeploymentResponseBodyTarget {
    Staging = "staging",
    Production = "production",
}

/**
 * The team that owns the deployment if any
 */
export type ResponseBodyTeam = {
    /**
     * The ID of the team owner
     */
    id: string;
    /**
     * The name of the team owner
     */
    name: string;
    /**
     * The slug of the team owner
     */
    slug: string;
    /**
     * The avatar of the team owner
     */
    avatar?: string | undefined;
};

export enum GetDeploymentResponseBodyDeploymentsType {
    Lambdas = "LAMBDAS",
}

/**
 * An object that will contain a `code` and a `message` when the aliasing fails, otherwise the value will be `null`
 */
export type GetDeploymentResponseBodyAliasError = {
    code: string;
    message: string;
};

export type ResponseBodyAliasWarning = {
    code: string;
    message: string;
    link?: string | undefined;
    action?: string | undefined;
};

export enum GetDeploymentResponseBodyChecksState {
    Registered = "registered",
    Running = "running",
    Completed = "completed",
}

export enum GetDeploymentResponseBodyChecksConclusion {
    Succeeded = "succeeded",
    Failed = "failed",
    Skipped = "skipped",
    Canceled = "canceled",
}

/**
 * Information about the deployment creator
 */
export type GetDeploymentResponseBodyCreator = {
    /**
     * The ID of the user that created the deployment
     */
    uid: string;
    /**
     * The username of the user that created the deployment
     */
    username?: string | undefined;
    /**
     * The avatar of the user that created the deployment
     */
    avatar?: string | undefined;
};

export enum GetDeploymentGitSourceDeploymentsResponse200ApplicationJSONResponseBody29Type {
    Bitbucket = "bitbucket",
}

export type GetDeploymentGitSource9 = {
    type: GetDeploymentGitSourceDeploymentsResponse200ApplicationJSONResponseBody29Type;
    ref: string;
    sha: string;
    owner?: string | undefined;
    slug?: string | undefined;
    workspaceUuid: string;
    repoUuid: string;
};

export enum GetDeploymentGitSourceDeploymentsResponse200ApplicationJSONResponseBody28Type {
    Gitlab = "gitlab",
}

export type GetDeploymentGitSource8 = {
    type: GetDeploymentGitSourceDeploymentsResponse200ApplicationJSONResponseBody28Type;
    ref: string;
    sha: string;
    projectId: number;
};

export enum GetDeploymentGitSourceDeploymentsResponse200ApplicationJSONResponseBody27Type {
    Github = "github",
}

export type GetDeploymentGitSource7 = {
    type: GetDeploymentGitSourceDeploymentsResponse200ApplicationJSONResponseBody27Type;
    ref: string;
    sha: string;
    repoId: number;
    org?: string | undefined;
    repo?: string | undefined;
};

export enum GetDeploymentGitSourceDeploymentsResponse200ApplicationJSONResponseBody26Type {
    Custom = "custom",
}

export type GetDeploymentGitSource6 = {
    type: GetDeploymentGitSourceDeploymentsResponse200ApplicationJSONResponseBody26Type;
    ref: string;
    sha: string;
    gitUrl: string;
};

export enum GetDeploymentGitSourceDeploymentsResponse200ApplicationJSONResponseBody25Type {
    Bitbucket = "bitbucket",
}

export type GetDeploymentGitSource5 = {
    type: GetDeploymentGitSourceDeploymentsResponse200ApplicationJSONResponseBody25Type;
    owner: string;
    slug: string;
    ref?: string | null | undefined;
    sha?: string | undefined;
    prId?: number | null | undefined;
};

export enum GetDeploymentGitSourceDeploymentsResponse200ApplicationJSONResponseBody24Type {
    Bitbucket = "bitbucket",
}

export type GetDeploymentGitSource4 = {
    type: GetDeploymentGitSourceDeploymentsResponse200ApplicationJSONResponseBody24Type;
    workspaceUuid?: string | undefined;
    repoUuid: string;
    ref?: string | null | undefined;
    sha?: string | undefined;
    prId?: number | null | undefined;
};

export enum GetDeploymentGitSourceDeploymentsResponse200ApplicationJSONResponseBody23Type {
    Gitlab = "gitlab",
}

export type GetDeploymentGitSourceDeploymentsProjectId = string | number;

export type GetDeploymentGitSource3 = {
    type: GetDeploymentGitSourceDeploymentsResponse200ApplicationJSONResponseBody23Type;
    projectId: string | number;
    ref?: string | null | undefined;
    sha?: string | undefined;
    prId?: number | null | undefined;
};

export enum GetDeploymentGitSourceDeploymentsResponse200ApplicationJSONResponseBody22Type {
    Github = "github",
}

export type GetDeploymentGitSource2 = {
    type: GetDeploymentGitSourceDeploymentsResponse200ApplicationJSONResponseBody22Type;
    org: string;
    repo: string;
    ref?: string | null | undefined;
    sha?: string | undefined;
    prId?: number | null | undefined;
};

export enum GetDeploymentGitSourceDeploymentsResponse200ApplicationJSONResponseBody2Type {
    Github = "github",
}

export type GetDeploymentGitSourceDeploymentsRepoId = string | number;

export type GetDeploymentGitSource1 = {
    type: GetDeploymentGitSourceDeploymentsResponse200ApplicationJSONResponseBody2Type;
    repoId: string | number;
    ref?: string | null | undefined;
    sha?: string | undefined;
    prId?: number | null | undefined;
};

export type ResponseBodyGitSource =
    | GetDeploymentGitSource6
    | GetDeploymentGitSource8
    | GetDeploymentGitSource1
    | GetDeploymentGitSource3
    | GetDeploymentGitSource2
    | GetDeploymentGitSource4
    | GetDeploymentGitSource5
    | GetDeploymentGitSource7
    | GetDeploymentGitSource9;

/**
 * The deployment including only public information
 */
export type GetDeploymentResponseBody2 = {
    lambdas?: Array<ResponseBodyLambdas> | undefined;
    /**
     * The name of the project associated with the deployment at the time that the deployment was created
     */
    name: string;
    /**
     * An object containing the deployment's metadata
     */
    meta: Record<string, string>;
    /**
     * The public project information associated with the deployment.
     */
    project?: ResponseBodyProject | undefined;
    /**
     * A boolean representing if the deployment is public or not. By default this is `false`
     */
    public: boolean;
    /**
     * The state of the deployment depending on the process of deploying, or if it is ready or in an error state
     */
    readyState: GetDeploymentResponseBodyReadyState;
    /**
     * The substate of the deployment when the state is "READY"
     */
    readySubstate?: GetDeploymentResponseBodyReadySubstate | undefined;
    /**
     * The regions the deployment exists in
     */
    regions: Array<string>;
    /**
     * Where was the deployment created from
     */
    source?: GetDeploymentResponseBodySource | undefined;
    /**
     * If defined, either `staging` if a staging alias in the format `<project>.<team>.now.sh` was assigned upon creation, or `production` if the aliases from `alias` were assigned
     */
    target?: GetDeploymentResponseBodyTarget | null | undefined;
    /**
     * The team that owns the deployment if any
     */
    team?: ResponseBodyTeam | undefined;
    type: GetDeploymentResponseBodyDeploymentsType;
    /**
     * A string with the unique URL of the deployment
     */
    url: string;
    /**
     * An array of domains that were provided by the user when creating the Deployment.
     */
    userAliases?: Array<string> | undefined;
    /**
     * The platform version that was used to create the deployment.
     */
    version: number;
    /**
     * Whether or not preview comments are enabled for the deployment
     */
    previewCommentsEnabled?: boolean | undefined;
    /**
     * A list of all the aliases (default aliases, staging aliases and production aliases) that were assigned upon deployment creation
     */
    alias: Array<string>;
    /**
     * A boolean that will be true when the aliases from the alias property were assigned successfully
     */
    aliasAssigned: boolean;
    /**
     * An object that will contain a `code` and a `message` when the aliasing fails, otherwise the value will be `null`
     */
    aliasError?: GetDeploymentResponseBodyAliasError | null | undefined;
    aliasFinal?: string | null | undefined;
    aliasWarning?: ResponseBodyAliasWarning | null | undefined;
    autoAssignCustomDomains?: boolean | undefined;
    automaticAliases?: Array<string> | undefined;
    bootedAt: number;
    buildErrorAt?: number | undefined;
    buildingAt: number;
    canceledAt?: number | undefined;
    checksState?: GetDeploymentResponseBodyChecksState | undefined;
    checksConclusion?: GetDeploymentResponseBodyChecksConclusion | undefined;
    /**
     * A number containing the date when the deployment was created in milliseconds
     */
    createdAt: number;
    /**
     * Information about the deployment creator
     */
    creator: GetDeploymentResponseBodyCreator;
    errorCode?: string | undefined;
    errorLink?: string | undefined;
    errorMessage?: string | null | undefined;
    errorStep?: string | undefined;
    passiveRegions?: Array<string> | undefined;
    gitSource?:
        | GetDeploymentGitSource6
        | GetDeploymentGitSource8
        | GetDeploymentGitSource1
        | GetDeploymentGitSource3
        | GetDeploymentGitSource2
        | GetDeploymentGitSource4
        | GetDeploymentGitSource5
        | GetDeploymentGitSource7
        | GetDeploymentGitSource9
        | undefined;
    /**
     * A string holding the unique ID of the deployment
     */
    id: string;
};

export type ResponseBodyBuild = {
    /**
     * The keys of the environment variables that were assigned during the build phase.
     */
    env: Array<string>;
};

export type ResponseBodyBuilds = {};

/**
 * The cron jobs associated with this deployment. Note that preview deployments are also allowed to have this property, but only production deployments create cron jobs. If a preview deployment is promoted to production, only then they'll take effect.
 */
export type ResponseBodyCrons = {
    schedule: string;
    path: string;
};

/**
 * An object used to configure your Serverless Functions
 */
export type ResponseBodyFunctions = {
    memory?: number | undefined;
    maxDuration?: number | undefined;
    runtime?: string | undefined;
    includeFiles?: string | undefined;
    excludeFiles?: string | undefined;
};

/**
 * The pricing plan the deployment was made under
 */
export enum ResponseBodyPlan {
    Pro = "pro",
    Enterprise = "enterprise",
    Hobby = "hobby",
}

/**
 * A list of routes objects used to rewrite paths to point towards other internal or external paths
 */
export type GetDeploymentRoutes3 = {
    src: string;
    continue: boolean;
    middleware: number;
};

export enum GetDeploymentRoutesHandle {
    Error = "error",
    Filesystem = "filesystem",
    Hit = "hit",
    Miss = "miss",
    Rewrite = "rewrite",
    Resource = "resource",
}

/**
 * A list of routes objects used to rewrite paths to point towards other internal or external paths
 */
export type GetDeploymentRoutes2 = {
    handle: GetDeploymentRoutesHandle;
    src?: string | undefined;
    dest?: string | undefined;
    status?: number | undefined;
};

export enum GetDeploymentHasType {
    Header = "header",
    Cookie = "cookie",
    Query = "query",
}

export type GetDeploymentHas2 = {
    type: GetDeploymentHasType;
    key: string;
    value?: string | undefined;
};

export enum GetDeploymentHasDeploymentsType {
    Host = "host",
}

export type GetDeploymentHas1 = {
    type: GetDeploymentHasDeploymentsType;
    value: string;
};

export type GetDeploymentRoutesHas = GetDeploymentHas1 | GetDeploymentHas2;

export enum GetDeploymentMissingType {
    Header = "header",
    Cookie = "cookie",
    Query = "query",
}

export type GetDeploymentMissing2 = {
    type: GetDeploymentMissingType;
    key: string;
    value?: string | undefined;
};

export enum GetDeploymentMissingDeploymentsType {
    Host = "host",
}

export type GetDeploymentMissing1 = {
    type: GetDeploymentMissingDeploymentsType;
    value: string;
};

export type GetDeploymentRoutesMissing = GetDeploymentMissing1 | GetDeploymentMissing2;

export type GetDeploymentRoutesLocale = {
    redirect?: Record<string, string> | undefined;
    cookie?: string | undefined;
};

/**
 * A list of routes objects used to rewrite paths to point towards other internal or external paths
 */
export type GetDeploymentRoutes1 = {
    src: string;
    dest?: string | undefined;
    headers?: Record<string, string> | undefined;
    methods?: Array<string> | undefined;
    continue?: boolean | undefined;
    override?: boolean | undefined;
    caseSensitive?: boolean | undefined;
    check?: boolean | undefined;
    important?: boolean | undefined;
    status?: number | undefined;
    has?: Array<GetDeploymentHas1 | GetDeploymentHas2> | undefined;
    missing?: Array<GetDeploymentMissing1 | GetDeploymentMissing2> | undefined;
    locale?: GetDeploymentRoutesLocale | undefined;
    /**
     * A middleware key within the `output` key under the build result. Overrides a `middleware` definition.
     */
    middlewarePath?: string | undefined;
    /**
     * The original middleware matchers.
     */
    middlewareRawSrc?: Array<string> | undefined;
    /**
     * A middleware index in the `middleware` key under the build result
     */
    middleware?: number | undefined;
};

export type ResponseBodyRoutes = GetDeploymentRoutes3 | GetDeploymentRoutes2 | GetDeploymentRoutes1;

export enum GetDeploymentGitRepoDeploymentsType {
    Bitbucket = "bitbucket",
}

export enum GetDeploymentGitRepoOwnerType {
    Team = "team",
    User = "user",
}

export type GetDeploymentGitRepo3 = {
    owner: string;
    repoUuid: string;
    slug: string;
    type: GetDeploymentGitRepoDeploymentsType;
    workspaceUuid: string;
    path: string;
    defaultBranch: string;
    name: string;
    private: boolean;
    ownerType: GetDeploymentGitRepoOwnerType;
};

export enum GetDeploymentGitRepoType {
    Github = "github",
}

export enum GetDeploymentGitRepoDeploymentsResponseOwnerType {
    Team = "team",
    User = "user",
}

export type GetDeploymentGitRepo2 = {
    org: string;
    repo: string;
    repoId: number;
    type: GetDeploymentGitRepoType;
    repoOwnerId: string;
    path: string;
    defaultBranch: string;
    name: string;
    private: boolean;
    ownerType: GetDeploymentGitRepoDeploymentsResponseOwnerType;
};

export enum GetDeploymentGitRepoDeploymentsResponseType {
    Gitlab = "gitlab",
}

export enum GetDeploymentGitRepoDeploymentsOwnerType {
    Team = "team",
    User = "user",
}

export type GetDeploymentGitRepo1 = {
    namespace: string;
    projectId: number;
    type: GetDeploymentGitRepoDeploymentsResponseType;
    url: string;
    path: string;
    defaultBranch: string;
    name: string;
    private: boolean;
    ownerType: GetDeploymentGitRepoDeploymentsOwnerType;
};

export type ResponseBodyGitRepo =
    | GetDeploymentGitRepo1
    | GetDeploymentGitRepo2
    | GetDeploymentGitRepo3;

export type ResponseBodyAliasAssignedAt = number | boolean;

export enum GetDeploymentResponseBodyDeploymentsResponseReadyState {
    Building = "BUILDING",
    Error = "ERROR",
    Initializing = "INITIALIZING",
    Ready = "READY",
}

export type ResponseBodyOutput = {
    path: string;
    functionName: string;
};

export type GetDeploymentResponseBodyLambdas = {
    id: string;
    createdAt?: number | undefined;
    entrypoint?: string | null | undefined;
    readyState?: GetDeploymentResponseBodyDeploymentsResponseReadyState | undefined;
    readyStateAt?: number | undefined;
    output: Array<ResponseBodyOutput>;
};

/**
 * The public project information associated with the deployment.
 */
export type GetDeploymentResponseBodyProject = {
    id: string;
    name: string;
    framework?: string | null | undefined;
};

/**
 * The state of the deployment depending on the process of deploying, or if it is ready or in an error state
 */
export enum ResponseBodyReadyState {
    Queued = "QUEUED",
    Building = "BUILDING",
    Error = "ERROR",
    Initializing = "INITIALIZING",
    Ready = "READY",
    Canceled = "CANCELED",
}

/**
 * The substate of the deployment when the state is "READY"
 */
export enum ResponseBodyReadySubstate {
    Staged = "STAGED",
    Promoted = "PROMOTED",
}

/**
 * Where was the deployment created from
 */
export enum ResponseBodySource {
    ApiTriggerGitDeploy = "api-trigger-git-deploy",
    Cli = "cli",
    CloneRepo = "clone/repo",
    Git = "git",
    Import = "import",
    ImportRepo = "import/repo",
}

/**
 * If defined, either `staging` if a staging alias in the format `<project>.<team>.now.sh` was assigned upon creation, or `production` if the aliases from `alias` were assigned
 */
export enum ResponseBodyTarget {
    Staging = "staging",
    Production = "production",
}

/**
 * The team that owns the deployment if any
 */
export type GetDeploymentResponseBodyTeam = {
    /**
     * The ID of the team owner
     */
    id: string;
    /**
     * The name of the team owner
     */
    name: string;
    /**
     * The slug of the team owner
     */
    slug: string;
    /**
     * The avatar of the team owner
     */
    avatar?: string | undefined;
};

export enum GetDeploymentResponseBodyType {
    Lambdas = "LAMBDAS",
}

/**
 * An object that will contain a `code` and a `message` when the aliasing fails, otherwise the value will be `null`
 */
export type ResponseBodyAliasError = {
    code: string;
    message: string;
};

export type GetDeploymentResponseBodyAliasWarning = {
    code: string;
    message: string;
    link?: string | undefined;
    action?: string | undefined;
};

export enum ResponseBodyChecksState {
    Registered = "registered",
    Running = "running",
    Completed = "completed",
}

export enum ResponseBodyChecksConclusion {
    Succeeded = "succeeded",
    Failed = "failed",
    Skipped = "skipped",
    Canceled = "canceled",
}

/**
 * Information about the deployment creator
 */
export type ResponseBodyCreator = {
    /**
     * The ID of the user that created the deployment
     */
    uid: string;
    /**
     * The username of the user that created the deployment
     */
    username?: string | undefined;
    /**
     * The avatar of the user that created the deployment
     */
    avatar?: string | undefined;
};

export enum GetDeploymentGitSourceDeploymentsResponse200ApplicationJSONResponseBody19Type {
    Bitbucket = "bitbucket",
}

export type GetDeploymentGitSourceDeployments9 = {
    type: GetDeploymentGitSourceDeploymentsResponse200ApplicationJSONResponseBody19Type;
    ref: string;
    sha: string;
    owner?: string | undefined;
    slug?: string | undefined;
    workspaceUuid: string;
    repoUuid: string;
};

export enum GetDeploymentGitSourceDeploymentsResponse200ApplicationJSONResponseBody1Type {
    Gitlab = "gitlab",
}

export type GetDeploymentGitSourceDeployments8 = {
    type: GetDeploymentGitSourceDeploymentsResponse200ApplicationJSONResponseBody1Type;
    ref: string;
    sha: string;
    projectId: number;
};

export enum GetDeploymentGitSourceDeploymentsResponse200ApplicationJSONResponseBodyType {
    Github = "github",
}

export type GetDeploymentGitSourceDeployments7 = {
    type: GetDeploymentGitSourceDeploymentsResponse200ApplicationJSONResponseBodyType;
    ref: string;
    sha: string;
    repoId: number;
    org?: string | undefined;
    repo?: string | undefined;
};

export enum GetDeploymentGitSourceDeploymentsResponse200ApplicationJSONType {
    Custom = "custom",
}

export type GetDeploymentGitSourceDeployments6 = {
    type: GetDeploymentGitSourceDeploymentsResponse200ApplicationJSONType;
    ref: string;
    sha: string;
    gitUrl: string;
};

export enum GetDeploymentGitSourceDeploymentsResponse200Type {
    Bitbucket = "bitbucket",
}

export type GetDeploymentGitSourceDeployments5 = {
    type: GetDeploymentGitSourceDeploymentsResponse200Type;
    owner: string;
    slug: string;
    ref?: string | null | undefined;
    sha?: string | undefined;
    prId?: number | null | undefined;
};

export enum GetDeploymentGitSourceDeploymentsResponseType {
    Bitbucket = "bitbucket",
}

export type GetDeploymentGitSourceDeployments4 = {
    type: GetDeploymentGitSourceDeploymentsResponseType;
    workspaceUuid?: string | undefined;
    repoUuid: string;
    ref?: string | null | undefined;
    sha?: string | undefined;
    prId?: number | null | undefined;
};

export enum GetDeploymentGitSourceDeploymentsType {
    Gitlab = "gitlab",
}

export type GetDeploymentGitSourceProjectId = string | number;

export type GetDeploymentGitSourceDeployments3 = {
    type: GetDeploymentGitSourceDeploymentsType;
    projectId: string | number;
    ref?: string | null | undefined;
    sha?: string | undefined;
    prId?: number | null | undefined;
};

export enum GetDeploymentGitSourceType {
    Github = "github",
}

export type GetDeploymentGitSourceDeployments2 = {
    type: GetDeploymentGitSourceType;
    org: string;
    repo: string;
    ref?: string | null | undefined;
    sha?: string | undefined;
    prId?: number | null | undefined;
};

export enum GetDeploymentGitSourceDeploymentsResponse200ApplicationJSONResponseBody11Type {
    Github = "github",
}

export type GetDeploymentGitSourceRepoId = string | number;

export type GetDeploymentGitSourceDeployments1 = {
    type: GetDeploymentGitSourceDeploymentsResponse200ApplicationJSONResponseBody11Type;
    repoId: string | number;
    ref?: string | null | undefined;
    sha?: string | undefined;
    prId?: number | null | undefined;
};

export type GetDeploymentResponseBodyGitSource =
    | GetDeploymentGitSourceDeployments6
    | GetDeploymentGitSourceDeployments8
    | GetDeploymentGitSourceDeployments1
    | GetDeploymentGitSourceDeployments3
    | GetDeploymentGitSourceDeployments2
    | GetDeploymentGitSourceDeployments4
    | GetDeploymentGitSourceDeployments5
    | GetDeploymentGitSourceDeployments7
    | GetDeploymentGitSourceDeployments9;

/**
 * The deployment including both public and private information
 */
export type GetDeploymentResponseBody1 = {
    build: ResponseBodyBuild;
    builds?: Array<ResponseBodyBuilds> | undefined;
    /**
     * The flag saying if Vercel Connect configuration is used for builds
     */
    connectBuildsEnabled?: boolean | undefined;
    /**
     * The ID of Vercel Connect configuration used for this deployment
     */
    connectConfigurationId?: string | undefined;
    /**
     * The region where the deployment was first created
     */
    createdIn: string;
    /**
     * The cron jobs associated with this deployment. Note that preview deployments are also allowed to have this property, but only production deployments create cron jobs. If a preview deployment is promoted to production, only then they'll take effect.
     */
    crons?: Array<ResponseBodyCrons> | undefined;
    /**
     * The keys of the environment variables that were assigned during runtime
     */
    env: Array<string>;
    /**
     * An object used to configure your Serverless Functions
     */
    functions?: Record<string, ResponseBodyFunctions> | null | undefined;
    /**
     * Vercel URL to inspect the deployment.
     */
    inspectorUrl: string | null;
    /**
     * Is the deployment currently queued waiting for a Concurrent Build Slot to be available
     */
    isInConcurrentBuildsQueue: boolean;
    /**
     * An object containing the deployment's metadata
     */
    meta: Record<string, string>;
    /**
     * An monorepo manager that was used for the deployment
     */
    monorepoManager?: string | null | undefined;
    /**
     * The name of the project associated with the deployment at the time that the deployment was created
     */
    name: string;
    /**
     * The unique ID of the user or team the deployment belongs to
     */
    ownerId: string;
    /**
     * The connect configuration ID used to deploy passive lambdas into for secure compute enabled deployments.
     */
    passiveConnectConfigurationId?: string | undefined;
    /**
     * The pricing plan the deployment was made under
     */
    plan: ResponseBodyPlan;
    /**
     * The ID of the project the deployment is associated with
     */
    projectId: string;
    /**
     * A list of routes objects used to rewrite paths to point towards other internal or external paths
     */
    routes: Array<GetDeploymentRoutes3 | GetDeploymentRoutes2 | GetDeploymentRoutes1> | null;
    gitRepo?:
        | GetDeploymentGitRepo1
        | GetDeploymentGitRepo2
        | GetDeploymentGitRepo3
        | null
        | undefined;
    aliasAssignedAt?: number | boolean | null | undefined;
    lambdas?: Array<GetDeploymentResponseBodyLambdas> | undefined;
    /**
     * The public project information associated with the deployment.
     */
    project?: GetDeploymentResponseBodyProject | undefined;
    /**
     * A boolean representing if the deployment is public or not. By default this is `false`
     */
    public: boolean;
    /**
     * The state of the deployment depending on the process of deploying, or if it is ready or in an error state
     */
    readyState: ResponseBodyReadyState;
    /**
     * The substate of the deployment when the state is "READY"
     */
    readySubstate?: ResponseBodyReadySubstate | undefined;
    /**
     * The regions the deployment exists in
     */
    regions: Array<string>;
    /**
     * Where was the deployment created from
     */
    source?: ResponseBodySource | undefined;
    /**
     * If defined, either `staging` if a staging alias in the format `<project>.<team>.now.sh` was assigned upon creation, or `production` if the aliases from `alias` were assigned
     */
    target?: ResponseBodyTarget | null | undefined;
    /**
     * The team that owns the deployment if any
     */
    team?: GetDeploymentResponseBodyTeam | undefined;
    type: GetDeploymentResponseBodyType;
    /**
     * A string with the unique URL of the deployment
     */
    url: string;
    /**
     * An array of domains that were provided by the user when creating the Deployment.
     */
    userAliases?: Array<string> | undefined;
    /**
     * The platform version that was used to create the deployment.
     */
    version: number;
    /**
     * Whether or not preview comments are enabled for the deployment
     */
    previewCommentsEnabled?: boolean | undefined;
    /**
     * A list of all the aliases (default aliases, staging aliases and production aliases) that were assigned upon deployment creation
     */
    alias: Array<string>;
    /**
     * A boolean that will be true when the aliases from the alias property were assigned successfully
     */
    aliasAssigned: boolean;
    /**
     * An object that will contain a `code` and a `message` when the aliasing fails, otherwise the value will be `null`
     */
    aliasError?: ResponseBodyAliasError | null | undefined;
    aliasFinal?: string | null | undefined;
    aliasWarning?: GetDeploymentResponseBodyAliasWarning | null | undefined;
    autoAssignCustomDomains?: boolean | undefined;
    automaticAliases?: Array<string> | undefined;
    bootedAt: number;
    buildErrorAt?: number | undefined;
    buildingAt: number;
    canceledAt?: number | undefined;
    checksState?: ResponseBodyChecksState | undefined;
    checksConclusion?: ResponseBodyChecksConclusion | undefined;
    /**
     * A number containing the date when the deployment was created in milliseconds
     */
    createdAt: number;
    /**
     * Information about the deployment creator
     */
    creator: ResponseBodyCreator;
    errorCode?: string | undefined;
    errorLink?: string | undefined;
    errorMessage?: string | null | undefined;
    errorStep?: string | undefined;
    passiveRegions?: Array<string> | undefined;
    gitSource?:
        | GetDeploymentGitSourceDeployments6
        | GetDeploymentGitSourceDeployments8
        | GetDeploymentGitSourceDeployments1
        | GetDeploymentGitSourceDeployments3
        | GetDeploymentGitSourceDeployments2
        | GetDeploymentGitSourceDeployments4
        | GetDeploymentGitSourceDeployments5
        | GetDeploymentGitSourceDeployments7
        | GetDeploymentGitSourceDeployments9
        | undefined;
    /**
     * A string holding the unique ID of the deployment
     */
    id: string;
};

/**
 * The deployment including only public information
 *
 * @remarks
 * The deployment including both public and private information
 */
export type GetDeploymentResponseBody = GetDeploymentResponseBody2 | GetDeploymentResponseBody1;

export type GetDeploymentResponse = {
    httpMeta: components.HTTPMetadata;
    /**
     * The deployment including only public information
     *
     * @remarks
     * The deployment including both public and private information
     */
    oneOf?: GetDeploymentResponseBody2 | GetDeploymentResponseBody1 | undefined;
};

/** @internal */
export namespace GetDeploymentRequest$ {
    export const inboundSchema: z.ZodType<GetDeploymentRequest, z.ZodTypeDef, unknown> = z
        .object({
            idOrUrl: z.string(),
            withGitRepoInfo: z.string().optional(),
            teamId: z.string().optional(),
            slug: z.string().optional(),
        })
        .transform((v) => {
            return {
                idOrUrl: v.idOrUrl,
                ...(v.withGitRepoInfo === undefined
                    ? null
                    : { withGitRepoInfo: v.withGitRepoInfo }),
                ...(v.teamId === undefined ? null : { teamId: v.teamId }),
                ...(v.slug === undefined ? null : { slug: v.slug }),
            };
        });

    export type Outbound = {
        idOrUrl: string;
        withGitRepoInfo?: string | undefined;
        teamId?: string | undefined;
        slug?: string | undefined;
    };

    export const outboundSchema: z.ZodType<Outbound, z.ZodTypeDef, GetDeploymentRequest> = z
        .object({
            idOrUrl: z.string(),
            withGitRepoInfo: z.string().optional(),
            teamId: z.string().optional(),
            slug: z.string().optional(),
        })
        .transform((v) => {
            return {
                idOrUrl: v.idOrUrl,
                ...(v.withGitRepoInfo === undefined
                    ? null
                    : { withGitRepoInfo: v.withGitRepoInfo }),
                ...(v.teamId === undefined ? null : { teamId: v.teamId }),
                ...(v.slug === undefined ? null : { slug: v.slug }),
            };
        });
}

/** @internal */
export const GetDeploymentResponseBodyDeploymentsReadyState$: z.ZodNativeEnum<
    typeof GetDeploymentResponseBodyDeploymentsReadyState
> = z.nativeEnum(GetDeploymentResponseBodyDeploymentsReadyState);

/** @internal */
export namespace GetDeploymentResponseBodyOutput$ {
    export const inboundSchema: z.ZodType<GetDeploymentResponseBodyOutput, z.ZodTypeDef, unknown> =
        z
            .object({
                path: z.string(),
                functionName: z.string(),
            })
            .transform((v) => {
                return {
                    path: v.path,
                    functionName: v.functionName,
                };
            });

    export type Outbound = {
        path: string;
        functionName: string;
    };

    export const outboundSchema: z.ZodType<
        Outbound,
        z.ZodTypeDef,
        GetDeploymentResponseBodyOutput
    > = z
        .object({
            path: z.string(),
            functionName: z.string(),
        })
        .transform((v) => {
            return {
                path: v.path,
                functionName: v.functionName,
            };
        });
}

/** @internal */
export namespace ResponseBodyLambdas$ {
    export const inboundSchema: z.ZodType<ResponseBodyLambdas, z.ZodTypeDef, unknown> = z
        .object({
            id: z.string(),
            createdAt: z.number().optional(),
            entrypoint: z.nullable(z.string()).optional(),
            readyState: GetDeploymentResponseBodyDeploymentsReadyState$.optional(),
            readyStateAt: z.number().optional(),
            output: z.array(z.lazy(() => GetDeploymentResponseBodyOutput$.inboundSchema)),
        })
        .transform((v) => {
            return {
                id: v.id,
                ...(v.createdAt === undefined ? null : { createdAt: v.createdAt }),
                ...(v.entrypoint === undefined ? null : { entrypoint: v.entrypoint }),
                ...(v.readyState === undefined ? null : { readyState: v.readyState }),
                ...(v.readyStateAt === undefined ? null : { readyStateAt: v.readyStateAt }),
                output: v.output,
            };
        });

    export type Outbound = {
        id: string;
        createdAt?: number | undefined;
        entrypoint?: string | null | undefined;
        readyState?: GetDeploymentResponseBodyDeploymentsReadyState | undefined;
        readyStateAt?: number | undefined;
        output: Array<GetDeploymentResponseBodyOutput$.Outbound>;
    };

    export const outboundSchema: z.ZodType<Outbound, z.ZodTypeDef, ResponseBodyLambdas> = z
        .object({
            id: z.string(),
            createdAt: z.number().optional(),
            entrypoint: z.nullable(z.string()).optional(),
            readyState: GetDeploymentResponseBodyDeploymentsReadyState$.optional(),
            readyStateAt: z.number().optional(),
            output: z.array(z.lazy(() => GetDeploymentResponseBodyOutput$.outboundSchema)),
        })
        .transform((v) => {
            return {
                id: v.id,
                ...(v.createdAt === undefined ? null : { createdAt: v.createdAt }),
                ...(v.entrypoint === undefined ? null : { entrypoint: v.entrypoint }),
                ...(v.readyState === undefined ? null : { readyState: v.readyState }),
                ...(v.readyStateAt === undefined ? null : { readyStateAt: v.readyStateAt }),
                output: v.output,
            };
        });
}

/** @internal */
export namespace ResponseBodyProject$ {
    export const inboundSchema: z.ZodType<ResponseBodyProject, z.ZodTypeDef, unknown> = z
        .object({
            id: z.string(),
            name: z.string(),
            framework: z.nullable(z.string()).optional(),
        })
        .transform((v) => {
            return {
                id: v.id,
                name: v.name,
                ...(v.framework === undefined ? null : { framework: v.framework }),
            };
        });

    export type Outbound = {
        id: string;
        name: string;
        framework?: string | null | undefined;
    };

    export const outboundSchema: z.ZodType<Outbound, z.ZodTypeDef, ResponseBodyProject> = z
        .object({
            id: z.string(),
            name: z.string(),
            framework: z.nullable(z.string()).optional(),
        })
        .transform((v) => {
            return {
                id: v.id,
                name: v.name,
                ...(v.framework === undefined ? null : { framework: v.framework }),
            };
        });
}

/** @internal */
export const GetDeploymentResponseBodyReadyState$: z.ZodNativeEnum<
    typeof GetDeploymentResponseBodyReadyState
> = z.nativeEnum(GetDeploymentResponseBodyReadyState);

/** @internal */
export const GetDeploymentResponseBodyReadySubstate$: z.ZodNativeEnum<
    typeof GetDeploymentResponseBodyReadySubstate
> = z.nativeEnum(GetDeploymentResponseBodyReadySubstate);

/** @internal */
export const GetDeploymentResponseBodySource$: z.ZodNativeEnum<
    typeof GetDeploymentResponseBodySource
> = z.nativeEnum(GetDeploymentResponseBodySource);

/** @internal */
export const GetDeploymentResponseBodyTarget$: z.ZodNativeEnum<
    typeof GetDeploymentResponseBodyTarget
> = z.nativeEnum(GetDeploymentResponseBodyTarget);

/** @internal */
export namespace ResponseBodyTeam$ {
    export const inboundSchema: z.ZodType<ResponseBodyTeam, z.ZodTypeDef, unknown> = z
        .object({
            id: z.string(),
            name: z.string(),
            slug: z.string(),
            avatar: z.string().optional(),
        })
        .transform((v) => {
            return {
                id: v.id,
                name: v.name,
                slug: v.slug,
                ...(v.avatar === undefined ? null : { avatar: v.avatar }),
            };
        });

    export type Outbound = {
        id: string;
        name: string;
        slug: string;
        avatar?: string | undefined;
    };

    export const outboundSchema: z.ZodType<Outbound, z.ZodTypeDef, ResponseBodyTeam> = z
        .object({
            id: z.string(),
            name: z.string(),
            slug: z.string(),
            avatar: z.string().optional(),
        })
        .transform((v) => {
            return {
                id: v.id,
                name: v.name,
                slug: v.slug,
                ...(v.avatar === undefined ? null : { avatar: v.avatar }),
            };
        });
}

/** @internal */
export const GetDeploymentResponseBodyDeploymentsType$: z.ZodNativeEnum<
    typeof GetDeploymentResponseBodyDeploymentsType
> = z.nativeEnum(GetDeploymentResponseBodyDeploymentsType);

/** @internal */
export namespace GetDeploymentResponseBodyAliasError$ {
    export const inboundSchema: z.ZodType<
        GetDeploymentResponseBodyAliasError,
        z.ZodTypeDef,
        unknown
    > = z
        .object({
            code: z.string(),
            message: z.string(),
        })
        .transform((v) => {
            return {
                code: v.code,
                message: v.message,
            };
        });

    export type Outbound = {
        code: string;
        message: string;
    };

    export const outboundSchema: z.ZodType<
        Outbound,
        z.ZodTypeDef,
        GetDeploymentResponseBodyAliasError
    > = z
        .object({
            code: z.string(),
            message: z.string(),
        })
        .transform((v) => {
            return {
                code: v.code,
                message: v.message,
            };
        });
}

/** @internal */
export namespace ResponseBodyAliasWarning$ {
    export const inboundSchema: z.ZodType<ResponseBodyAliasWarning, z.ZodTypeDef, unknown> = z
        .object({
            code: z.string(),
            message: z.string(),
            link: z.string().optional(),
            action: z.string().optional(),
        })
        .transform((v) => {
            return {
                code: v.code,
                message: v.message,
                ...(v.link === undefined ? null : { link: v.link }),
                ...(v.action === undefined ? null : { action: v.action }),
            };
        });

    export type Outbound = {
        code: string;
        message: string;
        link?: string | undefined;
        action?: string | undefined;
    };

    export const outboundSchema: z.ZodType<Outbound, z.ZodTypeDef, ResponseBodyAliasWarning> = z
        .object({
            code: z.string(),
            message: z.string(),
            link: z.string().optional(),
            action: z.string().optional(),
        })
        .transform((v) => {
            return {
                code: v.code,
                message: v.message,
                ...(v.link === undefined ? null : { link: v.link }),
                ...(v.action === undefined ? null : { action: v.action }),
            };
        });
}

/** @internal */
export const GetDeploymentResponseBodyChecksState$: z.ZodNativeEnum<
    typeof GetDeploymentResponseBodyChecksState
> = z.nativeEnum(GetDeploymentResponseBodyChecksState);

/** @internal */
export const GetDeploymentResponseBodyChecksConclusion$: z.ZodNativeEnum<
    typeof GetDeploymentResponseBodyChecksConclusion
> = z.nativeEnum(GetDeploymentResponseBodyChecksConclusion);

/** @internal */
export namespace GetDeploymentResponseBodyCreator$ {
    export const inboundSchema: z.ZodType<GetDeploymentResponseBodyCreator, z.ZodTypeDef, unknown> =
        z
            .object({
                uid: z.string(),
                username: z.string().optional(),
                avatar: z.string().optional(),
            })
            .transform((v) => {
                return {
                    uid: v.uid,
                    ...(v.username === undefined ? null : { username: v.username }),
                    ...(v.avatar === undefined ? null : { avatar: v.avatar }),
                };
            });

    export type Outbound = {
        uid: string;
        username?: string | undefined;
        avatar?: string | undefined;
    };

    export const outboundSchema: z.ZodType<
        Outbound,
        z.ZodTypeDef,
        GetDeploymentResponseBodyCreator
    > = z
        .object({
            uid: z.string(),
            username: z.string().optional(),
            avatar: z.string().optional(),
        })
        .transform((v) => {
            return {
                uid: v.uid,
                ...(v.username === undefined ? null : { username: v.username }),
                ...(v.avatar === undefined ? null : { avatar: v.avatar }),
            };
        });
}

/** @internal */
export const GetDeploymentGitSourceDeploymentsResponse200ApplicationJSONResponseBody29Type$: z.ZodNativeEnum<
    typeof GetDeploymentGitSourceDeploymentsResponse200ApplicationJSONResponseBody29Type
> = z.nativeEnum(GetDeploymentGitSourceDeploymentsResponse200ApplicationJSONResponseBody29Type);

/** @internal */
export namespace GetDeploymentGitSource9$ {
    export const inboundSchema: z.ZodType<GetDeploymentGitSource9, z.ZodTypeDef, unknown> = z
        .object({
            type: GetDeploymentGitSourceDeploymentsResponse200ApplicationJSONResponseBody29Type$,
            ref: z.string(),
            sha: z.string(),
            owner: z.string().optional(),
            slug: z.string().optional(),
            workspaceUuid: z.string(),
            repoUuid: z.string(),
        })
        .transform((v) => {
            return {
                type: v.type,
                ref: v.ref,
                sha: v.sha,
                ...(v.owner === undefined ? null : { owner: v.owner }),
                ...(v.slug === undefined ? null : { slug: v.slug }),
                workspaceUuid: v.workspaceUuid,
                repoUuid: v.repoUuid,
            };
        });

    export type Outbound = {
        type: GetDeploymentGitSourceDeploymentsResponse200ApplicationJSONResponseBody29Type;
        ref: string;
        sha: string;
        owner?: string | undefined;
        slug?: string | undefined;
        workspaceUuid: string;
        repoUuid: string;
    };

    export const outboundSchema: z.ZodType<Outbound, z.ZodTypeDef, GetDeploymentGitSource9> = z
        .object({
            type: GetDeploymentGitSourceDeploymentsResponse200ApplicationJSONResponseBody29Type$,
            ref: z.string(),
            sha: z.string(),
            owner: z.string().optional(),
            slug: z.string().optional(),
            workspaceUuid: z.string(),
            repoUuid: z.string(),
        })
        .transform((v) => {
            return {
                type: v.type,
                ref: v.ref,
                sha: v.sha,
                ...(v.owner === undefined ? null : { owner: v.owner }),
                ...(v.slug === undefined ? null : { slug: v.slug }),
                workspaceUuid: v.workspaceUuid,
                repoUuid: v.repoUuid,
            };
        });
}

/** @internal */
export const GetDeploymentGitSourceDeploymentsResponse200ApplicationJSONResponseBody28Type$: z.ZodNativeEnum<
    typeof GetDeploymentGitSourceDeploymentsResponse200ApplicationJSONResponseBody28Type
> = z.nativeEnum(GetDeploymentGitSourceDeploymentsResponse200ApplicationJSONResponseBody28Type);

/** @internal */
export namespace GetDeploymentGitSource8$ {
    export const inboundSchema: z.ZodType<GetDeploymentGitSource8, z.ZodTypeDef, unknown> = z
        .object({
            type: GetDeploymentGitSourceDeploymentsResponse200ApplicationJSONResponseBody28Type$,
            ref: z.string(),
            sha: z.string(),
            projectId: z.number(),
        })
        .transform((v) => {
            return {
                type: v.type,
                ref: v.ref,
                sha: v.sha,
                projectId: v.projectId,
            };
        });

    export type Outbound = {
        type: GetDeploymentGitSourceDeploymentsResponse200ApplicationJSONResponseBody28Type;
        ref: string;
        sha: string;
        projectId: number;
    };

    export const outboundSchema: z.ZodType<Outbound, z.ZodTypeDef, GetDeploymentGitSource8> = z
        .object({
            type: GetDeploymentGitSourceDeploymentsResponse200ApplicationJSONResponseBody28Type$,
            ref: z.string(),
            sha: z.string(),
            projectId: z.number(),
        })
        .transform((v) => {
            return {
                type: v.type,
                ref: v.ref,
                sha: v.sha,
                projectId: v.projectId,
            };
        });
}

/** @internal */
export const GetDeploymentGitSourceDeploymentsResponse200ApplicationJSONResponseBody27Type$: z.ZodNativeEnum<
    typeof GetDeploymentGitSourceDeploymentsResponse200ApplicationJSONResponseBody27Type
> = z.nativeEnum(GetDeploymentGitSourceDeploymentsResponse200ApplicationJSONResponseBody27Type);

/** @internal */
export namespace GetDeploymentGitSource7$ {
    export const inboundSchema: z.ZodType<GetDeploymentGitSource7, z.ZodTypeDef, unknown> = z
        .object({
            type: GetDeploymentGitSourceDeploymentsResponse200ApplicationJSONResponseBody27Type$,
            ref: z.string(),
            sha: z.string(),
            repoId: z.number(),
            org: z.string().optional(),
            repo: z.string().optional(),
        })
        .transform((v) => {
            return {
                type: v.type,
                ref: v.ref,
                sha: v.sha,
                repoId: v.repoId,
                ...(v.org === undefined ? null : { org: v.org }),
                ...(v.repo === undefined ? null : { repo: v.repo }),
            };
        });

    export type Outbound = {
        type: GetDeploymentGitSourceDeploymentsResponse200ApplicationJSONResponseBody27Type;
        ref: string;
        sha: string;
        repoId: number;
        org?: string | undefined;
        repo?: string | undefined;
    };

    export const outboundSchema: z.ZodType<Outbound, z.ZodTypeDef, GetDeploymentGitSource7> = z
        .object({
            type: GetDeploymentGitSourceDeploymentsResponse200ApplicationJSONResponseBody27Type$,
            ref: z.string(),
            sha: z.string(),
            repoId: z.number(),
            org: z.string().optional(),
            repo: z.string().optional(),
        })
        .transform((v) => {
            return {
                type: v.type,
                ref: v.ref,
                sha: v.sha,
                repoId: v.repoId,
                ...(v.org === undefined ? null : { org: v.org }),
                ...(v.repo === undefined ? null : { repo: v.repo }),
            };
        });
}

/** @internal */
export const GetDeploymentGitSourceDeploymentsResponse200ApplicationJSONResponseBody26Type$: z.ZodNativeEnum<
    typeof GetDeploymentGitSourceDeploymentsResponse200ApplicationJSONResponseBody26Type
> = z.nativeEnum(GetDeploymentGitSourceDeploymentsResponse200ApplicationJSONResponseBody26Type);

/** @internal */
export namespace GetDeploymentGitSource6$ {
    export const inboundSchema: z.ZodType<GetDeploymentGitSource6, z.ZodTypeDef, unknown> = z
        .object({
            type: GetDeploymentGitSourceDeploymentsResponse200ApplicationJSONResponseBody26Type$,
            ref: z.string(),
            sha: z.string(),
            gitUrl: z.string(),
        })
        .transform((v) => {
            return {
                type: v.type,
                ref: v.ref,
                sha: v.sha,
                gitUrl: v.gitUrl,
            };
        });

    export type Outbound = {
        type: GetDeploymentGitSourceDeploymentsResponse200ApplicationJSONResponseBody26Type;
        ref: string;
        sha: string;
        gitUrl: string;
    };

    export const outboundSchema: z.ZodType<Outbound, z.ZodTypeDef, GetDeploymentGitSource6> = z
        .object({
            type: GetDeploymentGitSourceDeploymentsResponse200ApplicationJSONResponseBody26Type$,
            ref: z.string(),
            sha: z.string(),
            gitUrl: z.string(),
        })
        .transform((v) => {
            return {
                type: v.type,
                ref: v.ref,
                sha: v.sha,
                gitUrl: v.gitUrl,
            };
        });
}

/** @internal */
export const GetDeploymentGitSourceDeploymentsResponse200ApplicationJSONResponseBody25Type$: z.ZodNativeEnum<
    typeof GetDeploymentGitSourceDeploymentsResponse200ApplicationJSONResponseBody25Type
> = z.nativeEnum(GetDeploymentGitSourceDeploymentsResponse200ApplicationJSONResponseBody25Type);

/** @internal */
export namespace GetDeploymentGitSource5$ {
    export const inboundSchema: z.ZodType<GetDeploymentGitSource5, z.ZodTypeDef, unknown> = z
        .object({
            type: GetDeploymentGitSourceDeploymentsResponse200ApplicationJSONResponseBody25Type$,
            owner: z.string(),
            slug: z.string(),
            ref: z.nullable(z.string()).optional(),
            sha: z.string().optional(),
            prId: z.nullable(z.number()).optional(),
        })
        .transform((v) => {
            return {
                type: v.type,
                owner: v.owner,
                slug: v.slug,
                ...(v.ref === undefined ? null : { ref: v.ref }),
                ...(v.sha === undefined ? null : { sha: v.sha }),
                ...(v.prId === undefined ? null : { prId: v.prId }),
            };
        });

    export type Outbound = {
        type: GetDeploymentGitSourceDeploymentsResponse200ApplicationJSONResponseBody25Type;
        owner: string;
        slug: string;
        ref?: string | null | undefined;
        sha?: string | undefined;
        prId?: number | null | undefined;
    };

    export const outboundSchema: z.ZodType<Outbound, z.ZodTypeDef, GetDeploymentGitSource5> = z
        .object({
            type: GetDeploymentGitSourceDeploymentsResponse200ApplicationJSONResponseBody25Type$,
            owner: z.string(),
            slug: z.string(),
            ref: z.nullable(z.string()).optional(),
            sha: z.string().optional(),
            prId: z.nullable(z.number()).optional(),
        })
        .transform((v) => {
            return {
                type: v.type,
                owner: v.owner,
                slug: v.slug,
                ...(v.ref === undefined ? null : { ref: v.ref }),
                ...(v.sha === undefined ? null : { sha: v.sha }),
                ...(v.prId === undefined ? null : { prId: v.prId }),
            };
        });
}

/** @internal */
export const GetDeploymentGitSourceDeploymentsResponse200ApplicationJSONResponseBody24Type$: z.ZodNativeEnum<
    typeof GetDeploymentGitSourceDeploymentsResponse200ApplicationJSONResponseBody24Type
> = z.nativeEnum(GetDeploymentGitSourceDeploymentsResponse200ApplicationJSONResponseBody24Type);

/** @internal */
export namespace GetDeploymentGitSource4$ {
    export const inboundSchema: z.ZodType<GetDeploymentGitSource4, z.ZodTypeDef, unknown> = z
        .object({
            type: GetDeploymentGitSourceDeploymentsResponse200ApplicationJSONResponseBody24Type$,
            workspaceUuid: z.string().optional(),
            repoUuid: z.string(),
            ref: z.nullable(z.string()).optional(),
            sha: z.string().optional(),
            prId: z.nullable(z.number()).optional(),
        })
        .transform((v) => {
            return {
                type: v.type,
                ...(v.workspaceUuid === undefined ? null : { workspaceUuid: v.workspaceUuid }),
                repoUuid: v.repoUuid,
                ...(v.ref === undefined ? null : { ref: v.ref }),
                ...(v.sha === undefined ? null : { sha: v.sha }),
                ...(v.prId === undefined ? null : { prId: v.prId }),
            };
        });

    export type Outbound = {
        type: GetDeploymentGitSourceDeploymentsResponse200ApplicationJSONResponseBody24Type;
        workspaceUuid?: string | undefined;
        repoUuid: string;
        ref?: string | null | undefined;
        sha?: string | undefined;
        prId?: number | null | undefined;
    };

    export const outboundSchema: z.ZodType<Outbound, z.ZodTypeDef, GetDeploymentGitSource4> = z
        .object({
            type: GetDeploymentGitSourceDeploymentsResponse200ApplicationJSONResponseBody24Type$,
            workspaceUuid: z.string().optional(),
            repoUuid: z.string(),
            ref: z.nullable(z.string()).optional(),
            sha: z.string().optional(),
            prId: z.nullable(z.number()).optional(),
        })
        .transform((v) => {
            return {
                type: v.type,
                ...(v.workspaceUuid === undefined ? null : { workspaceUuid: v.workspaceUuid }),
                repoUuid: v.repoUuid,
                ...(v.ref === undefined ? null : { ref: v.ref }),
                ...(v.sha === undefined ? null : { sha: v.sha }),
                ...(v.prId === undefined ? null : { prId: v.prId }),
            };
        });
}

/** @internal */
export const GetDeploymentGitSourceDeploymentsResponse200ApplicationJSONResponseBody23Type$: z.ZodNativeEnum<
    typeof GetDeploymentGitSourceDeploymentsResponse200ApplicationJSONResponseBody23Type
> = z.nativeEnum(GetDeploymentGitSourceDeploymentsResponse200ApplicationJSONResponseBody23Type);

/** @internal */
export namespace GetDeploymentGitSourceDeploymentsProjectId$ {
    export const inboundSchema: z.ZodType<
        GetDeploymentGitSourceDeploymentsProjectId,
        z.ZodTypeDef,
        unknown
    > = z.union([z.string(), z.number()]);

    export type Outbound = string | number;
    export const outboundSchema: z.ZodType<
        Outbound,
        z.ZodTypeDef,
        GetDeploymentGitSourceDeploymentsProjectId
    > = z.union([z.string(), z.number()]);
}

/** @internal */
export namespace GetDeploymentGitSource3$ {
    export const inboundSchema: z.ZodType<GetDeploymentGitSource3, z.ZodTypeDef, unknown> = z
        .object({
            type: GetDeploymentGitSourceDeploymentsResponse200ApplicationJSONResponseBody23Type$,
            projectId: z.union([z.string(), z.number()]),
            ref: z.nullable(z.string()).optional(),
            sha: z.string().optional(),
            prId: z.nullable(z.number()).optional(),
        })
        .transform((v) => {
            return {
                type: v.type,
                projectId: v.projectId,
                ...(v.ref === undefined ? null : { ref: v.ref }),
                ...(v.sha === undefined ? null : { sha: v.sha }),
                ...(v.prId === undefined ? null : { prId: v.prId }),
            };
        });

    export type Outbound = {
        type: GetDeploymentGitSourceDeploymentsResponse200ApplicationJSONResponseBody23Type;
        projectId: string | number;
        ref?: string | null | undefined;
        sha?: string | undefined;
        prId?: number | null | undefined;
    };

    export const outboundSchema: z.ZodType<Outbound, z.ZodTypeDef, GetDeploymentGitSource3> = z
        .object({
            type: GetDeploymentGitSourceDeploymentsResponse200ApplicationJSONResponseBody23Type$,
            projectId: z.union([z.string(), z.number()]),
            ref: z.nullable(z.string()).optional(),
            sha: z.string().optional(),
            prId: z.nullable(z.number()).optional(),
        })
        .transform((v) => {
            return {
                type: v.type,
                projectId: v.projectId,
                ...(v.ref === undefined ? null : { ref: v.ref }),
                ...(v.sha === undefined ? null : { sha: v.sha }),
                ...(v.prId === undefined ? null : { prId: v.prId }),
            };
        });
}

/** @internal */
export const GetDeploymentGitSourceDeploymentsResponse200ApplicationJSONResponseBody22Type$: z.ZodNativeEnum<
    typeof GetDeploymentGitSourceDeploymentsResponse200ApplicationJSONResponseBody22Type
> = z.nativeEnum(GetDeploymentGitSourceDeploymentsResponse200ApplicationJSONResponseBody22Type);

/** @internal */
export namespace GetDeploymentGitSource2$ {
    export const inboundSchema: z.ZodType<GetDeploymentGitSource2, z.ZodTypeDef, unknown> = z
        .object({
            type: GetDeploymentGitSourceDeploymentsResponse200ApplicationJSONResponseBody22Type$,
            org: z.string(),
            repo: z.string(),
            ref: z.nullable(z.string()).optional(),
            sha: z.string().optional(),
            prId: z.nullable(z.number()).optional(),
        })
        .transform((v) => {
            return {
                type: v.type,
                org: v.org,
                repo: v.repo,
                ...(v.ref === undefined ? null : { ref: v.ref }),
                ...(v.sha === undefined ? null : { sha: v.sha }),
                ...(v.prId === undefined ? null : { prId: v.prId }),
            };
        });

    export type Outbound = {
        type: GetDeploymentGitSourceDeploymentsResponse200ApplicationJSONResponseBody22Type;
        org: string;
        repo: string;
        ref?: string | null | undefined;
        sha?: string | undefined;
        prId?: number | null | undefined;
    };

    export const outboundSchema: z.ZodType<Outbound, z.ZodTypeDef, GetDeploymentGitSource2> = z
        .object({
            type: GetDeploymentGitSourceDeploymentsResponse200ApplicationJSONResponseBody22Type$,
            org: z.string(),
            repo: z.string(),
            ref: z.nullable(z.string()).optional(),
            sha: z.string().optional(),
            prId: z.nullable(z.number()).optional(),
        })
        .transform((v) => {
            return {
                type: v.type,
                org: v.org,
                repo: v.repo,
                ...(v.ref === undefined ? null : { ref: v.ref }),
                ...(v.sha === undefined ? null : { sha: v.sha }),
                ...(v.prId === undefined ? null : { prId: v.prId }),
            };
        });
}

/** @internal */
export const GetDeploymentGitSourceDeploymentsResponse200ApplicationJSONResponseBody2Type$: z.ZodNativeEnum<
    typeof GetDeploymentGitSourceDeploymentsResponse200ApplicationJSONResponseBody2Type
> = z.nativeEnum(GetDeploymentGitSourceDeploymentsResponse200ApplicationJSONResponseBody2Type);

/** @internal */
export namespace GetDeploymentGitSourceDeploymentsRepoId$ {
    export const inboundSchema: z.ZodType<
        GetDeploymentGitSourceDeploymentsRepoId,
        z.ZodTypeDef,
        unknown
    > = z.union([z.string(), z.number()]);

    export type Outbound = string | number;
    export const outboundSchema: z.ZodType<
        Outbound,
        z.ZodTypeDef,
        GetDeploymentGitSourceDeploymentsRepoId
    > = z.union([z.string(), z.number()]);
}

/** @internal */
export namespace GetDeploymentGitSource1$ {
    export const inboundSchema: z.ZodType<GetDeploymentGitSource1, z.ZodTypeDef, unknown> = z
        .object({
            type: GetDeploymentGitSourceDeploymentsResponse200ApplicationJSONResponseBody2Type$,
            repoId: z.union([z.string(), z.number()]),
            ref: z.nullable(z.string()).optional(),
            sha: z.string().optional(),
            prId: z.nullable(z.number()).optional(),
        })
        .transform((v) => {
            return {
                type: v.type,
                repoId: v.repoId,
                ...(v.ref === undefined ? null : { ref: v.ref }),
                ...(v.sha === undefined ? null : { sha: v.sha }),
                ...(v.prId === undefined ? null : { prId: v.prId }),
            };
        });

    export type Outbound = {
        type: GetDeploymentGitSourceDeploymentsResponse200ApplicationJSONResponseBody2Type;
        repoId: string | number;
        ref?: string | null | undefined;
        sha?: string | undefined;
        prId?: number | null | undefined;
    };

    export const outboundSchema: z.ZodType<Outbound, z.ZodTypeDef, GetDeploymentGitSource1> = z
        .object({
            type: GetDeploymentGitSourceDeploymentsResponse200ApplicationJSONResponseBody2Type$,
            repoId: z.union([z.string(), z.number()]),
            ref: z.nullable(z.string()).optional(),
            sha: z.string().optional(),
            prId: z.nullable(z.number()).optional(),
        })
        .transform((v) => {
            return {
                type: v.type,
                repoId: v.repoId,
                ...(v.ref === undefined ? null : { ref: v.ref }),
                ...(v.sha === undefined ? null : { sha: v.sha }),
                ...(v.prId === undefined ? null : { prId: v.prId }),
            };
        });
}

/** @internal */
export namespace ResponseBodyGitSource$ {
    export const inboundSchema: z.ZodType<ResponseBodyGitSource, z.ZodTypeDef, unknown> = z.union([
        z.lazy(() => GetDeploymentGitSource6$.inboundSchema),
        z.lazy(() => GetDeploymentGitSource8$.inboundSchema),
        z.lazy(() => GetDeploymentGitSource1$.inboundSchema),
        z.lazy(() => GetDeploymentGitSource3$.inboundSchema),
        z.lazy(() => GetDeploymentGitSource2$.inboundSchema),
        z.lazy(() => GetDeploymentGitSource4$.inboundSchema),
        z.lazy(() => GetDeploymentGitSource5$.inboundSchema),
        z.lazy(() => GetDeploymentGitSource7$.inboundSchema),
        z.lazy(() => GetDeploymentGitSource9$.inboundSchema),
    ]);

    export type Outbound =
        | GetDeploymentGitSource6$.Outbound
        | GetDeploymentGitSource8$.Outbound
        | GetDeploymentGitSource1$.Outbound
        | GetDeploymentGitSource3$.Outbound
        | GetDeploymentGitSource2$.Outbound
        | GetDeploymentGitSource4$.Outbound
        | GetDeploymentGitSource5$.Outbound
        | GetDeploymentGitSource7$.Outbound
        | GetDeploymentGitSource9$.Outbound;
    export const outboundSchema: z.ZodType<Outbound, z.ZodTypeDef, ResponseBodyGitSource> = z.union(
        [
            z.lazy(() => GetDeploymentGitSource6$.outboundSchema),
            z.lazy(() => GetDeploymentGitSource8$.outboundSchema),
            z.lazy(() => GetDeploymentGitSource1$.outboundSchema),
            z.lazy(() => GetDeploymentGitSource3$.outboundSchema),
            z.lazy(() => GetDeploymentGitSource2$.outboundSchema),
            z.lazy(() => GetDeploymentGitSource4$.outboundSchema),
            z.lazy(() => GetDeploymentGitSource5$.outboundSchema),
            z.lazy(() => GetDeploymentGitSource7$.outboundSchema),
            z.lazy(() => GetDeploymentGitSource9$.outboundSchema),
        ]
    );
}

/** @internal */
export namespace GetDeploymentResponseBody2$ {
    export const inboundSchema: z.ZodType<GetDeploymentResponseBody2, z.ZodTypeDef, unknown> = z
        .object({
            lambdas: z.array(z.lazy(() => ResponseBodyLambdas$.inboundSchema)).optional(),
            name: z.string(),
            meta: z.record(z.string()),
            project: z.lazy(() => ResponseBodyProject$.inboundSchema).optional(),
            public: z.boolean(),
            readyState: GetDeploymentResponseBodyReadyState$,
            readySubstate: GetDeploymentResponseBodyReadySubstate$.optional(),
            regions: z.array(z.string()),
            source: GetDeploymentResponseBodySource$.optional(),
            target: z.nullable(GetDeploymentResponseBodyTarget$).optional(),
            team: z.lazy(() => ResponseBodyTeam$.inboundSchema).optional(),
            type: GetDeploymentResponseBodyDeploymentsType$,
            url: z.string(),
            userAliases: z.array(z.string()).optional(),
            version: z.number(),
            previewCommentsEnabled: z.boolean().optional(),
            alias: z.array(z.string()),
            aliasAssigned: z.boolean(),
            aliasError: z
                .nullable(z.lazy(() => GetDeploymentResponseBodyAliasError$.inboundSchema))
                .optional(),
            aliasFinal: z.nullable(z.string()).optional(),
            aliasWarning: z
                .nullable(z.lazy(() => ResponseBodyAliasWarning$.inboundSchema))
                .optional(),
            autoAssignCustomDomains: z.boolean().optional(),
            automaticAliases: z.array(z.string()).optional(),
            bootedAt: z.number(),
            buildErrorAt: z.number().optional(),
            buildingAt: z.number(),
            canceledAt: z.number().optional(),
            checksState: GetDeploymentResponseBodyChecksState$.optional(),
            checksConclusion: GetDeploymentResponseBodyChecksConclusion$.optional(),
            createdAt: z.number(),
            creator: z.lazy(() => GetDeploymentResponseBodyCreator$.inboundSchema),
            errorCode: z.string().optional(),
            errorLink: z.string().optional(),
            errorMessage: z.nullable(z.string()).optional(),
            errorStep: z.string().optional(),
            passiveRegions: z.array(z.string()).optional(),
            gitSource: z
                .union([
                    z.lazy(() => GetDeploymentGitSource6$.inboundSchema),
                    z.lazy(() => GetDeploymentGitSource8$.inboundSchema),
                    z.lazy(() => GetDeploymentGitSource1$.inboundSchema),
                    z.lazy(() => GetDeploymentGitSource3$.inboundSchema),
                    z.lazy(() => GetDeploymentGitSource2$.inboundSchema),
                    z.lazy(() => GetDeploymentGitSource4$.inboundSchema),
                    z.lazy(() => GetDeploymentGitSource5$.inboundSchema),
                    z.lazy(() => GetDeploymentGitSource7$.inboundSchema),
                    z.lazy(() => GetDeploymentGitSource9$.inboundSchema),
                ])
                .optional(),
            id: z.string(),
        })
        .transform((v) => {
            return {
                ...(v.lambdas === undefined ? null : { lambdas: v.lambdas }),
                name: v.name,
                meta: v.meta,
                ...(v.project === undefined ? null : { project: v.project }),
                public: v.public,
                readyState: v.readyState,
                ...(v.readySubstate === undefined ? null : { readySubstate: v.readySubstate }),
                regions: v.regions,
                ...(v.source === undefined ? null : { source: v.source }),
                ...(v.target === undefined ? null : { target: v.target }),
                ...(v.team === undefined ? null : { team: v.team }),
                type: v.type,
                url: v.url,
                ...(v.userAliases === undefined ? null : { userAliases: v.userAliases }),
                version: v.version,
                ...(v.previewCommentsEnabled === undefined
                    ? null
                    : { previewCommentsEnabled: v.previewCommentsEnabled }),
                alias: v.alias,
                aliasAssigned: v.aliasAssigned,
                ...(v.aliasError === undefined ? null : { aliasError: v.aliasError }),
                ...(v.aliasFinal === undefined ? null : { aliasFinal: v.aliasFinal }),
                ...(v.aliasWarning === undefined ? null : { aliasWarning: v.aliasWarning }),
                ...(v.autoAssignCustomDomains === undefined
                    ? null
                    : { autoAssignCustomDomains: v.autoAssignCustomDomains }),
                ...(v.automaticAliases === undefined
                    ? null
                    : { automaticAliases: v.automaticAliases }),
                bootedAt: v.bootedAt,
                ...(v.buildErrorAt === undefined ? null : { buildErrorAt: v.buildErrorAt }),
                buildingAt: v.buildingAt,
                ...(v.canceledAt === undefined ? null : { canceledAt: v.canceledAt }),
                ...(v.checksState === undefined ? null : { checksState: v.checksState }),
                ...(v.checksConclusion === undefined
                    ? null
                    : { checksConclusion: v.checksConclusion }),
                createdAt: v.createdAt,
                creator: v.creator,
                ...(v.errorCode === undefined ? null : { errorCode: v.errorCode }),
                ...(v.errorLink === undefined ? null : { errorLink: v.errorLink }),
                ...(v.errorMessage === undefined ? null : { errorMessage: v.errorMessage }),
                ...(v.errorStep === undefined ? null : { errorStep: v.errorStep }),
                ...(v.passiveRegions === undefined ? null : { passiveRegions: v.passiveRegions }),
                ...(v.gitSource === undefined ? null : { gitSource: v.gitSource }),
                id: v.id,
            };
        });

    export type Outbound = {
        lambdas?: Array<ResponseBodyLambdas$.Outbound> | undefined;
        name: string;
        meta: Record<string, string>;
        project?: ResponseBodyProject$.Outbound | undefined;
        public: boolean;
        readyState: GetDeploymentResponseBodyReadyState;
        readySubstate?: GetDeploymentResponseBodyReadySubstate | undefined;
        regions: Array<string>;
        source?: GetDeploymentResponseBodySource | undefined;
        target?: GetDeploymentResponseBodyTarget | null | undefined;
        team?: ResponseBodyTeam$.Outbound | undefined;
        type: GetDeploymentResponseBodyDeploymentsType;
        url: string;
        userAliases?: Array<string> | undefined;
        version: number;
        previewCommentsEnabled?: boolean | undefined;
        alias: Array<string>;
        aliasAssigned: boolean;
        aliasError?: GetDeploymentResponseBodyAliasError$.Outbound | null | undefined;
        aliasFinal?: string | null | undefined;
        aliasWarning?: ResponseBodyAliasWarning$.Outbound | null | undefined;
        autoAssignCustomDomains?: boolean | undefined;
        automaticAliases?: Array<string> | undefined;
        bootedAt: number;
        buildErrorAt?: number | undefined;
        buildingAt: number;
        canceledAt?: number | undefined;
        checksState?: GetDeploymentResponseBodyChecksState | undefined;
        checksConclusion?: GetDeploymentResponseBodyChecksConclusion | undefined;
        createdAt: number;
        creator: GetDeploymentResponseBodyCreator$.Outbound;
        errorCode?: string | undefined;
        errorLink?: string | undefined;
        errorMessage?: string | null | undefined;
        errorStep?: string | undefined;
        passiveRegions?: Array<string> | undefined;
        gitSource?:
            | GetDeploymentGitSource6$.Outbound
            | GetDeploymentGitSource8$.Outbound
            | GetDeploymentGitSource1$.Outbound
            | GetDeploymentGitSource3$.Outbound
            | GetDeploymentGitSource2$.Outbound
            | GetDeploymentGitSource4$.Outbound
            | GetDeploymentGitSource5$.Outbound
            | GetDeploymentGitSource7$.Outbound
            | GetDeploymentGitSource9$.Outbound
            | undefined;
        id: string;
    };

    export const outboundSchema: z.ZodType<Outbound, z.ZodTypeDef, GetDeploymentResponseBody2> = z
        .object({
            lambdas: z.array(z.lazy(() => ResponseBodyLambdas$.outboundSchema)).optional(),
            name: z.string(),
            meta: z.record(z.string()),
            project: z.lazy(() => ResponseBodyProject$.outboundSchema).optional(),
            public: z.boolean(),
            readyState: GetDeploymentResponseBodyReadyState$,
            readySubstate: GetDeploymentResponseBodyReadySubstate$.optional(),
            regions: z.array(z.string()),
            source: GetDeploymentResponseBodySource$.optional(),
            target: z.nullable(GetDeploymentResponseBodyTarget$).optional(),
            team: z.lazy(() => ResponseBodyTeam$.outboundSchema).optional(),
            type: GetDeploymentResponseBodyDeploymentsType$,
            url: z.string(),
            userAliases: z.array(z.string()).optional(),
            version: z.number(),
            previewCommentsEnabled: z.boolean().optional(),
            alias: z.array(z.string()),
            aliasAssigned: z.boolean(),
            aliasError: z
                .nullable(z.lazy(() => GetDeploymentResponseBodyAliasError$.outboundSchema))
                .optional(),
            aliasFinal: z.nullable(z.string()).optional(),
            aliasWarning: z
                .nullable(z.lazy(() => ResponseBodyAliasWarning$.outboundSchema))
                .optional(),
            autoAssignCustomDomains: z.boolean().optional(),
            automaticAliases: z.array(z.string()).optional(),
            bootedAt: z.number(),
            buildErrorAt: z.number().optional(),
            buildingAt: z.number(),
            canceledAt: z.number().optional(),
            checksState: GetDeploymentResponseBodyChecksState$.optional(),
            checksConclusion: GetDeploymentResponseBodyChecksConclusion$.optional(),
            createdAt: z.number(),
            creator: z.lazy(() => GetDeploymentResponseBodyCreator$.outboundSchema),
            errorCode: z.string().optional(),
            errorLink: z.string().optional(),
            errorMessage: z.nullable(z.string()).optional(),
            errorStep: z.string().optional(),
            passiveRegions: z.array(z.string()).optional(),
            gitSource: z
                .union([
                    z.lazy(() => GetDeploymentGitSource6$.outboundSchema),
                    z.lazy(() => GetDeploymentGitSource8$.outboundSchema),
                    z.lazy(() => GetDeploymentGitSource1$.outboundSchema),
                    z.lazy(() => GetDeploymentGitSource3$.outboundSchema),
                    z.lazy(() => GetDeploymentGitSource2$.outboundSchema),
                    z.lazy(() => GetDeploymentGitSource4$.outboundSchema),
                    z.lazy(() => GetDeploymentGitSource5$.outboundSchema),
                    z.lazy(() => GetDeploymentGitSource7$.outboundSchema),
                    z.lazy(() => GetDeploymentGitSource9$.outboundSchema),
                ])
                .optional(),
            id: z.string(),
        })
        .transform((v) => {
            return {
                ...(v.lambdas === undefined ? null : { lambdas: v.lambdas }),
                name: v.name,
                meta: v.meta,
                ...(v.project === undefined ? null : { project: v.project }),
                public: v.public,
                readyState: v.readyState,
                ...(v.readySubstate === undefined ? null : { readySubstate: v.readySubstate }),
                regions: v.regions,
                ...(v.source === undefined ? null : { source: v.source }),
                ...(v.target === undefined ? null : { target: v.target }),
                ...(v.team === undefined ? null : { team: v.team }),
                type: v.type,
                url: v.url,
                ...(v.userAliases === undefined ? null : { userAliases: v.userAliases }),
                version: v.version,
                ...(v.previewCommentsEnabled === undefined
                    ? null
                    : { previewCommentsEnabled: v.previewCommentsEnabled }),
                alias: v.alias,
                aliasAssigned: v.aliasAssigned,
                ...(v.aliasError === undefined ? null : { aliasError: v.aliasError }),
                ...(v.aliasFinal === undefined ? null : { aliasFinal: v.aliasFinal }),
                ...(v.aliasWarning === undefined ? null : { aliasWarning: v.aliasWarning }),
                ...(v.autoAssignCustomDomains === undefined
                    ? null
                    : { autoAssignCustomDomains: v.autoAssignCustomDomains }),
                ...(v.automaticAliases === undefined
                    ? null
                    : { automaticAliases: v.automaticAliases }),
                bootedAt: v.bootedAt,
                ...(v.buildErrorAt === undefined ? null : { buildErrorAt: v.buildErrorAt }),
                buildingAt: v.buildingAt,
                ...(v.canceledAt === undefined ? null : { canceledAt: v.canceledAt }),
                ...(v.checksState === undefined ? null : { checksState: v.checksState }),
                ...(v.checksConclusion === undefined
                    ? null
                    : { checksConclusion: v.checksConclusion }),
                createdAt: v.createdAt,
                creator: v.creator,
                ...(v.errorCode === undefined ? null : { errorCode: v.errorCode }),
                ...(v.errorLink === undefined ? null : { errorLink: v.errorLink }),
                ...(v.errorMessage === undefined ? null : { errorMessage: v.errorMessage }),
                ...(v.errorStep === undefined ? null : { errorStep: v.errorStep }),
                ...(v.passiveRegions === undefined ? null : { passiveRegions: v.passiveRegions }),
                ...(v.gitSource === undefined ? null : { gitSource: v.gitSource }),
                id: v.id,
            };
        });
}

/** @internal */
export namespace ResponseBodyBuild$ {
    export const inboundSchema: z.ZodType<ResponseBodyBuild, z.ZodTypeDef, unknown> = z
        .object({
            env: z.array(z.string()),
        })
        .transform((v) => {
            return {
                env: v.env,
            };
        });

    export type Outbound = {
        env: Array<string>;
    };

    export const outboundSchema: z.ZodType<Outbound, z.ZodTypeDef, ResponseBodyBuild> = z
        .object({
            env: z.array(z.string()),
        })
        .transform((v) => {
            return {
                env: v.env,
            };
        });
}

/** @internal */
export namespace ResponseBodyBuilds$ {
    export const inboundSchema: z.ZodType<ResponseBodyBuilds, z.ZodTypeDef, unknown> = z.object({});

    export type Outbound = {};

    export const outboundSchema: z.ZodType<Outbound, z.ZodTypeDef, ResponseBodyBuilds> = z.object(
        {}
    );
}

/** @internal */
export namespace ResponseBodyCrons$ {
    export const inboundSchema: z.ZodType<ResponseBodyCrons, z.ZodTypeDef, unknown> = z
        .object({
            schedule: z.string(),
            path: z.string(),
        })
        .transform((v) => {
            return {
                schedule: v.schedule,
                path: v.path,
            };
        });

    export type Outbound = {
        schedule: string;
        path: string;
    };

    export const outboundSchema: z.ZodType<Outbound, z.ZodTypeDef, ResponseBodyCrons> = z
        .object({
            schedule: z.string(),
            path: z.string(),
        })
        .transform((v) => {
            return {
                schedule: v.schedule,
                path: v.path,
            };
        });
}

/** @internal */
export namespace ResponseBodyFunctions$ {
    export const inboundSchema: z.ZodType<ResponseBodyFunctions, z.ZodTypeDef, unknown> = z
        .object({
            memory: z.number().optional(),
            maxDuration: z.number().optional(),
            runtime: z.string().optional(),
            includeFiles: z.string().optional(),
            excludeFiles: z.string().optional(),
        })
        .transform((v) => {
            return {
                ...(v.memory === undefined ? null : { memory: v.memory }),
                ...(v.maxDuration === undefined ? null : { maxDuration: v.maxDuration }),
                ...(v.runtime === undefined ? null : { runtime: v.runtime }),
                ...(v.includeFiles === undefined ? null : { includeFiles: v.includeFiles }),
                ...(v.excludeFiles === undefined ? null : { excludeFiles: v.excludeFiles }),
            };
        });

    export type Outbound = {
        memory?: number | undefined;
        maxDuration?: number | undefined;
        runtime?: string | undefined;
        includeFiles?: string | undefined;
        excludeFiles?: string | undefined;
    };

    export const outboundSchema: z.ZodType<Outbound, z.ZodTypeDef, ResponseBodyFunctions> = z
        .object({
            memory: z.number().optional(),
            maxDuration: z.number().optional(),
            runtime: z.string().optional(),
            includeFiles: z.string().optional(),
            excludeFiles: z.string().optional(),
        })
        .transform((v) => {
            return {
                ...(v.memory === undefined ? null : { memory: v.memory }),
                ...(v.maxDuration === undefined ? null : { maxDuration: v.maxDuration }),
                ...(v.runtime === undefined ? null : { runtime: v.runtime }),
                ...(v.includeFiles === undefined ? null : { includeFiles: v.includeFiles }),
                ...(v.excludeFiles === undefined ? null : { excludeFiles: v.excludeFiles }),
            };
        });
}

/** @internal */
export const ResponseBodyPlan$: z.ZodNativeEnum<typeof ResponseBodyPlan> =
    z.nativeEnum(ResponseBodyPlan);

/** @internal */
export namespace GetDeploymentRoutes3$ {
    export const inboundSchema: z.ZodType<GetDeploymentRoutes3, z.ZodTypeDef, unknown> = z
        .object({
            src: z.string(),
            continue: z.boolean(),
            middleware: z.number(),
        })
        .transform((v) => {
            return {
                src: v.src,
                continue: v.continue,
                middleware: v.middleware,
            };
        });

    export type Outbound = {
        src: string;
        continue: boolean;
        middleware: number;
    };

    export const outboundSchema: z.ZodType<Outbound, z.ZodTypeDef, GetDeploymentRoutes3> = z
        .object({
            src: z.string(),
            continue: z.boolean(),
            middleware: z.number(),
        })
        .transform((v) => {
            return {
                src: v.src,
                continue: v.continue,
                middleware: v.middleware,
            };
        });
}

/** @internal */
export const GetDeploymentRoutesHandle$: z.ZodNativeEnum<typeof GetDeploymentRoutesHandle> =
    z.nativeEnum(GetDeploymentRoutesHandle);

/** @internal */
export namespace GetDeploymentRoutes2$ {
    export const inboundSchema: z.ZodType<GetDeploymentRoutes2, z.ZodTypeDef, unknown> = z
        .object({
            handle: GetDeploymentRoutesHandle$,
            src: z.string().optional(),
            dest: z.string().optional(),
            status: z.number().optional(),
        })
        .transform((v) => {
            return {
                handle: v.handle,
                ...(v.src === undefined ? null : { src: v.src }),
                ...(v.dest === undefined ? null : { dest: v.dest }),
                ...(v.status === undefined ? null : { status: v.status }),
            };
        });

    export type Outbound = {
        handle: GetDeploymentRoutesHandle;
        src?: string | undefined;
        dest?: string | undefined;
        status?: number | undefined;
    };

    export const outboundSchema: z.ZodType<Outbound, z.ZodTypeDef, GetDeploymentRoutes2> = z
        .object({
            handle: GetDeploymentRoutesHandle$,
            src: z.string().optional(),
            dest: z.string().optional(),
            status: z.number().optional(),
        })
        .transform((v) => {
            return {
                handle: v.handle,
                ...(v.src === undefined ? null : { src: v.src }),
                ...(v.dest === undefined ? null : { dest: v.dest }),
                ...(v.status === undefined ? null : { status: v.status }),
            };
        });
}

/** @internal */
export const GetDeploymentHasType$: z.ZodNativeEnum<typeof GetDeploymentHasType> =
    z.nativeEnum(GetDeploymentHasType);

/** @internal */
export namespace GetDeploymentHas2$ {
    export const inboundSchema: z.ZodType<GetDeploymentHas2, z.ZodTypeDef, unknown> = z
        .object({
            type: GetDeploymentHasType$,
            key: z.string(),
            value: z.string().optional(),
        })
        .transform((v) => {
            return {
                type: v.type,
                key: v.key,
                ...(v.value === undefined ? null : { value: v.value }),
            };
        });

    export type Outbound = {
        type: GetDeploymentHasType;
        key: string;
        value?: string | undefined;
    };

    export const outboundSchema: z.ZodType<Outbound, z.ZodTypeDef, GetDeploymentHas2> = z
        .object({
            type: GetDeploymentHasType$,
            key: z.string(),
            value: z.string().optional(),
        })
        .transform((v) => {
            return {
                type: v.type,
                key: v.key,
                ...(v.value === undefined ? null : { value: v.value }),
            };
        });
}

/** @internal */
export const GetDeploymentHasDeploymentsType$: z.ZodNativeEnum<
    typeof GetDeploymentHasDeploymentsType
> = z.nativeEnum(GetDeploymentHasDeploymentsType);

/** @internal */
export namespace GetDeploymentHas1$ {
    export const inboundSchema: z.ZodType<GetDeploymentHas1, z.ZodTypeDef, unknown> = z
        .object({
            type: GetDeploymentHasDeploymentsType$,
            value: z.string(),
        })
        .transform((v) => {
            return {
                type: v.type,
                value: v.value,
            };
        });

    export type Outbound = {
        type: GetDeploymentHasDeploymentsType;
        value: string;
    };

    export const outboundSchema: z.ZodType<Outbound, z.ZodTypeDef, GetDeploymentHas1> = z
        .object({
            type: GetDeploymentHasDeploymentsType$,
            value: z.string(),
        })
        .transform((v) => {
            return {
                type: v.type,
                value: v.value,
            };
        });
}

/** @internal */
export namespace GetDeploymentRoutesHas$ {
    export const inboundSchema: z.ZodType<GetDeploymentRoutesHas, z.ZodTypeDef, unknown> = z.union([
        z.lazy(() => GetDeploymentHas1$.inboundSchema),
        z.lazy(() => GetDeploymentHas2$.inboundSchema),
    ]);

    export type Outbound = GetDeploymentHas1$.Outbound | GetDeploymentHas2$.Outbound;
    export const outboundSchema: z.ZodType<Outbound, z.ZodTypeDef, GetDeploymentRoutesHas> =
        z.union([
            z.lazy(() => GetDeploymentHas1$.outboundSchema),
            z.lazy(() => GetDeploymentHas2$.outboundSchema),
        ]);
}

/** @internal */
export const GetDeploymentMissingType$: z.ZodNativeEnum<typeof GetDeploymentMissingType> =
    z.nativeEnum(GetDeploymentMissingType);

/** @internal */
export namespace GetDeploymentMissing2$ {
    export const inboundSchema: z.ZodType<GetDeploymentMissing2, z.ZodTypeDef, unknown> = z
        .object({
            type: GetDeploymentMissingType$,
            key: z.string(),
            value: z.string().optional(),
        })
        .transform((v) => {
            return {
                type: v.type,
                key: v.key,
                ...(v.value === undefined ? null : { value: v.value }),
            };
        });

    export type Outbound = {
        type: GetDeploymentMissingType;
        key: string;
        value?: string | undefined;
    };

    export const outboundSchema: z.ZodType<Outbound, z.ZodTypeDef, GetDeploymentMissing2> = z
        .object({
            type: GetDeploymentMissingType$,
            key: z.string(),
            value: z.string().optional(),
        })
        .transform((v) => {
            return {
                type: v.type,
                key: v.key,
                ...(v.value === undefined ? null : { value: v.value }),
            };
        });
}

/** @internal */
export const GetDeploymentMissingDeploymentsType$: z.ZodNativeEnum<
    typeof GetDeploymentMissingDeploymentsType
> = z.nativeEnum(GetDeploymentMissingDeploymentsType);

/** @internal */
export namespace GetDeploymentMissing1$ {
    export const inboundSchema: z.ZodType<GetDeploymentMissing1, z.ZodTypeDef, unknown> = z
        .object({
            type: GetDeploymentMissingDeploymentsType$,
            value: z.string(),
        })
        .transform((v) => {
            return {
                type: v.type,
                value: v.value,
            };
        });

    export type Outbound = {
        type: GetDeploymentMissingDeploymentsType;
        value: string;
    };

    export const outboundSchema: z.ZodType<Outbound, z.ZodTypeDef, GetDeploymentMissing1> = z
        .object({
            type: GetDeploymentMissingDeploymentsType$,
            value: z.string(),
        })
        .transform((v) => {
            return {
                type: v.type,
                value: v.value,
            };
        });
}

/** @internal */
export namespace GetDeploymentRoutesMissing$ {
    export const inboundSchema: z.ZodType<GetDeploymentRoutesMissing, z.ZodTypeDef, unknown> =
        z.union([
            z.lazy(() => GetDeploymentMissing1$.inboundSchema),
            z.lazy(() => GetDeploymentMissing2$.inboundSchema),
        ]);

    export type Outbound = GetDeploymentMissing1$.Outbound | GetDeploymentMissing2$.Outbound;
    export const outboundSchema: z.ZodType<Outbound, z.ZodTypeDef, GetDeploymentRoutesMissing> =
        z.union([
            z.lazy(() => GetDeploymentMissing1$.outboundSchema),
            z.lazy(() => GetDeploymentMissing2$.outboundSchema),
        ]);
}

/** @internal */
export namespace GetDeploymentRoutesLocale$ {
    export const inboundSchema: z.ZodType<GetDeploymentRoutesLocale, z.ZodTypeDef, unknown> = z
        .object({
            redirect: z.record(z.string()).optional(),
            cookie: z.string().optional(),
        })
        .transform((v) => {
            return {
                ...(v.redirect === undefined ? null : { redirect: v.redirect }),
                ...(v.cookie === undefined ? null : { cookie: v.cookie }),
            };
        });

    export type Outbound = {
        redirect?: Record<string, string> | undefined;
        cookie?: string | undefined;
    };

    export const outboundSchema: z.ZodType<Outbound, z.ZodTypeDef, GetDeploymentRoutesLocale> = z
        .object({
            redirect: z.record(z.string()).optional(),
            cookie: z.string().optional(),
        })
        .transform((v) => {
            return {
                ...(v.redirect === undefined ? null : { redirect: v.redirect }),
                ...(v.cookie === undefined ? null : { cookie: v.cookie }),
            };
        });
}

/** @internal */
export namespace GetDeploymentRoutes1$ {
    export const inboundSchema: z.ZodType<GetDeploymentRoutes1, z.ZodTypeDef, unknown> = z
        .object({
            src: z.string(),
            dest: z.string().optional(),
            headers: z.record(z.string()).optional(),
            methods: z.array(z.string()).optional(),
            continue: z.boolean().optional(),
            override: z.boolean().optional(),
            caseSensitive: z.boolean().optional(),
            check: z.boolean().optional(),
            important: z.boolean().optional(),
            status: z.number().optional(),
            has: z
                .array(
                    z.union([
                        z.lazy(() => GetDeploymentHas1$.inboundSchema),
                        z.lazy(() => GetDeploymentHas2$.inboundSchema),
                    ])
                )
                .optional(),
            missing: z
                .array(
                    z.union([
                        z.lazy(() => GetDeploymentMissing1$.inboundSchema),
                        z.lazy(() => GetDeploymentMissing2$.inboundSchema),
                    ])
                )
                .optional(),
            locale: z.lazy(() => GetDeploymentRoutesLocale$.inboundSchema).optional(),
            middlewarePath: z.string().optional(),
            middlewareRawSrc: z.array(z.string()).optional(),
            middleware: z.number().optional(),
        })
        .transform((v) => {
            return {
                src: v.src,
                ...(v.dest === undefined ? null : { dest: v.dest }),
                ...(v.headers === undefined ? null : { headers: v.headers }),
                ...(v.methods === undefined ? null : { methods: v.methods }),
                ...(v.continue === undefined ? null : { continue: v.continue }),
                ...(v.override === undefined ? null : { override: v.override }),
                ...(v.caseSensitive === undefined ? null : { caseSensitive: v.caseSensitive }),
                ...(v.check === undefined ? null : { check: v.check }),
                ...(v.important === undefined ? null : { important: v.important }),
                ...(v.status === undefined ? null : { status: v.status }),
                ...(v.has === undefined ? null : { has: v.has }),
                ...(v.missing === undefined ? null : { missing: v.missing }),
                ...(v.locale === undefined ? null : { locale: v.locale }),
                ...(v.middlewarePath === undefined ? null : { middlewarePath: v.middlewarePath }),
                ...(v.middlewareRawSrc === undefined
                    ? null
                    : { middlewareRawSrc: v.middlewareRawSrc }),
                ...(v.middleware === undefined ? null : { middleware: v.middleware }),
            };
        });

    export type Outbound = {
        src: string;
        dest?: string | undefined;
        headers?: Record<string, string> | undefined;
        methods?: Array<string> | undefined;
        continue?: boolean | undefined;
        override?: boolean | undefined;
        caseSensitive?: boolean | undefined;
        check?: boolean | undefined;
        important?: boolean | undefined;
        status?: number | undefined;
        has?: Array<GetDeploymentHas1$.Outbound | GetDeploymentHas2$.Outbound> | undefined;
        missing?:
            | Array<GetDeploymentMissing1$.Outbound | GetDeploymentMissing2$.Outbound>
            | undefined;
        locale?: GetDeploymentRoutesLocale$.Outbound | undefined;
        middlewarePath?: string | undefined;
        middlewareRawSrc?: Array<string> | undefined;
        middleware?: number | undefined;
    };

    export const outboundSchema: z.ZodType<Outbound, z.ZodTypeDef, GetDeploymentRoutes1> = z
        .object({
            src: z.string(),
            dest: z.string().optional(),
            headers: z.record(z.string()).optional(),
            methods: z.array(z.string()).optional(),
            continue: z.boolean().optional(),
            override: z.boolean().optional(),
            caseSensitive: z.boolean().optional(),
            check: z.boolean().optional(),
            important: z.boolean().optional(),
            status: z.number().optional(),
            has: z
                .array(
                    z.union([
                        z.lazy(() => GetDeploymentHas1$.outboundSchema),
                        z.lazy(() => GetDeploymentHas2$.outboundSchema),
                    ])
                )
                .optional(),
            missing: z
                .array(
                    z.union([
                        z.lazy(() => GetDeploymentMissing1$.outboundSchema),
                        z.lazy(() => GetDeploymentMissing2$.outboundSchema),
                    ])
                )
                .optional(),
            locale: z.lazy(() => GetDeploymentRoutesLocale$.outboundSchema).optional(),
            middlewarePath: z.string().optional(),
            middlewareRawSrc: z.array(z.string()).optional(),
            middleware: z.number().optional(),
        })
        .transform((v) => {
            return {
                src: v.src,
                ...(v.dest === undefined ? null : { dest: v.dest }),
                ...(v.headers === undefined ? null : { headers: v.headers }),
                ...(v.methods === undefined ? null : { methods: v.methods }),
                ...(v.continue === undefined ? null : { continue: v.continue }),
                ...(v.override === undefined ? null : { override: v.override }),
                ...(v.caseSensitive === undefined ? null : { caseSensitive: v.caseSensitive }),
                ...(v.check === undefined ? null : { check: v.check }),
                ...(v.important === undefined ? null : { important: v.important }),
                ...(v.status === undefined ? null : { status: v.status }),
                ...(v.has === undefined ? null : { has: v.has }),
                ...(v.missing === undefined ? null : { missing: v.missing }),
                ...(v.locale === undefined ? null : { locale: v.locale }),
                ...(v.middlewarePath === undefined ? null : { middlewarePath: v.middlewarePath }),
                ...(v.middlewareRawSrc === undefined
                    ? null
                    : { middlewareRawSrc: v.middlewareRawSrc }),
                ...(v.middleware === undefined ? null : { middleware: v.middleware }),
            };
        });
}

/** @internal */
export namespace ResponseBodyRoutes$ {
    export const inboundSchema: z.ZodType<ResponseBodyRoutes, z.ZodTypeDef, unknown> = z.union([
        z.lazy(() => GetDeploymentRoutes3$.inboundSchema),
        z.lazy(() => GetDeploymentRoutes2$.inboundSchema),
        z.lazy(() => GetDeploymentRoutes1$.inboundSchema),
    ]);

    export type Outbound =
        | GetDeploymentRoutes3$.Outbound
        | GetDeploymentRoutes2$.Outbound
        | GetDeploymentRoutes1$.Outbound;
    export const outboundSchema: z.ZodType<Outbound, z.ZodTypeDef, ResponseBodyRoutes> = z.union([
        z.lazy(() => GetDeploymentRoutes3$.outboundSchema),
        z.lazy(() => GetDeploymentRoutes2$.outboundSchema),
        z.lazy(() => GetDeploymentRoutes1$.outboundSchema),
    ]);
}

/** @internal */
export const GetDeploymentGitRepoDeploymentsType$: z.ZodNativeEnum<
    typeof GetDeploymentGitRepoDeploymentsType
> = z.nativeEnum(GetDeploymentGitRepoDeploymentsType);

/** @internal */
export const GetDeploymentGitRepoOwnerType$: z.ZodNativeEnum<typeof GetDeploymentGitRepoOwnerType> =
    z.nativeEnum(GetDeploymentGitRepoOwnerType);

/** @internal */
export namespace GetDeploymentGitRepo3$ {
    export const inboundSchema: z.ZodType<GetDeploymentGitRepo3, z.ZodTypeDef, unknown> = z
        .object({
            owner: z.string(),
            repoUuid: z.string(),
            slug: z.string(),
            type: GetDeploymentGitRepoDeploymentsType$,
            workspaceUuid: z.string(),
            path: z.string(),
            defaultBranch: z.string(),
            name: z.string(),
            private: z.boolean(),
            ownerType: GetDeploymentGitRepoOwnerType$,
        })
        .transform((v) => {
            return {
                owner: v.owner,
                repoUuid: v.repoUuid,
                slug: v.slug,
                type: v.type,
                workspaceUuid: v.workspaceUuid,
                path: v.path,
                defaultBranch: v.defaultBranch,
                name: v.name,
                private: v.private,
                ownerType: v.ownerType,
            };
        });

    export type Outbound = {
        owner: string;
        repoUuid: string;
        slug: string;
        type: GetDeploymentGitRepoDeploymentsType;
        workspaceUuid: string;
        path: string;
        defaultBranch: string;
        name: string;
        private: boolean;
        ownerType: GetDeploymentGitRepoOwnerType;
    };

    export const outboundSchema: z.ZodType<Outbound, z.ZodTypeDef, GetDeploymentGitRepo3> = z
        .object({
            owner: z.string(),
            repoUuid: z.string(),
            slug: z.string(),
            type: GetDeploymentGitRepoDeploymentsType$,
            workspaceUuid: z.string(),
            path: z.string(),
            defaultBranch: z.string(),
            name: z.string(),
            private: z.boolean(),
            ownerType: GetDeploymentGitRepoOwnerType$,
        })
        .transform((v) => {
            return {
                owner: v.owner,
                repoUuid: v.repoUuid,
                slug: v.slug,
                type: v.type,
                workspaceUuid: v.workspaceUuid,
                path: v.path,
                defaultBranch: v.defaultBranch,
                name: v.name,
                private: v.private,
                ownerType: v.ownerType,
            };
        });
}

/** @internal */
export const GetDeploymentGitRepoType$: z.ZodNativeEnum<typeof GetDeploymentGitRepoType> =
    z.nativeEnum(GetDeploymentGitRepoType);

/** @internal */
export const GetDeploymentGitRepoDeploymentsResponseOwnerType$: z.ZodNativeEnum<
    typeof GetDeploymentGitRepoDeploymentsResponseOwnerType
> = z.nativeEnum(GetDeploymentGitRepoDeploymentsResponseOwnerType);

/** @internal */
export namespace GetDeploymentGitRepo2$ {
    export const inboundSchema: z.ZodType<GetDeploymentGitRepo2, z.ZodTypeDef, unknown> = z
        .object({
            org: z.string(),
            repo: z.string(),
            repoId: z.number(),
            type: GetDeploymentGitRepoType$,
            repoOwnerId: z.string(),
            path: z.string(),
            defaultBranch: z.string(),
            name: z.string(),
            private: z.boolean(),
            ownerType: GetDeploymentGitRepoDeploymentsResponseOwnerType$,
        })
        .transform((v) => {
            return {
                org: v.org,
                repo: v.repo,
                repoId: v.repoId,
                type: v.type,
                repoOwnerId: v.repoOwnerId,
                path: v.path,
                defaultBranch: v.defaultBranch,
                name: v.name,
                private: v.private,
                ownerType: v.ownerType,
            };
        });

    export type Outbound = {
        org: string;
        repo: string;
        repoId: number;
        type: GetDeploymentGitRepoType;
        repoOwnerId: string;
        path: string;
        defaultBranch: string;
        name: string;
        private: boolean;
        ownerType: GetDeploymentGitRepoDeploymentsResponseOwnerType;
    };

    export const outboundSchema: z.ZodType<Outbound, z.ZodTypeDef, GetDeploymentGitRepo2> = z
        .object({
            org: z.string(),
            repo: z.string(),
            repoId: z.number(),
            type: GetDeploymentGitRepoType$,
            repoOwnerId: z.string(),
            path: z.string(),
            defaultBranch: z.string(),
            name: z.string(),
            private: z.boolean(),
            ownerType: GetDeploymentGitRepoDeploymentsResponseOwnerType$,
        })
        .transform((v) => {
            return {
                org: v.org,
                repo: v.repo,
                repoId: v.repoId,
                type: v.type,
                repoOwnerId: v.repoOwnerId,
                path: v.path,
                defaultBranch: v.defaultBranch,
                name: v.name,
                private: v.private,
                ownerType: v.ownerType,
            };
        });
}

/** @internal */
export const GetDeploymentGitRepoDeploymentsResponseType$: z.ZodNativeEnum<
    typeof GetDeploymentGitRepoDeploymentsResponseType
> = z.nativeEnum(GetDeploymentGitRepoDeploymentsResponseType);

/** @internal */
export const GetDeploymentGitRepoDeploymentsOwnerType$: z.ZodNativeEnum<
    typeof GetDeploymentGitRepoDeploymentsOwnerType
> = z.nativeEnum(GetDeploymentGitRepoDeploymentsOwnerType);

/** @internal */
export namespace GetDeploymentGitRepo1$ {
    export const inboundSchema: z.ZodType<GetDeploymentGitRepo1, z.ZodTypeDef, unknown> = z
        .object({
            namespace: z.string(),
            projectId: z.number(),
            type: GetDeploymentGitRepoDeploymentsResponseType$,
            url: z.string(),
            path: z.string(),
            defaultBranch: z.string(),
            name: z.string(),
            private: z.boolean(),
            ownerType: GetDeploymentGitRepoDeploymentsOwnerType$,
        })
        .transform((v) => {
            return {
                namespace: v.namespace,
                projectId: v.projectId,
                type: v.type,
                url: v.url,
                path: v.path,
                defaultBranch: v.defaultBranch,
                name: v.name,
                private: v.private,
                ownerType: v.ownerType,
            };
        });

    export type Outbound = {
        namespace: string;
        projectId: number;
        type: GetDeploymentGitRepoDeploymentsResponseType;
        url: string;
        path: string;
        defaultBranch: string;
        name: string;
        private: boolean;
        ownerType: GetDeploymentGitRepoDeploymentsOwnerType;
    };

    export const outboundSchema: z.ZodType<Outbound, z.ZodTypeDef, GetDeploymentGitRepo1> = z
        .object({
            namespace: z.string(),
            projectId: z.number(),
            type: GetDeploymentGitRepoDeploymentsResponseType$,
            url: z.string(),
            path: z.string(),
            defaultBranch: z.string(),
            name: z.string(),
            private: z.boolean(),
            ownerType: GetDeploymentGitRepoDeploymentsOwnerType$,
        })
        .transform((v) => {
            return {
                namespace: v.namespace,
                projectId: v.projectId,
                type: v.type,
                url: v.url,
                path: v.path,
                defaultBranch: v.defaultBranch,
                name: v.name,
                private: v.private,
                ownerType: v.ownerType,
            };
        });
}

/** @internal */
export namespace ResponseBodyGitRepo$ {
    export const inboundSchema: z.ZodType<ResponseBodyGitRepo, z.ZodTypeDef, unknown> = z.union([
        z.lazy(() => GetDeploymentGitRepo1$.inboundSchema),
        z.lazy(() => GetDeploymentGitRepo2$.inboundSchema),
        z.lazy(() => GetDeploymentGitRepo3$.inboundSchema),
    ]);

    export type Outbound =
        | GetDeploymentGitRepo1$.Outbound
        | GetDeploymentGitRepo2$.Outbound
        | GetDeploymentGitRepo3$.Outbound;
    export const outboundSchema: z.ZodType<Outbound, z.ZodTypeDef, ResponseBodyGitRepo> = z.union([
        z.lazy(() => GetDeploymentGitRepo1$.outboundSchema),
        z.lazy(() => GetDeploymentGitRepo2$.outboundSchema),
        z.lazy(() => GetDeploymentGitRepo3$.outboundSchema),
    ]);
}

/** @internal */
export namespace ResponseBodyAliasAssignedAt$ {
    export const inboundSchema: z.ZodType<ResponseBodyAliasAssignedAt, z.ZodTypeDef, unknown> =
        z.union([z.number(), z.boolean()]);

    export type Outbound = number | boolean;
    export const outboundSchema: z.ZodType<Outbound, z.ZodTypeDef, ResponseBodyAliasAssignedAt> =
        z.union([z.number(), z.boolean()]);
}

/** @internal */
export const GetDeploymentResponseBodyDeploymentsResponseReadyState$: z.ZodNativeEnum<
    typeof GetDeploymentResponseBodyDeploymentsResponseReadyState
> = z.nativeEnum(GetDeploymentResponseBodyDeploymentsResponseReadyState);

/** @internal */
export namespace ResponseBodyOutput$ {
    export const inboundSchema: z.ZodType<ResponseBodyOutput, z.ZodTypeDef, unknown> = z
        .object({
            path: z.string(),
            functionName: z.string(),
        })
        .transform((v) => {
            return {
                path: v.path,
                functionName: v.functionName,
            };
        });

    export type Outbound = {
        path: string;
        functionName: string;
    };

    export const outboundSchema: z.ZodType<Outbound, z.ZodTypeDef, ResponseBodyOutput> = z
        .object({
            path: z.string(),
            functionName: z.string(),
        })
        .transform((v) => {
            return {
                path: v.path,
                functionName: v.functionName,
            };
        });
}

/** @internal */
export namespace GetDeploymentResponseBodyLambdas$ {
    export const inboundSchema: z.ZodType<GetDeploymentResponseBodyLambdas, z.ZodTypeDef, unknown> =
        z
            .object({
                id: z.string(),
                createdAt: z.number().optional(),
                entrypoint: z.nullable(z.string()).optional(),
                readyState: GetDeploymentResponseBodyDeploymentsResponseReadyState$.optional(),
                readyStateAt: z.number().optional(),
                output: z.array(z.lazy(() => ResponseBodyOutput$.inboundSchema)),
            })
            .transform((v) => {
                return {
                    id: v.id,
                    ...(v.createdAt === undefined ? null : { createdAt: v.createdAt }),
                    ...(v.entrypoint === undefined ? null : { entrypoint: v.entrypoint }),
                    ...(v.readyState === undefined ? null : { readyState: v.readyState }),
                    ...(v.readyStateAt === undefined ? null : { readyStateAt: v.readyStateAt }),
                    output: v.output,
                };
            });

    export type Outbound = {
        id: string;
        createdAt?: number | undefined;
        entrypoint?: string | null | undefined;
        readyState?: GetDeploymentResponseBodyDeploymentsResponseReadyState | undefined;
        readyStateAt?: number | undefined;
        output: Array<ResponseBodyOutput$.Outbound>;
    };

    export const outboundSchema: z.ZodType<
        Outbound,
        z.ZodTypeDef,
        GetDeploymentResponseBodyLambdas
    > = z
        .object({
            id: z.string(),
            createdAt: z.number().optional(),
            entrypoint: z.nullable(z.string()).optional(),
            readyState: GetDeploymentResponseBodyDeploymentsResponseReadyState$.optional(),
            readyStateAt: z.number().optional(),
            output: z.array(z.lazy(() => ResponseBodyOutput$.outboundSchema)),
        })
        .transform((v) => {
            return {
                id: v.id,
                ...(v.createdAt === undefined ? null : { createdAt: v.createdAt }),
                ...(v.entrypoint === undefined ? null : { entrypoint: v.entrypoint }),
                ...(v.readyState === undefined ? null : { readyState: v.readyState }),
                ...(v.readyStateAt === undefined ? null : { readyStateAt: v.readyStateAt }),
                output: v.output,
            };
        });
}

/** @internal */
export namespace GetDeploymentResponseBodyProject$ {
    export const inboundSchema: z.ZodType<GetDeploymentResponseBodyProject, z.ZodTypeDef, unknown> =
        z
            .object({
                id: z.string(),
                name: z.string(),
                framework: z.nullable(z.string()).optional(),
            })
            .transform((v) => {
                return {
                    id: v.id,
                    name: v.name,
                    ...(v.framework === undefined ? null : { framework: v.framework }),
                };
            });

    export type Outbound = {
        id: string;
        name: string;
        framework?: string | null | undefined;
    };

    export const outboundSchema: z.ZodType<
        Outbound,
        z.ZodTypeDef,
        GetDeploymentResponseBodyProject
    > = z
        .object({
            id: z.string(),
            name: z.string(),
            framework: z.nullable(z.string()).optional(),
        })
        .transform((v) => {
            return {
                id: v.id,
                name: v.name,
                ...(v.framework === undefined ? null : { framework: v.framework }),
            };
        });
}

/** @internal */
export const ResponseBodyReadyState$: z.ZodNativeEnum<typeof ResponseBodyReadyState> =
    z.nativeEnum(ResponseBodyReadyState);

/** @internal */
export const ResponseBodyReadySubstate$: z.ZodNativeEnum<typeof ResponseBodyReadySubstate> =
    z.nativeEnum(ResponseBodyReadySubstate);

/** @internal */
export const ResponseBodySource$: z.ZodNativeEnum<typeof ResponseBodySource> =
    z.nativeEnum(ResponseBodySource);

/** @internal */
export const ResponseBodyTarget$: z.ZodNativeEnum<typeof ResponseBodyTarget> =
    z.nativeEnum(ResponseBodyTarget);

/** @internal */
export namespace GetDeploymentResponseBodyTeam$ {
    export const inboundSchema: z.ZodType<GetDeploymentResponseBodyTeam, z.ZodTypeDef, unknown> = z
        .object({
            id: z.string(),
            name: z.string(),
            slug: z.string(),
            avatar: z.string().optional(),
        })
        .transform((v) => {
            return {
                id: v.id,
                name: v.name,
                slug: v.slug,
                ...(v.avatar === undefined ? null : { avatar: v.avatar }),
            };
        });

    export type Outbound = {
        id: string;
        name: string;
        slug: string;
        avatar?: string | undefined;
    };

    export const outboundSchema: z.ZodType<Outbound, z.ZodTypeDef, GetDeploymentResponseBodyTeam> =
        z
            .object({
                id: z.string(),
                name: z.string(),
                slug: z.string(),
                avatar: z.string().optional(),
            })
            .transform((v) => {
                return {
                    id: v.id,
                    name: v.name,
                    slug: v.slug,
                    ...(v.avatar === undefined ? null : { avatar: v.avatar }),
                };
            });
}

/** @internal */
export const GetDeploymentResponseBodyType$: z.ZodNativeEnum<typeof GetDeploymentResponseBodyType> =
    z.nativeEnum(GetDeploymentResponseBodyType);

/** @internal */
export namespace ResponseBodyAliasError$ {
    export const inboundSchema: z.ZodType<ResponseBodyAliasError, z.ZodTypeDef, unknown> = z
        .object({
            code: z.string(),
            message: z.string(),
        })
        .transform((v) => {
            return {
                code: v.code,
                message: v.message,
            };
        });

    export type Outbound = {
        code: string;
        message: string;
    };

    export const outboundSchema: z.ZodType<Outbound, z.ZodTypeDef, ResponseBodyAliasError> = z
        .object({
            code: z.string(),
            message: z.string(),
        })
        .transform((v) => {
            return {
                code: v.code,
                message: v.message,
            };
        });
}

/** @internal */
export namespace GetDeploymentResponseBodyAliasWarning$ {
    export const inboundSchema: z.ZodType<
        GetDeploymentResponseBodyAliasWarning,
        z.ZodTypeDef,
        unknown
    > = z
        .object({
            code: z.string(),
            message: z.string(),
            link: z.string().optional(),
            action: z.string().optional(),
        })
        .transform((v) => {
            return {
                code: v.code,
                message: v.message,
                ...(v.link === undefined ? null : { link: v.link }),
                ...(v.action === undefined ? null : { action: v.action }),
            };
        });

    export type Outbound = {
        code: string;
        message: string;
        link?: string | undefined;
        action?: string | undefined;
    };

    export const outboundSchema: z.ZodType<
        Outbound,
        z.ZodTypeDef,
        GetDeploymentResponseBodyAliasWarning
    > = z
        .object({
            code: z.string(),
            message: z.string(),
            link: z.string().optional(),
            action: z.string().optional(),
        })
        .transform((v) => {
            return {
                code: v.code,
                message: v.message,
                ...(v.link === undefined ? null : { link: v.link }),
                ...(v.action === undefined ? null : { action: v.action }),
            };
        });
}

/** @internal */
export const ResponseBodyChecksState$: z.ZodNativeEnum<typeof ResponseBodyChecksState> =
    z.nativeEnum(ResponseBodyChecksState);

/** @internal */
export const ResponseBodyChecksConclusion$: z.ZodNativeEnum<typeof ResponseBodyChecksConclusion> =
    z.nativeEnum(ResponseBodyChecksConclusion);

/** @internal */
export namespace ResponseBodyCreator$ {
    export const inboundSchema: z.ZodType<ResponseBodyCreator, z.ZodTypeDef, unknown> = z
        .object({
            uid: z.string(),
            username: z.string().optional(),
            avatar: z.string().optional(),
        })
        .transform((v) => {
            return {
                uid: v.uid,
                ...(v.username === undefined ? null : { username: v.username }),
                ...(v.avatar === undefined ? null : { avatar: v.avatar }),
            };
        });

    export type Outbound = {
        uid: string;
        username?: string | undefined;
        avatar?: string | undefined;
    };

    export const outboundSchema: z.ZodType<Outbound, z.ZodTypeDef, ResponseBodyCreator> = z
        .object({
            uid: z.string(),
            username: z.string().optional(),
            avatar: z.string().optional(),
        })
        .transform((v) => {
            return {
                uid: v.uid,
                ...(v.username === undefined ? null : { username: v.username }),
                ...(v.avatar === undefined ? null : { avatar: v.avatar }),
            };
        });
}

/** @internal */
export const GetDeploymentGitSourceDeploymentsResponse200ApplicationJSONResponseBody19Type$: z.ZodNativeEnum<
    typeof GetDeploymentGitSourceDeploymentsResponse200ApplicationJSONResponseBody19Type
> = z.nativeEnum(GetDeploymentGitSourceDeploymentsResponse200ApplicationJSONResponseBody19Type);

/** @internal */
export namespace GetDeploymentGitSourceDeployments9$ {
    export const inboundSchema: z.ZodType<
        GetDeploymentGitSourceDeployments9,
        z.ZodTypeDef,
        unknown
    > = z
        .object({
            type: GetDeploymentGitSourceDeploymentsResponse200ApplicationJSONResponseBody19Type$,
            ref: z.string(),
            sha: z.string(),
            owner: z.string().optional(),
            slug: z.string().optional(),
            workspaceUuid: z.string(),
            repoUuid: z.string(),
        })
        .transform((v) => {
            return {
                type: v.type,
                ref: v.ref,
                sha: v.sha,
                ...(v.owner === undefined ? null : { owner: v.owner }),
                ...(v.slug === undefined ? null : { slug: v.slug }),
                workspaceUuid: v.workspaceUuid,
                repoUuid: v.repoUuid,
            };
        });

    export type Outbound = {
        type: GetDeploymentGitSourceDeploymentsResponse200ApplicationJSONResponseBody19Type;
        ref: string;
        sha: string;
        owner?: string | undefined;
        slug?: string | undefined;
        workspaceUuid: string;
        repoUuid: string;
    };

    export const outboundSchema: z.ZodType<
        Outbound,
        z.ZodTypeDef,
        GetDeploymentGitSourceDeployments9
    > = z
        .object({
            type: GetDeploymentGitSourceDeploymentsResponse200ApplicationJSONResponseBody19Type$,
            ref: z.string(),
            sha: z.string(),
            owner: z.string().optional(),
            slug: z.string().optional(),
            workspaceUuid: z.string(),
            repoUuid: z.string(),
        })
        .transform((v) => {
            return {
                type: v.type,
                ref: v.ref,
                sha: v.sha,
                ...(v.owner === undefined ? null : { owner: v.owner }),
                ...(v.slug === undefined ? null : { slug: v.slug }),
                workspaceUuid: v.workspaceUuid,
                repoUuid: v.repoUuid,
            };
        });
}

/** @internal */
export const GetDeploymentGitSourceDeploymentsResponse200ApplicationJSONResponseBody1Type$: z.ZodNativeEnum<
    typeof GetDeploymentGitSourceDeploymentsResponse200ApplicationJSONResponseBody1Type
> = z.nativeEnum(GetDeploymentGitSourceDeploymentsResponse200ApplicationJSONResponseBody1Type);

/** @internal */
export namespace GetDeploymentGitSourceDeployments8$ {
    export const inboundSchema: z.ZodType<
        GetDeploymentGitSourceDeployments8,
        z.ZodTypeDef,
        unknown
    > = z
        .object({
            type: GetDeploymentGitSourceDeploymentsResponse200ApplicationJSONResponseBody1Type$,
            ref: z.string(),
            sha: z.string(),
            projectId: z.number(),
        })
        .transform((v) => {
            return {
                type: v.type,
                ref: v.ref,
                sha: v.sha,
                projectId: v.projectId,
            };
        });

    export type Outbound = {
        type: GetDeploymentGitSourceDeploymentsResponse200ApplicationJSONResponseBody1Type;
        ref: string;
        sha: string;
        projectId: number;
    };

    export const outboundSchema: z.ZodType<
        Outbound,
        z.ZodTypeDef,
        GetDeploymentGitSourceDeployments8
    > = z
        .object({
            type: GetDeploymentGitSourceDeploymentsResponse200ApplicationJSONResponseBody1Type$,
            ref: z.string(),
            sha: z.string(),
            projectId: z.number(),
        })
        .transform((v) => {
            return {
                type: v.type,
                ref: v.ref,
                sha: v.sha,
                projectId: v.projectId,
            };
        });
}

/** @internal */
export const GetDeploymentGitSourceDeploymentsResponse200ApplicationJSONResponseBodyType$: z.ZodNativeEnum<
    typeof GetDeploymentGitSourceDeploymentsResponse200ApplicationJSONResponseBodyType
> = z.nativeEnum(GetDeploymentGitSourceDeploymentsResponse200ApplicationJSONResponseBodyType);

/** @internal */
export namespace GetDeploymentGitSourceDeployments7$ {
    export const inboundSchema: z.ZodType<
        GetDeploymentGitSourceDeployments7,
        z.ZodTypeDef,
        unknown
    > = z
        .object({
            type: GetDeploymentGitSourceDeploymentsResponse200ApplicationJSONResponseBodyType$,
            ref: z.string(),
            sha: z.string(),
            repoId: z.number(),
            org: z.string().optional(),
            repo: z.string().optional(),
        })
        .transform((v) => {
            return {
                type: v.type,
                ref: v.ref,
                sha: v.sha,
                repoId: v.repoId,
                ...(v.org === undefined ? null : { org: v.org }),
                ...(v.repo === undefined ? null : { repo: v.repo }),
            };
        });

    export type Outbound = {
        type: GetDeploymentGitSourceDeploymentsResponse200ApplicationJSONResponseBodyType;
        ref: string;
        sha: string;
        repoId: number;
        org?: string | undefined;
        repo?: string | undefined;
    };

    export const outboundSchema: z.ZodType<
        Outbound,
        z.ZodTypeDef,
        GetDeploymentGitSourceDeployments7
    > = z
        .object({
            type: GetDeploymentGitSourceDeploymentsResponse200ApplicationJSONResponseBodyType$,
            ref: z.string(),
            sha: z.string(),
            repoId: z.number(),
            org: z.string().optional(),
            repo: z.string().optional(),
        })
        .transform((v) => {
            return {
                type: v.type,
                ref: v.ref,
                sha: v.sha,
                repoId: v.repoId,
                ...(v.org === undefined ? null : { org: v.org }),
                ...(v.repo === undefined ? null : { repo: v.repo }),
            };
        });
}

/** @internal */
export const GetDeploymentGitSourceDeploymentsResponse200ApplicationJSONType$: z.ZodNativeEnum<
    typeof GetDeploymentGitSourceDeploymentsResponse200ApplicationJSONType
> = z.nativeEnum(GetDeploymentGitSourceDeploymentsResponse200ApplicationJSONType);

/** @internal */
export namespace GetDeploymentGitSourceDeployments6$ {
    export const inboundSchema: z.ZodType<
        GetDeploymentGitSourceDeployments6,
        z.ZodTypeDef,
        unknown
    > = z
        .object({
            type: GetDeploymentGitSourceDeploymentsResponse200ApplicationJSONType$,
            ref: z.string(),
            sha: z.string(),
            gitUrl: z.string(),
        })
        .transform((v) => {
            return {
                type: v.type,
                ref: v.ref,
                sha: v.sha,
                gitUrl: v.gitUrl,
            };
        });

    export type Outbound = {
        type: GetDeploymentGitSourceDeploymentsResponse200ApplicationJSONType;
        ref: string;
        sha: string;
        gitUrl: string;
    };

    export const outboundSchema: z.ZodType<
        Outbound,
        z.ZodTypeDef,
        GetDeploymentGitSourceDeployments6
    > = z
        .object({
            type: GetDeploymentGitSourceDeploymentsResponse200ApplicationJSONType$,
            ref: z.string(),
            sha: z.string(),
            gitUrl: z.string(),
        })
        .transform((v) => {
            return {
                type: v.type,
                ref: v.ref,
                sha: v.sha,
                gitUrl: v.gitUrl,
            };
        });
}

/** @internal */
export const GetDeploymentGitSourceDeploymentsResponse200Type$: z.ZodNativeEnum<
    typeof GetDeploymentGitSourceDeploymentsResponse200Type
> = z.nativeEnum(GetDeploymentGitSourceDeploymentsResponse200Type);

/** @internal */
export namespace GetDeploymentGitSourceDeployments5$ {
    export const inboundSchema: z.ZodType<
        GetDeploymentGitSourceDeployments5,
        z.ZodTypeDef,
        unknown
    > = z
        .object({
            type: GetDeploymentGitSourceDeploymentsResponse200Type$,
            owner: z.string(),
            slug: z.string(),
            ref: z.nullable(z.string()).optional(),
            sha: z.string().optional(),
            prId: z.nullable(z.number()).optional(),
        })
        .transform((v) => {
            return {
                type: v.type,
                owner: v.owner,
                slug: v.slug,
                ...(v.ref === undefined ? null : { ref: v.ref }),
                ...(v.sha === undefined ? null : { sha: v.sha }),
                ...(v.prId === undefined ? null : { prId: v.prId }),
            };
        });

    export type Outbound = {
        type: GetDeploymentGitSourceDeploymentsResponse200Type;
        owner: string;
        slug: string;
        ref?: string | null | undefined;
        sha?: string | undefined;
        prId?: number | null | undefined;
    };

    export const outboundSchema: z.ZodType<
        Outbound,
        z.ZodTypeDef,
        GetDeploymentGitSourceDeployments5
    > = z
        .object({
            type: GetDeploymentGitSourceDeploymentsResponse200Type$,
            owner: z.string(),
            slug: z.string(),
            ref: z.nullable(z.string()).optional(),
            sha: z.string().optional(),
            prId: z.nullable(z.number()).optional(),
        })
        .transform((v) => {
            return {
                type: v.type,
                owner: v.owner,
                slug: v.slug,
                ...(v.ref === undefined ? null : { ref: v.ref }),
                ...(v.sha === undefined ? null : { sha: v.sha }),
                ...(v.prId === undefined ? null : { prId: v.prId }),
            };
        });
}

/** @internal */
export const GetDeploymentGitSourceDeploymentsResponseType$: z.ZodNativeEnum<
    typeof GetDeploymentGitSourceDeploymentsResponseType
> = z.nativeEnum(GetDeploymentGitSourceDeploymentsResponseType);

/** @internal */
export namespace GetDeploymentGitSourceDeployments4$ {
    export const inboundSchema: z.ZodType<
        GetDeploymentGitSourceDeployments4,
        z.ZodTypeDef,
        unknown
    > = z
        .object({
            type: GetDeploymentGitSourceDeploymentsResponseType$,
            workspaceUuid: z.string().optional(),
            repoUuid: z.string(),
            ref: z.nullable(z.string()).optional(),
            sha: z.string().optional(),
            prId: z.nullable(z.number()).optional(),
        })
        .transform((v) => {
            return {
                type: v.type,
                ...(v.workspaceUuid === undefined ? null : { workspaceUuid: v.workspaceUuid }),
                repoUuid: v.repoUuid,
                ...(v.ref === undefined ? null : { ref: v.ref }),
                ...(v.sha === undefined ? null : { sha: v.sha }),
                ...(v.prId === undefined ? null : { prId: v.prId }),
            };
        });

    export type Outbound = {
        type: GetDeploymentGitSourceDeploymentsResponseType;
        workspaceUuid?: string | undefined;
        repoUuid: string;
        ref?: string | null | undefined;
        sha?: string | undefined;
        prId?: number | null | undefined;
    };

    export const outboundSchema: z.ZodType<
        Outbound,
        z.ZodTypeDef,
        GetDeploymentGitSourceDeployments4
    > = z
        .object({
            type: GetDeploymentGitSourceDeploymentsResponseType$,
            workspaceUuid: z.string().optional(),
            repoUuid: z.string(),
            ref: z.nullable(z.string()).optional(),
            sha: z.string().optional(),
            prId: z.nullable(z.number()).optional(),
        })
        .transform((v) => {
            return {
                type: v.type,
                ...(v.workspaceUuid === undefined ? null : { workspaceUuid: v.workspaceUuid }),
                repoUuid: v.repoUuid,
                ...(v.ref === undefined ? null : { ref: v.ref }),
                ...(v.sha === undefined ? null : { sha: v.sha }),
                ...(v.prId === undefined ? null : { prId: v.prId }),
            };
        });
}

/** @internal */
export const GetDeploymentGitSourceDeploymentsType$: z.ZodNativeEnum<
    typeof GetDeploymentGitSourceDeploymentsType
> = z.nativeEnum(GetDeploymentGitSourceDeploymentsType);

/** @internal */
export namespace GetDeploymentGitSourceProjectId$ {
    export const inboundSchema: z.ZodType<GetDeploymentGitSourceProjectId, z.ZodTypeDef, unknown> =
        z.union([z.string(), z.number()]);

    export type Outbound = string | number;
    export const outboundSchema: z.ZodType<
        Outbound,
        z.ZodTypeDef,
        GetDeploymentGitSourceProjectId
    > = z.union([z.string(), z.number()]);
}

/** @internal */
export namespace GetDeploymentGitSourceDeployments3$ {
    export const inboundSchema: z.ZodType<
        GetDeploymentGitSourceDeployments3,
        z.ZodTypeDef,
        unknown
    > = z
        .object({
            type: GetDeploymentGitSourceDeploymentsType$,
            projectId: z.union([z.string(), z.number()]),
            ref: z.nullable(z.string()).optional(),
            sha: z.string().optional(),
            prId: z.nullable(z.number()).optional(),
        })
        .transform((v) => {
            return {
                type: v.type,
                projectId: v.projectId,
                ...(v.ref === undefined ? null : { ref: v.ref }),
                ...(v.sha === undefined ? null : { sha: v.sha }),
                ...(v.prId === undefined ? null : { prId: v.prId }),
            };
        });

    export type Outbound = {
        type: GetDeploymentGitSourceDeploymentsType;
        projectId: string | number;
        ref?: string | null | undefined;
        sha?: string | undefined;
        prId?: number | null | undefined;
    };

    export const outboundSchema: z.ZodType<
        Outbound,
        z.ZodTypeDef,
        GetDeploymentGitSourceDeployments3
    > = z
        .object({
            type: GetDeploymentGitSourceDeploymentsType$,
            projectId: z.union([z.string(), z.number()]),
            ref: z.nullable(z.string()).optional(),
            sha: z.string().optional(),
            prId: z.nullable(z.number()).optional(),
        })
        .transform((v) => {
            return {
                type: v.type,
                projectId: v.projectId,
                ...(v.ref === undefined ? null : { ref: v.ref }),
                ...(v.sha === undefined ? null : { sha: v.sha }),
                ...(v.prId === undefined ? null : { prId: v.prId }),
            };
        });
}

/** @internal */
export const GetDeploymentGitSourceType$: z.ZodNativeEnum<typeof GetDeploymentGitSourceType> =
    z.nativeEnum(GetDeploymentGitSourceType);

/** @internal */
export namespace GetDeploymentGitSourceDeployments2$ {
    export const inboundSchema: z.ZodType<
        GetDeploymentGitSourceDeployments2,
        z.ZodTypeDef,
        unknown
    > = z
        .object({
            type: GetDeploymentGitSourceType$,
            org: z.string(),
            repo: z.string(),
            ref: z.nullable(z.string()).optional(),
            sha: z.string().optional(),
            prId: z.nullable(z.number()).optional(),
        })
        .transform((v) => {
            return {
                type: v.type,
                org: v.org,
                repo: v.repo,
                ...(v.ref === undefined ? null : { ref: v.ref }),
                ...(v.sha === undefined ? null : { sha: v.sha }),
                ...(v.prId === undefined ? null : { prId: v.prId }),
            };
        });

    export type Outbound = {
        type: GetDeploymentGitSourceType;
        org: string;
        repo: string;
        ref?: string | null | undefined;
        sha?: string | undefined;
        prId?: number | null | undefined;
    };

    export const outboundSchema: z.ZodType<
        Outbound,
        z.ZodTypeDef,
        GetDeploymentGitSourceDeployments2
    > = z
        .object({
            type: GetDeploymentGitSourceType$,
            org: z.string(),
            repo: z.string(),
            ref: z.nullable(z.string()).optional(),
            sha: z.string().optional(),
            prId: z.nullable(z.number()).optional(),
        })
        .transform((v) => {
            return {
                type: v.type,
                org: v.org,
                repo: v.repo,
                ...(v.ref === undefined ? null : { ref: v.ref }),
                ...(v.sha === undefined ? null : { sha: v.sha }),
                ...(v.prId === undefined ? null : { prId: v.prId }),
            };
        });
}

/** @internal */
export const GetDeploymentGitSourceDeploymentsResponse200ApplicationJSONResponseBody11Type$: z.ZodNativeEnum<
    typeof GetDeploymentGitSourceDeploymentsResponse200ApplicationJSONResponseBody11Type
> = z.nativeEnum(GetDeploymentGitSourceDeploymentsResponse200ApplicationJSONResponseBody11Type);

/** @internal */
export namespace GetDeploymentGitSourceRepoId$ {
    export const inboundSchema: z.ZodType<GetDeploymentGitSourceRepoId, z.ZodTypeDef, unknown> =
        z.union([z.string(), z.number()]);

    export type Outbound = string | number;
    export const outboundSchema: z.ZodType<Outbound, z.ZodTypeDef, GetDeploymentGitSourceRepoId> =
        z.union([z.string(), z.number()]);
}

/** @internal */
export namespace GetDeploymentGitSourceDeployments1$ {
    export const inboundSchema: z.ZodType<
        GetDeploymentGitSourceDeployments1,
        z.ZodTypeDef,
        unknown
    > = z
        .object({
            type: GetDeploymentGitSourceDeploymentsResponse200ApplicationJSONResponseBody11Type$,
            repoId: z.union([z.string(), z.number()]),
            ref: z.nullable(z.string()).optional(),
            sha: z.string().optional(),
            prId: z.nullable(z.number()).optional(),
        })
        .transform((v) => {
            return {
                type: v.type,
                repoId: v.repoId,
                ...(v.ref === undefined ? null : { ref: v.ref }),
                ...(v.sha === undefined ? null : { sha: v.sha }),
                ...(v.prId === undefined ? null : { prId: v.prId }),
            };
        });

    export type Outbound = {
        type: GetDeploymentGitSourceDeploymentsResponse200ApplicationJSONResponseBody11Type;
        repoId: string | number;
        ref?: string | null | undefined;
        sha?: string | undefined;
        prId?: number | null | undefined;
    };

    export const outboundSchema: z.ZodType<
        Outbound,
        z.ZodTypeDef,
        GetDeploymentGitSourceDeployments1
    > = z
        .object({
            type: GetDeploymentGitSourceDeploymentsResponse200ApplicationJSONResponseBody11Type$,
            repoId: z.union([z.string(), z.number()]),
            ref: z.nullable(z.string()).optional(),
            sha: z.string().optional(),
            prId: z.nullable(z.number()).optional(),
        })
        .transform((v) => {
            return {
                type: v.type,
                repoId: v.repoId,
                ...(v.ref === undefined ? null : { ref: v.ref }),
                ...(v.sha === undefined ? null : { sha: v.sha }),
                ...(v.prId === undefined ? null : { prId: v.prId }),
            };
        });
}

/** @internal */
export namespace GetDeploymentResponseBodyGitSource$ {
    export const inboundSchema: z.ZodType<
        GetDeploymentResponseBodyGitSource,
        z.ZodTypeDef,
        unknown
    > = z.union([
        z.lazy(() => GetDeploymentGitSourceDeployments6$.inboundSchema),
        z.lazy(() => GetDeploymentGitSourceDeployments8$.inboundSchema),
        z.lazy(() => GetDeploymentGitSourceDeployments1$.inboundSchema),
        z.lazy(() => GetDeploymentGitSourceDeployments3$.inboundSchema),
        z.lazy(() => GetDeploymentGitSourceDeployments2$.inboundSchema),
        z.lazy(() => GetDeploymentGitSourceDeployments4$.inboundSchema),
        z.lazy(() => GetDeploymentGitSourceDeployments5$.inboundSchema),
        z.lazy(() => GetDeploymentGitSourceDeployments7$.inboundSchema),
        z.lazy(() => GetDeploymentGitSourceDeployments9$.inboundSchema),
    ]);

    export type Outbound =
        | GetDeploymentGitSourceDeployments6$.Outbound
        | GetDeploymentGitSourceDeployments8$.Outbound
        | GetDeploymentGitSourceDeployments1$.Outbound
        | GetDeploymentGitSourceDeployments3$.Outbound
        | GetDeploymentGitSourceDeployments2$.Outbound
        | GetDeploymentGitSourceDeployments4$.Outbound
        | GetDeploymentGitSourceDeployments5$.Outbound
        | GetDeploymentGitSourceDeployments7$.Outbound
        | GetDeploymentGitSourceDeployments9$.Outbound;
    export const outboundSchema: z.ZodType<
        Outbound,
        z.ZodTypeDef,
        GetDeploymentResponseBodyGitSource
    > = z.union([
        z.lazy(() => GetDeploymentGitSourceDeployments6$.outboundSchema),
        z.lazy(() => GetDeploymentGitSourceDeployments8$.outboundSchema),
        z.lazy(() => GetDeploymentGitSourceDeployments1$.outboundSchema),
        z.lazy(() => GetDeploymentGitSourceDeployments3$.outboundSchema),
        z.lazy(() => GetDeploymentGitSourceDeployments2$.outboundSchema),
        z.lazy(() => GetDeploymentGitSourceDeployments4$.outboundSchema),
        z.lazy(() => GetDeploymentGitSourceDeployments5$.outboundSchema),
        z.lazy(() => GetDeploymentGitSourceDeployments7$.outboundSchema),
        z.lazy(() => GetDeploymentGitSourceDeployments9$.outboundSchema),
    ]);
}

/** @internal */
export namespace GetDeploymentResponseBody1$ {
    export const inboundSchema: z.ZodType<GetDeploymentResponseBody1, z.ZodTypeDef, unknown> = z
        .object({
            build: z.lazy(() => ResponseBodyBuild$.inboundSchema),
            builds: z.array(z.lazy(() => ResponseBodyBuilds$.inboundSchema)).optional(),
            connectBuildsEnabled: z.boolean().optional(),
            connectConfigurationId: z.string().optional(),
            createdIn: z.string(),
            crons: z.array(z.lazy(() => ResponseBodyCrons$.inboundSchema)).optional(),
            env: z.array(z.string()),
            functions: z
                .nullable(z.record(z.lazy(() => ResponseBodyFunctions$.inboundSchema)))
                .optional(),
            inspectorUrl: z.nullable(z.string()),
            isInConcurrentBuildsQueue: z.boolean(),
            meta: z.record(z.string()),
            monorepoManager: z.nullable(z.string()).optional(),
            name: z.string(),
            ownerId: z.string(),
            passiveConnectConfigurationId: z.string().optional(),
            plan: ResponseBodyPlan$,
            projectId: z.string(),
            routes: z.nullable(
                z.array(
                    z.union([
                        z.lazy(() => GetDeploymentRoutes3$.inboundSchema),
                        z.lazy(() => GetDeploymentRoutes2$.inboundSchema),
                        z.lazy(() => GetDeploymentRoutes1$.inboundSchema),
                    ])
                )
            ),
            gitRepo: z
                .nullable(
                    z.union([
                        z.lazy(() => GetDeploymentGitRepo1$.inboundSchema),
                        z.lazy(() => GetDeploymentGitRepo2$.inboundSchema),
                        z.lazy(() => GetDeploymentGitRepo3$.inboundSchema),
                    ])
                )
                .optional(),
            aliasAssignedAt: z.nullable(z.union([z.number(), z.boolean()])).optional(),
            lambdas: z
                .array(z.lazy(() => GetDeploymentResponseBodyLambdas$.inboundSchema))
                .optional(),
            project: z.lazy(() => GetDeploymentResponseBodyProject$.inboundSchema).optional(),
            public: z.boolean(),
            readyState: ResponseBodyReadyState$,
            readySubstate: ResponseBodyReadySubstate$.optional(),
            regions: z.array(z.string()),
            source: ResponseBodySource$.optional(),
            target: z.nullable(ResponseBodyTarget$).optional(),
            team: z.lazy(() => GetDeploymentResponseBodyTeam$.inboundSchema).optional(),
            type: GetDeploymentResponseBodyType$,
            url: z.string(),
            userAliases: z.array(z.string()).optional(),
            version: z.number(),
            previewCommentsEnabled: z.boolean().optional(),
            alias: z.array(z.string()),
            aliasAssigned: z.boolean(),
            aliasError: z.nullable(z.lazy(() => ResponseBodyAliasError$.inboundSchema)).optional(),
            aliasFinal: z.nullable(z.string()).optional(),
            aliasWarning: z
                .nullable(z.lazy(() => GetDeploymentResponseBodyAliasWarning$.inboundSchema))
                .optional(),
            autoAssignCustomDomains: z.boolean().optional(),
            automaticAliases: z.array(z.string()).optional(),
            bootedAt: z.number(),
            buildErrorAt: z.number().optional(),
            buildingAt: z.number(),
            canceledAt: z.number().optional(),
            checksState: ResponseBodyChecksState$.optional(),
            checksConclusion: ResponseBodyChecksConclusion$.optional(),
            createdAt: z.number(),
            creator: z.lazy(() => ResponseBodyCreator$.inboundSchema),
            errorCode: z.string().optional(),
            errorLink: z.string().optional(),
            errorMessage: z.nullable(z.string()).optional(),
            errorStep: z.string().optional(),
            passiveRegions: z.array(z.string()).optional(),
            gitSource: z
                .union([
                    z.lazy(() => GetDeploymentGitSourceDeployments6$.inboundSchema),
                    z.lazy(() => GetDeploymentGitSourceDeployments8$.inboundSchema),
                    z.lazy(() => GetDeploymentGitSourceDeployments1$.inboundSchema),
                    z.lazy(() => GetDeploymentGitSourceDeployments3$.inboundSchema),
                    z.lazy(() => GetDeploymentGitSourceDeployments2$.inboundSchema),
                    z.lazy(() => GetDeploymentGitSourceDeployments4$.inboundSchema),
                    z.lazy(() => GetDeploymentGitSourceDeployments5$.inboundSchema),
                    z.lazy(() => GetDeploymentGitSourceDeployments7$.inboundSchema),
                    z.lazy(() => GetDeploymentGitSourceDeployments9$.inboundSchema),
                ])
                .optional(),
            id: z.string(),
        })
        .transform((v) => {
            return {
                build: v.build,
                ...(v.builds === undefined ? null : { builds: v.builds }),
                ...(v.connectBuildsEnabled === undefined
                    ? null
                    : { connectBuildsEnabled: v.connectBuildsEnabled }),
                ...(v.connectConfigurationId === undefined
                    ? null
                    : { connectConfigurationId: v.connectConfigurationId }),
                createdIn: v.createdIn,
                ...(v.crons === undefined ? null : { crons: v.crons }),
                env: v.env,
                ...(v.functions === undefined ? null : { functions: v.functions }),
                inspectorUrl: v.inspectorUrl,
                isInConcurrentBuildsQueue: v.isInConcurrentBuildsQueue,
                meta: v.meta,
                ...(v.monorepoManager === undefined
                    ? null
                    : { monorepoManager: v.monorepoManager }),
                name: v.name,
                ownerId: v.ownerId,
                ...(v.passiveConnectConfigurationId === undefined
                    ? null
                    : { passiveConnectConfigurationId: v.passiveConnectConfigurationId }),
                plan: v.plan,
                projectId: v.projectId,
                routes: v.routes,
                ...(v.gitRepo === undefined ? null : { gitRepo: v.gitRepo }),
                ...(v.aliasAssignedAt === undefined
                    ? null
                    : { aliasAssignedAt: v.aliasAssignedAt }),
                ...(v.lambdas === undefined ? null : { lambdas: v.lambdas }),
                ...(v.project === undefined ? null : { project: v.project }),
                public: v.public,
                readyState: v.readyState,
                ...(v.readySubstate === undefined ? null : { readySubstate: v.readySubstate }),
                regions: v.regions,
                ...(v.source === undefined ? null : { source: v.source }),
                ...(v.target === undefined ? null : { target: v.target }),
                ...(v.team === undefined ? null : { team: v.team }),
                type: v.type,
                url: v.url,
                ...(v.userAliases === undefined ? null : { userAliases: v.userAliases }),
                version: v.version,
                ...(v.previewCommentsEnabled === undefined
                    ? null
                    : { previewCommentsEnabled: v.previewCommentsEnabled }),
                alias: v.alias,
                aliasAssigned: v.aliasAssigned,
                ...(v.aliasError === undefined ? null : { aliasError: v.aliasError }),
                ...(v.aliasFinal === undefined ? null : { aliasFinal: v.aliasFinal }),
                ...(v.aliasWarning === undefined ? null : { aliasWarning: v.aliasWarning }),
                ...(v.autoAssignCustomDomains === undefined
                    ? null
                    : { autoAssignCustomDomains: v.autoAssignCustomDomains }),
                ...(v.automaticAliases === undefined
                    ? null
                    : { automaticAliases: v.automaticAliases }),
                bootedAt: v.bootedAt,
                ...(v.buildErrorAt === undefined ? null : { buildErrorAt: v.buildErrorAt }),
                buildingAt: v.buildingAt,
                ...(v.canceledAt === undefined ? null : { canceledAt: v.canceledAt }),
                ...(v.checksState === undefined ? null : { checksState: v.checksState }),
                ...(v.checksConclusion === undefined
                    ? null
                    : { checksConclusion: v.checksConclusion }),
                createdAt: v.createdAt,
                creator: v.creator,
                ...(v.errorCode === undefined ? null : { errorCode: v.errorCode }),
                ...(v.errorLink === undefined ? null : { errorLink: v.errorLink }),
                ...(v.errorMessage === undefined ? null : { errorMessage: v.errorMessage }),
                ...(v.errorStep === undefined ? null : { errorStep: v.errorStep }),
                ...(v.passiveRegions === undefined ? null : { passiveRegions: v.passiveRegions }),
                ...(v.gitSource === undefined ? null : { gitSource: v.gitSource }),
                id: v.id,
            };
        });

    export type Outbound = {
        build: ResponseBodyBuild$.Outbound;
        builds?: Array<ResponseBodyBuilds$.Outbound> | undefined;
        connectBuildsEnabled?: boolean | undefined;
        connectConfigurationId?: string | undefined;
        createdIn: string;
        crons?: Array<ResponseBodyCrons$.Outbound> | undefined;
        env: Array<string>;
        functions?: Record<string, ResponseBodyFunctions$.Outbound> | null | undefined;
        inspectorUrl: string | null;
        isInConcurrentBuildsQueue: boolean;
        meta: Record<string, string>;
        monorepoManager?: string | null | undefined;
        name: string;
        ownerId: string;
        passiveConnectConfigurationId?: string | undefined;
        plan: ResponseBodyPlan;
        projectId: string;
        routes: Array<
            | GetDeploymentRoutes3$.Outbound
            | GetDeploymentRoutes2$.Outbound
            | GetDeploymentRoutes1$.Outbound
        > | null;
        gitRepo?:
            | GetDeploymentGitRepo1$.Outbound
            | GetDeploymentGitRepo2$.Outbound
            | GetDeploymentGitRepo3$.Outbound
            | null
            | undefined;
        aliasAssignedAt?: number | boolean | null | undefined;
        lambdas?: Array<GetDeploymentResponseBodyLambdas$.Outbound> | undefined;
        project?: GetDeploymentResponseBodyProject$.Outbound | undefined;
        public: boolean;
        readyState: ResponseBodyReadyState;
        readySubstate?: ResponseBodyReadySubstate | undefined;
        regions: Array<string>;
        source?: ResponseBodySource | undefined;
        target?: ResponseBodyTarget | null | undefined;
        team?: GetDeploymentResponseBodyTeam$.Outbound | undefined;
        type: GetDeploymentResponseBodyType;
        url: string;
        userAliases?: Array<string> | undefined;
        version: number;
        previewCommentsEnabled?: boolean | undefined;
        alias: Array<string>;
        aliasAssigned: boolean;
        aliasError?: ResponseBodyAliasError$.Outbound | null | undefined;
        aliasFinal?: string | null | undefined;
        aliasWarning?: GetDeploymentResponseBodyAliasWarning$.Outbound | null | undefined;
        autoAssignCustomDomains?: boolean | undefined;
        automaticAliases?: Array<string> | undefined;
        bootedAt: number;
        buildErrorAt?: number | undefined;
        buildingAt: number;
        canceledAt?: number | undefined;
        checksState?: ResponseBodyChecksState | undefined;
        checksConclusion?: ResponseBodyChecksConclusion | undefined;
        createdAt: number;
        creator: ResponseBodyCreator$.Outbound;
        errorCode?: string | undefined;
        errorLink?: string | undefined;
        errorMessage?: string | null | undefined;
        errorStep?: string | undefined;
        passiveRegions?: Array<string> | undefined;
        gitSource?:
            | GetDeploymentGitSourceDeployments6$.Outbound
            | GetDeploymentGitSourceDeployments8$.Outbound
            | GetDeploymentGitSourceDeployments1$.Outbound
            | GetDeploymentGitSourceDeployments3$.Outbound
            | GetDeploymentGitSourceDeployments2$.Outbound
            | GetDeploymentGitSourceDeployments4$.Outbound
            | GetDeploymentGitSourceDeployments5$.Outbound
            | GetDeploymentGitSourceDeployments7$.Outbound
            | GetDeploymentGitSourceDeployments9$.Outbound
            | undefined;
        id: string;
    };

    export const outboundSchema: z.ZodType<Outbound, z.ZodTypeDef, GetDeploymentResponseBody1> = z
        .object({
            build: z.lazy(() => ResponseBodyBuild$.outboundSchema),
            builds: z.array(z.lazy(() => ResponseBodyBuilds$.outboundSchema)).optional(),
            connectBuildsEnabled: z.boolean().optional(),
            connectConfigurationId: z.string().optional(),
            createdIn: z.string(),
            crons: z.array(z.lazy(() => ResponseBodyCrons$.outboundSchema)).optional(),
            env: z.array(z.string()),
            functions: z
                .nullable(z.record(z.lazy(() => ResponseBodyFunctions$.outboundSchema)))
                .optional(),
            inspectorUrl: z.nullable(z.string()),
            isInConcurrentBuildsQueue: z.boolean(),
            meta: z.record(z.string()),
            monorepoManager: z.nullable(z.string()).optional(),
            name: z.string(),
            ownerId: z.string(),
            passiveConnectConfigurationId: z.string().optional(),
            plan: ResponseBodyPlan$,
            projectId: z.string(),
            routes: z.nullable(
                z.array(
                    z.union([
                        z.lazy(() => GetDeploymentRoutes3$.outboundSchema),
                        z.lazy(() => GetDeploymentRoutes2$.outboundSchema),
                        z.lazy(() => GetDeploymentRoutes1$.outboundSchema),
                    ])
                )
            ),
            gitRepo: z
                .nullable(
                    z.union([
                        z.lazy(() => GetDeploymentGitRepo1$.outboundSchema),
                        z.lazy(() => GetDeploymentGitRepo2$.outboundSchema),
                        z.lazy(() => GetDeploymentGitRepo3$.outboundSchema),
                    ])
                )
                .optional(),
            aliasAssignedAt: z.nullable(z.union([z.number(), z.boolean()])).optional(),
            lambdas: z
                .array(z.lazy(() => GetDeploymentResponseBodyLambdas$.outboundSchema))
                .optional(),
            project: z.lazy(() => GetDeploymentResponseBodyProject$.outboundSchema).optional(),
            public: z.boolean(),
            readyState: ResponseBodyReadyState$,
            readySubstate: ResponseBodyReadySubstate$.optional(),
            regions: z.array(z.string()),
            source: ResponseBodySource$.optional(),
            target: z.nullable(ResponseBodyTarget$).optional(),
            team: z.lazy(() => GetDeploymentResponseBodyTeam$.outboundSchema).optional(),
            type: GetDeploymentResponseBodyType$,
            url: z.string(),
            userAliases: z.array(z.string()).optional(),
            version: z.number(),
            previewCommentsEnabled: z.boolean().optional(),
            alias: z.array(z.string()),
            aliasAssigned: z.boolean(),
            aliasError: z.nullable(z.lazy(() => ResponseBodyAliasError$.outboundSchema)).optional(),
            aliasFinal: z.nullable(z.string()).optional(),
            aliasWarning: z
                .nullable(z.lazy(() => GetDeploymentResponseBodyAliasWarning$.outboundSchema))
                .optional(),
            autoAssignCustomDomains: z.boolean().optional(),
            automaticAliases: z.array(z.string()).optional(),
            bootedAt: z.number(),
            buildErrorAt: z.number().optional(),
            buildingAt: z.number(),
            canceledAt: z.number().optional(),
            checksState: ResponseBodyChecksState$.optional(),
            checksConclusion: ResponseBodyChecksConclusion$.optional(),
            createdAt: z.number(),
            creator: z.lazy(() => ResponseBodyCreator$.outboundSchema),
            errorCode: z.string().optional(),
            errorLink: z.string().optional(),
            errorMessage: z.nullable(z.string()).optional(),
            errorStep: z.string().optional(),
            passiveRegions: z.array(z.string()).optional(),
            gitSource: z
                .union([
                    z.lazy(() => GetDeploymentGitSourceDeployments6$.outboundSchema),
                    z.lazy(() => GetDeploymentGitSourceDeployments8$.outboundSchema),
                    z.lazy(() => GetDeploymentGitSourceDeployments1$.outboundSchema),
                    z.lazy(() => GetDeploymentGitSourceDeployments3$.outboundSchema),
                    z.lazy(() => GetDeploymentGitSourceDeployments2$.outboundSchema),
                    z.lazy(() => GetDeploymentGitSourceDeployments4$.outboundSchema),
                    z.lazy(() => GetDeploymentGitSourceDeployments5$.outboundSchema),
                    z.lazy(() => GetDeploymentGitSourceDeployments7$.outboundSchema),
                    z.lazy(() => GetDeploymentGitSourceDeployments9$.outboundSchema),
                ])
                .optional(),
            id: z.string(),
        })
        .transform((v) => {
            return {
                build: v.build,
                ...(v.builds === undefined ? null : { builds: v.builds }),
                ...(v.connectBuildsEnabled === undefined
                    ? null
                    : { connectBuildsEnabled: v.connectBuildsEnabled }),
                ...(v.connectConfigurationId === undefined
                    ? null
                    : { connectConfigurationId: v.connectConfigurationId }),
                createdIn: v.createdIn,
                ...(v.crons === undefined ? null : { crons: v.crons }),
                env: v.env,
                ...(v.functions === undefined ? null : { functions: v.functions }),
                inspectorUrl: v.inspectorUrl,
                isInConcurrentBuildsQueue: v.isInConcurrentBuildsQueue,
                meta: v.meta,
                ...(v.monorepoManager === undefined
                    ? null
                    : { monorepoManager: v.monorepoManager }),
                name: v.name,
                ownerId: v.ownerId,
                ...(v.passiveConnectConfigurationId === undefined
                    ? null
                    : { passiveConnectConfigurationId: v.passiveConnectConfigurationId }),
                plan: v.plan,
                projectId: v.projectId,
                routes: v.routes,
                ...(v.gitRepo === undefined ? null : { gitRepo: v.gitRepo }),
                ...(v.aliasAssignedAt === undefined
                    ? null
                    : { aliasAssignedAt: v.aliasAssignedAt }),
                ...(v.lambdas === undefined ? null : { lambdas: v.lambdas }),
                ...(v.project === undefined ? null : { project: v.project }),
                public: v.public,
                readyState: v.readyState,
                ...(v.readySubstate === undefined ? null : { readySubstate: v.readySubstate }),
                regions: v.regions,
                ...(v.source === undefined ? null : { source: v.source }),
                ...(v.target === undefined ? null : { target: v.target }),
                ...(v.team === undefined ? null : { team: v.team }),
                type: v.type,
                url: v.url,
                ...(v.userAliases === undefined ? null : { userAliases: v.userAliases }),
                version: v.version,
                ...(v.previewCommentsEnabled === undefined
                    ? null
                    : { previewCommentsEnabled: v.previewCommentsEnabled }),
                alias: v.alias,
                aliasAssigned: v.aliasAssigned,
                ...(v.aliasError === undefined ? null : { aliasError: v.aliasError }),
                ...(v.aliasFinal === undefined ? null : { aliasFinal: v.aliasFinal }),
                ...(v.aliasWarning === undefined ? null : { aliasWarning: v.aliasWarning }),
                ...(v.autoAssignCustomDomains === undefined
                    ? null
                    : { autoAssignCustomDomains: v.autoAssignCustomDomains }),
                ...(v.automaticAliases === undefined
                    ? null
                    : { automaticAliases: v.automaticAliases }),
                bootedAt: v.bootedAt,
                ...(v.buildErrorAt === undefined ? null : { buildErrorAt: v.buildErrorAt }),
                buildingAt: v.buildingAt,
                ...(v.canceledAt === undefined ? null : { canceledAt: v.canceledAt }),
                ...(v.checksState === undefined ? null : { checksState: v.checksState }),
                ...(v.checksConclusion === undefined
                    ? null
                    : { checksConclusion: v.checksConclusion }),
                createdAt: v.createdAt,
                creator: v.creator,
                ...(v.errorCode === undefined ? null : { errorCode: v.errorCode }),
                ...(v.errorLink === undefined ? null : { errorLink: v.errorLink }),
                ...(v.errorMessage === undefined ? null : { errorMessage: v.errorMessage }),
                ...(v.errorStep === undefined ? null : { errorStep: v.errorStep }),
                ...(v.passiveRegions === undefined ? null : { passiveRegions: v.passiveRegions }),
                ...(v.gitSource === undefined ? null : { gitSource: v.gitSource }),
                id: v.id,
            };
        });
}

/** @internal */
export namespace GetDeploymentResponseBody$ {
    export const inboundSchema: z.ZodType<GetDeploymentResponseBody, z.ZodTypeDef, unknown> =
        z.union([
            z.lazy(() => GetDeploymentResponseBody2$.inboundSchema),
            z.lazy(() => GetDeploymentResponseBody1$.inboundSchema),
        ]);

    export type Outbound =
        | GetDeploymentResponseBody2$.Outbound
        | GetDeploymentResponseBody1$.Outbound;
    export const outboundSchema: z.ZodType<Outbound, z.ZodTypeDef, GetDeploymentResponseBody> =
        z.union([
            z.lazy(() => GetDeploymentResponseBody2$.outboundSchema),
            z.lazy(() => GetDeploymentResponseBody1$.outboundSchema),
        ]);
}

/** @internal */
export namespace GetDeploymentResponse$ {
    export const inboundSchema: z.ZodType<GetDeploymentResponse, z.ZodTypeDef, unknown> = z
        .object({
            HttpMeta: components.HTTPMetadata$.inboundSchema,
            oneOf: z
                .union([
                    z.lazy(() => GetDeploymentResponseBody2$.inboundSchema),
                    z.lazy(() => GetDeploymentResponseBody1$.inboundSchema),
                ])
                .optional(),
        })
        .transform((v) => {
            return {
                httpMeta: v.HttpMeta,
                ...(v.oneOf === undefined ? null : { oneOf: v.oneOf }),
            };
        });

    export type Outbound = {
        HttpMeta: components.HTTPMetadata$.Outbound;
        oneOf?:
            | GetDeploymentResponseBody2$.Outbound
            | GetDeploymentResponseBody1$.Outbound
            | undefined;
    };

    export const outboundSchema: z.ZodType<Outbound, z.ZodTypeDef, GetDeploymentResponse> = z
        .object({
            httpMeta: components.HTTPMetadata$.outboundSchema,
            oneOf: z
                .union([
                    z.lazy(() => GetDeploymentResponseBody2$.outboundSchema),
                    z.lazy(() => GetDeploymentResponseBody1$.outboundSchema),
                ])
                .optional(),
        })
        .transform((v) => {
            return {
                HttpMeta: v.httpMeta,
                ...(v.oneOf === undefined ? null : { oneOf: v.oneOf }),
            };
        });
}
