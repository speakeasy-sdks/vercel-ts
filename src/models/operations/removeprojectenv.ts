/*
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

import * as components from "../components";
import * as z from "zod";

export type RemoveProjectEnvRequest = {
    /**
     * The unique project identifier or the project name
     */
    idOrName: string;
    /**
     * The unique environment variable identifier
     */
    id: string;
    customEnvironmentId?: string | undefined;
    /**
     * The Team identifier to perform the request on behalf of.
     */
    teamId?: string | undefined;
    /**
     * The Team slug to perform the request on behalf of.
     */
    slug?: string | undefined;
};

export enum RemoveProjectEnvTargetProjectsResponse2 {
    Production = "production",
    Preview = "preview",
    Development = "development",
}

export enum RemoveProjectEnvTargetProjectsResponse1 {
    Production = "production",
    Preview = "preview",
    Development = "development",
}

export type RemoveProjectEnvResponseBodyProjectsResponseTarget =
    | Array<RemoveProjectEnvTargetProjectsResponse1>
    | RemoveProjectEnvTargetProjectsResponse2;

export enum RemoveProjectEnvResponseBodyProjectsResponseType {
    System = "system",
    Encrypted = "encrypted",
    Plain = "plain",
    Sensitive = "sensitive",
    Secret = "secret",
}

export enum RemoveProjectEnvContentHintProjectsResponse200ApplicationJSONResponseBody314Type {
    IntegrationStoreSecret = "integration-store-secret",
}

export type RemoveProjectEnvContentHintProjectsResponse14 = {
    type: RemoveProjectEnvContentHintProjectsResponse200ApplicationJSONResponseBody314Type;
    storeId: string;
};

export enum RemoveProjectEnvContentHintProjectsResponse200ApplicationJSONResponseBody313Type {
    PostgresUrlNoSsl = "postgres-url-no-ssl",
}

export type RemoveProjectEnvContentHintProjectsResponse13 = {
    type: RemoveProjectEnvContentHintProjectsResponse200ApplicationJSONResponseBody313Type;
    storeId: string;
};

export enum RemoveProjectEnvContentHintProjectsResponse200ApplicationJSONResponseBody312Type {
    PostgresDatabase = "postgres-database",
}

export type RemoveProjectEnvContentHintProjectsResponse12 = {
    type: RemoveProjectEnvContentHintProjectsResponse200ApplicationJSONResponseBody312Type;
    storeId: string;
};

export enum RemoveProjectEnvContentHintProjectsResponse200ApplicationJSONResponseBody311Type {
    PostgresPassword = "postgres-password",
}

export type RemoveProjectEnvContentHintProjectsResponse11 = {
    type: RemoveProjectEnvContentHintProjectsResponse200ApplicationJSONResponseBody311Type;
    storeId: string;
};

export enum RemoveProjectEnvContentHintProjectsResponse200ApplicationJSONResponseBody310Type {
    PostgresHost = "postgres-host",
}

export type RemoveProjectEnvContentHintProjectsResponse10 = {
    type: RemoveProjectEnvContentHintProjectsResponse200ApplicationJSONResponseBody310Type;
    storeId: string;
};

export enum RemoveProjectEnvContentHintProjectsResponse200ApplicationJSONResponseBody39Type {
    PostgresUser = "postgres-user",
}

export type RemoveProjectEnvContentHintProjectsResponse9 = {
    type: RemoveProjectEnvContentHintProjectsResponse200ApplicationJSONResponseBody39Type;
    storeId: string;
};

export enum RemoveProjectEnvContentHintProjectsResponse200ApplicationJSONResponseBody38Type {
    PostgresPrismaUrl = "postgres-prisma-url",
}

export type RemoveProjectEnvContentHintProjectsResponse8 = {
    type: RemoveProjectEnvContentHintProjectsResponse200ApplicationJSONResponseBody38Type;
    storeId: string;
};

export enum RemoveProjectEnvContentHintProjectsResponse200ApplicationJSONResponseBody37Type {
    PostgresUrlNonPooling = "postgres-url-non-pooling",
}

export type RemoveProjectEnvContentHintProjectsResponse7 = {
    type: RemoveProjectEnvContentHintProjectsResponse200ApplicationJSONResponseBody37Type;
    storeId: string;
};

export enum RemoveProjectEnvContentHintProjectsResponse200ApplicationJSONResponseBody36Type {
    PostgresUrl = "postgres-url",
}

export type RemoveProjectEnvContentHintProjectsResponse6 = {
    type: RemoveProjectEnvContentHintProjectsResponse200ApplicationJSONResponseBody36Type;
    storeId: string;
};

export enum RemoveProjectEnvContentHintProjectsResponse200ApplicationJSONResponseBody35Type {
    BlobReadWriteToken = "blob-read-write-token",
}

export type RemoveProjectEnvContentHintProjectsResponse5 = {
    type: RemoveProjectEnvContentHintProjectsResponse200ApplicationJSONResponseBody35Type;
    storeId: string;
};

export enum RemoveProjectEnvContentHintProjectsResponse200ApplicationJSONResponseBody34Type {
    RedisRestApiReadOnlyToken = "redis-rest-api-read-only-token",
}

export type RemoveProjectEnvContentHintProjectsResponse4 = {
    type: RemoveProjectEnvContentHintProjectsResponse200ApplicationJSONResponseBody34Type;
    storeId: string;
};

export enum RemoveProjectEnvContentHintProjectsResponse200ApplicationJSONResponseBody33Type {
    RedisRestApiToken = "redis-rest-api-token",
}

export type RemoveProjectEnvContentHintProjectsResponse3 = {
    type: RemoveProjectEnvContentHintProjectsResponse200ApplicationJSONResponseBody33Type;
    storeId: string;
};

export enum RemoveProjectEnvContentHintProjectsResponse200ApplicationJSONResponseBody32Type {
    RedisRestApiUrl = "redis-rest-api-url",
}

export type RemoveProjectEnvContentHintProjectsResponse2 = {
    type: RemoveProjectEnvContentHintProjectsResponse200ApplicationJSONResponseBody32Type;
    storeId: string;
};

export enum RemoveProjectEnvContentHintProjectsResponse200ApplicationJSONResponseBody3Type {
    RedisUrl = "redis-url",
}

export type RemoveProjectEnvContentHintProjectsResponse1 = {
    type: RemoveProjectEnvContentHintProjectsResponse200ApplicationJSONResponseBody3Type;
    storeId: string;
};

export type RemoveProjectEnvResponseBodyProjectsResponseContentHint =
    | RemoveProjectEnvContentHintProjectsResponse1
    | RemoveProjectEnvContentHintProjectsResponse2
    | RemoveProjectEnvContentHintProjectsResponse3
    | RemoveProjectEnvContentHintProjectsResponse4
    | RemoveProjectEnvContentHintProjectsResponse5
    | RemoveProjectEnvContentHintProjectsResponse6
    | RemoveProjectEnvContentHintProjectsResponse7
    | RemoveProjectEnvContentHintProjectsResponse8
    | RemoveProjectEnvContentHintProjectsResponse9
    | RemoveProjectEnvContentHintProjectsResponse10
    | RemoveProjectEnvContentHintProjectsResponse11
    | RemoveProjectEnvContentHintProjectsResponse12
    | RemoveProjectEnvContentHintProjectsResponse13
    | RemoveProjectEnvContentHintProjectsResponse14;

export enum RemoveProjectEnvResponseBodyProjectsResponse200ApplicationJson3Type {
    FlagsSecret = "flags-secret",
}

/**
 * Similar to `contentHints`, but should not be exposed to the user.
 */
export type RemoveProjectEnvResponseBodyProjectsResponseInternalContentHint = {
    type: RemoveProjectEnvResponseBodyProjectsResponse200ApplicationJson3Type;
    /**
     * Contains the `value` of the env variable, encrypted with a special key to make decryption possible in the subscriber Lambda.
     */
    encryptedValue: string;
};

export type RemoveProjectEnvResponseBody3 = {
    target?:
        | Array<RemoveProjectEnvTargetProjectsResponse1>
        | RemoveProjectEnvTargetProjectsResponse2
        | undefined;
    type: RemoveProjectEnvResponseBodyProjectsResponseType;
    id?: string | undefined;
    key: string;
    value: string;
    configurationId?: string | null | undefined;
    createdAt?: number | undefined;
    updatedAt?: number | undefined;
    createdBy?: string | null | undefined;
    updatedBy?: string | null | undefined;
    gitBranch?: string | undefined;
    edgeConfigId?: string | null | undefined;
    edgeConfigTokenId?: string | null | undefined;
    contentHint?:
        | RemoveProjectEnvContentHintProjectsResponse1
        | RemoveProjectEnvContentHintProjectsResponse2
        | RemoveProjectEnvContentHintProjectsResponse3
        | RemoveProjectEnvContentHintProjectsResponse4
        | RemoveProjectEnvContentHintProjectsResponse5
        | RemoveProjectEnvContentHintProjectsResponse6
        | RemoveProjectEnvContentHintProjectsResponse7
        | RemoveProjectEnvContentHintProjectsResponse8
        | RemoveProjectEnvContentHintProjectsResponse9
        | RemoveProjectEnvContentHintProjectsResponse10
        | RemoveProjectEnvContentHintProjectsResponse11
        | RemoveProjectEnvContentHintProjectsResponse12
        | RemoveProjectEnvContentHintProjectsResponse13
        | RemoveProjectEnvContentHintProjectsResponse14
        | null
        | undefined;
    /**
     * Similar to `contentHints`, but should not be exposed to the user.
     */
    internalContentHint?:
        | RemoveProjectEnvResponseBodyProjectsResponseInternalContentHint
        | null
        | undefined;
    /**
     * Whether `value` is decrypted.
     */
    decrypted?: boolean | undefined;
    comment?: string | undefined;
    customEnvironmentId?: string | undefined;
};

export enum RemoveProjectEnvTargetProjects2 {
    Production = "production",
    Preview = "preview",
    Development = "development",
}

export enum RemoveProjectEnvTargetProjects1 {
    Production = "production",
    Preview = "preview",
    Development = "development",
}

export type RemoveProjectEnvResponseBodyProjectsTarget =
    | Array<RemoveProjectEnvTargetProjects1>
    | RemoveProjectEnvTargetProjects2;

export enum RemoveProjectEnvResponseBodyProjectsType {
    System = "system",
    Encrypted = "encrypted",
    Plain = "plain",
    Sensitive = "sensitive",
    Secret = "secret",
}

export enum RemoveProjectEnvContentHintProjectsResponse200ApplicationJSONResponseBody214Type {
    IntegrationStoreSecret = "integration-store-secret",
}

export type RemoveProjectEnvContentHintProjects14 = {
    type: RemoveProjectEnvContentHintProjectsResponse200ApplicationJSONResponseBody214Type;
    storeId: string;
};

export enum RemoveProjectEnvContentHintProjectsResponse200ApplicationJSONResponseBody213Type {
    PostgresUrlNoSsl = "postgres-url-no-ssl",
}

export type RemoveProjectEnvContentHintProjects13 = {
    type: RemoveProjectEnvContentHintProjectsResponse200ApplicationJSONResponseBody213Type;
    storeId: string;
};

export enum RemoveProjectEnvContentHintProjectsResponse200ApplicationJSONResponseBody212Type {
    PostgresDatabase = "postgres-database",
}

export type RemoveProjectEnvContentHintProjects12 = {
    type: RemoveProjectEnvContentHintProjectsResponse200ApplicationJSONResponseBody212Type;
    storeId: string;
};

export enum RemoveProjectEnvContentHintProjectsResponse200ApplicationJSONResponseBody211Type {
    PostgresPassword = "postgres-password",
}

export type RemoveProjectEnvContentHintProjects11 = {
    type: RemoveProjectEnvContentHintProjectsResponse200ApplicationJSONResponseBody211Type;
    storeId: string;
};

export enum RemoveProjectEnvContentHintProjectsResponse200ApplicationJSONResponseBody210Type {
    PostgresHost = "postgres-host",
}

export type RemoveProjectEnvContentHintProjects10 = {
    type: RemoveProjectEnvContentHintProjectsResponse200ApplicationJSONResponseBody210Type;
    storeId: string;
};

export enum RemoveProjectEnvContentHintProjectsResponse200ApplicationJSONResponseBody29Type {
    PostgresUser = "postgres-user",
}

export type RemoveProjectEnvContentHintProjects9 = {
    type: RemoveProjectEnvContentHintProjectsResponse200ApplicationJSONResponseBody29Type;
    storeId: string;
};

export enum RemoveProjectEnvContentHintProjectsResponse200ApplicationJSONResponseBody28Type {
    PostgresPrismaUrl = "postgres-prisma-url",
}

export type RemoveProjectEnvContentHintProjects8 = {
    type: RemoveProjectEnvContentHintProjectsResponse200ApplicationJSONResponseBody28Type;
    storeId: string;
};

export enum RemoveProjectEnvContentHintProjectsResponse200ApplicationJSONResponseBody27Type {
    PostgresUrlNonPooling = "postgres-url-non-pooling",
}

export type RemoveProjectEnvContentHintProjects7 = {
    type: RemoveProjectEnvContentHintProjectsResponse200ApplicationJSONResponseBody27Type;
    storeId: string;
};

export enum RemoveProjectEnvContentHintProjectsResponse200ApplicationJSONResponseBody26Type {
    PostgresUrl = "postgres-url",
}

export type RemoveProjectEnvContentHintProjects6 = {
    type: RemoveProjectEnvContentHintProjectsResponse200ApplicationJSONResponseBody26Type;
    storeId: string;
};

export enum RemoveProjectEnvContentHintProjectsResponse200ApplicationJSONResponseBody25Type {
    BlobReadWriteToken = "blob-read-write-token",
}

export type RemoveProjectEnvContentHintProjects5 = {
    type: RemoveProjectEnvContentHintProjectsResponse200ApplicationJSONResponseBody25Type;
    storeId: string;
};

export enum RemoveProjectEnvContentHintProjectsResponse200ApplicationJSONResponseBody24Type {
    RedisRestApiReadOnlyToken = "redis-rest-api-read-only-token",
}

export type RemoveProjectEnvContentHintProjects4 = {
    type: RemoveProjectEnvContentHintProjectsResponse200ApplicationJSONResponseBody24Type;
    storeId: string;
};

export enum RemoveProjectEnvContentHintProjectsResponse200ApplicationJSONResponseBody23Type {
    RedisRestApiToken = "redis-rest-api-token",
}

export type RemoveProjectEnvContentHintProjects3 = {
    type: RemoveProjectEnvContentHintProjectsResponse200ApplicationJSONResponseBody23Type;
    storeId: string;
};

export enum RemoveProjectEnvContentHintProjectsResponse200ApplicationJSONResponseBody22Type {
    RedisRestApiUrl = "redis-rest-api-url",
}

export type RemoveProjectEnvContentHintProjects2 = {
    type: RemoveProjectEnvContentHintProjectsResponse200ApplicationJSONResponseBody22Type;
    storeId: string;
};

export enum RemoveProjectEnvContentHintProjectsResponse200ApplicationJSONResponseBody2Type {
    RedisUrl = "redis-url",
}

export type RemoveProjectEnvContentHintProjects1 = {
    type: RemoveProjectEnvContentHintProjectsResponse200ApplicationJSONResponseBody2Type;
    storeId: string;
};

export type RemoveProjectEnvResponseBodyProjectsContentHint =
    | RemoveProjectEnvContentHintProjects1
    | RemoveProjectEnvContentHintProjects2
    | RemoveProjectEnvContentHintProjects3
    | RemoveProjectEnvContentHintProjects4
    | RemoveProjectEnvContentHintProjects5
    | RemoveProjectEnvContentHintProjects6
    | RemoveProjectEnvContentHintProjects7
    | RemoveProjectEnvContentHintProjects8
    | RemoveProjectEnvContentHintProjects9
    | RemoveProjectEnvContentHintProjects10
    | RemoveProjectEnvContentHintProjects11
    | RemoveProjectEnvContentHintProjects12
    | RemoveProjectEnvContentHintProjects13
    | RemoveProjectEnvContentHintProjects14;

export enum RemoveProjectEnvResponseBodyProjectsResponse200Type {
    FlagsSecret = "flags-secret",
}

/**
 * Similar to `contentHints`, but should not be exposed to the user.
 */
export type RemoveProjectEnvResponseBodyProjectsInternalContentHint = {
    type: RemoveProjectEnvResponseBodyProjectsResponse200Type;
    /**
     * Contains the `value` of the env variable, encrypted with a special key to make decryption possible in the subscriber Lambda.
     */
    encryptedValue: string;
};

export type RemoveProjectEnvResponseBody2 = {
    system?: boolean | undefined;
    target?: Array<RemoveProjectEnvTargetProjects1> | RemoveProjectEnvTargetProjects2 | undefined;
    type: RemoveProjectEnvResponseBodyProjectsType;
    id?: string | undefined;
    key: string;
    value: string;
    configurationId?: string | null | undefined;
    createdAt?: number | undefined;
    updatedAt?: number | undefined;
    createdBy?: string | null | undefined;
    updatedBy?: string | null | undefined;
    gitBranch?: string | undefined;
    edgeConfigId?: string | null | undefined;
    edgeConfigTokenId?: string | null | undefined;
    contentHint?:
        | RemoveProjectEnvContentHintProjects1
        | RemoveProjectEnvContentHintProjects2
        | RemoveProjectEnvContentHintProjects3
        | RemoveProjectEnvContentHintProjects4
        | RemoveProjectEnvContentHintProjects5
        | RemoveProjectEnvContentHintProjects6
        | RemoveProjectEnvContentHintProjects7
        | RemoveProjectEnvContentHintProjects8
        | RemoveProjectEnvContentHintProjects9
        | RemoveProjectEnvContentHintProjects10
        | RemoveProjectEnvContentHintProjects11
        | RemoveProjectEnvContentHintProjects12
        | RemoveProjectEnvContentHintProjects13
        | RemoveProjectEnvContentHintProjects14
        | null
        | undefined;
    /**
     * Similar to `contentHints`, but should not be exposed to the user.
     */
    internalContentHint?:
        | RemoveProjectEnvResponseBodyProjectsInternalContentHint
        | null
        | undefined;
    /**
     * Whether `value` is decrypted.
     */
    decrypted?: boolean | undefined;
    comment?: string | undefined;
    customEnvironmentId?: string | undefined;
};

export enum RemoveProjectEnvTarget2 {
    Production = "production",
    Preview = "preview",
    Development = "development",
}

export enum RemoveProjectEnvTarget1 {
    Production = "production",
    Preview = "preview",
    Development = "development",
}

export type RemoveProjectEnvResponseBodyTarget =
    | Array<RemoveProjectEnvTarget1>
    | RemoveProjectEnvTarget2;

export enum RemoveProjectEnvResponseBodyType {
    System = "system",
    Encrypted = "encrypted",
    Plain = "plain",
    Sensitive = "sensitive",
    Secret = "secret",
}

export enum RemoveProjectEnvContentHintProjectsResponse200ApplicationJSONResponseBody114Type {
    IntegrationStoreSecret = "integration-store-secret",
}

export type RemoveProjectEnvContentHint14 = {
    type: RemoveProjectEnvContentHintProjectsResponse200ApplicationJSONResponseBody114Type;
    storeId: string;
};

export enum RemoveProjectEnvContentHintProjectsResponse200ApplicationJSONResponseBody113Type {
    PostgresUrlNoSsl = "postgres-url-no-ssl",
}

export type RemoveProjectEnvContentHint13 = {
    type: RemoveProjectEnvContentHintProjectsResponse200ApplicationJSONResponseBody113Type;
    storeId: string;
};

export enum RemoveProjectEnvContentHintProjectsResponse200ApplicationJSONResponseBody112Type {
    PostgresDatabase = "postgres-database",
}

export type RemoveProjectEnvContentHint12 = {
    type: RemoveProjectEnvContentHintProjectsResponse200ApplicationJSONResponseBody112Type;
    storeId: string;
};

export enum RemoveProjectEnvContentHintProjectsResponse200ApplicationJSONResponseBody111Type {
    PostgresPassword = "postgres-password",
}

export type RemoveProjectEnvContentHint11 = {
    type: RemoveProjectEnvContentHintProjectsResponse200ApplicationJSONResponseBody111Type;
    storeId: string;
};

export enum RemoveProjectEnvContentHintProjectsResponse200ApplicationJSONResponseBody110Type {
    PostgresHost = "postgres-host",
}

export type RemoveProjectEnvContentHint10 = {
    type: RemoveProjectEnvContentHintProjectsResponse200ApplicationJSONResponseBody110Type;
    storeId: string;
};

export enum RemoveProjectEnvContentHintProjectsResponse200ApplicationJSONResponseBody19Type {
    PostgresUser = "postgres-user",
}

export type RemoveProjectEnvContentHint9 = {
    type: RemoveProjectEnvContentHintProjectsResponse200ApplicationJSONResponseBody19Type;
    storeId: string;
};

export enum RemoveProjectEnvContentHintProjectsResponse200ApplicationJSONResponseBody18Type {
    PostgresPrismaUrl = "postgres-prisma-url",
}

export type RemoveProjectEnvContentHint8 = {
    type: RemoveProjectEnvContentHintProjectsResponse200ApplicationJSONResponseBody18Type;
    storeId: string;
};

export enum RemoveProjectEnvContentHintProjectsResponse200ApplicationJSONResponseBody1Type {
    PostgresUrlNonPooling = "postgres-url-non-pooling",
}

export type RemoveProjectEnvContentHint7 = {
    type: RemoveProjectEnvContentHintProjectsResponse200ApplicationJSONResponseBody1Type;
    storeId: string;
};

export enum RemoveProjectEnvContentHintProjectsResponse200ApplicationJSONResponseBodyType {
    PostgresUrl = "postgres-url",
}

export type RemoveProjectEnvContentHint6 = {
    type: RemoveProjectEnvContentHintProjectsResponse200ApplicationJSONResponseBodyType;
    storeId: string;
};

export enum RemoveProjectEnvContentHintProjectsResponse200ApplicationJSONType {
    BlobReadWriteToken = "blob-read-write-token",
}

export type RemoveProjectEnvContentHint5 = {
    type: RemoveProjectEnvContentHintProjectsResponse200ApplicationJSONType;
    storeId: string;
};

export enum RemoveProjectEnvContentHintProjectsResponse200Type {
    RedisRestApiReadOnlyToken = "redis-rest-api-read-only-token",
}

export type RemoveProjectEnvContentHint4 = {
    type: RemoveProjectEnvContentHintProjectsResponse200Type;
    storeId: string;
};

export enum RemoveProjectEnvContentHintProjectsResponseType {
    RedisRestApiToken = "redis-rest-api-token",
}

export type RemoveProjectEnvContentHint3 = {
    type: RemoveProjectEnvContentHintProjectsResponseType;
    storeId: string;
};

export enum RemoveProjectEnvContentHintProjectsType {
    RedisRestApiUrl = "redis-rest-api-url",
}

export type RemoveProjectEnvContentHint2 = {
    type: RemoveProjectEnvContentHintProjectsType;
    storeId: string;
};

export enum RemoveProjectEnvContentHintType {
    RedisUrl = "redis-url",
}

export type RemoveProjectEnvContentHint1 = {
    type: RemoveProjectEnvContentHintType;
    storeId: string;
};

export type RemoveProjectEnvResponseBodyContentHint =
    | RemoveProjectEnvContentHint1
    | RemoveProjectEnvContentHint2
    | RemoveProjectEnvContentHint3
    | RemoveProjectEnvContentHint4
    | RemoveProjectEnvContentHint5
    | RemoveProjectEnvContentHint6
    | RemoveProjectEnvContentHint7
    | RemoveProjectEnvContentHint8
    | RemoveProjectEnvContentHint9
    | RemoveProjectEnvContentHint10
    | RemoveProjectEnvContentHint11
    | RemoveProjectEnvContentHint12
    | RemoveProjectEnvContentHint13
    | RemoveProjectEnvContentHint14;

export enum RemoveProjectEnvResponseBodyProjectsResponse200ApplicationJSONType {
    FlagsSecret = "flags-secret",
}

/**
 * Similar to `contentHints`, but should not be exposed to the user.
 */
export type RemoveProjectEnvResponseBodyInternalContentHint = {
    type: RemoveProjectEnvResponseBodyProjectsResponse200ApplicationJSONType;
    /**
     * Contains the `value` of the env variable, encrypted with a special key to make decryption possible in the subscriber Lambda.
     */
    encryptedValue: string;
};

export type RemoveProjectEnvResponseBody1 = {
    target?: Array<RemoveProjectEnvTarget1> | RemoveProjectEnvTarget2 | undefined;
    type: RemoveProjectEnvResponseBodyType;
    id?: string | undefined;
    key: string;
    value: string;
    configurationId?: string | null | undefined;
    createdAt?: number | undefined;
    updatedAt?: number | undefined;
    createdBy?: string | null | undefined;
    updatedBy?: string | null | undefined;
    gitBranch?: string | undefined;
    edgeConfigId?: string | null | undefined;
    edgeConfigTokenId?: string | null | undefined;
    contentHint?:
        | RemoveProjectEnvContentHint1
        | RemoveProjectEnvContentHint2
        | RemoveProjectEnvContentHint3
        | RemoveProjectEnvContentHint4
        | RemoveProjectEnvContentHint5
        | RemoveProjectEnvContentHint6
        | RemoveProjectEnvContentHint7
        | RemoveProjectEnvContentHint8
        | RemoveProjectEnvContentHint9
        | RemoveProjectEnvContentHint10
        | RemoveProjectEnvContentHint11
        | RemoveProjectEnvContentHint12
        | RemoveProjectEnvContentHint13
        | RemoveProjectEnvContentHint14
        | null
        | undefined;
    /**
     * Similar to `contentHints`, but should not be exposed to the user.
     */
    internalContentHint?: RemoveProjectEnvResponseBodyInternalContentHint | null | undefined;
    /**
     * Whether `value` is decrypted.
     */
    decrypted?: boolean | undefined;
    comment?: string | undefined;
    customEnvironmentId?: string | undefined;
};

/**
 * The environment variable was successfully removed
 */
export type RemoveProjectEnvResponseBody =
    | RemoveProjectEnvResponseBody3
    | RemoveProjectEnvResponseBody2
    | Array<RemoveProjectEnvResponseBody1>;

export type RemoveProjectEnvResponse = {
    httpMeta: components.HTTPMetadata;
    /**
     * The environment variable was successfully removed
     */
    oneOf?:
        | RemoveProjectEnvResponseBody3
        | RemoveProjectEnvResponseBody2
        | Array<RemoveProjectEnvResponseBody1>
        | undefined;
};

/** @internal */
export namespace RemoveProjectEnvRequest$ {
    export const inboundSchema: z.ZodType<RemoveProjectEnvRequest, z.ZodTypeDef, unknown> = z
        .object({
            idOrName: z.string(),
            id: z.string(),
            customEnvironmentId: z.string().optional(),
            teamId: z.string().optional(),
            slug: z.string().optional(),
        })
        .transform((v) => {
            return {
                idOrName: v.idOrName,
                id: v.id,
                ...(v.customEnvironmentId === undefined
                    ? null
                    : { customEnvironmentId: v.customEnvironmentId }),
                ...(v.teamId === undefined ? null : { teamId: v.teamId }),
                ...(v.slug === undefined ? null : { slug: v.slug }),
            };
        });

    export type Outbound = {
        idOrName: string;
        id: string;
        customEnvironmentId?: string | undefined;
        teamId?: string | undefined;
        slug?: string | undefined;
    };

    export const outboundSchema: z.ZodType<Outbound, z.ZodTypeDef, RemoveProjectEnvRequest> = z
        .object({
            idOrName: z.string(),
            id: z.string(),
            customEnvironmentId: z.string().optional(),
            teamId: z.string().optional(),
            slug: z.string().optional(),
        })
        .transform((v) => {
            return {
                idOrName: v.idOrName,
                id: v.id,
                ...(v.customEnvironmentId === undefined
                    ? null
                    : { customEnvironmentId: v.customEnvironmentId }),
                ...(v.teamId === undefined ? null : { teamId: v.teamId }),
                ...(v.slug === undefined ? null : { slug: v.slug }),
            };
        });
}

/** @internal */
export namespace RemoveProjectEnvTargetProjectsResponse2$ {
    export const inboundSchema = z.nativeEnum(RemoveProjectEnvTargetProjectsResponse2);
    export const outboundSchema = inboundSchema;
}

/** @internal */
export namespace RemoveProjectEnvTargetProjectsResponse1$ {
    export const inboundSchema = z.nativeEnum(RemoveProjectEnvTargetProjectsResponse1);
    export const outboundSchema = inboundSchema;
}

/** @internal */
export namespace RemoveProjectEnvResponseBodyProjectsResponseTarget$ {
    export const inboundSchema: z.ZodType<
        RemoveProjectEnvResponseBodyProjectsResponseTarget,
        z.ZodTypeDef,
        unknown
    > = z.union([
        z.array(RemoveProjectEnvTargetProjectsResponse1$.inboundSchema),
        RemoveProjectEnvTargetProjectsResponse2$.inboundSchema,
    ]);

    export type Outbound = Array<string> | string;
    export const outboundSchema: z.ZodType<
        Outbound,
        z.ZodTypeDef,
        RemoveProjectEnvResponseBodyProjectsResponseTarget
    > = z.union([
        z.array(RemoveProjectEnvTargetProjectsResponse1$.outboundSchema),
        RemoveProjectEnvTargetProjectsResponse2$.outboundSchema,
    ]);
}

/** @internal */
export namespace RemoveProjectEnvResponseBodyProjectsResponseType$ {
    export const inboundSchema = z.nativeEnum(RemoveProjectEnvResponseBodyProjectsResponseType);
    export const outboundSchema = inboundSchema;
}

/** @internal */
export namespace RemoveProjectEnvContentHintProjectsResponse200ApplicationJSONResponseBody314Type$ {
    export const inboundSchema = z.nativeEnum(
        RemoveProjectEnvContentHintProjectsResponse200ApplicationJSONResponseBody314Type
    );
    export const outboundSchema = inboundSchema;
}

/** @internal */
export namespace RemoveProjectEnvContentHintProjectsResponse14$ {
    export const inboundSchema: z.ZodType<
        RemoveProjectEnvContentHintProjectsResponse14,
        z.ZodTypeDef,
        unknown
    > = z
        .object({
            type: RemoveProjectEnvContentHintProjectsResponse200ApplicationJSONResponseBody314Type$.inboundSchema,
            storeId: z.string(),
        })
        .transform((v) => {
            return {
                type: v.type,
                storeId: v.storeId,
            };
        });

    export type Outbound = {
        type: string;
        storeId: string;
    };

    export const outboundSchema: z.ZodType<
        Outbound,
        z.ZodTypeDef,
        RemoveProjectEnvContentHintProjectsResponse14
    > = z
        .object({
            type: RemoveProjectEnvContentHintProjectsResponse200ApplicationJSONResponseBody314Type$.outboundSchema,
            storeId: z.string(),
        })
        .transform((v) => {
            return {
                type: v.type,
                storeId: v.storeId,
            };
        });
}

/** @internal */
export namespace RemoveProjectEnvContentHintProjectsResponse200ApplicationJSONResponseBody313Type$ {
    export const inboundSchema = z.nativeEnum(
        RemoveProjectEnvContentHintProjectsResponse200ApplicationJSONResponseBody313Type
    );
    export const outboundSchema = inboundSchema;
}

/** @internal */
export namespace RemoveProjectEnvContentHintProjectsResponse13$ {
    export const inboundSchema: z.ZodType<
        RemoveProjectEnvContentHintProjectsResponse13,
        z.ZodTypeDef,
        unknown
    > = z
        .object({
            type: RemoveProjectEnvContentHintProjectsResponse200ApplicationJSONResponseBody313Type$.inboundSchema,
            storeId: z.string(),
        })
        .transform((v) => {
            return {
                type: v.type,
                storeId: v.storeId,
            };
        });

    export type Outbound = {
        type: string;
        storeId: string;
    };

    export const outboundSchema: z.ZodType<
        Outbound,
        z.ZodTypeDef,
        RemoveProjectEnvContentHintProjectsResponse13
    > = z
        .object({
            type: RemoveProjectEnvContentHintProjectsResponse200ApplicationJSONResponseBody313Type$.outboundSchema,
            storeId: z.string(),
        })
        .transform((v) => {
            return {
                type: v.type,
                storeId: v.storeId,
            };
        });
}

/** @internal */
export namespace RemoveProjectEnvContentHintProjectsResponse200ApplicationJSONResponseBody312Type$ {
    export const inboundSchema = z.nativeEnum(
        RemoveProjectEnvContentHintProjectsResponse200ApplicationJSONResponseBody312Type
    );
    export const outboundSchema = inboundSchema;
}

/** @internal */
export namespace RemoveProjectEnvContentHintProjectsResponse12$ {
    export const inboundSchema: z.ZodType<
        RemoveProjectEnvContentHintProjectsResponse12,
        z.ZodTypeDef,
        unknown
    > = z
        .object({
            type: RemoveProjectEnvContentHintProjectsResponse200ApplicationJSONResponseBody312Type$.inboundSchema,
            storeId: z.string(),
        })
        .transform((v) => {
            return {
                type: v.type,
                storeId: v.storeId,
            };
        });

    export type Outbound = {
        type: string;
        storeId: string;
    };

    export const outboundSchema: z.ZodType<
        Outbound,
        z.ZodTypeDef,
        RemoveProjectEnvContentHintProjectsResponse12
    > = z
        .object({
            type: RemoveProjectEnvContentHintProjectsResponse200ApplicationJSONResponseBody312Type$.outboundSchema,
            storeId: z.string(),
        })
        .transform((v) => {
            return {
                type: v.type,
                storeId: v.storeId,
            };
        });
}

/** @internal */
export namespace RemoveProjectEnvContentHintProjectsResponse200ApplicationJSONResponseBody311Type$ {
    export const inboundSchema = z.nativeEnum(
        RemoveProjectEnvContentHintProjectsResponse200ApplicationJSONResponseBody311Type
    );
    export const outboundSchema = inboundSchema;
}

/** @internal */
export namespace RemoveProjectEnvContentHintProjectsResponse11$ {
    export const inboundSchema: z.ZodType<
        RemoveProjectEnvContentHintProjectsResponse11,
        z.ZodTypeDef,
        unknown
    > = z
        .object({
            type: RemoveProjectEnvContentHintProjectsResponse200ApplicationJSONResponseBody311Type$.inboundSchema,
            storeId: z.string(),
        })
        .transform((v) => {
            return {
                type: v.type,
                storeId: v.storeId,
            };
        });

    export type Outbound = {
        type: string;
        storeId: string;
    };

    export const outboundSchema: z.ZodType<
        Outbound,
        z.ZodTypeDef,
        RemoveProjectEnvContentHintProjectsResponse11
    > = z
        .object({
            type: RemoveProjectEnvContentHintProjectsResponse200ApplicationJSONResponseBody311Type$.outboundSchema,
            storeId: z.string(),
        })
        .transform((v) => {
            return {
                type: v.type,
                storeId: v.storeId,
            };
        });
}

/** @internal */
export namespace RemoveProjectEnvContentHintProjectsResponse200ApplicationJSONResponseBody310Type$ {
    export const inboundSchema = z.nativeEnum(
        RemoveProjectEnvContentHintProjectsResponse200ApplicationJSONResponseBody310Type
    );
    export const outboundSchema = inboundSchema;
}

/** @internal */
export namespace RemoveProjectEnvContentHintProjectsResponse10$ {
    export const inboundSchema: z.ZodType<
        RemoveProjectEnvContentHintProjectsResponse10,
        z.ZodTypeDef,
        unknown
    > = z
        .object({
            type: RemoveProjectEnvContentHintProjectsResponse200ApplicationJSONResponseBody310Type$.inboundSchema,
            storeId: z.string(),
        })
        .transform((v) => {
            return {
                type: v.type,
                storeId: v.storeId,
            };
        });

    export type Outbound = {
        type: string;
        storeId: string;
    };

    export const outboundSchema: z.ZodType<
        Outbound,
        z.ZodTypeDef,
        RemoveProjectEnvContentHintProjectsResponse10
    > = z
        .object({
            type: RemoveProjectEnvContentHintProjectsResponse200ApplicationJSONResponseBody310Type$.outboundSchema,
            storeId: z.string(),
        })
        .transform((v) => {
            return {
                type: v.type,
                storeId: v.storeId,
            };
        });
}

/** @internal */
export namespace RemoveProjectEnvContentHintProjectsResponse200ApplicationJSONResponseBody39Type$ {
    export const inboundSchema = z.nativeEnum(
        RemoveProjectEnvContentHintProjectsResponse200ApplicationJSONResponseBody39Type
    );
    export const outboundSchema = inboundSchema;
}

/** @internal */
export namespace RemoveProjectEnvContentHintProjectsResponse9$ {
    export const inboundSchema: z.ZodType<
        RemoveProjectEnvContentHintProjectsResponse9,
        z.ZodTypeDef,
        unknown
    > = z
        .object({
            type: RemoveProjectEnvContentHintProjectsResponse200ApplicationJSONResponseBody39Type$.inboundSchema,
            storeId: z.string(),
        })
        .transform((v) => {
            return {
                type: v.type,
                storeId: v.storeId,
            };
        });

    export type Outbound = {
        type: string;
        storeId: string;
    };

    export const outboundSchema: z.ZodType<
        Outbound,
        z.ZodTypeDef,
        RemoveProjectEnvContentHintProjectsResponse9
    > = z
        .object({
            type: RemoveProjectEnvContentHintProjectsResponse200ApplicationJSONResponseBody39Type$.outboundSchema,
            storeId: z.string(),
        })
        .transform((v) => {
            return {
                type: v.type,
                storeId: v.storeId,
            };
        });
}

/** @internal */
export namespace RemoveProjectEnvContentHintProjectsResponse200ApplicationJSONResponseBody38Type$ {
    export const inboundSchema = z.nativeEnum(
        RemoveProjectEnvContentHintProjectsResponse200ApplicationJSONResponseBody38Type
    );
    export const outboundSchema = inboundSchema;
}

/** @internal */
export namespace RemoveProjectEnvContentHintProjectsResponse8$ {
    export const inboundSchema: z.ZodType<
        RemoveProjectEnvContentHintProjectsResponse8,
        z.ZodTypeDef,
        unknown
    > = z
        .object({
            type: RemoveProjectEnvContentHintProjectsResponse200ApplicationJSONResponseBody38Type$.inboundSchema,
            storeId: z.string(),
        })
        .transform((v) => {
            return {
                type: v.type,
                storeId: v.storeId,
            };
        });

    export type Outbound = {
        type: string;
        storeId: string;
    };

    export const outboundSchema: z.ZodType<
        Outbound,
        z.ZodTypeDef,
        RemoveProjectEnvContentHintProjectsResponse8
    > = z
        .object({
            type: RemoveProjectEnvContentHintProjectsResponse200ApplicationJSONResponseBody38Type$.outboundSchema,
            storeId: z.string(),
        })
        .transform((v) => {
            return {
                type: v.type,
                storeId: v.storeId,
            };
        });
}

/** @internal */
export namespace RemoveProjectEnvContentHintProjectsResponse200ApplicationJSONResponseBody37Type$ {
    export const inboundSchema = z.nativeEnum(
        RemoveProjectEnvContentHintProjectsResponse200ApplicationJSONResponseBody37Type
    );
    export const outboundSchema = inboundSchema;
}

/** @internal */
export namespace RemoveProjectEnvContentHintProjectsResponse7$ {
    export const inboundSchema: z.ZodType<
        RemoveProjectEnvContentHintProjectsResponse7,
        z.ZodTypeDef,
        unknown
    > = z
        .object({
            type: RemoveProjectEnvContentHintProjectsResponse200ApplicationJSONResponseBody37Type$.inboundSchema,
            storeId: z.string(),
        })
        .transform((v) => {
            return {
                type: v.type,
                storeId: v.storeId,
            };
        });

    export type Outbound = {
        type: string;
        storeId: string;
    };

    export const outboundSchema: z.ZodType<
        Outbound,
        z.ZodTypeDef,
        RemoveProjectEnvContentHintProjectsResponse7
    > = z
        .object({
            type: RemoveProjectEnvContentHintProjectsResponse200ApplicationJSONResponseBody37Type$.outboundSchema,
            storeId: z.string(),
        })
        .transform((v) => {
            return {
                type: v.type,
                storeId: v.storeId,
            };
        });
}

/** @internal */
export namespace RemoveProjectEnvContentHintProjectsResponse200ApplicationJSONResponseBody36Type$ {
    export const inboundSchema = z.nativeEnum(
        RemoveProjectEnvContentHintProjectsResponse200ApplicationJSONResponseBody36Type
    );
    export const outboundSchema = inboundSchema;
}

/** @internal */
export namespace RemoveProjectEnvContentHintProjectsResponse6$ {
    export const inboundSchema: z.ZodType<
        RemoveProjectEnvContentHintProjectsResponse6,
        z.ZodTypeDef,
        unknown
    > = z
        .object({
            type: RemoveProjectEnvContentHintProjectsResponse200ApplicationJSONResponseBody36Type$.inboundSchema,
            storeId: z.string(),
        })
        .transform((v) => {
            return {
                type: v.type,
                storeId: v.storeId,
            };
        });

    export type Outbound = {
        type: string;
        storeId: string;
    };

    export const outboundSchema: z.ZodType<
        Outbound,
        z.ZodTypeDef,
        RemoveProjectEnvContentHintProjectsResponse6
    > = z
        .object({
            type: RemoveProjectEnvContentHintProjectsResponse200ApplicationJSONResponseBody36Type$.outboundSchema,
            storeId: z.string(),
        })
        .transform((v) => {
            return {
                type: v.type,
                storeId: v.storeId,
            };
        });
}

/** @internal */
export namespace RemoveProjectEnvContentHintProjectsResponse200ApplicationJSONResponseBody35Type$ {
    export const inboundSchema = z.nativeEnum(
        RemoveProjectEnvContentHintProjectsResponse200ApplicationJSONResponseBody35Type
    );
    export const outboundSchema = inboundSchema;
}

/** @internal */
export namespace RemoveProjectEnvContentHintProjectsResponse5$ {
    export const inboundSchema: z.ZodType<
        RemoveProjectEnvContentHintProjectsResponse5,
        z.ZodTypeDef,
        unknown
    > = z
        .object({
            type: RemoveProjectEnvContentHintProjectsResponse200ApplicationJSONResponseBody35Type$.inboundSchema,
            storeId: z.string(),
        })
        .transform((v) => {
            return {
                type: v.type,
                storeId: v.storeId,
            };
        });

    export type Outbound = {
        type: string;
        storeId: string;
    };

    export const outboundSchema: z.ZodType<
        Outbound,
        z.ZodTypeDef,
        RemoveProjectEnvContentHintProjectsResponse5
    > = z
        .object({
            type: RemoveProjectEnvContentHintProjectsResponse200ApplicationJSONResponseBody35Type$.outboundSchema,
            storeId: z.string(),
        })
        .transform((v) => {
            return {
                type: v.type,
                storeId: v.storeId,
            };
        });
}

/** @internal */
export namespace RemoveProjectEnvContentHintProjectsResponse200ApplicationJSONResponseBody34Type$ {
    export const inboundSchema = z.nativeEnum(
        RemoveProjectEnvContentHintProjectsResponse200ApplicationJSONResponseBody34Type
    );
    export const outboundSchema = inboundSchema;
}

/** @internal */
export namespace RemoveProjectEnvContentHintProjectsResponse4$ {
    export const inboundSchema: z.ZodType<
        RemoveProjectEnvContentHintProjectsResponse4,
        z.ZodTypeDef,
        unknown
    > = z
        .object({
            type: RemoveProjectEnvContentHintProjectsResponse200ApplicationJSONResponseBody34Type$.inboundSchema,
            storeId: z.string(),
        })
        .transform((v) => {
            return {
                type: v.type,
                storeId: v.storeId,
            };
        });

    export type Outbound = {
        type: string;
        storeId: string;
    };

    export const outboundSchema: z.ZodType<
        Outbound,
        z.ZodTypeDef,
        RemoveProjectEnvContentHintProjectsResponse4
    > = z
        .object({
            type: RemoveProjectEnvContentHintProjectsResponse200ApplicationJSONResponseBody34Type$.outboundSchema,
            storeId: z.string(),
        })
        .transform((v) => {
            return {
                type: v.type,
                storeId: v.storeId,
            };
        });
}

/** @internal */
export namespace RemoveProjectEnvContentHintProjectsResponse200ApplicationJSONResponseBody33Type$ {
    export const inboundSchema = z.nativeEnum(
        RemoveProjectEnvContentHintProjectsResponse200ApplicationJSONResponseBody33Type
    );
    export const outboundSchema = inboundSchema;
}

/** @internal */
export namespace RemoveProjectEnvContentHintProjectsResponse3$ {
    export const inboundSchema: z.ZodType<
        RemoveProjectEnvContentHintProjectsResponse3,
        z.ZodTypeDef,
        unknown
    > = z
        .object({
            type: RemoveProjectEnvContentHintProjectsResponse200ApplicationJSONResponseBody33Type$.inboundSchema,
            storeId: z.string(),
        })
        .transform((v) => {
            return {
                type: v.type,
                storeId: v.storeId,
            };
        });

    export type Outbound = {
        type: string;
        storeId: string;
    };

    export const outboundSchema: z.ZodType<
        Outbound,
        z.ZodTypeDef,
        RemoveProjectEnvContentHintProjectsResponse3
    > = z
        .object({
            type: RemoveProjectEnvContentHintProjectsResponse200ApplicationJSONResponseBody33Type$.outboundSchema,
            storeId: z.string(),
        })
        .transform((v) => {
            return {
                type: v.type,
                storeId: v.storeId,
            };
        });
}

/** @internal */
export namespace RemoveProjectEnvContentHintProjectsResponse200ApplicationJSONResponseBody32Type$ {
    export const inboundSchema = z.nativeEnum(
        RemoveProjectEnvContentHintProjectsResponse200ApplicationJSONResponseBody32Type
    );
    export const outboundSchema = inboundSchema;
}

/** @internal */
export namespace RemoveProjectEnvContentHintProjectsResponse2$ {
    export const inboundSchema: z.ZodType<
        RemoveProjectEnvContentHintProjectsResponse2,
        z.ZodTypeDef,
        unknown
    > = z
        .object({
            type: RemoveProjectEnvContentHintProjectsResponse200ApplicationJSONResponseBody32Type$.inboundSchema,
            storeId: z.string(),
        })
        .transform((v) => {
            return {
                type: v.type,
                storeId: v.storeId,
            };
        });

    export type Outbound = {
        type: string;
        storeId: string;
    };

    export const outboundSchema: z.ZodType<
        Outbound,
        z.ZodTypeDef,
        RemoveProjectEnvContentHintProjectsResponse2
    > = z
        .object({
            type: RemoveProjectEnvContentHintProjectsResponse200ApplicationJSONResponseBody32Type$.outboundSchema,
            storeId: z.string(),
        })
        .transform((v) => {
            return {
                type: v.type,
                storeId: v.storeId,
            };
        });
}

/** @internal */
export namespace RemoveProjectEnvContentHintProjectsResponse200ApplicationJSONResponseBody3Type$ {
    export const inboundSchema = z.nativeEnum(
        RemoveProjectEnvContentHintProjectsResponse200ApplicationJSONResponseBody3Type
    );
    export const outboundSchema = inboundSchema;
}

/** @internal */
export namespace RemoveProjectEnvContentHintProjectsResponse1$ {
    export const inboundSchema: z.ZodType<
        RemoveProjectEnvContentHintProjectsResponse1,
        z.ZodTypeDef,
        unknown
    > = z
        .object({
            type: RemoveProjectEnvContentHintProjectsResponse200ApplicationJSONResponseBody3Type$.inboundSchema,
            storeId: z.string(),
        })
        .transform((v) => {
            return {
                type: v.type,
                storeId: v.storeId,
            };
        });

    export type Outbound = {
        type: string;
        storeId: string;
    };

    export const outboundSchema: z.ZodType<
        Outbound,
        z.ZodTypeDef,
        RemoveProjectEnvContentHintProjectsResponse1
    > = z
        .object({
            type: RemoveProjectEnvContentHintProjectsResponse200ApplicationJSONResponseBody3Type$.outboundSchema,
            storeId: z.string(),
        })
        .transform((v) => {
            return {
                type: v.type,
                storeId: v.storeId,
            };
        });
}

/** @internal */
export namespace RemoveProjectEnvResponseBodyProjectsResponseContentHint$ {
    export const inboundSchema: z.ZodType<
        RemoveProjectEnvResponseBodyProjectsResponseContentHint,
        z.ZodTypeDef,
        unknown
    > = z.union([
        z.lazy(() => RemoveProjectEnvContentHintProjectsResponse1$.inboundSchema),
        z.lazy(() => RemoveProjectEnvContentHintProjectsResponse2$.inboundSchema),
        z.lazy(() => RemoveProjectEnvContentHintProjectsResponse3$.inboundSchema),
        z.lazy(() => RemoveProjectEnvContentHintProjectsResponse4$.inboundSchema),
        z.lazy(() => RemoveProjectEnvContentHintProjectsResponse5$.inboundSchema),
        z.lazy(() => RemoveProjectEnvContentHintProjectsResponse6$.inboundSchema),
        z.lazy(() => RemoveProjectEnvContentHintProjectsResponse7$.inboundSchema),
        z.lazy(() => RemoveProjectEnvContentHintProjectsResponse8$.inboundSchema),
        z.lazy(() => RemoveProjectEnvContentHintProjectsResponse9$.inboundSchema),
        z.lazy(() => RemoveProjectEnvContentHintProjectsResponse10$.inboundSchema),
        z.lazy(() => RemoveProjectEnvContentHintProjectsResponse11$.inboundSchema),
        z.lazy(() => RemoveProjectEnvContentHintProjectsResponse12$.inboundSchema),
        z.lazy(() => RemoveProjectEnvContentHintProjectsResponse13$.inboundSchema),
        z.lazy(() => RemoveProjectEnvContentHintProjectsResponse14$.inboundSchema),
    ]);

    export type Outbound =
        | RemoveProjectEnvContentHintProjectsResponse1$.Outbound
        | RemoveProjectEnvContentHintProjectsResponse2$.Outbound
        | RemoveProjectEnvContentHintProjectsResponse3$.Outbound
        | RemoveProjectEnvContentHintProjectsResponse4$.Outbound
        | RemoveProjectEnvContentHintProjectsResponse5$.Outbound
        | RemoveProjectEnvContentHintProjectsResponse6$.Outbound
        | RemoveProjectEnvContentHintProjectsResponse7$.Outbound
        | RemoveProjectEnvContentHintProjectsResponse8$.Outbound
        | RemoveProjectEnvContentHintProjectsResponse9$.Outbound
        | RemoveProjectEnvContentHintProjectsResponse10$.Outbound
        | RemoveProjectEnvContentHintProjectsResponse11$.Outbound
        | RemoveProjectEnvContentHintProjectsResponse12$.Outbound
        | RemoveProjectEnvContentHintProjectsResponse13$.Outbound
        | RemoveProjectEnvContentHintProjectsResponse14$.Outbound;
    export const outboundSchema: z.ZodType<
        Outbound,
        z.ZodTypeDef,
        RemoveProjectEnvResponseBodyProjectsResponseContentHint
    > = z.union([
        z.lazy(() => RemoveProjectEnvContentHintProjectsResponse1$.outboundSchema),
        z.lazy(() => RemoveProjectEnvContentHintProjectsResponse2$.outboundSchema),
        z.lazy(() => RemoveProjectEnvContentHintProjectsResponse3$.outboundSchema),
        z.lazy(() => RemoveProjectEnvContentHintProjectsResponse4$.outboundSchema),
        z.lazy(() => RemoveProjectEnvContentHintProjectsResponse5$.outboundSchema),
        z.lazy(() => RemoveProjectEnvContentHintProjectsResponse6$.outboundSchema),
        z.lazy(() => RemoveProjectEnvContentHintProjectsResponse7$.outboundSchema),
        z.lazy(() => RemoveProjectEnvContentHintProjectsResponse8$.outboundSchema),
        z.lazy(() => RemoveProjectEnvContentHintProjectsResponse9$.outboundSchema),
        z.lazy(() => RemoveProjectEnvContentHintProjectsResponse10$.outboundSchema),
        z.lazy(() => RemoveProjectEnvContentHintProjectsResponse11$.outboundSchema),
        z.lazy(() => RemoveProjectEnvContentHintProjectsResponse12$.outboundSchema),
        z.lazy(() => RemoveProjectEnvContentHintProjectsResponse13$.outboundSchema),
        z.lazy(() => RemoveProjectEnvContentHintProjectsResponse14$.outboundSchema),
    ]);
}

/** @internal */
export namespace RemoveProjectEnvResponseBodyProjectsResponse200ApplicationJson3Type$ {
    export const inboundSchema = z.nativeEnum(
        RemoveProjectEnvResponseBodyProjectsResponse200ApplicationJson3Type
    );
    export const outboundSchema = inboundSchema;
}

/** @internal */
export namespace RemoveProjectEnvResponseBodyProjectsResponseInternalContentHint$ {
    export const inboundSchema: z.ZodType<
        RemoveProjectEnvResponseBodyProjectsResponseInternalContentHint,
        z.ZodTypeDef,
        unknown
    > = z
        .object({
            type: RemoveProjectEnvResponseBodyProjectsResponse200ApplicationJson3Type$.inboundSchema,
            encryptedValue: z.string(),
        })
        .transform((v) => {
            return {
                type: v.type,
                encryptedValue: v.encryptedValue,
            };
        });

    export type Outbound = {
        type: string;
        encryptedValue: string;
    };

    export const outboundSchema: z.ZodType<
        Outbound,
        z.ZodTypeDef,
        RemoveProjectEnvResponseBodyProjectsResponseInternalContentHint
    > = z
        .object({
            type: RemoveProjectEnvResponseBodyProjectsResponse200ApplicationJson3Type$.outboundSchema,
            encryptedValue: z.string(),
        })
        .transform((v) => {
            return {
                type: v.type,
                encryptedValue: v.encryptedValue,
            };
        });
}

/** @internal */
export namespace RemoveProjectEnvResponseBody3$ {
    export const inboundSchema: z.ZodType<RemoveProjectEnvResponseBody3, z.ZodTypeDef, unknown> = z
        .object({
            target: z
                .union([
                    z.array(RemoveProjectEnvTargetProjectsResponse1$.inboundSchema),
                    RemoveProjectEnvTargetProjectsResponse2$.inboundSchema,
                ])
                .optional(),
            type: RemoveProjectEnvResponseBodyProjectsResponseType$.inboundSchema,
            id: z.string().optional(),
            key: z.string(),
            value: z.string(),
            configurationId: z.nullable(z.string()).optional(),
            createdAt: z.number().optional(),
            updatedAt: z.number().optional(),
            createdBy: z.nullable(z.string()).optional(),
            updatedBy: z.nullable(z.string()).optional(),
            gitBranch: z.string().optional(),
            edgeConfigId: z.nullable(z.string()).optional(),
            edgeConfigTokenId: z.nullable(z.string()).optional(),
            contentHint: z
                .nullable(
                    z.union([
                        z.lazy(() => RemoveProjectEnvContentHintProjectsResponse1$.inboundSchema),
                        z.lazy(() => RemoveProjectEnvContentHintProjectsResponse2$.inboundSchema),
                        z.lazy(() => RemoveProjectEnvContentHintProjectsResponse3$.inboundSchema),
                        z.lazy(() => RemoveProjectEnvContentHintProjectsResponse4$.inboundSchema),
                        z.lazy(() => RemoveProjectEnvContentHintProjectsResponse5$.inboundSchema),
                        z.lazy(() => RemoveProjectEnvContentHintProjectsResponse6$.inboundSchema),
                        z.lazy(() => RemoveProjectEnvContentHintProjectsResponse7$.inboundSchema),
                        z.lazy(() => RemoveProjectEnvContentHintProjectsResponse8$.inboundSchema),
                        z.lazy(() => RemoveProjectEnvContentHintProjectsResponse9$.inboundSchema),
                        z.lazy(() => RemoveProjectEnvContentHintProjectsResponse10$.inboundSchema),
                        z.lazy(() => RemoveProjectEnvContentHintProjectsResponse11$.inboundSchema),
                        z.lazy(() => RemoveProjectEnvContentHintProjectsResponse12$.inboundSchema),
                        z.lazy(() => RemoveProjectEnvContentHintProjectsResponse13$.inboundSchema),
                        z.lazy(() => RemoveProjectEnvContentHintProjectsResponse14$.inboundSchema),
                    ])
                )
                .optional(),
            internalContentHint: z
                .nullable(
                    z.lazy(
                        () =>
                            RemoveProjectEnvResponseBodyProjectsResponseInternalContentHint$.inboundSchema
                    )
                )
                .optional(),
            decrypted: z.boolean().optional(),
            comment: z.string().optional(),
            customEnvironmentId: z.string().optional(),
        })
        .transform((v) => {
            return {
                ...(v.target === undefined ? null : { target: v.target }),
                type: v.type,
                ...(v.id === undefined ? null : { id: v.id }),
                key: v.key,
                value: v.value,
                ...(v.configurationId === undefined
                    ? null
                    : { configurationId: v.configurationId }),
                ...(v.createdAt === undefined ? null : { createdAt: v.createdAt }),
                ...(v.updatedAt === undefined ? null : { updatedAt: v.updatedAt }),
                ...(v.createdBy === undefined ? null : { createdBy: v.createdBy }),
                ...(v.updatedBy === undefined ? null : { updatedBy: v.updatedBy }),
                ...(v.gitBranch === undefined ? null : { gitBranch: v.gitBranch }),
                ...(v.edgeConfigId === undefined ? null : { edgeConfigId: v.edgeConfigId }),
                ...(v.edgeConfigTokenId === undefined
                    ? null
                    : { edgeConfigTokenId: v.edgeConfigTokenId }),
                ...(v.contentHint === undefined ? null : { contentHint: v.contentHint }),
                ...(v.internalContentHint === undefined
                    ? null
                    : { internalContentHint: v.internalContentHint }),
                ...(v.decrypted === undefined ? null : { decrypted: v.decrypted }),
                ...(v.comment === undefined ? null : { comment: v.comment }),
                ...(v.customEnvironmentId === undefined
                    ? null
                    : { customEnvironmentId: v.customEnvironmentId }),
            };
        });

    export type Outbound = {
        target?: Array<string> | string | undefined;
        type: string;
        id?: string | undefined;
        key: string;
        value: string;
        configurationId?: string | null | undefined;
        createdAt?: number | undefined;
        updatedAt?: number | undefined;
        createdBy?: string | null | undefined;
        updatedBy?: string | null | undefined;
        gitBranch?: string | undefined;
        edgeConfigId?: string | null | undefined;
        edgeConfigTokenId?: string | null | undefined;
        contentHint?:
            | RemoveProjectEnvContentHintProjectsResponse1$.Outbound
            | RemoveProjectEnvContentHintProjectsResponse2$.Outbound
            | RemoveProjectEnvContentHintProjectsResponse3$.Outbound
            | RemoveProjectEnvContentHintProjectsResponse4$.Outbound
            | RemoveProjectEnvContentHintProjectsResponse5$.Outbound
            | RemoveProjectEnvContentHintProjectsResponse6$.Outbound
            | RemoveProjectEnvContentHintProjectsResponse7$.Outbound
            | RemoveProjectEnvContentHintProjectsResponse8$.Outbound
            | RemoveProjectEnvContentHintProjectsResponse9$.Outbound
            | RemoveProjectEnvContentHintProjectsResponse10$.Outbound
            | RemoveProjectEnvContentHintProjectsResponse11$.Outbound
            | RemoveProjectEnvContentHintProjectsResponse12$.Outbound
            | RemoveProjectEnvContentHintProjectsResponse13$.Outbound
            | RemoveProjectEnvContentHintProjectsResponse14$.Outbound
            | null
            | undefined;
        internalContentHint?:
            | RemoveProjectEnvResponseBodyProjectsResponseInternalContentHint$.Outbound
            | null
            | undefined;
        decrypted?: boolean | undefined;
        comment?: string | undefined;
        customEnvironmentId?: string | undefined;
    };

    export const outboundSchema: z.ZodType<Outbound, z.ZodTypeDef, RemoveProjectEnvResponseBody3> =
        z
            .object({
                target: z
                    .union([
                        z.array(RemoveProjectEnvTargetProjectsResponse1$.outboundSchema),
                        RemoveProjectEnvTargetProjectsResponse2$.outboundSchema,
                    ])
                    .optional(),
                type: RemoveProjectEnvResponseBodyProjectsResponseType$.outboundSchema,
                id: z.string().optional(),
                key: z.string(),
                value: z.string(),
                configurationId: z.nullable(z.string()).optional(),
                createdAt: z.number().optional(),
                updatedAt: z.number().optional(),
                createdBy: z.nullable(z.string()).optional(),
                updatedBy: z.nullable(z.string()).optional(),
                gitBranch: z.string().optional(),
                edgeConfigId: z.nullable(z.string()).optional(),
                edgeConfigTokenId: z.nullable(z.string()).optional(),
                contentHint: z
                    .nullable(
                        z.union([
                            z.lazy(
                                () => RemoveProjectEnvContentHintProjectsResponse1$.outboundSchema
                            ),
                            z.lazy(
                                () => RemoveProjectEnvContentHintProjectsResponse2$.outboundSchema
                            ),
                            z.lazy(
                                () => RemoveProjectEnvContentHintProjectsResponse3$.outboundSchema
                            ),
                            z.lazy(
                                () => RemoveProjectEnvContentHintProjectsResponse4$.outboundSchema
                            ),
                            z.lazy(
                                () => RemoveProjectEnvContentHintProjectsResponse5$.outboundSchema
                            ),
                            z.lazy(
                                () => RemoveProjectEnvContentHintProjectsResponse6$.outboundSchema
                            ),
                            z.lazy(
                                () => RemoveProjectEnvContentHintProjectsResponse7$.outboundSchema
                            ),
                            z.lazy(
                                () => RemoveProjectEnvContentHintProjectsResponse8$.outboundSchema
                            ),
                            z.lazy(
                                () => RemoveProjectEnvContentHintProjectsResponse9$.outboundSchema
                            ),
                            z.lazy(
                                () => RemoveProjectEnvContentHintProjectsResponse10$.outboundSchema
                            ),
                            z.lazy(
                                () => RemoveProjectEnvContentHintProjectsResponse11$.outboundSchema
                            ),
                            z.lazy(
                                () => RemoveProjectEnvContentHintProjectsResponse12$.outboundSchema
                            ),
                            z.lazy(
                                () => RemoveProjectEnvContentHintProjectsResponse13$.outboundSchema
                            ),
                            z.lazy(
                                () => RemoveProjectEnvContentHintProjectsResponse14$.outboundSchema
                            ),
                        ])
                    )
                    .optional(),
                internalContentHint: z
                    .nullable(
                        z.lazy(
                            () =>
                                RemoveProjectEnvResponseBodyProjectsResponseInternalContentHint$.outboundSchema
                        )
                    )
                    .optional(),
                decrypted: z.boolean().optional(),
                comment: z.string().optional(),
                customEnvironmentId: z.string().optional(),
            })
            .transform((v) => {
                return {
                    ...(v.target === undefined ? null : { target: v.target }),
                    type: v.type,
                    ...(v.id === undefined ? null : { id: v.id }),
                    key: v.key,
                    value: v.value,
                    ...(v.configurationId === undefined
                        ? null
                        : { configurationId: v.configurationId }),
                    ...(v.createdAt === undefined ? null : { createdAt: v.createdAt }),
                    ...(v.updatedAt === undefined ? null : { updatedAt: v.updatedAt }),
                    ...(v.createdBy === undefined ? null : { createdBy: v.createdBy }),
                    ...(v.updatedBy === undefined ? null : { updatedBy: v.updatedBy }),
                    ...(v.gitBranch === undefined ? null : { gitBranch: v.gitBranch }),
                    ...(v.edgeConfigId === undefined ? null : { edgeConfigId: v.edgeConfigId }),
                    ...(v.edgeConfigTokenId === undefined
                        ? null
                        : { edgeConfigTokenId: v.edgeConfigTokenId }),
                    ...(v.contentHint === undefined ? null : { contentHint: v.contentHint }),
                    ...(v.internalContentHint === undefined
                        ? null
                        : { internalContentHint: v.internalContentHint }),
                    ...(v.decrypted === undefined ? null : { decrypted: v.decrypted }),
                    ...(v.comment === undefined ? null : { comment: v.comment }),
                    ...(v.customEnvironmentId === undefined
                        ? null
                        : { customEnvironmentId: v.customEnvironmentId }),
                };
            });
}

/** @internal */
export namespace RemoveProjectEnvTargetProjects2$ {
    export const inboundSchema = z.nativeEnum(RemoveProjectEnvTargetProjects2);
    export const outboundSchema = inboundSchema;
}

/** @internal */
export namespace RemoveProjectEnvTargetProjects1$ {
    export const inboundSchema = z.nativeEnum(RemoveProjectEnvTargetProjects1);
    export const outboundSchema = inboundSchema;
}

/** @internal */
export namespace RemoveProjectEnvResponseBodyProjectsTarget$ {
    export const inboundSchema: z.ZodType<
        RemoveProjectEnvResponseBodyProjectsTarget,
        z.ZodTypeDef,
        unknown
    > = z.union([
        z.array(RemoveProjectEnvTargetProjects1$.inboundSchema),
        RemoveProjectEnvTargetProjects2$.inboundSchema,
    ]);

    export type Outbound = Array<string> | string;
    export const outboundSchema: z.ZodType<
        Outbound,
        z.ZodTypeDef,
        RemoveProjectEnvResponseBodyProjectsTarget
    > = z.union([
        z.array(RemoveProjectEnvTargetProjects1$.outboundSchema),
        RemoveProjectEnvTargetProjects2$.outboundSchema,
    ]);
}

/** @internal */
export namespace RemoveProjectEnvResponseBodyProjectsType$ {
    export const inboundSchema = z.nativeEnum(RemoveProjectEnvResponseBodyProjectsType);
    export const outboundSchema = inboundSchema;
}

/** @internal */
export namespace RemoveProjectEnvContentHintProjectsResponse200ApplicationJSONResponseBody214Type$ {
    export const inboundSchema = z.nativeEnum(
        RemoveProjectEnvContentHintProjectsResponse200ApplicationJSONResponseBody214Type
    );
    export const outboundSchema = inboundSchema;
}

/** @internal */
export namespace RemoveProjectEnvContentHintProjects14$ {
    export const inboundSchema: z.ZodType<
        RemoveProjectEnvContentHintProjects14,
        z.ZodTypeDef,
        unknown
    > = z
        .object({
            type: RemoveProjectEnvContentHintProjectsResponse200ApplicationJSONResponseBody214Type$.inboundSchema,
            storeId: z.string(),
        })
        .transform((v) => {
            return {
                type: v.type,
                storeId: v.storeId,
            };
        });

    export type Outbound = {
        type: string;
        storeId: string;
    };

    export const outboundSchema: z.ZodType<
        Outbound,
        z.ZodTypeDef,
        RemoveProjectEnvContentHintProjects14
    > = z
        .object({
            type: RemoveProjectEnvContentHintProjectsResponse200ApplicationJSONResponseBody214Type$.outboundSchema,
            storeId: z.string(),
        })
        .transform((v) => {
            return {
                type: v.type,
                storeId: v.storeId,
            };
        });
}

/** @internal */
export namespace RemoveProjectEnvContentHintProjectsResponse200ApplicationJSONResponseBody213Type$ {
    export const inboundSchema = z.nativeEnum(
        RemoveProjectEnvContentHintProjectsResponse200ApplicationJSONResponseBody213Type
    );
    export const outboundSchema = inboundSchema;
}

/** @internal */
export namespace RemoveProjectEnvContentHintProjects13$ {
    export const inboundSchema: z.ZodType<
        RemoveProjectEnvContentHintProjects13,
        z.ZodTypeDef,
        unknown
    > = z
        .object({
            type: RemoveProjectEnvContentHintProjectsResponse200ApplicationJSONResponseBody213Type$.inboundSchema,
            storeId: z.string(),
        })
        .transform((v) => {
            return {
                type: v.type,
                storeId: v.storeId,
            };
        });

    export type Outbound = {
        type: string;
        storeId: string;
    };

    export const outboundSchema: z.ZodType<
        Outbound,
        z.ZodTypeDef,
        RemoveProjectEnvContentHintProjects13
    > = z
        .object({
            type: RemoveProjectEnvContentHintProjectsResponse200ApplicationJSONResponseBody213Type$.outboundSchema,
            storeId: z.string(),
        })
        .transform((v) => {
            return {
                type: v.type,
                storeId: v.storeId,
            };
        });
}

/** @internal */
export namespace RemoveProjectEnvContentHintProjectsResponse200ApplicationJSONResponseBody212Type$ {
    export const inboundSchema = z.nativeEnum(
        RemoveProjectEnvContentHintProjectsResponse200ApplicationJSONResponseBody212Type
    );
    export const outboundSchema = inboundSchema;
}

/** @internal */
export namespace RemoveProjectEnvContentHintProjects12$ {
    export const inboundSchema: z.ZodType<
        RemoveProjectEnvContentHintProjects12,
        z.ZodTypeDef,
        unknown
    > = z
        .object({
            type: RemoveProjectEnvContentHintProjectsResponse200ApplicationJSONResponseBody212Type$.inboundSchema,
            storeId: z.string(),
        })
        .transform((v) => {
            return {
                type: v.type,
                storeId: v.storeId,
            };
        });

    export type Outbound = {
        type: string;
        storeId: string;
    };

    export const outboundSchema: z.ZodType<
        Outbound,
        z.ZodTypeDef,
        RemoveProjectEnvContentHintProjects12
    > = z
        .object({
            type: RemoveProjectEnvContentHintProjectsResponse200ApplicationJSONResponseBody212Type$.outboundSchema,
            storeId: z.string(),
        })
        .transform((v) => {
            return {
                type: v.type,
                storeId: v.storeId,
            };
        });
}

/** @internal */
export namespace RemoveProjectEnvContentHintProjectsResponse200ApplicationJSONResponseBody211Type$ {
    export const inboundSchema = z.nativeEnum(
        RemoveProjectEnvContentHintProjectsResponse200ApplicationJSONResponseBody211Type
    );
    export const outboundSchema = inboundSchema;
}

/** @internal */
export namespace RemoveProjectEnvContentHintProjects11$ {
    export const inboundSchema: z.ZodType<
        RemoveProjectEnvContentHintProjects11,
        z.ZodTypeDef,
        unknown
    > = z
        .object({
            type: RemoveProjectEnvContentHintProjectsResponse200ApplicationJSONResponseBody211Type$.inboundSchema,
            storeId: z.string(),
        })
        .transform((v) => {
            return {
                type: v.type,
                storeId: v.storeId,
            };
        });

    export type Outbound = {
        type: string;
        storeId: string;
    };

    export const outboundSchema: z.ZodType<
        Outbound,
        z.ZodTypeDef,
        RemoveProjectEnvContentHintProjects11
    > = z
        .object({
            type: RemoveProjectEnvContentHintProjectsResponse200ApplicationJSONResponseBody211Type$.outboundSchema,
            storeId: z.string(),
        })
        .transform((v) => {
            return {
                type: v.type,
                storeId: v.storeId,
            };
        });
}

/** @internal */
export namespace RemoveProjectEnvContentHintProjectsResponse200ApplicationJSONResponseBody210Type$ {
    export const inboundSchema = z.nativeEnum(
        RemoveProjectEnvContentHintProjectsResponse200ApplicationJSONResponseBody210Type
    );
    export const outboundSchema = inboundSchema;
}

/** @internal */
export namespace RemoveProjectEnvContentHintProjects10$ {
    export const inboundSchema: z.ZodType<
        RemoveProjectEnvContentHintProjects10,
        z.ZodTypeDef,
        unknown
    > = z
        .object({
            type: RemoveProjectEnvContentHintProjectsResponse200ApplicationJSONResponseBody210Type$.inboundSchema,
            storeId: z.string(),
        })
        .transform((v) => {
            return {
                type: v.type,
                storeId: v.storeId,
            };
        });

    export type Outbound = {
        type: string;
        storeId: string;
    };

    export const outboundSchema: z.ZodType<
        Outbound,
        z.ZodTypeDef,
        RemoveProjectEnvContentHintProjects10
    > = z
        .object({
            type: RemoveProjectEnvContentHintProjectsResponse200ApplicationJSONResponseBody210Type$.outboundSchema,
            storeId: z.string(),
        })
        .transform((v) => {
            return {
                type: v.type,
                storeId: v.storeId,
            };
        });
}

/** @internal */
export namespace RemoveProjectEnvContentHintProjectsResponse200ApplicationJSONResponseBody29Type$ {
    export const inboundSchema = z.nativeEnum(
        RemoveProjectEnvContentHintProjectsResponse200ApplicationJSONResponseBody29Type
    );
    export const outboundSchema = inboundSchema;
}

/** @internal */
export namespace RemoveProjectEnvContentHintProjects9$ {
    export const inboundSchema: z.ZodType<
        RemoveProjectEnvContentHintProjects9,
        z.ZodTypeDef,
        unknown
    > = z
        .object({
            type: RemoveProjectEnvContentHintProjectsResponse200ApplicationJSONResponseBody29Type$.inboundSchema,
            storeId: z.string(),
        })
        .transform((v) => {
            return {
                type: v.type,
                storeId: v.storeId,
            };
        });

    export type Outbound = {
        type: string;
        storeId: string;
    };

    export const outboundSchema: z.ZodType<
        Outbound,
        z.ZodTypeDef,
        RemoveProjectEnvContentHintProjects9
    > = z
        .object({
            type: RemoveProjectEnvContentHintProjectsResponse200ApplicationJSONResponseBody29Type$.outboundSchema,
            storeId: z.string(),
        })
        .transform((v) => {
            return {
                type: v.type,
                storeId: v.storeId,
            };
        });
}

/** @internal */
export namespace RemoveProjectEnvContentHintProjectsResponse200ApplicationJSONResponseBody28Type$ {
    export const inboundSchema = z.nativeEnum(
        RemoveProjectEnvContentHintProjectsResponse200ApplicationJSONResponseBody28Type
    );
    export const outboundSchema = inboundSchema;
}

/** @internal */
export namespace RemoveProjectEnvContentHintProjects8$ {
    export const inboundSchema: z.ZodType<
        RemoveProjectEnvContentHintProjects8,
        z.ZodTypeDef,
        unknown
    > = z
        .object({
            type: RemoveProjectEnvContentHintProjectsResponse200ApplicationJSONResponseBody28Type$.inboundSchema,
            storeId: z.string(),
        })
        .transform((v) => {
            return {
                type: v.type,
                storeId: v.storeId,
            };
        });

    export type Outbound = {
        type: string;
        storeId: string;
    };

    export const outboundSchema: z.ZodType<
        Outbound,
        z.ZodTypeDef,
        RemoveProjectEnvContentHintProjects8
    > = z
        .object({
            type: RemoveProjectEnvContentHintProjectsResponse200ApplicationJSONResponseBody28Type$.outboundSchema,
            storeId: z.string(),
        })
        .transform((v) => {
            return {
                type: v.type,
                storeId: v.storeId,
            };
        });
}

/** @internal */
export namespace RemoveProjectEnvContentHintProjectsResponse200ApplicationJSONResponseBody27Type$ {
    export const inboundSchema = z.nativeEnum(
        RemoveProjectEnvContentHintProjectsResponse200ApplicationJSONResponseBody27Type
    );
    export const outboundSchema = inboundSchema;
}

/** @internal */
export namespace RemoveProjectEnvContentHintProjects7$ {
    export const inboundSchema: z.ZodType<
        RemoveProjectEnvContentHintProjects7,
        z.ZodTypeDef,
        unknown
    > = z
        .object({
            type: RemoveProjectEnvContentHintProjectsResponse200ApplicationJSONResponseBody27Type$.inboundSchema,
            storeId: z.string(),
        })
        .transform((v) => {
            return {
                type: v.type,
                storeId: v.storeId,
            };
        });

    export type Outbound = {
        type: string;
        storeId: string;
    };

    export const outboundSchema: z.ZodType<
        Outbound,
        z.ZodTypeDef,
        RemoveProjectEnvContentHintProjects7
    > = z
        .object({
            type: RemoveProjectEnvContentHintProjectsResponse200ApplicationJSONResponseBody27Type$.outboundSchema,
            storeId: z.string(),
        })
        .transform((v) => {
            return {
                type: v.type,
                storeId: v.storeId,
            };
        });
}

/** @internal */
export namespace RemoveProjectEnvContentHintProjectsResponse200ApplicationJSONResponseBody26Type$ {
    export const inboundSchema = z.nativeEnum(
        RemoveProjectEnvContentHintProjectsResponse200ApplicationJSONResponseBody26Type
    );
    export const outboundSchema = inboundSchema;
}

/** @internal */
export namespace RemoveProjectEnvContentHintProjects6$ {
    export const inboundSchema: z.ZodType<
        RemoveProjectEnvContentHintProjects6,
        z.ZodTypeDef,
        unknown
    > = z
        .object({
            type: RemoveProjectEnvContentHintProjectsResponse200ApplicationJSONResponseBody26Type$.inboundSchema,
            storeId: z.string(),
        })
        .transform((v) => {
            return {
                type: v.type,
                storeId: v.storeId,
            };
        });

    export type Outbound = {
        type: string;
        storeId: string;
    };

    export const outboundSchema: z.ZodType<
        Outbound,
        z.ZodTypeDef,
        RemoveProjectEnvContentHintProjects6
    > = z
        .object({
            type: RemoveProjectEnvContentHintProjectsResponse200ApplicationJSONResponseBody26Type$.outboundSchema,
            storeId: z.string(),
        })
        .transform((v) => {
            return {
                type: v.type,
                storeId: v.storeId,
            };
        });
}

/** @internal */
export namespace RemoveProjectEnvContentHintProjectsResponse200ApplicationJSONResponseBody25Type$ {
    export const inboundSchema = z.nativeEnum(
        RemoveProjectEnvContentHintProjectsResponse200ApplicationJSONResponseBody25Type
    );
    export const outboundSchema = inboundSchema;
}

/** @internal */
export namespace RemoveProjectEnvContentHintProjects5$ {
    export const inboundSchema: z.ZodType<
        RemoveProjectEnvContentHintProjects5,
        z.ZodTypeDef,
        unknown
    > = z
        .object({
            type: RemoveProjectEnvContentHintProjectsResponse200ApplicationJSONResponseBody25Type$.inboundSchema,
            storeId: z.string(),
        })
        .transform((v) => {
            return {
                type: v.type,
                storeId: v.storeId,
            };
        });

    export type Outbound = {
        type: string;
        storeId: string;
    };

    export const outboundSchema: z.ZodType<
        Outbound,
        z.ZodTypeDef,
        RemoveProjectEnvContentHintProjects5
    > = z
        .object({
            type: RemoveProjectEnvContentHintProjectsResponse200ApplicationJSONResponseBody25Type$.outboundSchema,
            storeId: z.string(),
        })
        .transform((v) => {
            return {
                type: v.type,
                storeId: v.storeId,
            };
        });
}

/** @internal */
export namespace RemoveProjectEnvContentHintProjectsResponse200ApplicationJSONResponseBody24Type$ {
    export const inboundSchema = z.nativeEnum(
        RemoveProjectEnvContentHintProjectsResponse200ApplicationJSONResponseBody24Type
    );
    export const outboundSchema = inboundSchema;
}

/** @internal */
export namespace RemoveProjectEnvContentHintProjects4$ {
    export const inboundSchema: z.ZodType<
        RemoveProjectEnvContentHintProjects4,
        z.ZodTypeDef,
        unknown
    > = z
        .object({
            type: RemoveProjectEnvContentHintProjectsResponse200ApplicationJSONResponseBody24Type$.inboundSchema,
            storeId: z.string(),
        })
        .transform((v) => {
            return {
                type: v.type,
                storeId: v.storeId,
            };
        });

    export type Outbound = {
        type: string;
        storeId: string;
    };

    export const outboundSchema: z.ZodType<
        Outbound,
        z.ZodTypeDef,
        RemoveProjectEnvContentHintProjects4
    > = z
        .object({
            type: RemoveProjectEnvContentHintProjectsResponse200ApplicationJSONResponseBody24Type$.outboundSchema,
            storeId: z.string(),
        })
        .transform((v) => {
            return {
                type: v.type,
                storeId: v.storeId,
            };
        });
}

/** @internal */
export namespace RemoveProjectEnvContentHintProjectsResponse200ApplicationJSONResponseBody23Type$ {
    export const inboundSchema = z.nativeEnum(
        RemoveProjectEnvContentHintProjectsResponse200ApplicationJSONResponseBody23Type
    );
    export const outboundSchema = inboundSchema;
}

/** @internal */
export namespace RemoveProjectEnvContentHintProjects3$ {
    export const inboundSchema: z.ZodType<
        RemoveProjectEnvContentHintProjects3,
        z.ZodTypeDef,
        unknown
    > = z
        .object({
            type: RemoveProjectEnvContentHintProjectsResponse200ApplicationJSONResponseBody23Type$.inboundSchema,
            storeId: z.string(),
        })
        .transform((v) => {
            return {
                type: v.type,
                storeId: v.storeId,
            };
        });

    export type Outbound = {
        type: string;
        storeId: string;
    };

    export const outboundSchema: z.ZodType<
        Outbound,
        z.ZodTypeDef,
        RemoveProjectEnvContentHintProjects3
    > = z
        .object({
            type: RemoveProjectEnvContentHintProjectsResponse200ApplicationJSONResponseBody23Type$.outboundSchema,
            storeId: z.string(),
        })
        .transform((v) => {
            return {
                type: v.type,
                storeId: v.storeId,
            };
        });
}

/** @internal */
export namespace RemoveProjectEnvContentHintProjectsResponse200ApplicationJSONResponseBody22Type$ {
    export const inboundSchema = z.nativeEnum(
        RemoveProjectEnvContentHintProjectsResponse200ApplicationJSONResponseBody22Type
    );
    export const outboundSchema = inboundSchema;
}

/** @internal */
export namespace RemoveProjectEnvContentHintProjects2$ {
    export const inboundSchema: z.ZodType<
        RemoveProjectEnvContentHintProjects2,
        z.ZodTypeDef,
        unknown
    > = z
        .object({
            type: RemoveProjectEnvContentHintProjectsResponse200ApplicationJSONResponseBody22Type$.inboundSchema,
            storeId: z.string(),
        })
        .transform((v) => {
            return {
                type: v.type,
                storeId: v.storeId,
            };
        });

    export type Outbound = {
        type: string;
        storeId: string;
    };

    export const outboundSchema: z.ZodType<
        Outbound,
        z.ZodTypeDef,
        RemoveProjectEnvContentHintProjects2
    > = z
        .object({
            type: RemoveProjectEnvContentHintProjectsResponse200ApplicationJSONResponseBody22Type$.outboundSchema,
            storeId: z.string(),
        })
        .transform((v) => {
            return {
                type: v.type,
                storeId: v.storeId,
            };
        });
}

/** @internal */
export namespace RemoveProjectEnvContentHintProjectsResponse200ApplicationJSONResponseBody2Type$ {
    export const inboundSchema = z.nativeEnum(
        RemoveProjectEnvContentHintProjectsResponse200ApplicationJSONResponseBody2Type
    );
    export const outboundSchema = inboundSchema;
}

/** @internal */
export namespace RemoveProjectEnvContentHintProjects1$ {
    export const inboundSchema: z.ZodType<
        RemoveProjectEnvContentHintProjects1,
        z.ZodTypeDef,
        unknown
    > = z
        .object({
            type: RemoveProjectEnvContentHintProjectsResponse200ApplicationJSONResponseBody2Type$.inboundSchema,
            storeId: z.string(),
        })
        .transform((v) => {
            return {
                type: v.type,
                storeId: v.storeId,
            };
        });

    export type Outbound = {
        type: string;
        storeId: string;
    };

    export const outboundSchema: z.ZodType<
        Outbound,
        z.ZodTypeDef,
        RemoveProjectEnvContentHintProjects1
    > = z
        .object({
            type: RemoveProjectEnvContentHintProjectsResponse200ApplicationJSONResponseBody2Type$.outboundSchema,
            storeId: z.string(),
        })
        .transform((v) => {
            return {
                type: v.type,
                storeId: v.storeId,
            };
        });
}

/** @internal */
export namespace RemoveProjectEnvResponseBodyProjectsContentHint$ {
    export const inboundSchema: z.ZodType<
        RemoveProjectEnvResponseBodyProjectsContentHint,
        z.ZodTypeDef,
        unknown
    > = z.union([
        z.lazy(() => RemoveProjectEnvContentHintProjects1$.inboundSchema),
        z.lazy(() => RemoveProjectEnvContentHintProjects2$.inboundSchema),
        z.lazy(() => RemoveProjectEnvContentHintProjects3$.inboundSchema),
        z.lazy(() => RemoveProjectEnvContentHintProjects4$.inboundSchema),
        z.lazy(() => RemoveProjectEnvContentHintProjects5$.inboundSchema),
        z.lazy(() => RemoveProjectEnvContentHintProjects6$.inboundSchema),
        z.lazy(() => RemoveProjectEnvContentHintProjects7$.inboundSchema),
        z.lazy(() => RemoveProjectEnvContentHintProjects8$.inboundSchema),
        z.lazy(() => RemoveProjectEnvContentHintProjects9$.inboundSchema),
        z.lazy(() => RemoveProjectEnvContentHintProjects10$.inboundSchema),
        z.lazy(() => RemoveProjectEnvContentHintProjects11$.inboundSchema),
        z.lazy(() => RemoveProjectEnvContentHintProjects12$.inboundSchema),
        z.lazy(() => RemoveProjectEnvContentHintProjects13$.inboundSchema),
        z.lazy(() => RemoveProjectEnvContentHintProjects14$.inboundSchema),
    ]);

    export type Outbound =
        | RemoveProjectEnvContentHintProjects1$.Outbound
        | RemoveProjectEnvContentHintProjects2$.Outbound
        | RemoveProjectEnvContentHintProjects3$.Outbound
        | RemoveProjectEnvContentHintProjects4$.Outbound
        | RemoveProjectEnvContentHintProjects5$.Outbound
        | RemoveProjectEnvContentHintProjects6$.Outbound
        | RemoveProjectEnvContentHintProjects7$.Outbound
        | RemoveProjectEnvContentHintProjects8$.Outbound
        | RemoveProjectEnvContentHintProjects9$.Outbound
        | RemoveProjectEnvContentHintProjects10$.Outbound
        | RemoveProjectEnvContentHintProjects11$.Outbound
        | RemoveProjectEnvContentHintProjects12$.Outbound
        | RemoveProjectEnvContentHintProjects13$.Outbound
        | RemoveProjectEnvContentHintProjects14$.Outbound;
    export const outboundSchema: z.ZodType<
        Outbound,
        z.ZodTypeDef,
        RemoveProjectEnvResponseBodyProjectsContentHint
    > = z.union([
        z.lazy(() => RemoveProjectEnvContentHintProjects1$.outboundSchema),
        z.lazy(() => RemoveProjectEnvContentHintProjects2$.outboundSchema),
        z.lazy(() => RemoveProjectEnvContentHintProjects3$.outboundSchema),
        z.lazy(() => RemoveProjectEnvContentHintProjects4$.outboundSchema),
        z.lazy(() => RemoveProjectEnvContentHintProjects5$.outboundSchema),
        z.lazy(() => RemoveProjectEnvContentHintProjects6$.outboundSchema),
        z.lazy(() => RemoveProjectEnvContentHintProjects7$.outboundSchema),
        z.lazy(() => RemoveProjectEnvContentHintProjects8$.outboundSchema),
        z.lazy(() => RemoveProjectEnvContentHintProjects9$.outboundSchema),
        z.lazy(() => RemoveProjectEnvContentHintProjects10$.outboundSchema),
        z.lazy(() => RemoveProjectEnvContentHintProjects11$.outboundSchema),
        z.lazy(() => RemoveProjectEnvContentHintProjects12$.outboundSchema),
        z.lazy(() => RemoveProjectEnvContentHintProjects13$.outboundSchema),
        z.lazy(() => RemoveProjectEnvContentHintProjects14$.outboundSchema),
    ]);
}

/** @internal */
export namespace RemoveProjectEnvResponseBodyProjectsResponse200Type$ {
    export const inboundSchema = z.nativeEnum(RemoveProjectEnvResponseBodyProjectsResponse200Type);
    export const outboundSchema = inboundSchema;
}

/** @internal */
export namespace RemoveProjectEnvResponseBodyProjectsInternalContentHint$ {
    export const inboundSchema: z.ZodType<
        RemoveProjectEnvResponseBodyProjectsInternalContentHint,
        z.ZodTypeDef,
        unknown
    > = z
        .object({
            type: RemoveProjectEnvResponseBodyProjectsResponse200Type$.inboundSchema,
            encryptedValue: z.string(),
        })
        .transform((v) => {
            return {
                type: v.type,
                encryptedValue: v.encryptedValue,
            };
        });

    export type Outbound = {
        type: string;
        encryptedValue: string;
    };

    export const outboundSchema: z.ZodType<
        Outbound,
        z.ZodTypeDef,
        RemoveProjectEnvResponseBodyProjectsInternalContentHint
    > = z
        .object({
            type: RemoveProjectEnvResponseBodyProjectsResponse200Type$.outboundSchema,
            encryptedValue: z.string(),
        })
        .transform((v) => {
            return {
                type: v.type,
                encryptedValue: v.encryptedValue,
            };
        });
}

/** @internal */
export namespace RemoveProjectEnvResponseBody2$ {
    export const inboundSchema: z.ZodType<RemoveProjectEnvResponseBody2, z.ZodTypeDef, unknown> = z
        .object({
            system: z.boolean().optional(),
            target: z
                .union([
                    z.array(RemoveProjectEnvTargetProjects1$.inboundSchema),
                    RemoveProjectEnvTargetProjects2$.inboundSchema,
                ])
                .optional(),
            type: RemoveProjectEnvResponseBodyProjectsType$.inboundSchema,
            id: z.string().optional(),
            key: z.string(),
            value: z.string(),
            configurationId: z.nullable(z.string()).optional(),
            createdAt: z.number().optional(),
            updatedAt: z.number().optional(),
            createdBy: z.nullable(z.string()).optional(),
            updatedBy: z.nullable(z.string()).optional(),
            gitBranch: z.string().optional(),
            edgeConfigId: z.nullable(z.string()).optional(),
            edgeConfigTokenId: z.nullable(z.string()).optional(),
            contentHint: z
                .nullable(
                    z.union([
                        z.lazy(() => RemoveProjectEnvContentHintProjects1$.inboundSchema),
                        z.lazy(() => RemoveProjectEnvContentHintProjects2$.inboundSchema),
                        z.lazy(() => RemoveProjectEnvContentHintProjects3$.inboundSchema),
                        z.lazy(() => RemoveProjectEnvContentHintProjects4$.inboundSchema),
                        z.lazy(() => RemoveProjectEnvContentHintProjects5$.inboundSchema),
                        z.lazy(() => RemoveProjectEnvContentHintProjects6$.inboundSchema),
                        z.lazy(() => RemoveProjectEnvContentHintProjects7$.inboundSchema),
                        z.lazy(() => RemoveProjectEnvContentHintProjects8$.inboundSchema),
                        z.lazy(() => RemoveProjectEnvContentHintProjects9$.inboundSchema),
                        z.lazy(() => RemoveProjectEnvContentHintProjects10$.inboundSchema),
                        z.lazy(() => RemoveProjectEnvContentHintProjects11$.inboundSchema),
                        z.lazy(() => RemoveProjectEnvContentHintProjects12$.inboundSchema),
                        z.lazy(() => RemoveProjectEnvContentHintProjects13$.inboundSchema),
                        z.lazy(() => RemoveProjectEnvContentHintProjects14$.inboundSchema),
                    ])
                )
                .optional(),
            internalContentHint: z
                .nullable(
                    z.lazy(
                        () => RemoveProjectEnvResponseBodyProjectsInternalContentHint$.inboundSchema
                    )
                )
                .optional(),
            decrypted: z.boolean().optional(),
            comment: z.string().optional(),
            customEnvironmentId: z.string().optional(),
        })
        .transform((v) => {
            return {
                ...(v.system === undefined ? null : { system: v.system }),
                ...(v.target === undefined ? null : { target: v.target }),
                type: v.type,
                ...(v.id === undefined ? null : { id: v.id }),
                key: v.key,
                value: v.value,
                ...(v.configurationId === undefined
                    ? null
                    : { configurationId: v.configurationId }),
                ...(v.createdAt === undefined ? null : { createdAt: v.createdAt }),
                ...(v.updatedAt === undefined ? null : { updatedAt: v.updatedAt }),
                ...(v.createdBy === undefined ? null : { createdBy: v.createdBy }),
                ...(v.updatedBy === undefined ? null : { updatedBy: v.updatedBy }),
                ...(v.gitBranch === undefined ? null : { gitBranch: v.gitBranch }),
                ...(v.edgeConfigId === undefined ? null : { edgeConfigId: v.edgeConfigId }),
                ...(v.edgeConfigTokenId === undefined
                    ? null
                    : { edgeConfigTokenId: v.edgeConfigTokenId }),
                ...(v.contentHint === undefined ? null : { contentHint: v.contentHint }),
                ...(v.internalContentHint === undefined
                    ? null
                    : { internalContentHint: v.internalContentHint }),
                ...(v.decrypted === undefined ? null : { decrypted: v.decrypted }),
                ...(v.comment === undefined ? null : { comment: v.comment }),
                ...(v.customEnvironmentId === undefined
                    ? null
                    : { customEnvironmentId: v.customEnvironmentId }),
            };
        });

    export type Outbound = {
        system?: boolean | undefined;
        target?: Array<string> | string | undefined;
        type: string;
        id?: string | undefined;
        key: string;
        value: string;
        configurationId?: string | null | undefined;
        createdAt?: number | undefined;
        updatedAt?: number | undefined;
        createdBy?: string | null | undefined;
        updatedBy?: string | null | undefined;
        gitBranch?: string | undefined;
        edgeConfigId?: string | null | undefined;
        edgeConfigTokenId?: string | null | undefined;
        contentHint?:
            | RemoveProjectEnvContentHintProjects1$.Outbound
            | RemoveProjectEnvContentHintProjects2$.Outbound
            | RemoveProjectEnvContentHintProjects3$.Outbound
            | RemoveProjectEnvContentHintProjects4$.Outbound
            | RemoveProjectEnvContentHintProjects5$.Outbound
            | RemoveProjectEnvContentHintProjects6$.Outbound
            | RemoveProjectEnvContentHintProjects7$.Outbound
            | RemoveProjectEnvContentHintProjects8$.Outbound
            | RemoveProjectEnvContentHintProjects9$.Outbound
            | RemoveProjectEnvContentHintProjects10$.Outbound
            | RemoveProjectEnvContentHintProjects11$.Outbound
            | RemoveProjectEnvContentHintProjects12$.Outbound
            | RemoveProjectEnvContentHintProjects13$.Outbound
            | RemoveProjectEnvContentHintProjects14$.Outbound
            | null
            | undefined;
        internalContentHint?:
            | RemoveProjectEnvResponseBodyProjectsInternalContentHint$.Outbound
            | null
            | undefined;
        decrypted?: boolean | undefined;
        comment?: string | undefined;
        customEnvironmentId?: string | undefined;
    };

    export const outboundSchema: z.ZodType<Outbound, z.ZodTypeDef, RemoveProjectEnvResponseBody2> =
        z
            .object({
                system: z.boolean().optional(),
                target: z
                    .union([
                        z.array(RemoveProjectEnvTargetProjects1$.outboundSchema),
                        RemoveProjectEnvTargetProjects2$.outboundSchema,
                    ])
                    .optional(),
                type: RemoveProjectEnvResponseBodyProjectsType$.outboundSchema,
                id: z.string().optional(),
                key: z.string(),
                value: z.string(),
                configurationId: z.nullable(z.string()).optional(),
                createdAt: z.number().optional(),
                updatedAt: z.number().optional(),
                createdBy: z.nullable(z.string()).optional(),
                updatedBy: z.nullable(z.string()).optional(),
                gitBranch: z.string().optional(),
                edgeConfigId: z.nullable(z.string()).optional(),
                edgeConfigTokenId: z.nullable(z.string()).optional(),
                contentHint: z
                    .nullable(
                        z.union([
                            z.lazy(() => RemoveProjectEnvContentHintProjects1$.outboundSchema),
                            z.lazy(() => RemoveProjectEnvContentHintProjects2$.outboundSchema),
                            z.lazy(() => RemoveProjectEnvContentHintProjects3$.outboundSchema),
                            z.lazy(() => RemoveProjectEnvContentHintProjects4$.outboundSchema),
                            z.lazy(() => RemoveProjectEnvContentHintProjects5$.outboundSchema),
                            z.lazy(() => RemoveProjectEnvContentHintProjects6$.outboundSchema),
                            z.lazy(() => RemoveProjectEnvContentHintProjects7$.outboundSchema),
                            z.lazy(() => RemoveProjectEnvContentHintProjects8$.outboundSchema),
                            z.lazy(() => RemoveProjectEnvContentHintProjects9$.outboundSchema),
                            z.lazy(() => RemoveProjectEnvContentHintProjects10$.outboundSchema),
                            z.lazy(() => RemoveProjectEnvContentHintProjects11$.outboundSchema),
                            z.lazy(() => RemoveProjectEnvContentHintProjects12$.outboundSchema),
                            z.lazy(() => RemoveProjectEnvContentHintProjects13$.outboundSchema),
                            z.lazy(() => RemoveProjectEnvContentHintProjects14$.outboundSchema),
                        ])
                    )
                    .optional(),
                internalContentHint: z
                    .nullable(
                        z.lazy(
                            () =>
                                RemoveProjectEnvResponseBodyProjectsInternalContentHint$.outboundSchema
                        )
                    )
                    .optional(),
                decrypted: z.boolean().optional(),
                comment: z.string().optional(),
                customEnvironmentId: z.string().optional(),
            })
            .transform((v) => {
                return {
                    ...(v.system === undefined ? null : { system: v.system }),
                    ...(v.target === undefined ? null : { target: v.target }),
                    type: v.type,
                    ...(v.id === undefined ? null : { id: v.id }),
                    key: v.key,
                    value: v.value,
                    ...(v.configurationId === undefined
                        ? null
                        : { configurationId: v.configurationId }),
                    ...(v.createdAt === undefined ? null : { createdAt: v.createdAt }),
                    ...(v.updatedAt === undefined ? null : { updatedAt: v.updatedAt }),
                    ...(v.createdBy === undefined ? null : { createdBy: v.createdBy }),
                    ...(v.updatedBy === undefined ? null : { updatedBy: v.updatedBy }),
                    ...(v.gitBranch === undefined ? null : { gitBranch: v.gitBranch }),
                    ...(v.edgeConfigId === undefined ? null : { edgeConfigId: v.edgeConfigId }),
                    ...(v.edgeConfigTokenId === undefined
                        ? null
                        : { edgeConfigTokenId: v.edgeConfigTokenId }),
                    ...(v.contentHint === undefined ? null : { contentHint: v.contentHint }),
                    ...(v.internalContentHint === undefined
                        ? null
                        : { internalContentHint: v.internalContentHint }),
                    ...(v.decrypted === undefined ? null : { decrypted: v.decrypted }),
                    ...(v.comment === undefined ? null : { comment: v.comment }),
                    ...(v.customEnvironmentId === undefined
                        ? null
                        : { customEnvironmentId: v.customEnvironmentId }),
                };
            });
}

/** @internal */
export namespace RemoveProjectEnvTarget2$ {
    export const inboundSchema = z.nativeEnum(RemoveProjectEnvTarget2);
    export const outboundSchema = inboundSchema;
}

/** @internal */
export namespace RemoveProjectEnvTarget1$ {
    export const inboundSchema = z.nativeEnum(RemoveProjectEnvTarget1);
    export const outboundSchema = inboundSchema;
}

/** @internal */
export namespace RemoveProjectEnvResponseBodyTarget$ {
    export const inboundSchema: z.ZodType<
        RemoveProjectEnvResponseBodyTarget,
        z.ZodTypeDef,
        unknown
    > = z.union([
        z.array(RemoveProjectEnvTarget1$.inboundSchema),
        RemoveProjectEnvTarget2$.inboundSchema,
    ]);

    export type Outbound = Array<string> | string;
    export const outboundSchema: z.ZodType<
        Outbound,
        z.ZodTypeDef,
        RemoveProjectEnvResponseBodyTarget
    > = z.union([
        z.array(RemoveProjectEnvTarget1$.outboundSchema),
        RemoveProjectEnvTarget2$.outboundSchema,
    ]);
}

/** @internal */
export namespace RemoveProjectEnvResponseBodyType$ {
    export const inboundSchema = z.nativeEnum(RemoveProjectEnvResponseBodyType);
    export const outboundSchema = inboundSchema;
}

/** @internal */
export namespace RemoveProjectEnvContentHintProjectsResponse200ApplicationJSONResponseBody114Type$ {
    export const inboundSchema = z.nativeEnum(
        RemoveProjectEnvContentHintProjectsResponse200ApplicationJSONResponseBody114Type
    );
    export const outboundSchema = inboundSchema;
}

/** @internal */
export namespace RemoveProjectEnvContentHint14$ {
    export const inboundSchema: z.ZodType<RemoveProjectEnvContentHint14, z.ZodTypeDef, unknown> = z
        .object({
            type: RemoveProjectEnvContentHintProjectsResponse200ApplicationJSONResponseBody114Type$.inboundSchema,
            storeId: z.string(),
        })
        .transform((v) => {
            return {
                type: v.type,
                storeId: v.storeId,
            };
        });

    export type Outbound = {
        type: string;
        storeId: string;
    };

    export const outboundSchema: z.ZodType<Outbound, z.ZodTypeDef, RemoveProjectEnvContentHint14> =
        z
            .object({
                type: RemoveProjectEnvContentHintProjectsResponse200ApplicationJSONResponseBody114Type$.outboundSchema,
                storeId: z.string(),
            })
            .transform((v) => {
                return {
                    type: v.type,
                    storeId: v.storeId,
                };
            });
}

/** @internal */
export namespace RemoveProjectEnvContentHintProjectsResponse200ApplicationJSONResponseBody113Type$ {
    export const inboundSchema = z.nativeEnum(
        RemoveProjectEnvContentHintProjectsResponse200ApplicationJSONResponseBody113Type
    );
    export const outboundSchema = inboundSchema;
}

/** @internal */
export namespace RemoveProjectEnvContentHint13$ {
    export const inboundSchema: z.ZodType<RemoveProjectEnvContentHint13, z.ZodTypeDef, unknown> = z
        .object({
            type: RemoveProjectEnvContentHintProjectsResponse200ApplicationJSONResponseBody113Type$.inboundSchema,
            storeId: z.string(),
        })
        .transform((v) => {
            return {
                type: v.type,
                storeId: v.storeId,
            };
        });

    export type Outbound = {
        type: string;
        storeId: string;
    };

    export const outboundSchema: z.ZodType<Outbound, z.ZodTypeDef, RemoveProjectEnvContentHint13> =
        z
            .object({
                type: RemoveProjectEnvContentHintProjectsResponse200ApplicationJSONResponseBody113Type$.outboundSchema,
                storeId: z.string(),
            })
            .transform((v) => {
                return {
                    type: v.type,
                    storeId: v.storeId,
                };
            });
}

/** @internal */
export namespace RemoveProjectEnvContentHintProjectsResponse200ApplicationJSONResponseBody112Type$ {
    export const inboundSchema = z.nativeEnum(
        RemoveProjectEnvContentHintProjectsResponse200ApplicationJSONResponseBody112Type
    );
    export const outboundSchema = inboundSchema;
}

/** @internal */
export namespace RemoveProjectEnvContentHint12$ {
    export const inboundSchema: z.ZodType<RemoveProjectEnvContentHint12, z.ZodTypeDef, unknown> = z
        .object({
            type: RemoveProjectEnvContentHintProjectsResponse200ApplicationJSONResponseBody112Type$.inboundSchema,
            storeId: z.string(),
        })
        .transform((v) => {
            return {
                type: v.type,
                storeId: v.storeId,
            };
        });

    export type Outbound = {
        type: string;
        storeId: string;
    };

    export const outboundSchema: z.ZodType<Outbound, z.ZodTypeDef, RemoveProjectEnvContentHint12> =
        z
            .object({
                type: RemoveProjectEnvContentHintProjectsResponse200ApplicationJSONResponseBody112Type$.outboundSchema,
                storeId: z.string(),
            })
            .transform((v) => {
                return {
                    type: v.type,
                    storeId: v.storeId,
                };
            });
}

/** @internal */
export namespace RemoveProjectEnvContentHintProjectsResponse200ApplicationJSONResponseBody111Type$ {
    export const inboundSchema = z.nativeEnum(
        RemoveProjectEnvContentHintProjectsResponse200ApplicationJSONResponseBody111Type
    );
    export const outboundSchema = inboundSchema;
}

/** @internal */
export namespace RemoveProjectEnvContentHint11$ {
    export const inboundSchema: z.ZodType<RemoveProjectEnvContentHint11, z.ZodTypeDef, unknown> = z
        .object({
            type: RemoveProjectEnvContentHintProjectsResponse200ApplicationJSONResponseBody111Type$.inboundSchema,
            storeId: z.string(),
        })
        .transform((v) => {
            return {
                type: v.type,
                storeId: v.storeId,
            };
        });

    export type Outbound = {
        type: string;
        storeId: string;
    };

    export const outboundSchema: z.ZodType<Outbound, z.ZodTypeDef, RemoveProjectEnvContentHint11> =
        z
            .object({
                type: RemoveProjectEnvContentHintProjectsResponse200ApplicationJSONResponseBody111Type$.outboundSchema,
                storeId: z.string(),
            })
            .transform((v) => {
                return {
                    type: v.type,
                    storeId: v.storeId,
                };
            });
}

/** @internal */
export namespace RemoveProjectEnvContentHintProjectsResponse200ApplicationJSONResponseBody110Type$ {
    export const inboundSchema = z.nativeEnum(
        RemoveProjectEnvContentHintProjectsResponse200ApplicationJSONResponseBody110Type
    );
    export const outboundSchema = inboundSchema;
}

/** @internal */
export namespace RemoveProjectEnvContentHint10$ {
    export const inboundSchema: z.ZodType<RemoveProjectEnvContentHint10, z.ZodTypeDef, unknown> = z
        .object({
            type: RemoveProjectEnvContentHintProjectsResponse200ApplicationJSONResponseBody110Type$.inboundSchema,
            storeId: z.string(),
        })
        .transform((v) => {
            return {
                type: v.type,
                storeId: v.storeId,
            };
        });

    export type Outbound = {
        type: string;
        storeId: string;
    };

    export const outboundSchema: z.ZodType<Outbound, z.ZodTypeDef, RemoveProjectEnvContentHint10> =
        z
            .object({
                type: RemoveProjectEnvContentHintProjectsResponse200ApplicationJSONResponseBody110Type$.outboundSchema,
                storeId: z.string(),
            })
            .transform((v) => {
                return {
                    type: v.type,
                    storeId: v.storeId,
                };
            });
}

/** @internal */
export namespace RemoveProjectEnvContentHintProjectsResponse200ApplicationJSONResponseBody19Type$ {
    export const inboundSchema = z.nativeEnum(
        RemoveProjectEnvContentHintProjectsResponse200ApplicationJSONResponseBody19Type
    );
    export const outboundSchema = inboundSchema;
}

/** @internal */
export namespace RemoveProjectEnvContentHint9$ {
    export const inboundSchema: z.ZodType<RemoveProjectEnvContentHint9, z.ZodTypeDef, unknown> = z
        .object({
            type: RemoveProjectEnvContentHintProjectsResponse200ApplicationJSONResponseBody19Type$.inboundSchema,
            storeId: z.string(),
        })
        .transform((v) => {
            return {
                type: v.type,
                storeId: v.storeId,
            };
        });

    export type Outbound = {
        type: string;
        storeId: string;
    };

    export const outboundSchema: z.ZodType<Outbound, z.ZodTypeDef, RemoveProjectEnvContentHint9> = z
        .object({
            type: RemoveProjectEnvContentHintProjectsResponse200ApplicationJSONResponseBody19Type$.outboundSchema,
            storeId: z.string(),
        })
        .transform((v) => {
            return {
                type: v.type,
                storeId: v.storeId,
            };
        });
}

/** @internal */
export namespace RemoveProjectEnvContentHintProjectsResponse200ApplicationJSONResponseBody18Type$ {
    export const inboundSchema = z.nativeEnum(
        RemoveProjectEnvContentHintProjectsResponse200ApplicationJSONResponseBody18Type
    );
    export const outboundSchema = inboundSchema;
}

/** @internal */
export namespace RemoveProjectEnvContentHint8$ {
    export const inboundSchema: z.ZodType<RemoveProjectEnvContentHint8, z.ZodTypeDef, unknown> = z
        .object({
            type: RemoveProjectEnvContentHintProjectsResponse200ApplicationJSONResponseBody18Type$.inboundSchema,
            storeId: z.string(),
        })
        .transform((v) => {
            return {
                type: v.type,
                storeId: v.storeId,
            };
        });

    export type Outbound = {
        type: string;
        storeId: string;
    };

    export const outboundSchema: z.ZodType<Outbound, z.ZodTypeDef, RemoveProjectEnvContentHint8> = z
        .object({
            type: RemoveProjectEnvContentHintProjectsResponse200ApplicationJSONResponseBody18Type$.outboundSchema,
            storeId: z.string(),
        })
        .transform((v) => {
            return {
                type: v.type,
                storeId: v.storeId,
            };
        });
}

/** @internal */
export namespace RemoveProjectEnvContentHintProjectsResponse200ApplicationJSONResponseBody1Type$ {
    export const inboundSchema = z.nativeEnum(
        RemoveProjectEnvContentHintProjectsResponse200ApplicationJSONResponseBody1Type
    );
    export const outboundSchema = inboundSchema;
}

/** @internal */
export namespace RemoveProjectEnvContentHint7$ {
    export const inboundSchema: z.ZodType<RemoveProjectEnvContentHint7, z.ZodTypeDef, unknown> = z
        .object({
            type: RemoveProjectEnvContentHintProjectsResponse200ApplicationJSONResponseBody1Type$.inboundSchema,
            storeId: z.string(),
        })
        .transform((v) => {
            return {
                type: v.type,
                storeId: v.storeId,
            };
        });

    export type Outbound = {
        type: string;
        storeId: string;
    };

    export const outboundSchema: z.ZodType<Outbound, z.ZodTypeDef, RemoveProjectEnvContentHint7> = z
        .object({
            type: RemoveProjectEnvContentHintProjectsResponse200ApplicationJSONResponseBody1Type$.outboundSchema,
            storeId: z.string(),
        })
        .transform((v) => {
            return {
                type: v.type,
                storeId: v.storeId,
            };
        });
}

/** @internal */
export namespace RemoveProjectEnvContentHintProjectsResponse200ApplicationJSONResponseBodyType$ {
    export const inboundSchema = z.nativeEnum(
        RemoveProjectEnvContentHintProjectsResponse200ApplicationJSONResponseBodyType
    );
    export const outboundSchema = inboundSchema;
}

/** @internal */
export namespace RemoveProjectEnvContentHint6$ {
    export const inboundSchema: z.ZodType<RemoveProjectEnvContentHint6, z.ZodTypeDef, unknown> = z
        .object({
            type: RemoveProjectEnvContentHintProjectsResponse200ApplicationJSONResponseBodyType$.inboundSchema,
            storeId: z.string(),
        })
        .transform((v) => {
            return {
                type: v.type,
                storeId: v.storeId,
            };
        });

    export type Outbound = {
        type: string;
        storeId: string;
    };

    export const outboundSchema: z.ZodType<Outbound, z.ZodTypeDef, RemoveProjectEnvContentHint6> = z
        .object({
            type: RemoveProjectEnvContentHintProjectsResponse200ApplicationJSONResponseBodyType$.outboundSchema,
            storeId: z.string(),
        })
        .transform((v) => {
            return {
                type: v.type,
                storeId: v.storeId,
            };
        });
}

/** @internal */
export namespace RemoveProjectEnvContentHintProjectsResponse200ApplicationJSONType$ {
    export const inboundSchema = z.nativeEnum(
        RemoveProjectEnvContentHintProjectsResponse200ApplicationJSONType
    );
    export const outboundSchema = inboundSchema;
}

/** @internal */
export namespace RemoveProjectEnvContentHint5$ {
    export const inboundSchema: z.ZodType<RemoveProjectEnvContentHint5, z.ZodTypeDef, unknown> = z
        .object({
            type: RemoveProjectEnvContentHintProjectsResponse200ApplicationJSONType$.inboundSchema,
            storeId: z.string(),
        })
        .transform((v) => {
            return {
                type: v.type,
                storeId: v.storeId,
            };
        });

    export type Outbound = {
        type: string;
        storeId: string;
    };

    export const outboundSchema: z.ZodType<Outbound, z.ZodTypeDef, RemoveProjectEnvContentHint5> = z
        .object({
            type: RemoveProjectEnvContentHintProjectsResponse200ApplicationJSONType$.outboundSchema,
            storeId: z.string(),
        })
        .transform((v) => {
            return {
                type: v.type,
                storeId: v.storeId,
            };
        });
}

/** @internal */
export namespace RemoveProjectEnvContentHintProjectsResponse200Type$ {
    export const inboundSchema = z.nativeEnum(RemoveProjectEnvContentHintProjectsResponse200Type);
    export const outboundSchema = inboundSchema;
}

/** @internal */
export namespace RemoveProjectEnvContentHint4$ {
    export const inboundSchema: z.ZodType<RemoveProjectEnvContentHint4, z.ZodTypeDef, unknown> = z
        .object({
            type: RemoveProjectEnvContentHintProjectsResponse200Type$.inboundSchema,
            storeId: z.string(),
        })
        .transform((v) => {
            return {
                type: v.type,
                storeId: v.storeId,
            };
        });

    export type Outbound = {
        type: string;
        storeId: string;
    };

    export const outboundSchema: z.ZodType<Outbound, z.ZodTypeDef, RemoveProjectEnvContentHint4> = z
        .object({
            type: RemoveProjectEnvContentHintProjectsResponse200Type$.outboundSchema,
            storeId: z.string(),
        })
        .transform((v) => {
            return {
                type: v.type,
                storeId: v.storeId,
            };
        });
}

/** @internal */
export namespace RemoveProjectEnvContentHintProjectsResponseType$ {
    export const inboundSchema = z.nativeEnum(RemoveProjectEnvContentHintProjectsResponseType);
    export const outboundSchema = inboundSchema;
}

/** @internal */
export namespace RemoveProjectEnvContentHint3$ {
    export const inboundSchema: z.ZodType<RemoveProjectEnvContentHint3, z.ZodTypeDef, unknown> = z
        .object({
            type: RemoveProjectEnvContentHintProjectsResponseType$.inboundSchema,
            storeId: z.string(),
        })
        .transform((v) => {
            return {
                type: v.type,
                storeId: v.storeId,
            };
        });

    export type Outbound = {
        type: string;
        storeId: string;
    };

    export const outboundSchema: z.ZodType<Outbound, z.ZodTypeDef, RemoveProjectEnvContentHint3> = z
        .object({
            type: RemoveProjectEnvContentHintProjectsResponseType$.outboundSchema,
            storeId: z.string(),
        })
        .transform((v) => {
            return {
                type: v.type,
                storeId: v.storeId,
            };
        });
}

/** @internal */
export namespace RemoveProjectEnvContentHintProjectsType$ {
    export const inboundSchema = z.nativeEnum(RemoveProjectEnvContentHintProjectsType);
    export const outboundSchema = inboundSchema;
}

/** @internal */
export namespace RemoveProjectEnvContentHint2$ {
    export const inboundSchema: z.ZodType<RemoveProjectEnvContentHint2, z.ZodTypeDef, unknown> = z
        .object({
            type: RemoveProjectEnvContentHintProjectsType$.inboundSchema,
            storeId: z.string(),
        })
        .transform((v) => {
            return {
                type: v.type,
                storeId: v.storeId,
            };
        });

    export type Outbound = {
        type: string;
        storeId: string;
    };

    export const outboundSchema: z.ZodType<Outbound, z.ZodTypeDef, RemoveProjectEnvContentHint2> = z
        .object({
            type: RemoveProjectEnvContentHintProjectsType$.outboundSchema,
            storeId: z.string(),
        })
        .transform((v) => {
            return {
                type: v.type,
                storeId: v.storeId,
            };
        });
}

/** @internal */
export namespace RemoveProjectEnvContentHintType$ {
    export const inboundSchema = z.nativeEnum(RemoveProjectEnvContentHintType);
    export const outboundSchema = inboundSchema;
}

/** @internal */
export namespace RemoveProjectEnvContentHint1$ {
    export const inboundSchema: z.ZodType<RemoveProjectEnvContentHint1, z.ZodTypeDef, unknown> = z
        .object({
            type: RemoveProjectEnvContentHintType$.inboundSchema,
            storeId: z.string(),
        })
        .transform((v) => {
            return {
                type: v.type,
                storeId: v.storeId,
            };
        });

    export type Outbound = {
        type: string;
        storeId: string;
    };

    export const outboundSchema: z.ZodType<Outbound, z.ZodTypeDef, RemoveProjectEnvContentHint1> = z
        .object({
            type: RemoveProjectEnvContentHintType$.outboundSchema,
            storeId: z.string(),
        })
        .transform((v) => {
            return {
                type: v.type,
                storeId: v.storeId,
            };
        });
}

/** @internal */
export namespace RemoveProjectEnvResponseBodyContentHint$ {
    export const inboundSchema: z.ZodType<
        RemoveProjectEnvResponseBodyContentHint,
        z.ZodTypeDef,
        unknown
    > = z.union([
        z.lazy(() => RemoveProjectEnvContentHint1$.inboundSchema),
        z.lazy(() => RemoveProjectEnvContentHint2$.inboundSchema),
        z.lazy(() => RemoveProjectEnvContentHint3$.inboundSchema),
        z.lazy(() => RemoveProjectEnvContentHint4$.inboundSchema),
        z.lazy(() => RemoveProjectEnvContentHint5$.inboundSchema),
        z.lazy(() => RemoveProjectEnvContentHint6$.inboundSchema),
        z.lazy(() => RemoveProjectEnvContentHint7$.inboundSchema),
        z.lazy(() => RemoveProjectEnvContentHint8$.inboundSchema),
        z.lazy(() => RemoveProjectEnvContentHint9$.inboundSchema),
        z.lazy(() => RemoveProjectEnvContentHint10$.inboundSchema),
        z.lazy(() => RemoveProjectEnvContentHint11$.inboundSchema),
        z.lazy(() => RemoveProjectEnvContentHint12$.inboundSchema),
        z.lazy(() => RemoveProjectEnvContentHint13$.inboundSchema),
        z.lazy(() => RemoveProjectEnvContentHint14$.inboundSchema),
    ]);

    export type Outbound =
        | RemoveProjectEnvContentHint1$.Outbound
        | RemoveProjectEnvContentHint2$.Outbound
        | RemoveProjectEnvContentHint3$.Outbound
        | RemoveProjectEnvContentHint4$.Outbound
        | RemoveProjectEnvContentHint5$.Outbound
        | RemoveProjectEnvContentHint6$.Outbound
        | RemoveProjectEnvContentHint7$.Outbound
        | RemoveProjectEnvContentHint8$.Outbound
        | RemoveProjectEnvContentHint9$.Outbound
        | RemoveProjectEnvContentHint10$.Outbound
        | RemoveProjectEnvContentHint11$.Outbound
        | RemoveProjectEnvContentHint12$.Outbound
        | RemoveProjectEnvContentHint13$.Outbound
        | RemoveProjectEnvContentHint14$.Outbound;
    export const outboundSchema: z.ZodType<
        Outbound,
        z.ZodTypeDef,
        RemoveProjectEnvResponseBodyContentHint
    > = z.union([
        z.lazy(() => RemoveProjectEnvContentHint1$.outboundSchema),
        z.lazy(() => RemoveProjectEnvContentHint2$.outboundSchema),
        z.lazy(() => RemoveProjectEnvContentHint3$.outboundSchema),
        z.lazy(() => RemoveProjectEnvContentHint4$.outboundSchema),
        z.lazy(() => RemoveProjectEnvContentHint5$.outboundSchema),
        z.lazy(() => RemoveProjectEnvContentHint6$.outboundSchema),
        z.lazy(() => RemoveProjectEnvContentHint7$.outboundSchema),
        z.lazy(() => RemoveProjectEnvContentHint8$.outboundSchema),
        z.lazy(() => RemoveProjectEnvContentHint9$.outboundSchema),
        z.lazy(() => RemoveProjectEnvContentHint10$.outboundSchema),
        z.lazy(() => RemoveProjectEnvContentHint11$.outboundSchema),
        z.lazy(() => RemoveProjectEnvContentHint12$.outboundSchema),
        z.lazy(() => RemoveProjectEnvContentHint13$.outboundSchema),
        z.lazy(() => RemoveProjectEnvContentHint14$.outboundSchema),
    ]);
}

/** @internal */
export namespace RemoveProjectEnvResponseBodyProjectsResponse200ApplicationJSONType$ {
    export const inboundSchema = z.nativeEnum(
        RemoveProjectEnvResponseBodyProjectsResponse200ApplicationJSONType
    );
    export const outboundSchema = inboundSchema;
}

/** @internal */
export namespace RemoveProjectEnvResponseBodyInternalContentHint$ {
    export const inboundSchema: z.ZodType<
        RemoveProjectEnvResponseBodyInternalContentHint,
        z.ZodTypeDef,
        unknown
    > = z
        .object({
            type: RemoveProjectEnvResponseBodyProjectsResponse200ApplicationJSONType$.inboundSchema,
            encryptedValue: z.string(),
        })
        .transform((v) => {
            return {
                type: v.type,
                encryptedValue: v.encryptedValue,
            };
        });

    export type Outbound = {
        type: string;
        encryptedValue: string;
    };

    export const outboundSchema: z.ZodType<
        Outbound,
        z.ZodTypeDef,
        RemoveProjectEnvResponseBodyInternalContentHint
    > = z
        .object({
            type: RemoveProjectEnvResponseBodyProjectsResponse200ApplicationJSONType$.outboundSchema,
            encryptedValue: z.string(),
        })
        .transform((v) => {
            return {
                type: v.type,
                encryptedValue: v.encryptedValue,
            };
        });
}

/** @internal */
export namespace RemoveProjectEnvResponseBody1$ {
    export const inboundSchema: z.ZodType<RemoveProjectEnvResponseBody1, z.ZodTypeDef, unknown> = z
        .object({
            target: z
                .union([
                    z.array(RemoveProjectEnvTarget1$.inboundSchema),
                    RemoveProjectEnvTarget2$.inboundSchema,
                ])
                .optional(),
            type: RemoveProjectEnvResponseBodyType$.inboundSchema,
            id: z.string().optional(),
            key: z.string(),
            value: z.string(),
            configurationId: z.nullable(z.string()).optional(),
            createdAt: z.number().optional(),
            updatedAt: z.number().optional(),
            createdBy: z.nullable(z.string()).optional(),
            updatedBy: z.nullable(z.string()).optional(),
            gitBranch: z.string().optional(),
            edgeConfigId: z.nullable(z.string()).optional(),
            edgeConfigTokenId: z.nullable(z.string()).optional(),
            contentHint: z
                .nullable(
                    z.union([
                        z.lazy(() => RemoveProjectEnvContentHint1$.inboundSchema),
                        z.lazy(() => RemoveProjectEnvContentHint2$.inboundSchema),
                        z.lazy(() => RemoveProjectEnvContentHint3$.inboundSchema),
                        z.lazy(() => RemoveProjectEnvContentHint4$.inboundSchema),
                        z.lazy(() => RemoveProjectEnvContentHint5$.inboundSchema),
                        z.lazy(() => RemoveProjectEnvContentHint6$.inboundSchema),
                        z.lazy(() => RemoveProjectEnvContentHint7$.inboundSchema),
                        z.lazy(() => RemoveProjectEnvContentHint8$.inboundSchema),
                        z.lazy(() => RemoveProjectEnvContentHint9$.inboundSchema),
                        z.lazy(() => RemoveProjectEnvContentHint10$.inboundSchema),
                        z.lazy(() => RemoveProjectEnvContentHint11$.inboundSchema),
                        z.lazy(() => RemoveProjectEnvContentHint12$.inboundSchema),
                        z.lazy(() => RemoveProjectEnvContentHint13$.inboundSchema),
                        z.lazy(() => RemoveProjectEnvContentHint14$.inboundSchema),
                    ])
                )
                .optional(),
            internalContentHint: z
                .nullable(
                    z.lazy(() => RemoveProjectEnvResponseBodyInternalContentHint$.inboundSchema)
                )
                .optional(),
            decrypted: z.boolean().optional(),
            comment: z.string().optional(),
            customEnvironmentId: z.string().optional(),
        })
        .transform((v) => {
            return {
                ...(v.target === undefined ? null : { target: v.target }),
                type: v.type,
                ...(v.id === undefined ? null : { id: v.id }),
                key: v.key,
                value: v.value,
                ...(v.configurationId === undefined
                    ? null
                    : { configurationId: v.configurationId }),
                ...(v.createdAt === undefined ? null : { createdAt: v.createdAt }),
                ...(v.updatedAt === undefined ? null : { updatedAt: v.updatedAt }),
                ...(v.createdBy === undefined ? null : { createdBy: v.createdBy }),
                ...(v.updatedBy === undefined ? null : { updatedBy: v.updatedBy }),
                ...(v.gitBranch === undefined ? null : { gitBranch: v.gitBranch }),
                ...(v.edgeConfigId === undefined ? null : { edgeConfigId: v.edgeConfigId }),
                ...(v.edgeConfigTokenId === undefined
                    ? null
                    : { edgeConfigTokenId: v.edgeConfigTokenId }),
                ...(v.contentHint === undefined ? null : { contentHint: v.contentHint }),
                ...(v.internalContentHint === undefined
                    ? null
                    : { internalContentHint: v.internalContentHint }),
                ...(v.decrypted === undefined ? null : { decrypted: v.decrypted }),
                ...(v.comment === undefined ? null : { comment: v.comment }),
                ...(v.customEnvironmentId === undefined
                    ? null
                    : { customEnvironmentId: v.customEnvironmentId }),
            };
        });

    export type Outbound = {
        target?: Array<string> | string | undefined;
        type: string;
        id?: string | undefined;
        key: string;
        value: string;
        configurationId?: string | null | undefined;
        createdAt?: number | undefined;
        updatedAt?: number | undefined;
        createdBy?: string | null | undefined;
        updatedBy?: string | null | undefined;
        gitBranch?: string | undefined;
        edgeConfigId?: string | null | undefined;
        edgeConfigTokenId?: string | null | undefined;
        contentHint?:
            | RemoveProjectEnvContentHint1$.Outbound
            | RemoveProjectEnvContentHint2$.Outbound
            | RemoveProjectEnvContentHint3$.Outbound
            | RemoveProjectEnvContentHint4$.Outbound
            | RemoveProjectEnvContentHint5$.Outbound
            | RemoveProjectEnvContentHint6$.Outbound
            | RemoveProjectEnvContentHint7$.Outbound
            | RemoveProjectEnvContentHint8$.Outbound
            | RemoveProjectEnvContentHint9$.Outbound
            | RemoveProjectEnvContentHint10$.Outbound
            | RemoveProjectEnvContentHint11$.Outbound
            | RemoveProjectEnvContentHint12$.Outbound
            | RemoveProjectEnvContentHint13$.Outbound
            | RemoveProjectEnvContentHint14$.Outbound
            | null
            | undefined;
        internalContentHint?:
            | RemoveProjectEnvResponseBodyInternalContentHint$.Outbound
            | null
            | undefined;
        decrypted?: boolean | undefined;
        comment?: string | undefined;
        customEnvironmentId?: string | undefined;
    };

    export const outboundSchema: z.ZodType<Outbound, z.ZodTypeDef, RemoveProjectEnvResponseBody1> =
        z
            .object({
                target: z
                    .union([
                        z.array(RemoveProjectEnvTarget1$.outboundSchema),
                        RemoveProjectEnvTarget2$.outboundSchema,
                    ])
                    .optional(),
                type: RemoveProjectEnvResponseBodyType$.outboundSchema,
                id: z.string().optional(),
                key: z.string(),
                value: z.string(),
                configurationId: z.nullable(z.string()).optional(),
                createdAt: z.number().optional(),
                updatedAt: z.number().optional(),
                createdBy: z.nullable(z.string()).optional(),
                updatedBy: z.nullable(z.string()).optional(),
                gitBranch: z.string().optional(),
                edgeConfigId: z.nullable(z.string()).optional(),
                edgeConfigTokenId: z.nullable(z.string()).optional(),
                contentHint: z
                    .nullable(
                        z.union([
                            z.lazy(() => RemoveProjectEnvContentHint1$.outboundSchema),
                            z.lazy(() => RemoveProjectEnvContentHint2$.outboundSchema),
                            z.lazy(() => RemoveProjectEnvContentHint3$.outboundSchema),
                            z.lazy(() => RemoveProjectEnvContentHint4$.outboundSchema),
                            z.lazy(() => RemoveProjectEnvContentHint5$.outboundSchema),
                            z.lazy(() => RemoveProjectEnvContentHint6$.outboundSchema),
                            z.lazy(() => RemoveProjectEnvContentHint7$.outboundSchema),
                            z.lazy(() => RemoveProjectEnvContentHint8$.outboundSchema),
                            z.lazy(() => RemoveProjectEnvContentHint9$.outboundSchema),
                            z.lazy(() => RemoveProjectEnvContentHint10$.outboundSchema),
                            z.lazy(() => RemoveProjectEnvContentHint11$.outboundSchema),
                            z.lazy(() => RemoveProjectEnvContentHint12$.outboundSchema),
                            z.lazy(() => RemoveProjectEnvContentHint13$.outboundSchema),
                            z.lazy(() => RemoveProjectEnvContentHint14$.outboundSchema),
                        ])
                    )
                    .optional(),
                internalContentHint: z
                    .nullable(
                        z.lazy(
                            () => RemoveProjectEnvResponseBodyInternalContentHint$.outboundSchema
                        )
                    )
                    .optional(),
                decrypted: z.boolean().optional(),
                comment: z.string().optional(),
                customEnvironmentId: z.string().optional(),
            })
            .transform((v) => {
                return {
                    ...(v.target === undefined ? null : { target: v.target }),
                    type: v.type,
                    ...(v.id === undefined ? null : { id: v.id }),
                    key: v.key,
                    value: v.value,
                    ...(v.configurationId === undefined
                        ? null
                        : { configurationId: v.configurationId }),
                    ...(v.createdAt === undefined ? null : { createdAt: v.createdAt }),
                    ...(v.updatedAt === undefined ? null : { updatedAt: v.updatedAt }),
                    ...(v.createdBy === undefined ? null : { createdBy: v.createdBy }),
                    ...(v.updatedBy === undefined ? null : { updatedBy: v.updatedBy }),
                    ...(v.gitBranch === undefined ? null : { gitBranch: v.gitBranch }),
                    ...(v.edgeConfigId === undefined ? null : { edgeConfigId: v.edgeConfigId }),
                    ...(v.edgeConfigTokenId === undefined
                        ? null
                        : { edgeConfigTokenId: v.edgeConfigTokenId }),
                    ...(v.contentHint === undefined ? null : { contentHint: v.contentHint }),
                    ...(v.internalContentHint === undefined
                        ? null
                        : { internalContentHint: v.internalContentHint }),
                    ...(v.decrypted === undefined ? null : { decrypted: v.decrypted }),
                    ...(v.comment === undefined ? null : { comment: v.comment }),
                    ...(v.customEnvironmentId === undefined
                        ? null
                        : { customEnvironmentId: v.customEnvironmentId }),
                };
            });
}

/** @internal */
export namespace RemoveProjectEnvResponseBody$ {
    export const inboundSchema: z.ZodType<RemoveProjectEnvResponseBody, z.ZodTypeDef, unknown> =
        z.union([
            z.lazy(() => RemoveProjectEnvResponseBody3$.inboundSchema),
            z.lazy(() => RemoveProjectEnvResponseBody2$.inboundSchema),
            z.array(z.lazy(() => RemoveProjectEnvResponseBody1$.inboundSchema)),
        ]);

    export type Outbound =
        | RemoveProjectEnvResponseBody3$.Outbound
        | RemoveProjectEnvResponseBody2$.Outbound
        | Array<RemoveProjectEnvResponseBody1$.Outbound>;
    export const outboundSchema: z.ZodType<Outbound, z.ZodTypeDef, RemoveProjectEnvResponseBody> =
        z.union([
            z.lazy(() => RemoveProjectEnvResponseBody3$.outboundSchema),
            z.lazy(() => RemoveProjectEnvResponseBody2$.outboundSchema),
            z.array(z.lazy(() => RemoveProjectEnvResponseBody1$.outboundSchema)),
        ]);
}

/** @internal */
export namespace RemoveProjectEnvResponse$ {
    export const inboundSchema: z.ZodType<RemoveProjectEnvResponse, z.ZodTypeDef, unknown> = z
        .object({
            HttpMeta: components.HTTPMetadata$.inboundSchema,
            oneOf: z
                .union([
                    z.lazy(() => RemoveProjectEnvResponseBody3$.inboundSchema),
                    z.lazy(() => RemoveProjectEnvResponseBody2$.inboundSchema),
                    z.array(z.lazy(() => RemoveProjectEnvResponseBody1$.inboundSchema)),
                ])
                .optional(),
        })
        .transform((v) => {
            return {
                httpMeta: v.HttpMeta,
                ...(v.oneOf === undefined ? null : { oneOf: v.oneOf }),
            };
        });

    export type Outbound = {
        HttpMeta: components.HTTPMetadata$.Outbound;
        oneOf?:
            | RemoveProjectEnvResponseBody3$.Outbound
            | RemoveProjectEnvResponseBody2$.Outbound
            | Array<RemoveProjectEnvResponseBody1$.Outbound>
            | undefined;
    };

    export const outboundSchema: z.ZodType<Outbound, z.ZodTypeDef, RemoveProjectEnvResponse> = z
        .object({
            httpMeta: components.HTTPMetadata$.outboundSchema,
            oneOf: z
                .union([
                    z.lazy(() => RemoveProjectEnvResponseBody3$.outboundSchema),
                    z.lazy(() => RemoveProjectEnvResponseBody2$.outboundSchema),
                    z.array(z.lazy(() => RemoveProjectEnvResponseBody1$.outboundSchema)),
                ])
                .optional(),
        })
        .transform((v) => {
            return {
                HttpMeta: v.httpMeta,
                ...(v.oneOf === undefined ? null : { oneOf: v.oneOf }),
            };
        });
}
