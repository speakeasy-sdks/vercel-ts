/*
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

import * as components from "../components";
import * as z from "zod";

export enum Provider {
    Github = "github",
    GithubCustomHost = "github-custom-host",
    Gitlab = "gitlab",
    Bitbucket = "bitbucket",
}

export type GitNamespacesRequest = {
    /**
     * The custom Git host if using a custom Git provider, like GitHub Enterprise Server
     */
    host?: string | undefined;
    provider?: Provider | undefined;
    /**
     * The Team identifier to perform the request on behalf of.
     */
    teamId?: string | undefined;
    /**
     * The Team slug to perform the request on behalf of.
     */
    slug?: string | undefined;
};

export type Id = string | number;

export type GitNamespacesResponseBody = {
    provider: string;
    slug: string;
    id: string | number;
    ownerType: string;
    name?: string | undefined;
    isAccessRestricted?: boolean | undefined;
    installationId?: number | undefined;
    requireReauth?: boolean | undefined;
};

export type GitNamespacesResponse = {
    httpMeta: components.HTTPMetadata;
    responseBodies?: Array<GitNamespacesResponseBody> | undefined;
};

/** @internal */
export const Provider$: z.ZodNativeEnum<typeof Provider> = z.nativeEnum(Provider);

/** @internal */
export namespace GitNamespacesRequest$ {
    export const inboundSchema: z.ZodType<GitNamespacesRequest, z.ZodTypeDef, unknown> = z
        .object({
            host: z.string().optional(),
            provider: Provider$.optional(),
            teamId: z.string().optional(),
            slug: z.string().optional(),
        })
        .transform((v) => {
            return {
                ...(v.host === undefined ? null : { host: v.host }),
                ...(v.provider === undefined ? null : { provider: v.provider }),
                ...(v.teamId === undefined ? null : { teamId: v.teamId }),
                ...(v.slug === undefined ? null : { slug: v.slug }),
            };
        });

    export type Outbound = {
        host?: string | undefined;
        provider?: Provider | undefined;
        teamId?: string | undefined;
        slug?: string | undefined;
    };

    export const outboundSchema: z.ZodType<Outbound, z.ZodTypeDef, GitNamespacesRequest> = z
        .object({
            host: z.string().optional(),
            provider: Provider$.optional(),
            teamId: z.string().optional(),
            slug: z.string().optional(),
        })
        .transform((v) => {
            return {
                ...(v.host === undefined ? null : { host: v.host }),
                ...(v.provider === undefined ? null : { provider: v.provider }),
                ...(v.teamId === undefined ? null : { teamId: v.teamId }),
                ...(v.slug === undefined ? null : { slug: v.slug }),
            };
        });
}

/** @internal */
export namespace Id$ {
    export const inboundSchema: z.ZodType<Id, z.ZodTypeDef, unknown> = z.union([
        z.string(),
        z.number(),
    ]);

    export type Outbound = string | number;
    export const outboundSchema: z.ZodType<Outbound, z.ZodTypeDef, Id> = z.union([
        z.string(),
        z.number(),
    ]);
}

/** @internal */
export namespace GitNamespacesResponseBody$ {
    export const inboundSchema: z.ZodType<GitNamespacesResponseBody, z.ZodTypeDef, unknown> = z
        .object({
            provider: z.string(),
            slug: z.string(),
            id: z.union([z.string(), z.number()]),
            ownerType: z.string(),
            name: z.string().optional(),
            isAccessRestricted: z.boolean().optional(),
            installationId: z.number().optional(),
            requireReauth: z.boolean().optional(),
        })
        .transform((v) => {
            return {
                provider: v.provider,
                slug: v.slug,
                id: v.id,
                ownerType: v.ownerType,
                ...(v.name === undefined ? null : { name: v.name }),
                ...(v.isAccessRestricted === undefined
                    ? null
                    : { isAccessRestricted: v.isAccessRestricted }),
                ...(v.installationId === undefined ? null : { installationId: v.installationId }),
                ...(v.requireReauth === undefined ? null : { requireReauth: v.requireReauth }),
            };
        });

    export type Outbound = {
        provider: string;
        slug: string;
        id: string | number;
        ownerType: string;
        name?: string | undefined;
        isAccessRestricted?: boolean | undefined;
        installationId?: number | undefined;
        requireReauth?: boolean | undefined;
    };

    export const outboundSchema: z.ZodType<Outbound, z.ZodTypeDef, GitNamespacesResponseBody> = z
        .object({
            provider: z.string(),
            slug: z.string(),
            id: z.union([z.string(), z.number()]),
            ownerType: z.string(),
            name: z.string().optional(),
            isAccessRestricted: z.boolean().optional(),
            installationId: z.number().optional(),
            requireReauth: z.boolean().optional(),
        })
        .transform((v) => {
            return {
                provider: v.provider,
                slug: v.slug,
                id: v.id,
                ownerType: v.ownerType,
                ...(v.name === undefined ? null : { name: v.name }),
                ...(v.isAccessRestricted === undefined
                    ? null
                    : { isAccessRestricted: v.isAccessRestricted }),
                ...(v.installationId === undefined ? null : { installationId: v.installationId }),
                ...(v.requireReauth === undefined ? null : { requireReauth: v.requireReauth }),
            };
        });
}

/** @internal */
export namespace GitNamespacesResponse$ {
    export const inboundSchema: z.ZodType<GitNamespacesResponse, z.ZodTypeDef, unknown> = z
        .object({
            HttpMeta: components.HTTPMetadata$.inboundSchema,
            responseBodies: z
                .array(z.lazy(() => GitNamespacesResponseBody$.inboundSchema))
                .optional(),
        })
        .transform((v) => {
            return {
                httpMeta: v.HttpMeta,
                ...(v.responseBodies === undefined ? null : { responseBodies: v.responseBodies }),
            };
        });

    export type Outbound = {
        HttpMeta: components.HTTPMetadata$.Outbound;
        responseBodies?: Array<GitNamespacesResponseBody$.Outbound> | undefined;
    };

    export const outboundSchema: z.ZodType<Outbound, z.ZodTypeDef, GitNamespacesResponse> = z
        .object({
            httpMeta: components.HTTPMetadata$.outboundSchema,
            responseBodies: z
                .array(z.lazy(() => GitNamespacesResponseBody$.outboundSchema))
                .optional(),
        })
        .transform((v) => {
            return {
                HttpMeta: v.httpMeta,
                ...(v.responseBodies === undefined ? null : { responseBodies: v.responseBodies }),
            };
        });
}
