/*
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

import * as components from "../components";
import * as z from "zod";

export type GetTeamAccessRequestRequest = {
    teamId: string;
    userId: string;
};

export enum GetTeamAccessRequestOrigin {
    Mail = "mail",
    Link = "link",
    Import = "import",
    Teams = "teams",
    Github = "github",
    Gitlab = "gitlab",
    Bitbucket = "bitbucket",
    Saml = "saml",
    Dsync = "dsync",
    Feedback = "feedback",
    OrganizationTeams = "organization-teams",
}

export type GetTeamAccessRequestGitUserId = string | number;

/**
 * A map that describes the origin from where the user joined.
 */
export type GetTeamAccessRequestJoinedFrom = {
    origin: GetTeamAccessRequestOrigin;
    commitId?: string | undefined;
    repoId?: string | undefined;
    repoPath?: string | undefined;
    gitUserId?: string | number | undefined;
    gitUserLogin?: string | undefined;
    ssoUserId?: string | undefined;
    ssoConnectedAt?: number | undefined;
    idpUserId?: string | undefined;
    dsyncUserId?: string | undefined;
    dsyncConnectedAt?: number | undefined;
};

/**
 * Map of the connected GitHub account.
 */
export type GetTeamAccessRequestGithub = {
    login?: string | undefined;
};

/**
 * Map of the connected GitLab account.
 */
export type GetTeamAccessRequestGitlab = {
    login?: string | undefined;
};

/**
 * Map of the connected Bitbucket account.
 */
export type GetTeamAccessRequestBitbucket = {
    login?: string | undefined;
};

/**
 * Successfully
 */
export type GetTeamAccessRequestResponseBody = {
    /**
     * The slug of the team.
     */
    teamSlug: string;
    /**
     * The name of the team.
     */
    teamName: string;
    /**
     * Current status of the membership. Will be `true` if confirmed, if pending it'll be `false`.
     */
    confirmed: boolean;
    /**
     * A map that describes the origin from where the user joined.
     */
    joinedFrom: GetTeamAccessRequestJoinedFrom;
    /**
     * Timestamp in milliseconds when the user requested access to the team.
     */
    accessRequestedAt: number;
    /**
     * Map of the connected GitHub account.
     */
    github: GetTeamAccessRequestGithub | null;
    /**
     * Map of the connected GitLab account.
     */
    gitlab: GetTeamAccessRequestGitlab | null;
    /**
     * Map of the connected Bitbucket account.
     */
    bitbucket: GetTeamAccessRequestBitbucket | null;
};

export type GetTeamAccessRequestResponse = {
    httpMeta: components.HTTPMetadata;
    /**
     * Successfully
     */
    object?: GetTeamAccessRequestResponseBody | undefined;
};

/** @internal */
export namespace GetTeamAccessRequestRequest$ {
    export const inboundSchema: z.ZodType<GetTeamAccessRequestRequest, z.ZodTypeDef, unknown> = z
        .object({
            teamId: z.string(),
            userId: z.string(),
        })
        .transform((v) => {
            return {
                teamId: v.teamId,
                userId: v.userId,
            };
        });

    export type Outbound = {
        teamId: string;
        userId: string;
    };

    export const outboundSchema: z.ZodType<Outbound, z.ZodTypeDef, GetTeamAccessRequestRequest> = z
        .object({
            teamId: z.string(),
            userId: z.string(),
        })
        .transform((v) => {
            return {
                teamId: v.teamId,
                userId: v.userId,
            };
        });
}

/** @internal */
export namespace GetTeamAccessRequestOrigin$ {
    export const inboundSchema = z.nativeEnum(GetTeamAccessRequestOrigin);
    export const outboundSchema = inboundSchema;
}

/** @internal */
export namespace GetTeamAccessRequestGitUserId$ {
    export const inboundSchema: z.ZodType<GetTeamAccessRequestGitUserId, z.ZodTypeDef, unknown> =
        z.union([z.string(), z.number()]);

    export type Outbound = string | number;
    export const outboundSchema: z.ZodType<Outbound, z.ZodTypeDef, GetTeamAccessRequestGitUserId> =
        z.union([z.string(), z.number()]);
}

/** @internal */
export namespace GetTeamAccessRequestJoinedFrom$ {
    export const inboundSchema: z.ZodType<GetTeamAccessRequestJoinedFrom, z.ZodTypeDef, unknown> = z
        .object({
            origin: GetTeamAccessRequestOrigin$.inboundSchema,
            commitId: z.string().optional(),
            repoId: z.string().optional(),
            repoPath: z.string().optional(),
            gitUserId: z.union([z.string(), z.number()]).optional(),
            gitUserLogin: z.string().optional(),
            ssoUserId: z.string().optional(),
            ssoConnectedAt: z.number().optional(),
            idpUserId: z.string().optional(),
            dsyncUserId: z.string().optional(),
            dsyncConnectedAt: z.number().optional(),
        })
        .transform((v) => {
            return {
                origin: v.origin,
                ...(v.commitId === undefined ? null : { commitId: v.commitId }),
                ...(v.repoId === undefined ? null : { repoId: v.repoId }),
                ...(v.repoPath === undefined ? null : { repoPath: v.repoPath }),
                ...(v.gitUserId === undefined ? null : { gitUserId: v.gitUserId }),
                ...(v.gitUserLogin === undefined ? null : { gitUserLogin: v.gitUserLogin }),
                ...(v.ssoUserId === undefined ? null : { ssoUserId: v.ssoUserId }),
                ...(v.ssoConnectedAt === undefined ? null : { ssoConnectedAt: v.ssoConnectedAt }),
                ...(v.idpUserId === undefined ? null : { idpUserId: v.idpUserId }),
                ...(v.dsyncUserId === undefined ? null : { dsyncUserId: v.dsyncUserId }),
                ...(v.dsyncConnectedAt === undefined
                    ? null
                    : { dsyncConnectedAt: v.dsyncConnectedAt }),
            };
        });

    export type Outbound = {
        origin: string;
        commitId?: string | undefined;
        repoId?: string | undefined;
        repoPath?: string | undefined;
        gitUserId?: string | number | undefined;
        gitUserLogin?: string | undefined;
        ssoUserId?: string | undefined;
        ssoConnectedAt?: number | undefined;
        idpUserId?: string | undefined;
        dsyncUserId?: string | undefined;
        dsyncConnectedAt?: number | undefined;
    };

    export const outboundSchema: z.ZodType<Outbound, z.ZodTypeDef, GetTeamAccessRequestJoinedFrom> =
        z
            .object({
                origin: GetTeamAccessRequestOrigin$.outboundSchema,
                commitId: z.string().optional(),
                repoId: z.string().optional(),
                repoPath: z.string().optional(),
                gitUserId: z.union([z.string(), z.number()]).optional(),
                gitUserLogin: z.string().optional(),
                ssoUserId: z.string().optional(),
                ssoConnectedAt: z.number().optional(),
                idpUserId: z.string().optional(),
                dsyncUserId: z.string().optional(),
                dsyncConnectedAt: z.number().optional(),
            })
            .transform((v) => {
                return {
                    origin: v.origin,
                    ...(v.commitId === undefined ? null : { commitId: v.commitId }),
                    ...(v.repoId === undefined ? null : { repoId: v.repoId }),
                    ...(v.repoPath === undefined ? null : { repoPath: v.repoPath }),
                    ...(v.gitUserId === undefined ? null : { gitUserId: v.gitUserId }),
                    ...(v.gitUserLogin === undefined ? null : { gitUserLogin: v.gitUserLogin }),
                    ...(v.ssoUserId === undefined ? null : { ssoUserId: v.ssoUserId }),
                    ...(v.ssoConnectedAt === undefined
                        ? null
                        : { ssoConnectedAt: v.ssoConnectedAt }),
                    ...(v.idpUserId === undefined ? null : { idpUserId: v.idpUserId }),
                    ...(v.dsyncUserId === undefined ? null : { dsyncUserId: v.dsyncUserId }),
                    ...(v.dsyncConnectedAt === undefined
                        ? null
                        : { dsyncConnectedAt: v.dsyncConnectedAt }),
                };
            });
}

/** @internal */
export namespace GetTeamAccessRequestGithub$ {
    export const inboundSchema: z.ZodType<GetTeamAccessRequestGithub, z.ZodTypeDef, unknown> = z
        .object({
            login: z.string().optional(),
        })
        .transform((v) => {
            return {
                ...(v.login === undefined ? null : { login: v.login }),
            };
        });

    export type Outbound = {
        login?: string | undefined;
    };

    export const outboundSchema: z.ZodType<Outbound, z.ZodTypeDef, GetTeamAccessRequestGithub> = z
        .object({
            login: z.string().optional(),
        })
        .transform((v) => {
            return {
                ...(v.login === undefined ? null : { login: v.login }),
            };
        });
}

/** @internal */
export namespace GetTeamAccessRequestGitlab$ {
    export const inboundSchema: z.ZodType<GetTeamAccessRequestGitlab, z.ZodTypeDef, unknown> = z
        .object({
            login: z.string().optional(),
        })
        .transform((v) => {
            return {
                ...(v.login === undefined ? null : { login: v.login }),
            };
        });

    export type Outbound = {
        login?: string | undefined;
    };

    export const outboundSchema: z.ZodType<Outbound, z.ZodTypeDef, GetTeamAccessRequestGitlab> = z
        .object({
            login: z.string().optional(),
        })
        .transform((v) => {
            return {
                ...(v.login === undefined ? null : { login: v.login }),
            };
        });
}

/** @internal */
export namespace GetTeamAccessRequestBitbucket$ {
    export const inboundSchema: z.ZodType<GetTeamAccessRequestBitbucket, z.ZodTypeDef, unknown> = z
        .object({
            login: z.string().optional(),
        })
        .transform((v) => {
            return {
                ...(v.login === undefined ? null : { login: v.login }),
            };
        });

    export type Outbound = {
        login?: string | undefined;
    };

    export const outboundSchema: z.ZodType<Outbound, z.ZodTypeDef, GetTeamAccessRequestBitbucket> =
        z
            .object({
                login: z.string().optional(),
            })
            .transform((v) => {
                return {
                    ...(v.login === undefined ? null : { login: v.login }),
                };
            });
}

/** @internal */
export namespace GetTeamAccessRequestResponseBody$ {
    export const inboundSchema: z.ZodType<GetTeamAccessRequestResponseBody, z.ZodTypeDef, unknown> =
        z
            .object({
                teamSlug: z.string(),
                teamName: z.string(),
                confirmed: z.boolean(),
                joinedFrom: z.lazy(() => GetTeamAccessRequestJoinedFrom$.inboundSchema),
                accessRequestedAt: z.number(),
                github: z.nullable(z.lazy(() => GetTeamAccessRequestGithub$.inboundSchema)),
                gitlab: z.nullable(z.lazy(() => GetTeamAccessRequestGitlab$.inboundSchema)),
                bitbucket: z.nullable(z.lazy(() => GetTeamAccessRequestBitbucket$.inboundSchema)),
            })
            .transform((v) => {
                return {
                    teamSlug: v.teamSlug,
                    teamName: v.teamName,
                    confirmed: v.confirmed,
                    joinedFrom: v.joinedFrom,
                    accessRequestedAt: v.accessRequestedAt,
                    github: v.github,
                    gitlab: v.gitlab,
                    bitbucket: v.bitbucket,
                };
            });

    export type Outbound = {
        teamSlug: string;
        teamName: string;
        confirmed: boolean;
        joinedFrom: GetTeamAccessRequestJoinedFrom$.Outbound;
        accessRequestedAt: number;
        github: GetTeamAccessRequestGithub$.Outbound | null;
        gitlab: GetTeamAccessRequestGitlab$.Outbound | null;
        bitbucket: GetTeamAccessRequestBitbucket$.Outbound | null;
    };

    export const outboundSchema: z.ZodType<
        Outbound,
        z.ZodTypeDef,
        GetTeamAccessRequestResponseBody
    > = z
        .object({
            teamSlug: z.string(),
            teamName: z.string(),
            confirmed: z.boolean(),
            joinedFrom: z.lazy(() => GetTeamAccessRequestJoinedFrom$.outboundSchema),
            accessRequestedAt: z.number(),
            github: z.nullable(z.lazy(() => GetTeamAccessRequestGithub$.outboundSchema)),
            gitlab: z.nullable(z.lazy(() => GetTeamAccessRequestGitlab$.outboundSchema)),
            bitbucket: z.nullable(z.lazy(() => GetTeamAccessRequestBitbucket$.outboundSchema)),
        })
        .transform((v) => {
            return {
                teamSlug: v.teamSlug,
                teamName: v.teamName,
                confirmed: v.confirmed,
                joinedFrom: v.joinedFrom,
                accessRequestedAt: v.accessRequestedAt,
                github: v.github,
                gitlab: v.gitlab,
                bitbucket: v.bitbucket,
            };
        });
}

/** @internal */
export namespace GetTeamAccessRequestResponse$ {
    export const inboundSchema: z.ZodType<GetTeamAccessRequestResponse, z.ZodTypeDef, unknown> = z
        .object({
            HttpMeta: components.HTTPMetadata$.inboundSchema,
            object: z.lazy(() => GetTeamAccessRequestResponseBody$.inboundSchema).optional(),
        })
        .transform((v) => {
            return {
                httpMeta: v.HttpMeta,
                ...(v.object === undefined ? null : { object: v.object }),
            };
        });

    export type Outbound = {
        HttpMeta: components.HTTPMetadata$.Outbound;
        object?: GetTeamAccessRequestResponseBody$.Outbound | undefined;
    };

    export const outboundSchema: z.ZodType<Outbound, z.ZodTypeDef, GetTeamAccessRequestResponse> = z
        .object({
            httpMeta: components.HTTPMetadata$.outboundSchema,
            object: z.lazy(() => GetTeamAccessRequestResponseBody$.outboundSchema).optional(),
        })
        .transform((v) => {
            return {
                HttpMeta: v.httpMeta,
                ...(v.object === undefined ? null : { object: v.object }),
            };
        });
}
