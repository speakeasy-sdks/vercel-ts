/*
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

import * as components from "../components";
import * as z from "zod";

export enum QueryParamProvider {
    Github = "github",
    GithubCustomHost = "github-custom-host",
    Gitlab = "gitlab",
    Bitbucket = "bitbucket",
}

export type ListGitReposRequest = {
    query?: string | undefined;
    namespaceId?: any | undefined;
    provider?: QueryParamProvider | undefined;
    installationId?: string | undefined;
    /**
     * The custom Git host if using a custom Git provider, like GitHub Enterprise Server
     */
    host?: string | undefined;
    /**
     * The Team identifier to perform the request on behalf of.
     */
    teamId?: string | undefined;
    /**
     * The Team slug to perform the request on behalf of.
     */
    slug?: string | undefined;
};

export enum ListGitReposProvider {
    Github = "github",
    GithubCustomHost = "github-custom-host",
    Gitlab = "gitlab",
    Bitbucket = "bitbucket",
}

export type NamespaceId = string | number;

export type GitAccount = {
    provider: ListGitReposProvider;
    namespaceId: string | number | null;
};

export type ListGitReposId = string | number;

export enum ListGitReposIntegrationsProvider {
    Github = "github",
    GithubCustomHost = "github-custom-host",
    Gitlab = "gitlab",
    Bitbucket = "bitbucket",
}

export type ListGitReposIntegrationsId = string | number;

export type Owner = {
    id: string | number;
    name: string;
};

export enum OwnerType {
    User = "user",
    Team = "team",
}

export type Repos = {
    id: string | number;
    provider: ListGitReposIntegrationsProvider;
    url: string;
    name: string;
    slug: string;
    namespace: string;
    owner: Owner;
    ownerType: OwnerType;
    private: boolean;
    defaultBranch: string;
    updatedAt: number;
};

export type ListGitReposResponseBody = {
    gitAccount: GitAccount;
    repos: Array<Repos>;
};

export type ListGitReposResponse = {
    httpMeta: components.HTTPMetadata;
    object?: ListGitReposResponseBody | undefined;
};

/** @internal */
export const QueryParamProvider$: z.ZodNativeEnum<typeof QueryParamProvider> =
    z.nativeEnum(QueryParamProvider);

/** @internal */
export namespace ListGitReposRequest$ {
    export const inboundSchema: z.ZodType<ListGitReposRequest, z.ZodTypeDef, unknown> = z
        .object({
            query: z.string().optional(),
            namespaceId: z.any().optional(),
            provider: QueryParamProvider$.optional(),
            installationId: z.string().optional(),
            host: z.string().optional(),
            teamId: z.string().optional(),
            slug: z.string().optional(),
        })
        .transform((v) => {
            return {
                ...(v.query === undefined ? null : { query: v.query }),
                ...(v.namespaceId === undefined ? null : { namespaceId: v.namespaceId }),
                ...(v.provider === undefined ? null : { provider: v.provider }),
                ...(v.installationId === undefined ? null : { installationId: v.installationId }),
                ...(v.host === undefined ? null : { host: v.host }),
                ...(v.teamId === undefined ? null : { teamId: v.teamId }),
                ...(v.slug === undefined ? null : { slug: v.slug }),
            };
        });

    export type Outbound = {
        query?: string | undefined;
        namespaceId?: any | undefined;
        provider?: QueryParamProvider | undefined;
        installationId?: string | undefined;
        host?: string | undefined;
        teamId?: string | undefined;
        slug?: string | undefined;
    };

    export const outboundSchema: z.ZodType<Outbound, z.ZodTypeDef, ListGitReposRequest> = z
        .object({
            query: z.string().optional(),
            namespaceId: z.any().optional(),
            provider: QueryParamProvider$.optional(),
            installationId: z.string().optional(),
            host: z.string().optional(),
            teamId: z.string().optional(),
            slug: z.string().optional(),
        })
        .transform((v) => {
            return {
                ...(v.query === undefined ? null : { query: v.query }),
                ...(v.namespaceId === undefined ? null : { namespaceId: v.namespaceId }),
                ...(v.provider === undefined ? null : { provider: v.provider }),
                ...(v.installationId === undefined ? null : { installationId: v.installationId }),
                ...(v.host === undefined ? null : { host: v.host }),
                ...(v.teamId === undefined ? null : { teamId: v.teamId }),
                ...(v.slug === undefined ? null : { slug: v.slug }),
            };
        });
}

/** @internal */
export const ListGitReposProvider$: z.ZodNativeEnum<typeof ListGitReposProvider> =
    z.nativeEnum(ListGitReposProvider);

/** @internal */
export namespace NamespaceId$ {
    export const inboundSchema: z.ZodType<NamespaceId, z.ZodTypeDef, unknown> = z.union([
        z.string(),
        z.number(),
    ]);

    export type Outbound = string | number;
    export const outboundSchema: z.ZodType<Outbound, z.ZodTypeDef, NamespaceId> = z.union([
        z.string(),
        z.number(),
    ]);
}

/** @internal */
export namespace GitAccount$ {
    export const inboundSchema: z.ZodType<GitAccount, z.ZodTypeDef, unknown> = z
        .object({
            provider: ListGitReposProvider$,
            namespaceId: z.nullable(z.union([z.string(), z.number()])),
        })
        .transform((v) => {
            return {
                provider: v.provider,
                namespaceId: v.namespaceId,
            };
        });

    export type Outbound = {
        provider: ListGitReposProvider;
        namespaceId: string | number | null;
    };

    export const outboundSchema: z.ZodType<Outbound, z.ZodTypeDef, GitAccount> = z
        .object({
            provider: ListGitReposProvider$,
            namespaceId: z.nullable(z.union([z.string(), z.number()])),
        })
        .transform((v) => {
            return {
                provider: v.provider,
                namespaceId: v.namespaceId,
            };
        });
}

/** @internal */
export namespace ListGitReposId$ {
    export const inboundSchema: z.ZodType<ListGitReposId, z.ZodTypeDef, unknown> = z.union([
        z.string(),
        z.number(),
    ]);

    export type Outbound = string | number;
    export const outboundSchema: z.ZodType<Outbound, z.ZodTypeDef, ListGitReposId> = z.union([
        z.string(),
        z.number(),
    ]);
}

/** @internal */
export const ListGitReposIntegrationsProvider$: z.ZodNativeEnum<
    typeof ListGitReposIntegrationsProvider
> = z.nativeEnum(ListGitReposIntegrationsProvider);

/** @internal */
export namespace ListGitReposIntegrationsId$ {
    export const inboundSchema: z.ZodType<ListGitReposIntegrationsId, z.ZodTypeDef, unknown> =
        z.union([z.string(), z.number()]);

    export type Outbound = string | number;
    export const outboundSchema: z.ZodType<Outbound, z.ZodTypeDef, ListGitReposIntegrationsId> =
        z.union([z.string(), z.number()]);
}

/** @internal */
export namespace Owner$ {
    export const inboundSchema: z.ZodType<Owner, z.ZodTypeDef, unknown> = z
        .object({
            id: z.union([z.string(), z.number()]),
            name: z.string(),
        })
        .transform((v) => {
            return {
                id: v.id,
                name: v.name,
            };
        });

    export type Outbound = {
        id: string | number;
        name: string;
    };

    export const outboundSchema: z.ZodType<Outbound, z.ZodTypeDef, Owner> = z
        .object({
            id: z.union([z.string(), z.number()]),
            name: z.string(),
        })
        .transform((v) => {
            return {
                id: v.id,
                name: v.name,
            };
        });
}

/** @internal */
export const OwnerType$: z.ZodNativeEnum<typeof OwnerType> = z.nativeEnum(OwnerType);

/** @internal */
export namespace Repos$ {
    export const inboundSchema: z.ZodType<Repos, z.ZodTypeDef, unknown> = z
        .object({
            id: z.union([z.string(), z.number()]),
            provider: ListGitReposIntegrationsProvider$,
            url: z.string(),
            name: z.string(),
            slug: z.string(),
            namespace: z.string(),
            owner: z.lazy(() => Owner$.inboundSchema),
            ownerType: OwnerType$,
            private: z.boolean(),
            defaultBranch: z.string(),
            updatedAt: z.number(),
        })
        .transform((v) => {
            return {
                id: v.id,
                provider: v.provider,
                url: v.url,
                name: v.name,
                slug: v.slug,
                namespace: v.namespace,
                owner: v.owner,
                ownerType: v.ownerType,
                private: v.private,
                defaultBranch: v.defaultBranch,
                updatedAt: v.updatedAt,
            };
        });

    export type Outbound = {
        id: string | number;
        provider: ListGitReposIntegrationsProvider;
        url: string;
        name: string;
        slug: string;
        namespace: string;
        owner: Owner$.Outbound;
        ownerType: OwnerType;
        private: boolean;
        defaultBranch: string;
        updatedAt: number;
    };

    export const outboundSchema: z.ZodType<Outbound, z.ZodTypeDef, Repos> = z
        .object({
            id: z.union([z.string(), z.number()]),
            provider: ListGitReposIntegrationsProvider$,
            url: z.string(),
            name: z.string(),
            slug: z.string(),
            namespace: z.string(),
            owner: z.lazy(() => Owner$.outboundSchema),
            ownerType: OwnerType$,
            private: z.boolean(),
            defaultBranch: z.string(),
            updatedAt: z.number(),
        })
        .transform((v) => {
            return {
                id: v.id,
                provider: v.provider,
                url: v.url,
                name: v.name,
                slug: v.slug,
                namespace: v.namespace,
                owner: v.owner,
                ownerType: v.ownerType,
                private: v.private,
                defaultBranch: v.defaultBranch,
                updatedAt: v.updatedAt,
            };
        });
}

/** @internal */
export namespace ListGitReposResponseBody$ {
    export const inboundSchema: z.ZodType<ListGitReposResponseBody, z.ZodTypeDef, unknown> = z
        .object({
            gitAccount: z.lazy(() => GitAccount$.inboundSchema),
            repos: z.array(z.lazy(() => Repos$.inboundSchema)),
        })
        .transform((v) => {
            return {
                gitAccount: v.gitAccount,
                repos: v.repos,
            };
        });

    export type Outbound = {
        gitAccount: GitAccount$.Outbound;
        repos: Array<Repos$.Outbound>;
    };

    export const outboundSchema: z.ZodType<Outbound, z.ZodTypeDef, ListGitReposResponseBody> = z
        .object({
            gitAccount: z.lazy(() => GitAccount$.outboundSchema),
            repos: z.array(z.lazy(() => Repos$.outboundSchema)),
        })
        .transform((v) => {
            return {
                gitAccount: v.gitAccount,
                repos: v.repos,
            };
        });
}

/** @internal */
export namespace ListGitReposResponse$ {
    export const inboundSchema: z.ZodType<ListGitReposResponse, z.ZodTypeDef, unknown> = z
        .object({
            HttpMeta: components.HTTPMetadata$.inboundSchema,
            object: z.lazy(() => ListGitReposResponseBody$.inboundSchema).optional(),
        })
        .transform((v) => {
            return {
                httpMeta: v.HttpMeta,
                ...(v.object === undefined ? null : { object: v.object }),
            };
        });

    export type Outbound = {
        HttpMeta: components.HTTPMetadata$.Outbound;
        object?: ListGitReposResponseBody$.Outbound | undefined;
    };

    export const outboundSchema: z.ZodType<Outbound, z.ZodTypeDef, ListGitReposResponse> = z
        .object({
            httpMeta: components.HTTPMetadata$.outboundSchema,
            object: z.lazy(() => ListGitReposResponseBody$.outboundSchema).optional(),
        })
        .transform((v) => {
            return {
                HttpMeta: v.httpMeta,
                ...(v.object === undefined ? null : { object: v.object }),
            };
        });
}
