/*
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

import * as components from "../components";
import * as z from "zod";

/**
 * The type of the DNS record
 */
export enum UpdateRecordType {
    A = "A",
    Aaaa = "AAAA",
    Alias = "ALIAS",
    Caa = "CAA",
    Cname = "CNAME",
    Https = "HTTPS",
    Mx = "MX",
    Srv = "SRV",
    Txt = "TXT",
    Ns = "NS",
}

export type Srv = {
    target: string | null;
    weight: number | null;
    port: number | null;
    priority: number | null;
};

export type Https = {
    priority: number | null;
    target: string | null;
    params?: string | null | undefined;
};

export type UpdateRecordRequestBody = {
    /**
     * The name of the DNS record
     */
    name?: string | null | undefined;
    /**
     * The value of the DNS record
     */
    value?: string | null | undefined;
    /**
     * The type of the DNS record
     */
    type?: UpdateRecordType | null | undefined;
    /**
     * The Time to live (TTL) value of the DNS record
     */
    ttl?: number | null | undefined;
    /**
     * The MX priority value of the DNS record
     */
    mxPriority?: number | null | undefined;
    srv?: Srv | null | undefined;
    https?: Https | null | undefined;
    /**
     * A comment to add context on what this DNS record is for
     */
    comment?: string | undefined;
};

export type UpdateRecordRequest = {
    /**
     * The id of the DNS record
     */
    recordId: string;
    /**
     * The Team identifier to perform the request on behalf of.
     */
    teamId?: string | undefined;
    /**
     * The Team slug to perform the request on behalf of.
     */
    slug?: string | undefined;
    requestBody?: UpdateRecordRequestBody | undefined;
};

export enum RecordType {
    A = "A",
    Aaaa = "AAAA",
    Alias = "ALIAS",
    Caa = "CAA",
    Cname = "CNAME",
    Https = "HTTPS",
    Mx = "MX",
    Srv = "SRV",
    Txt = "TXT",
    Ns = "NS",
}

export enum UpdateRecordDnsType {
    Record = "record",
    RecordSys = "record-sys",
}

export type UpdateRecordResponseBody = {
    createdAt?: number | null | undefined;
    creator: string;
    domain: string;
    id: string;
    name: string;
    recordType: RecordType;
    ttl?: number | undefined;
    type: UpdateRecordDnsType;
    value: string;
    comment?: string | undefined;
};

export type UpdateRecordResponse = {
    httpMeta: components.HTTPMetadata;
    object?: UpdateRecordResponseBody | undefined;
};

/** @internal */
export namespace UpdateRecordType$ {
    export const inboundSchema = z.nativeEnum(UpdateRecordType);
    export const outboundSchema = inboundSchema;
}

/** @internal */
export namespace Srv$ {
    export const inboundSchema: z.ZodType<Srv, z.ZodTypeDef, unknown> = z
        .object({
            target: z.nullable(z.string()),
            weight: z.nullable(z.number().int()),
            port: z.nullable(z.number().int()),
            priority: z.nullable(z.number().int()),
        })
        .transform((v) => {
            return {
                target: v.target,
                weight: v.weight,
                port: v.port,
                priority: v.priority,
            };
        });

    export type Outbound = {
        target: string | null;
        weight: number | null;
        port: number | null;
        priority: number | null;
    };

    export const outboundSchema: z.ZodType<Outbound, z.ZodTypeDef, Srv> = z
        .object({
            target: z.nullable(z.string()),
            weight: z.nullable(z.number().int()),
            port: z.nullable(z.number().int()),
            priority: z.nullable(z.number().int()),
        })
        .transform((v) => {
            return {
                target: v.target,
                weight: v.weight,
                port: v.port,
                priority: v.priority,
            };
        });
}

/** @internal */
export namespace Https$ {
    export const inboundSchema: z.ZodType<Https, z.ZodTypeDef, unknown> = z
        .object({
            priority: z.nullable(z.number().int()),
            target: z.nullable(z.string()),
            params: z.nullable(z.string()).optional(),
        })
        .transform((v) => {
            return {
                priority: v.priority,
                target: v.target,
                ...(v.params === undefined ? null : { params: v.params }),
            };
        });

    export type Outbound = {
        priority: number | null;
        target: string | null;
        params?: string | null | undefined;
    };

    export const outboundSchema: z.ZodType<Outbound, z.ZodTypeDef, Https> = z
        .object({
            priority: z.nullable(z.number().int()),
            target: z.nullable(z.string()),
            params: z.nullable(z.string()).optional(),
        })
        .transform((v) => {
            return {
                priority: v.priority,
                target: v.target,
                ...(v.params === undefined ? null : { params: v.params }),
            };
        });
}

/** @internal */
export namespace UpdateRecordRequestBody$ {
    export const inboundSchema: z.ZodType<UpdateRecordRequestBody, z.ZodTypeDef, unknown> = z
        .object({
            name: z.nullable(z.string()).optional(),
            value: z.nullable(z.string()).optional(),
            type: z.nullable(UpdateRecordType$.inboundSchema).optional(),
            ttl: z.nullable(z.number().int()).optional(),
            mxPriority: z.nullable(z.number().int()).optional(),
            srv: z.nullable(z.lazy(() => Srv$.inboundSchema)).optional(),
            https: z.nullable(z.lazy(() => Https$.inboundSchema)).optional(),
            comment: z.string().optional(),
        })
        .transform((v) => {
            return {
                ...(v.name === undefined ? null : { name: v.name }),
                ...(v.value === undefined ? null : { value: v.value }),
                ...(v.type === undefined ? null : { type: v.type }),
                ...(v.ttl === undefined ? null : { ttl: v.ttl }),
                ...(v.mxPriority === undefined ? null : { mxPriority: v.mxPriority }),
                ...(v.srv === undefined ? null : { srv: v.srv }),
                ...(v.https === undefined ? null : { https: v.https }),
                ...(v.comment === undefined ? null : { comment: v.comment }),
            };
        });

    export type Outbound = {
        name?: string | null | undefined;
        value?: string | null | undefined;
        type?: string | null | undefined;
        ttl?: number | null | undefined;
        mxPriority?: number | null | undefined;
        srv?: Srv$.Outbound | null | undefined;
        https?: Https$.Outbound | null | undefined;
        comment?: string | undefined;
    };

    export const outboundSchema: z.ZodType<Outbound, z.ZodTypeDef, UpdateRecordRequestBody> = z
        .object({
            name: z.nullable(z.string()).optional(),
            value: z.nullable(z.string()).optional(),
            type: z.nullable(UpdateRecordType$.outboundSchema).optional(),
            ttl: z.nullable(z.number().int()).optional(),
            mxPriority: z.nullable(z.number().int()).optional(),
            srv: z.nullable(z.lazy(() => Srv$.outboundSchema)).optional(),
            https: z.nullable(z.lazy(() => Https$.outboundSchema)).optional(),
            comment: z.string().optional(),
        })
        .transform((v) => {
            return {
                ...(v.name === undefined ? null : { name: v.name }),
                ...(v.value === undefined ? null : { value: v.value }),
                ...(v.type === undefined ? null : { type: v.type }),
                ...(v.ttl === undefined ? null : { ttl: v.ttl }),
                ...(v.mxPriority === undefined ? null : { mxPriority: v.mxPriority }),
                ...(v.srv === undefined ? null : { srv: v.srv }),
                ...(v.https === undefined ? null : { https: v.https }),
                ...(v.comment === undefined ? null : { comment: v.comment }),
            };
        });
}

/** @internal */
export namespace UpdateRecordRequest$ {
    export const inboundSchema: z.ZodType<UpdateRecordRequest, z.ZodTypeDef, unknown> = z
        .object({
            recordId: z.string(),
            teamId: z.string().optional(),
            slug: z.string().optional(),
            RequestBody: z.lazy(() => UpdateRecordRequestBody$.inboundSchema).optional(),
        })
        .transform((v) => {
            return {
                recordId: v.recordId,
                ...(v.teamId === undefined ? null : { teamId: v.teamId }),
                ...(v.slug === undefined ? null : { slug: v.slug }),
                ...(v.RequestBody === undefined ? null : { requestBody: v.RequestBody }),
            };
        });

    export type Outbound = {
        recordId: string;
        teamId?: string | undefined;
        slug?: string | undefined;
        RequestBody?: UpdateRecordRequestBody$.Outbound | undefined;
    };

    export const outboundSchema: z.ZodType<Outbound, z.ZodTypeDef, UpdateRecordRequest> = z
        .object({
            recordId: z.string(),
            teamId: z.string().optional(),
            slug: z.string().optional(),
            requestBody: z.lazy(() => UpdateRecordRequestBody$.outboundSchema).optional(),
        })
        .transform((v) => {
            return {
                recordId: v.recordId,
                ...(v.teamId === undefined ? null : { teamId: v.teamId }),
                ...(v.slug === undefined ? null : { slug: v.slug }),
                ...(v.requestBody === undefined ? null : { RequestBody: v.requestBody }),
            };
        });
}

/** @internal */
export namespace RecordType$ {
    export const inboundSchema = z.nativeEnum(RecordType);
    export const outboundSchema = inboundSchema;
}

/** @internal */
export namespace UpdateRecordDnsType$ {
    export const inboundSchema = z.nativeEnum(UpdateRecordDnsType);
    export const outboundSchema = inboundSchema;
}

/** @internal */
export namespace UpdateRecordResponseBody$ {
    export const inboundSchema: z.ZodType<UpdateRecordResponseBody, z.ZodTypeDef, unknown> = z
        .object({
            createdAt: z.nullable(z.number()).optional(),
            creator: z.string(),
            domain: z.string(),
            id: z.string(),
            name: z.string(),
            recordType: RecordType$.inboundSchema,
            ttl: z.number().optional(),
            type: UpdateRecordDnsType$.inboundSchema,
            value: z.string(),
            comment: z.string().optional(),
        })
        .transform((v) => {
            return {
                ...(v.createdAt === undefined ? null : { createdAt: v.createdAt }),
                creator: v.creator,
                domain: v.domain,
                id: v.id,
                name: v.name,
                recordType: v.recordType,
                ...(v.ttl === undefined ? null : { ttl: v.ttl }),
                type: v.type,
                value: v.value,
                ...(v.comment === undefined ? null : { comment: v.comment }),
            };
        });

    export type Outbound = {
        createdAt?: number | null | undefined;
        creator: string;
        domain: string;
        id: string;
        name: string;
        recordType: string;
        ttl?: number | undefined;
        type: string;
        value: string;
        comment?: string | undefined;
    };

    export const outboundSchema: z.ZodType<Outbound, z.ZodTypeDef, UpdateRecordResponseBody> = z
        .object({
            createdAt: z.nullable(z.number()).optional(),
            creator: z.string(),
            domain: z.string(),
            id: z.string(),
            name: z.string(),
            recordType: RecordType$.outboundSchema,
            ttl: z.number().optional(),
            type: UpdateRecordDnsType$.outboundSchema,
            value: z.string(),
            comment: z.string().optional(),
        })
        .transform((v) => {
            return {
                ...(v.createdAt === undefined ? null : { createdAt: v.createdAt }),
                creator: v.creator,
                domain: v.domain,
                id: v.id,
                name: v.name,
                recordType: v.recordType,
                ...(v.ttl === undefined ? null : { ttl: v.ttl }),
                type: v.type,
                value: v.value,
                ...(v.comment === undefined ? null : { comment: v.comment }),
            };
        });
}

/** @internal */
export namespace UpdateRecordResponse$ {
    export const inboundSchema: z.ZodType<UpdateRecordResponse, z.ZodTypeDef, unknown> = z
        .object({
            HttpMeta: components.HTTPMetadata$.inboundSchema,
            object: z.lazy(() => UpdateRecordResponseBody$.inboundSchema).optional(),
        })
        .transform((v) => {
            return {
                httpMeta: v.HttpMeta,
                ...(v.object === undefined ? null : { object: v.object }),
            };
        });

    export type Outbound = {
        HttpMeta: components.HTTPMetadata$.Outbound;
        object?: UpdateRecordResponseBody$.Outbound | undefined;
    };

    export const outboundSchema: z.ZodType<Outbound, z.ZodTypeDef, UpdateRecordResponse> = z
        .object({
            httpMeta: components.HTTPMetadata$.outboundSchema,
            object: z.lazy(() => UpdateRecordResponseBody$.outboundSchema).optional(),
        })
        .transform((v) => {
            return {
                HttpMeta: v.httpMeta,
                ...(v.object === undefined ? null : { object: v.object }),
            };
        });
}
