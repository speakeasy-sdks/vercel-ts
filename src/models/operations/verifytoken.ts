/*
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

import * as components from "../components";
import * as z from "zod";

/**
 * The plan for this user's team (pro or hobby).
 */
export enum TeamPlan {
    Pro = "pro",
    Hobby = "hobby",
}

export type VerifyTokenRequest = {
    /**
     * Email to verify the login.
     */
    email?: string | undefined;
    /**
     * The token returned when the login was requested.
     */
    token: string;
    /**
     * The desired name for the token. It will be displayed on the user account details.
     */
    tokenName?: string | undefined;
    /**
     * The SAML Profile ID, when connecting a SAML Profile to a Team member for the first time.
     */
    ssoUserId?: string | undefined;
    /**
     * The name of this user's team.
     */
    teamName?: string | undefined;
    /**
     * The slug for this user's team.
     */
    teamSlug?: string | undefined;
    /**
     * The plan for this user's team (pro or hobby).
     */
    teamPlan?: TeamPlan | undefined;
    /**
     * Referrer to the session.
     */
    sessionReferrer?: string | undefined;
    /**
     * The page on which the user started their session.
     */
    landingPage?: string | undefined;
    /**
     * The page that sent the user to the signup page.
     */
    pageBeforeConversionPage?: string | undefined;
    utmSource?: string | undefined;
    utmMedium?: string | undefined;
    utmCampaign?: string | undefined;
    utmTerm?: string | undefined;
    oppId?: string | undefined;
};

/**
 * The verification was successful.
 */
export type VerifyTokenResponseBody = {
    /**
     * The user authentication token that can be used to perform API requests.
     */
    token: string;
    /**
     * Email address of the authenticated user.
     */
    email: string;
    /**
     * When completing SAML Single Sign-On authentication, this will be the ID of the Team that was authenticated for.
     */
    teamId?: string | undefined;
};

export type VerifyTokenResponse = {
    httpMeta: components.HTTPMetadata;
    /**
     * The verification was successful.
     */
    object?: VerifyTokenResponseBody | undefined;
};

/** @internal */
export namespace TeamPlan$ {
    export const inboundSchema = z.nativeEnum(TeamPlan);
    export const outboundSchema = inboundSchema;
}

/** @internal */
export namespace VerifyTokenRequest$ {
    export const inboundSchema: z.ZodType<VerifyTokenRequest, z.ZodTypeDef, unknown> = z
        .object({
            email: z.string().optional(),
            token: z.string(),
            tokenName: z.string().optional(),
            ssoUserId: z.string().optional(),
            teamName: z.string().optional(),
            teamSlug: z.string().optional(),
            teamPlan: TeamPlan$.inboundSchema.optional(),
            sessionReferrer: z.string().optional(),
            landingPage: z.string().optional(),
            pageBeforeConversionPage: z.string().optional(),
            utmSource: z.string().optional(),
            utmMedium: z.string().optional(),
            utmCampaign: z.string().optional(),
            utmTerm: z.string().optional(),
            oppId: z.string().optional(),
        })
        .transform((v) => {
            return {
                ...(v.email === undefined ? null : { email: v.email }),
                token: v.token,
                ...(v.tokenName === undefined ? null : { tokenName: v.tokenName }),
                ...(v.ssoUserId === undefined ? null : { ssoUserId: v.ssoUserId }),
                ...(v.teamName === undefined ? null : { teamName: v.teamName }),
                ...(v.teamSlug === undefined ? null : { teamSlug: v.teamSlug }),
                ...(v.teamPlan === undefined ? null : { teamPlan: v.teamPlan }),
                ...(v.sessionReferrer === undefined
                    ? null
                    : { sessionReferrer: v.sessionReferrer }),
                ...(v.landingPage === undefined ? null : { landingPage: v.landingPage }),
                ...(v.pageBeforeConversionPage === undefined
                    ? null
                    : { pageBeforeConversionPage: v.pageBeforeConversionPage }),
                ...(v.utmSource === undefined ? null : { utmSource: v.utmSource }),
                ...(v.utmMedium === undefined ? null : { utmMedium: v.utmMedium }),
                ...(v.utmCampaign === undefined ? null : { utmCampaign: v.utmCampaign }),
                ...(v.utmTerm === undefined ? null : { utmTerm: v.utmTerm }),
                ...(v.oppId === undefined ? null : { oppId: v.oppId }),
            };
        });

    export type Outbound = {
        email?: string | undefined;
        token: string;
        tokenName?: string | undefined;
        ssoUserId?: string | undefined;
        teamName?: string | undefined;
        teamSlug?: string | undefined;
        teamPlan?: string | undefined;
        sessionReferrer?: string | undefined;
        landingPage?: string | undefined;
        pageBeforeConversionPage?: string | undefined;
        utmSource?: string | undefined;
        utmMedium?: string | undefined;
        utmCampaign?: string | undefined;
        utmTerm?: string | undefined;
        oppId?: string | undefined;
    };

    export const outboundSchema: z.ZodType<Outbound, z.ZodTypeDef, VerifyTokenRequest> = z
        .object({
            email: z.string().optional(),
            token: z.string(),
            tokenName: z.string().optional(),
            ssoUserId: z.string().optional(),
            teamName: z.string().optional(),
            teamSlug: z.string().optional(),
            teamPlan: TeamPlan$.outboundSchema.optional(),
            sessionReferrer: z.string().optional(),
            landingPage: z.string().optional(),
            pageBeforeConversionPage: z.string().optional(),
            utmSource: z.string().optional(),
            utmMedium: z.string().optional(),
            utmCampaign: z.string().optional(),
            utmTerm: z.string().optional(),
            oppId: z.string().optional(),
        })
        .transform((v) => {
            return {
                ...(v.email === undefined ? null : { email: v.email }),
                token: v.token,
                ...(v.tokenName === undefined ? null : { tokenName: v.tokenName }),
                ...(v.ssoUserId === undefined ? null : { ssoUserId: v.ssoUserId }),
                ...(v.teamName === undefined ? null : { teamName: v.teamName }),
                ...(v.teamSlug === undefined ? null : { teamSlug: v.teamSlug }),
                ...(v.teamPlan === undefined ? null : { teamPlan: v.teamPlan }),
                ...(v.sessionReferrer === undefined
                    ? null
                    : { sessionReferrer: v.sessionReferrer }),
                ...(v.landingPage === undefined ? null : { landingPage: v.landingPage }),
                ...(v.pageBeforeConversionPage === undefined
                    ? null
                    : { pageBeforeConversionPage: v.pageBeforeConversionPage }),
                ...(v.utmSource === undefined ? null : { utmSource: v.utmSource }),
                ...(v.utmMedium === undefined ? null : { utmMedium: v.utmMedium }),
                ...(v.utmCampaign === undefined ? null : { utmCampaign: v.utmCampaign }),
                ...(v.utmTerm === undefined ? null : { utmTerm: v.utmTerm }),
                ...(v.oppId === undefined ? null : { oppId: v.oppId }),
            };
        });
}

/** @internal */
export namespace VerifyTokenResponseBody$ {
    export const inboundSchema: z.ZodType<VerifyTokenResponseBody, z.ZodTypeDef, unknown> = z
        .object({
            token: z.string(),
            email: z.string(),
            teamId: z.string().optional(),
        })
        .transform((v) => {
            return {
                token: v.token,
                email: v.email,
                ...(v.teamId === undefined ? null : { teamId: v.teamId }),
            };
        });

    export type Outbound = {
        token: string;
        email: string;
        teamId?: string | undefined;
    };

    export const outboundSchema: z.ZodType<Outbound, z.ZodTypeDef, VerifyTokenResponseBody> = z
        .object({
            token: z.string(),
            email: z.string(),
            teamId: z.string().optional(),
        })
        .transform((v) => {
            return {
                token: v.token,
                email: v.email,
                ...(v.teamId === undefined ? null : { teamId: v.teamId }),
            };
        });
}

/** @internal */
export namespace VerifyTokenResponse$ {
    export const inboundSchema: z.ZodType<VerifyTokenResponse, z.ZodTypeDef, unknown> = z
        .object({
            HttpMeta: components.HTTPMetadata$.inboundSchema,
            object: z.lazy(() => VerifyTokenResponseBody$.inboundSchema).optional(),
        })
        .transform((v) => {
            return {
                httpMeta: v.HttpMeta,
                ...(v.object === undefined ? null : { object: v.object }),
            };
        });

    export type Outbound = {
        HttpMeta: components.HTTPMetadata$.Outbound;
        object?: VerifyTokenResponseBody$.Outbound | undefined;
    };

    export const outboundSchema: z.ZodType<Outbound, z.ZodTypeDef, VerifyTokenResponse> = z
        .object({
            httpMeta: components.HTTPMetadata$.outboundSchema,
            object: z.lazy(() => VerifyTokenResponseBody$.outboundSchema).optional(),
        })
        .transform((v) => {
            return {
                HttpMeta: v.httpMeta,
                ...(v.object === undefined ? null : { object: v.object }),
            };
        });
}
