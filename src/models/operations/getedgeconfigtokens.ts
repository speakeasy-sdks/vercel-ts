/*
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

import * as components from "../components";
import * as z from "zod";

export type GetEdgeConfigTokensRequest = {
    edgeConfigId: string;
    /**
     * The Team identifier to perform the request on behalf of.
     */
    teamId?: string | undefined;
    /**
     * The Team slug to perform the request on behalf of.
     */
    slug?: string | undefined;
};

export type GetEdgeConfigTokensResponse = {
    httpMeta: components.HTTPMetadata;
    /**
     * The EdgeConfig.
     */
    edgeConfigToken?: components.EdgeConfigToken | undefined;
};

/** @internal */
export namespace GetEdgeConfigTokensRequest$ {
    export const inboundSchema: z.ZodType<GetEdgeConfigTokensRequest, z.ZodTypeDef, unknown> = z
        .object({
            edgeConfigId: z.string(),
            teamId: z.string().optional(),
            slug: z.string().optional(),
        })
        .transform((v) => {
            return {
                edgeConfigId: v.edgeConfigId,
                ...(v.teamId === undefined ? null : { teamId: v.teamId }),
                ...(v.slug === undefined ? null : { slug: v.slug }),
            };
        });

    export type Outbound = {
        edgeConfigId: string;
        teamId?: string | undefined;
        slug?: string | undefined;
    };

    export const outboundSchema: z.ZodType<Outbound, z.ZodTypeDef, GetEdgeConfigTokensRequest> = z
        .object({
            edgeConfigId: z.string(),
            teamId: z.string().optional(),
            slug: z.string().optional(),
        })
        .transform((v) => {
            return {
                edgeConfigId: v.edgeConfigId,
                ...(v.teamId === undefined ? null : { teamId: v.teamId }),
                ...(v.slug === undefined ? null : { slug: v.slug }),
            };
        });
}

/** @internal */
export namespace GetEdgeConfigTokensResponse$ {
    export const inboundSchema: z.ZodType<GetEdgeConfigTokensResponse, z.ZodTypeDef, unknown> = z
        .object({
            HttpMeta: components.HTTPMetadata$.inboundSchema,
            EdgeConfigToken: components.EdgeConfigToken$.inboundSchema.optional(),
        })
        .transform((v) => {
            return {
                httpMeta: v.HttpMeta,
                ...(v.EdgeConfigToken === undefined
                    ? null
                    : { edgeConfigToken: v.EdgeConfigToken }),
            };
        });

    export type Outbound = {
        HttpMeta: components.HTTPMetadata$.Outbound;
        EdgeConfigToken?: components.EdgeConfigToken$.Outbound | undefined;
    };

    export const outboundSchema: z.ZodType<Outbound, z.ZodTypeDef, GetEdgeConfigTokensResponse> = z
        .object({
            httpMeta: components.HTTPMetadata$.outboundSchema,
            edgeConfigToken: components.EdgeConfigToken$.outboundSchema.optional(),
        })
        .transform((v) => {
            return {
                HttpMeta: v.httpMeta,
                ...(v.edgeConfigToken === undefined
                    ? null
                    : { EdgeConfigToken: v.edgeConfigToken }),
            };
        });
}
