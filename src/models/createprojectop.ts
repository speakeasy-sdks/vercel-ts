/*
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

import { remap as remap$ } from "../lib/primitives.js";
import { ACLAction, ACLAction$ } from "./aclaction.js";
import * as z from "zod";

export enum Target2 {
    Production = "production",
    Preview = "preview",
    Development = "development",
}

export enum Target1 {
    Production = "production",
    Preview = "preview",
    Development = "development",
}

/**
 * Deployment Target or Targets in which the ENV variable will be used
 */
export type CreateProjectTarget = Target1 | Array<Target2>;

/**
 * Type of the ENV variable
 */
export enum CreateProjectType {
    System = "system",
    Secret = "secret",
    Encrypted = "encrypted",
    Plain = "plain",
    Sensitive = "sensitive",
}

export type EnvironmentVariables = {
    /**
     * Name of the ENV variable
     */
    key: string;
    /**
     * Deployment Target or Targets in which the ENV variable will be used
     */
    target: Target1 | Array<Target2>;
    /**
     * If defined, the git branch of the environment variable (must have target=preview)
     */
    gitBranch?: string | undefined;
    /**
     * Type of the ENV variable
     */
    type?: CreateProjectType | undefined;
    /**
     * Value for the ENV variable
     */
    value: string;
};

/**
 * The framework that is being used for this project. When `null` is used no framework is selected
 */
export enum CreateProjectFramework {
    Blitzjs = "blitzjs",
    Nextjs = "nextjs",
    Gatsby = "gatsby",
    Remix = "remix",
    Astro = "astro",
    Hexo = "hexo",
    Eleventy = "eleventy",
    Docusaurus2 = "docusaurus-2",
    Docusaurus = "docusaurus",
    Preact = "preact",
    Solidstart1 = "solidstart-1",
    Solidstart = "solidstart",
    Dojo = "dojo",
    Ember = "ember",
    Vue = "vue",
    Scully = "scully",
    IonicAngular = "ionic-angular",
    Angular = "angular",
    Polymer = "polymer",
    Svelte = "svelte",
    Sveltekit = "sveltekit",
    Sveltekit1 = "sveltekit-1",
    IonicReact = "ionic-react",
    CreateReactApp = "create-react-app",
    Gridsome = "gridsome",
    Umijs = "umijs",
    Sapper = "sapper",
    Saber = "saber",
    Stencil = "stencil",
    Nuxtjs = "nuxtjs",
    Redwoodjs = "redwoodjs",
    Hugo = "hugo",
    Jekyll = "jekyll",
    Brunch = "brunch",
    Middleman = "middleman",
    Zola = "zola",
    Hydrogen = "hydrogen",
    Vite = "vite",
    Vitepress = "vitepress",
    Vuepress = "vuepress",
    Parcel = "parcel",
    Sanity = "sanity",
    Storybook = "storybook",
}

/**
 * The Git Provider of the repository
 */
export enum CreateProjectProjectsType {
    Github = "github",
    Gitlab = "gitlab",
    Bitbucket = "bitbucket",
}

/**
 * The Git Repository that will be connected to the project. When this is defined, any pushes to the specified connected Git Repository will be automatically deployed
 */
export type GitRepository = {
    /**
     * The name of the git repository. For example: \"vercel/next.js\"
     */
    repo: string;
    /**
     * The Git Provider of the repository
     */
    type: CreateProjectProjectsType;
};

export type CreateProjectRequestBody = {
    /**
     * The build command for this project. When `null` is used this value will be automatically detected
     */
    buildCommand?: string | null | undefined;
    commandForIgnoringBuildStep?: string | null | undefined;
    /**
     * The dev command for this project. When `null` is used this value will be automatically detected
     */
    devCommand?: string | null | undefined;
    /**
     * Collection of ENV Variables the Project will use
     */
    environmentVariables?: Array<EnvironmentVariables> | undefined;
    /**
     * The framework that is being used for this project. When `null` is used no framework is selected
     */
    framework?: CreateProjectFramework | undefined;
    /**
     * The Git Repository that will be connected to the project. When this is defined, any pushes to the specified connected Git Repository will be automatically deployed
     */
    gitRepository?: GitRepository | undefined;
    /**
     * The install command for this project. When `null` is used this value will be automatically detected
     */
    installCommand?: string | null | undefined;
    /**
     * The desired name for the project
     */
    name: string;
    /**
     * Opts-out of the message prompting a CLI user to connect a Git repository in `vercel link`.
     *
     * @deprecated field: This will be removed in a future release, please migrate away from it as soon as possible.
     */
    skipGitConnectDuringLink?: boolean | undefined;
    /**
     * The output directory of the project. When `null` is used this value will be automatically detected
     */
    outputDirectory?: string | null | undefined;
    /**
     * Specifies whether the source code and logs of the deployments for this project should be public or not
     */
    publicSource?: boolean | null | undefined;
    /**
     * The name of a directory or relative path to the source code of your project. When `null` is used it will default to the project root
     */
    rootDirectory?: string | null | undefined;
    /**
     * The region to deploy Serverless Functions in this project
     */
    serverlessFunctionRegion?: string | null | undefined;
    /**
     * Specifies whether Zero Config Failover is enabled for this project.
     */
    serverlessFunctionZeroConfigFailover?: boolean | undefined;
};

export type CreateProjectRequest = {
    /**
     * The Team identifier to perform the request on behalf of.
     */
    teamId?: string | undefined;
    /**
     * The Team slug to perform the request on behalf of.
     */
    slug?: string | undefined;
    requestBody?: CreateProjectRequestBody | undefined;
};

export type CreateProjectAnalytics = {
    id: string;
    canceledAt?: number | null | undefined;
    disabledAt: number;
    enabledAt: number;
    paidAt?: number | undefined;
    sampleRatePercent?: number | null | undefined;
    spendLimitInDollars?: number | null | undefined;
};

export type CreateProjectSpeedInsights = {
    id: string;
    enabledAt?: number | undefined;
    disabledAt?: number | undefined;
    canceledAt?: number | undefined;
    hasData?: boolean | undefined;
    paidAt?: number | undefined;
};

export type CreateProjectDefinitions = {
    /**
     * The hostname that should be used.
     */
    host: string;
    /**
     * The path that should be called for the cronjob.
     */
    path: string;
    /**
     * The cron expression.
     */
    schedule: string;
};

export type CreateProjectCrons = {
    /**
     * The time the feature was enabled for this project. Note: It enables automatically with the first Deployment that outputs cronjobs.
     */
    enabledAt: number;
    /**
     * The time the feature was disabled for this project.
     */
    disabledAt: number | null;
    updatedAt: number;
    /**
     * The ID of the Deployment from which the definitions originated.
     */
    deploymentId: string | null;
    definitions: Array<CreateProjectDefinitions>;
};

export type CreateProjectDataCache = {
    userDisabled: boolean;
    storageSizeBytes?: number | null | undefined;
    unlimited?: boolean | undefined;
};

export enum CreateProjectTarget2 {
    Production = "production",
    Preview = "preview",
    Development = "development",
}

export enum CreateProjectTarget1 {
    Production = "production",
    Preview = "preview",
    Development = "development",
}

export type CreateProjectProjectsTarget = Array<CreateProjectTarget1> | CreateProjectTarget2;

export enum CreateProjectProjectsResponseType {
    System = "system",
    Secret = "secret",
    Encrypted = "encrypted",
    Plain = "plain",
    Sensitive = "sensitive",
}

export enum CreateProjectContentHintProjectsResponse200ApplicationJSONResponseBodyEnv14Type {
    IntegrationStoreSecret = "integration-store-secret",
}

export type ContentHint14 = {
    type: CreateProjectContentHintProjectsResponse200ApplicationJSONResponseBodyEnv14Type;
    storeId: string;
};

export enum CreateProjectContentHintProjectsResponse200ApplicationJSONResponseBodyEnv13Type {
    PostgresUrlNoSsl = "postgres-url-no-ssl",
}

export type ContentHint13 = {
    type: CreateProjectContentHintProjectsResponse200ApplicationJSONResponseBodyEnv13Type;
    storeId: string;
};

export enum CreateProjectContentHintProjectsResponse200ApplicationJSONResponseBodyEnv12Type {
    PostgresDatabase = "postgres-database",
}

export type ContentHint12 = {
    type: CreateProjectContentHintProjectsResponse200ApplicationJSONResponseBodyEnv12Type;
    storeId: string;
};

export enum CreateProjectContentHintProjectsResponse200ApplicationJSONResponseBodyEnv11Type {
    PostgresPassword = "postgres-password",
}

export type ContentHint11 = {
    type: CreateProjectContentHintProjectsResponse200ApplicationJSONResponseBodyEnv11Type;
    storeId: string;
};

export enum CreateProjectContentHintProjectsResponse200ApplicationJSONResponseBodyEnv10Type {
    PostgresHost = "postgres-host",
}

export type CreateProjectContentHint10 = {
    type: CreateProjectContentHintProjectsResponse200ApplicationJSONResponseBodyEnv10Type;
    storeId: string;
};

export enum CreateProjectContentHintProjectsResponse200ApplicationJSONResponseBodyEnv9Type {
    PostgresUser = "postgres-user",
}

export type CreateProjectContentHint9 = {
    type: CreateProjectContentHintProjectsResponse200ApplicationJSONResponseBodyEnv9Type;
    storeId: string;
};

export enum CreateProjectContentHintProjectsResponse200ApplicationJSONResponseBodyEnv8Type {
    PostgresPrismaUrl = "postgres-prisma-url",
}

export type CreateProjectContentHint8 = {
    type: CreateProjectContentHintProjectsResponse200ApplicationJSONResponseBodyEnv8Type;
    storeId: string;
};

export enum CreateProjectContentHintProjectsResponse200ApplicationJSONResponseBodyEnvType {
    PostgresUrlNonPooling = "postgres-url-non-pooling",
}

export type CreateProjectContentHint7 = {
    type: CreateProjectContentHintProjectsResponse200ApplicationJSONResponseBodyEnvType;
    storeId: string;
};

export enum CreateProjectContentHintProjectsResponse200ApplicationJSONResponseBodyType {
    PostgresUrl = "postgres-url",
}

export type CreateProjectContentHint6 = {
    type: CreateProjectContentHintProjectsResponse200ApplicationJSONResponseBodyType;
    storeId: string;
};

export enum CreateProjectContentHintProjectsResponse200ApplicationJSONType {
    BlobReadWriteToken = "blob-read-write-token",
}

export type CreateProjectContentHint5 = {
    type: CreateProjectContentHintProjectsResponse200ApplicationJSONType;
    storeId: string;
};

export enum CreateProjectContentHintProjectsResponse200Type {
    RedisRestApiReadOnlyToken = "redis-rest-api-read-only-token",
}

export type CreateProjectContentHint4 = {
    type: CreateProjectContentHintProjectsResponse200Type;
    storeId: string;
};

export enum CreateProjectContentHintProjectsResponseType {
    RedisRestApiToken = "redis-rest-api-token",
}

export type CreateProjectContentHint3 = {
    type: CreateProjectContentHintProjectsResponseType;
    storeId: string;
};

export enum CreateProjectContentHintProjectsType {
    RedisRestApiUrl = "redis-rest-api-url",
}

export type CreateProjectContentHint2 = {
    type: CreateProjectContentHintProjectsType;
    storeId: string;
};

export enum CreateProjectContentHintType {
    RedisUrl = "redis-url",
}

export type CreateProjectContentHint1 = {
    type: CreateProjectContentHintType;
    storeId: string;
};

export type CreateProjectContentHint =
    | CreateProjectContentHint1
    | CreateProjectContentHint2
    | CreateProjectContentHint3
    | CreateProjectContentHint4
    | CreateProjectContentHint5
    | CreateProjectContentHint6
    | CreateProjectContentHint7
    | CreateProjectContentHint8
    | CreateProjectContentHint9
    | CreateProjectContentHint10
    | ContentHint11
    | ContentHint12
    | ContentHint13
    | ContentHint14;

export enum CreateProjectProjectsResponse200ApplicationJSONResponseBodyType {
    FlagsSecret = "flags-secret",
}

/**
 * Similar to `contentHints`, but should not be exposed to the user.
 */
export type CreateProjectInternalContentHint = {
    type: CreateProjectProjectsResponse200ApplicationJSONResponseBodyType;
    /**
     * Contains the `value` of the env variable, encrypted with a special key to make decryption possible in the subscriber Lambda.
     */
    encryptedValue: string;
};

export type CreateProjectEnv = {
    target?: Array<CreateProjectTarget1> | CreateProjectTarget2 | undefined;
    type: CreateProjectProjectsResponseType;
    id?: string | undefined;
    key: string;
    value: string;
    configurationId?: string | null | undefined;
    createdAt?: number | undefined;
    updatedAt?: number | undefined;
    createdBy?: string | null | undefined;
    updatedBy?: string | null | undefined;
    gitBranch?: string | undefined;
    edgeConfigId?: string | null | undefined;
    edgeConfigTokenId?: string | null | undefined;
    contentHint?:
        | CreateProjectContentHint1
        | CreateProjectContentHint2
        | CreateProjectContentHint3
        | CreateProjectContentHint4
        | CreateProjectContentHint5
        | CreateProjectContentHint6
        | CreateProjectContentHint7
        | CreateProjectContentHint8
        | CreateProjectContentHint9
        | CreateProjectContentHint10
        | ContentHint11
        | ContentHint12
        | ContentHint13
        | ContentHint14
        | null
        | undefined;
    /**
     * Similar to `contentHints`, but should not be exposed to the user.
     */
    internalContentHint?: CreateProjectInternalContentHint | null | undefined;
    /**
     * Whether `value` is decrypted.
     */
    decrypted?: boolean | undefined;
    comment?: string | undefined;
    customEnvironmentId?: string | undefined;
};

export enum CreateProjectProjectsFramework {
    Blitzjs = "blitzjs",
    Nextjs = "nextjs",
    Gatsby = "gatsby",
    Remix = "remix",
    Astro = "astro",
    Hexo = "hexo",
    Eleventy = "eleventy",
    Docusaurus2 = "docusaurus-2",
    Docusaurus = "docusaurus",
    Preact = "preact",
    Solidstart1 = "solidstart-1",
    Solidstart = "solidstart",
    Dojo = "dojo",
    Ember = "ember",
    Vue = "vue",
    Scully = "scully",
    IonicAngular = "ionic-angular",
    Angular = "angular",
    Polymer = "polymer",
    Svelte = "svelte",
    Sveltekit = "sveltekit",
    Sveltekit1 = "sveltekit-1",
    IonicReact = "ionic-react",
    CreateReactApp = "create-react-app",
    Gridsome = "gridsome",
    Umijs = "umijs",
    Sapper = "sapper",
    Saber = "saber",
    Stencil = "stencil",
    Nuxtjs = "nuxtjs",
    Redwoodjs = "redwoodjs",
    Hugo = "hugo",
    Jekyll = "jekyll",
    Brunch = "brunch",
    Middleman = "middleman",
    Zola = "zola",
    Hydrogen = "hydrogen",
    Vite = "vite",
    Vitepress = "vitepress",
    Vuepress = "vuepress",
    Parcel = "parcel",
    Sanity = "sanity",
    Storybook = "storybook",
}

export type CreateProjectAliasAssigned = number | boolean;

export type CreateProjectAliasError = {
    code: string;
    message: string;
};

export type CreateProjectBuilds = {
    use: string;
    src?: string | undefined;
    dest?: string | undefined;
};

export type CreateProjectCreator = {
    email: string;
    githubLogin?: string | undefined;
    gitlabLogin?: string | undefined;
    uid: string;
    username: string;
};

export enum CreateProjectPlan {
    Pro = "pro",
    Enterprise = "enterprise",
    Hobby = "hobby",
}

export enum CreateProjectReadyState {
    Building = "BUILDING",
    Error = "ERROR",
    Initializing = "INITIALIZING",
    Queued = "QUEUED",
    Ready = "READY",
    Canceled = "CANCELED",
}

export enum CreateProjectReadySubstate {
    Staged = "STAGED",
    Promoted = "PROMOTED",
}

export enum CreateProjectProjectsResponse200Type {
    Lambdas = "LAMBDAS",
}

export enum CreateProjectChecksConclusion {
    Succeeded = "succeeded",
    Failed = "failed",
    Skipped = "skipped",
    Canceled = "canceled",
}

export enum CreateProjectChecksState {
    Registered = "registered",
    Running = "running",
    Completed = "completed",
}

export type CreateProjectOidcTokenClaims = string | Array<string>;

export type CreateProjectLatestDeployments = {
    alias?: Array<string> | undefined;
    aliasAssigned?: number | boolean | null | undefined;
    aliasError?: CreateProjectAliasError | null | undefined;
    aliasFinal?: string | null | undefined;
    automaticAliases?: Array<string> | undefined;
    builds?: Array<CreateProjectBuilds> | undefined;
    connectBuildsEnabled?: boolean | undefined;
    connectConfigurationId?: string | undefined;
    createdAt: number;
    createdIn: string;
    creator: CreateProjectCreator | null;
    deploymentHostname: string;
    name: string;
    forced?: boolean | undefined;
    id: string;
    meta?: { [k: string]: string } | undefined;
    monorepoManager?: string | null | undefined;
    plan: CreateProjectPlan;
    private: boolean;
    readyState: CreateProjectReadyState;
    readySubstate?: CreateProjectReadySubstate | undefined;
    requestedAt?: number | undefined;
    target?: string | null | undefined;
    teamId?: string | null | undefined;
    type: CreateProjectProjectsResponse200Type;
    url: string;
    userId: string;
    withCache?: boolean | undefined;
    checksConclusion?: CreateProjectChecksConclusion | undefined;
    checksState?: CreateProjectChecksState | undefined;
    readyAt?: number | undefined;
    buildingAt?: number | undefined;
    /**
     * Whether or not preview comments are enabled for the deployment
     */
    previewCommentsEnabled?: boolean | undefined;
    oidcTokenClaims?: { [k: string]: string | Array<string> } | undefined;
};

export enum CreateProjectLinkProjectsResponseType {
    Bitbucket = "bitbucket",
}

export type CreateProjectLinkProjectsResponseDeployHooks = {
    createdAt?: number | undefined;
    id: string;
    name: string;
    ref: string;
    url: string;
};

export type CreateProjectLink3 = {
    name?: string | undefined;
    slug?: string | undefined;
    owner?: string | undefined;
    type?: CreateProjectLinkProjectsResponseType | undefined;
    uuid?: string | undefined;
    workspaceUuid?: string | undefined;
    createdAt?: number | undefined;
    deployHooks: Array<CreateProjectLinkProjectsResponseDeployHooks>;
    gitCredentialId?: string | undefined;
    updatedAt?: number | undefined;
    sourceless?: boolean | undefined;
    productionBranch?: string | undefined;
};

export enum CreateProjectLinkProjectsType {
    Gitlab = "gitlab",
}

export type CreateProjectLinkProjectsDeployHooks = {
    createdAt?: number | undefined;
    id: string;
    name: string;
    ref: string;
    url: string;
};

export type CreateProjectLink2 = {
    projectId?: string | undefined;
    projectName?: string | undefined;
    projectNameWithNamespace?: string | undefined;
    projectNamespace?: string | undefined;
    projectUrl?: string | undefined;
    type?: CreateProjectLinkProjectsType | undefined;
    createdAt?: number | undefined;
    deployHooks: Array<CreateProjectLinkProjectsDeployHooks>;
    gitCredentialId?: string | undefined;
    updatedAt?: number | undefined;
    sourceless?: boolean | undefined;
    productionBranch?: string | undefined;
};

export enum CreateProjectLinkType {
    Github = "github",
}

export type CreateProjectLinkDeployHooks = {
    createdAt?: number | undefined;
    id: string;
    name: string;
    ref: string;
    url: string;
};

export type CreateProjectLink1 = {
    org?: string | undefined;
    repo?: string | undefined;
    repoId?: number | undefined;
    type?: CreateProjectLinkType | undefined;
    createdAt?: number | undefined;
    deployHooks: Array<CreateProjectLinkDeployHooks>;
    gitCredentialId?: string | undefined;
    updatedAt?: number | undefined;
    sourceless?: boolean | undefined;
    productionBranch?: string | undefined;
};

export type CreateProjectLink = CreateProjectLink1 | CreateProjectLink2 | CreateProjectLink3;

export enum CreateProjectNodeVersion {
    TwentyX = "20.x",
    EighteenX = "18.x",
    SixteenX = "16.x",
    FourteenX = "14.x",
    TwelveX = "12.x",
    TenX = "10.x",
    Eight10X = "8.10.x",
}

export type CreateProjectPaths = {
    value: string;
};

export type CreateProjectOptionsAllowlist = {
    paths: Array<CreateProjectPaths>;
};

export type CreateProjectPasswordProtection = {};

export enum CreateProjectDeploymentType {
    All = "all",
    Preview = "preview",
    ProdDeploymentUrlsAndAllPreviews = "prod_deployment_urls_and_all_previews",
}

export type CreateProjectSsoProtection = {
    deploymentType: CreateProjectDeploymentType;
};

export type CreateProjectTargets = string | Array<string>;

export type CreateProjectPermissions = {
    accessGroup?: Array<ACLAction> | undefined;
    aliasGlobal?: Array<ACLAction> | undefined;
    analyticsSampling?: Array<ACLAction> | undefined;
    analyticsUsage?: Array<ACLAction> | undefined;
    auditLog?: Array<ACLAction> | undefined;
    billingAddress?: Array<ACLAction> | undefined;
    billingInformation?: Array<ACLAction> | undefined;
    billingInvoice?: Array<ACLAction> | undefined;
    billingInvoiceEmailRecipient?: Array<ACLAction> | undefined;
    billingInvoiceLanguage?: Array<ACLAction> | undefined;
    billingPlan?: Array<ACLAction> | undefined;
    billingPurchaseOrder?: Array<ACLAction> | undefined;
    billingTaxId?: Array<ACLAction> | undefined;
    blob?: Array<ACLAction> | undefined;
    budget?: Array<ACLAction> | undefined;
    cacheArtifact?: Array<ACLAction> | undefined;
    cacheArtifactUsageEvent?: Array<ACLAction> | undefined;
    codeChecks?: Array<ACLAction> | undefined;
    concurrentBuilds?: Array<ACLAction> | undefined;
    connect?: Array<ACLAction> | undefined;
    connectConfiguration?: Array<ACLAction> | undefined;
    domain?: Array<ACLAction> | undefined;
    domainAcceptDelegation?: Array<ACLAction> | undefined;
    domainAuthCodes?: Array<ACLAction> | undefined;
    domainCertificate?: Array<ACLAction> | undefined;
    domainCheckConfig?: Array<ACLAction> | undefined;
    domainMove?: Array<ACLAction> | undefined;
    domainPurchase?: Array<ACLAction> | undefined;
    domainRecord?: Array<ACLAction> | undefined;
    domainTransferIn?: Array<ACLAction> | undefined;
    event?: Array<ACLAction> | undefined;
    ownEvent?: Array<ACLAction> | undefined;
    sensitiveEnvironmentVariablePolicy?: Array<ACLAction> | undefined;
    fileUpload?: Array<ACLAction> | undefined;
    gitRepository?: Array<ACLAction> | undefined;
    ipBlocking?: Array<ACLAction> | undefined;
    integration?: Array<ACLAction> | undefined;
    integrationConfiguration?: Array<ACLAction> | undefined;
    integrationConfigurationTransfer?: Array<ACLAction> | undefined;
    integrationConfigurationProjects?: Array<ACLAction> | undefined;
    integrationVercelConfigurationOverride?: Array<ACLAction> | undefined;
    integrationStore?: Array<ACLAction> | undefined;
    integrationEvent?: Array<ACLAction> | undefined;
    integrationResourceSecrets?: Array<ACLAction> | undefined;
    marketplaceBillingData?: Array<ACLAction> | undefined;
    jobGlobal?: Array<ACLAction> | undefined;
    logDrain?: Array<ACLAction> | undefined;
    monitoring?: Array<ACLAction> | undefined;
    monitoringSettings?: Array<ACLAction> | undefined;
    monitoringQuery?: Array<ACLAction> | undefined;
    monitoringChart?: Array<ACLAction> | undefined;
    monitoringAlert?: Array<ACLAction> | undefined;
    notificationDeploymentFailed?: Array<ACLAction> | undefined;
    notificationDomainConfiguration?: Array<ACLAction> | undefined;
    notificationDomainExpire?: Array<ACLAction> | undefined;
    notificationDomainMoved?: Array<ACLAction> | undefined;
    notificationDomainPurchase?: Array<ACLAction> | undefined;
    notificationDomainRenewal?: Array<ACLAction> | undefined;
    notificationDomainTransfer?: Array<ACLAction> | undefined;
    notificationDomainUnverified?: Array<ACLAction> | undefined;
    notificationMonitoringAlert?: Array<ACLAction> | undefined;
    notificationPaymentFailed?: Array<ACLAction> | undefined;
    notificationUsageAlert?: Array<ACLAction> | undefined;
    notificationCustomerBudget?: Array<ACLAction> | undefined;
    notificationStatementOfReasons?: Array<ACLAction> | undefined;
    oauth2Connection?: Array<ACLAction> | undefined;
    openTelemetryEndpoint?: Array<ACLAction> | undefined;
    paymentMethod?: Array<ACLAction> | undefined;
    permissions?: Array<ACLAction> | undefined;
    postgres?: Array<ACLAction> | undefined;
    previewDeploymentSuffix?: Array<ACLAction> | undefined;
    proTrialOnboarding?: Array<ACLAction> | undefined;
    seawallConfig?: Array<ACLAction> | undefined;
    sharedEnvVars?: Array<ACLAction> | undefined;
    sharedEnvVarsProduction?: Array<ACLAction> | undefined;
    space?: Array<ACLAction> | undefined;
    spaceRun?: Array<ACLAction> | undefined;
    passwordProtectionInvoiceItem?: Array<ACLAction> | undefined;
    rateLimit?: Array<ACLAction> | undefined;
    redis?: Array<ACLAction> | undefined;
    repository?: Array<ACLAction> | undefined;
    remoteCaching?: Array<ACLAction> | undefined;
    samlConfig?: Array<ACLAction> | undefined;
    secret?: Array<ACLAction> | undefined;
    redisStoreTokenSet?: Array<ACLAction> | undefined;
    blobStoreTokenSet?: Array<ACLAction> | undefined;
    postgresStoreTokenSet?: Array<ACLAction> | undefined;
    integrationStoreTokenSet?: Array<ACLAction> | undefined;
    supportCase?: Array<ACLAction> | undefined;
    supportCaseComment?: Array<ACLAction> | undefined;
    dataCacheBillingSettings?: Array<ACLAction> | undefined;
    team?: Array<ACLAction> | undefined;
    teamAccessRequest?: Array<ACLAction> | undefined;
    teamFellowMembership?: Array<ACLAction> | undefined;
    teamInvite?: Array<ACLAction> | undefined;
    teamInviteCode?: Array<ACLAction> | undefined;
    teamJoin?: Array<ACLAction> | undefined;
    teamOwnMembership?: Array<ACLAction> | undefined;
    teamOwnMembershipDisconnectSAML?: Array<ACLAction> | undefined;
    token?: Array<ACLAction> | undefined;
    usage?: Array<ACLAction> | undefined;
    usageCycle?: Array<ACLAction> | undefined;
    user?: Array<ACLAction> | undefined;
    userConnection?: Array<ACLAction> | undefined;
    webAnalyticsPlan?: Array<ACLAction> | undefined;
    webAuthn?: Array<ACLAction> | undefined;
    edgeConfig?: Array<ACLAction> | undefined;
    edgeConfigItem?: Array<ACLAction> | undefined;
    edgeConfigSchema?: Array<ACLAction> | undefined;
    edgeConfigToken?: Array<ACLAction> | undefined;
    webhook?: Array<ACLAction> | undefined;
    webhookEvent?: Array<ACLAction> | undefined;
    endpointVerification?: Array<ACLAction> | undefined;
    projectTransferIn?: Array<ACLAction> | undefined;
    oauth2Application?: Array<ACLAction> | undefined;
    aliasProject?: Array<ACLAction> | undefined;
    aliasProtectionBypass?: Array<ACLAction> | undefined;
    productionAliasProtectionBypass?: Array<ACLAction> | undefined;
    connectConfigurationLink?: Array<ACLAction> | undefined;
    dataCacheNamespace?: Array<ACLAction> | undefined;
    deployment?: Array<ACLAction> | undefined;
    deploymentCheck?: Array<ACLAction> | undefined;
    deploymentCheckPreview?: Array<ACLAction> | undefined;
    deploymentCheckReRunFromProductionBranch?: Array<ACLAction> | undefined;
    deploymentProductionGit?: Array<ACLAction> | undefined;
    deploymentPreview?: Array<ACLAction> | undefined;
    deploymentPrivate?: Array<ACLAction> | undefined;
    deploymentPromote?: Array<ACLAction> | undefined;
    deploymentRollback?: Array<ACLAction> | undefined;
    environments?: Array<ACLAction> | undefined;
    logs?: Array<ACLAction> | undefined;
    logsPreset?: Array<ACLAction> | undefined;
    passwordProtection?: Array<ACLAction> | undefined;
    optionsAllowlist?: Array<ACLAction> | undefined;
    job?: Array<ACLAction> | undefined;
    project?: Array<ACLAction> | undefined;
    projectAccessGroup?: Array<ACLAction> | undefined;
    projectAnalyticsSampling?: Array<ACLAction> | undefined;
    projectDeploymentHook?: Array<ACLAction> | undefined;
    projectDomain?: Array<ACLAction> | undefined;
    projectDomainMove?: Array<ACLAction> | undefined;
    projectDomainCheckConfig?: Array<ACLAction> | undefined;
    projectEnvVars?: Array<ACLAction> | undefined;
    projectEnvVarsProduction?: Array<ACLAction> | undefined;
    projectEnvVarsUnownedByIntegration?: Array<ACLAction> | undefined;
    projectId?: Array<ACLAction> | undefined;
    projectIntegrationConfiguration?: Array<ACLAction> | undefined;
    projectLink?: Array<ACLAction> | undefined;
    projectMember?: Array<ACLAction> | undefined;
    projectMonitoring?: Array<ACLAction> | undefined;
    projectPermissions?: Array<ACLAction> | undefined;
    projectProductionBranch?: Array<ACLAction> | undefined;
    projectTransfer?: Array<ACLAction> | undefined;
    projectTransferOut?: Array<ACLAction> | undefined;
    projectProtectionBypass?: Array<ACLAction> | undefined;
    projectUsage?: Array<ACLAction> | undefined;
    projectAnalyticsUsage?: Array<ACLAction> | undefined;
    projectSupportCase?: Array<ACLAction> | undefined;
    projectSupportCaseComment?: Array<ACLAction> | undefined;
    projectDeploymentExpiration?: Array<ACLAction> | undefined;
    skewProtection?: Array<ACLAction> | undefined;
    analytics?: Array<ACLAction> | undefined;
    trustedIps?: Array<ACLAction> | undefined;
    webAnalytics?: Array<ACLAction> | undefined;
    sharedEnvVarConnection?: Array<ACLAction> | undefined;
};

export type CreateProjectLastRollbackTarget = {};

export enum CreateProjectJobStatus {
    Succeeded = "succeeded",
    Failed = "failed",
    Skipped = "skipped",
    Pending = "pending",
    InProgress = "in-progress",
}

export enum CreateProjectProjectsResponse200ApplicationJSONType {
    Promote = "promote",
    Rollback = "rollback",
}

export type CreateProjectLastAliasRequest = {
    fromDeploymentId: string;
    toDeploymentId: string;
    jobStatus: CreateProjectJobStatus;
    requestedAt: number;
    type: CreateProjectProjectsResponse200ApplicationJSONType;
};

export enum CreateProjectScope {
    AutomationBypass = "automation-bypass",
}

export type CreateProjectProtectionBypass = {
    createdAt: number;
    createdBy: string;
    scope: CreateProjectScope;
};

export enum CreateProjectTrustedIpsProjectsDeploymentType {
    All = "all",
    Preview = "preview",
    ProdDeploymentUrlsAndAllPreviews = "prod_deployment_urls_and_all_previews",
    Production = "production",
}

export type CreateProjectTrustedIps2 = {
    deploymentType: CreateProjectTrustedIpsProjectsDeploymentType;
};

export enum CreateProjectTrustedIpsDeploymentType {
    All = "all",
    Preview = "preview",
    ProdDeploymentUrlsAndAllPreviews = "prod_deployment_urls_and_all_previews",
    Production = "production",
}

export type TrustedIpsAddresses = {
    value: string;
    note?: string | undefined;
};

export enum TrustedIpsProtectionMode {
    Additional = "additional",
    Exclusive = "exclusive",
}

export type CreateProjectTrustedIps1 = {
    deploymentType: CreateProjectTrustedIpsDeploymentType;
    addresses: Array<TrustedIpsAddresses>;
    protectionMode: TrustedIpsProtectionMode;
};

export type CreateProjectTrustedIps = CreateProjectTrustedIps2 | CreateProjectTrustedIps1;

export type CreateProjectGitComments = {
    /**
     * Whether the Vercel bot should comment on PRs
     */
    onPullRequest: boolean;
    /**
     * Whether the Vercel bot should comment on commits
     */
    onCommit: boolean;
};

export type CreateProjectWebAnalytics = {
    id: string;
    disabledAt?: number | undefined;
    canceledAt?: number | undefined;
    enabledAt?: number | undefined;
    hasData?: boolean | undefined;
};

export type CreateProjectSrc2 = {
    re?: string | undefined;
    eq?: string | undefined;
    neq?: string | undefined;
    inc?: Array<string> | undefined;
    ninc?: Array<string> | undefined;
    pre?: string | undefined;
    suf?: string | undefined;
    gt?: number | undefined;
    gte?: number | undefined;
    lt?: number | undefined;
    lte?: number | undefined;
};

export type CreateProjectSrc = CreateProjectSrc2 | string;

export enum CreateProjectProjectsResponse200ApplicationJSONResponseBodySecurityType {
    Host = "host",
    Method = "method",
    Path = "path",
    Header = "header",
    Cookie = "cookie",
    Query = "query",
    IpAddress = "ip_address",
    Protocol = "protocol",
    Scheme = "scheme",
    Region = "region",
}

export type CreateProjectValue2 = {
    re?: string | undefined;
    eq?: string | undefined;
    neq?: string | undefined;
    inc?: Array<string> | undefined;
    ninc?: Array<string> | undefined;
    pre?: string | undefined;
    suf?: string | undefined;
    gt?: number | undefined;
    gte?: number | undefined;
    lt?: number | undefined;
    lte?: number | undefined;
};

export type CreateProjectValue = CreateProjectValue2 | string;

export type CreateProjectHas = {
    type: CreateProjectProjectsResponse200ApplicationJSONResponseBodySecurityType;
    key?: string | undefined;
    value?: CreateProjectValue2 | string | undefined;
};

export enum CreateProjectProjectsResponse200ApplicationJSONResponseBodySecurityFirewallRoutesType {
    Host = "host",
    Method = "method",
    Path = "path",
    Header = "header",
    Cookie = "cookie",
    Query = "query",
    IpAddress = "ip_address",
    Protocol = "protocol",
    Scheme = "scheme",
    Region = "region",
}

export type CreateProjectValueProjects2 = {
    re?: string | undefined;
    eq?: string | undefined;
    neq?: string | undefined;
    inc?: Array<string> | undefined;
    ninc?: Array<string> | undefined;
    pre?: string | undefined;
    suf?: string | undefined;
    gt?: number | undefined;
    gte?: number | undefined;
    lt?: number | undefined;
    lte?: number | undefined;
};

export type CreateProjectProjectsValue = CreateProjectValueProjects2 | string;

export type CreateProjectMissing = {
    type: CreateProjectProjectsResponse200ApplicationJSONResponseBodySecurityFirewallRoutesType;
    key?: string | undefined;
    value?: CreateProjectValueProjects2 | string | undefined;
};

export enum CreateProjectHandle {
    Init = "init",
    Finalize = "finalize",
}

export enum CreateProjectAction {
    Deny = "deny",
    Challenge = "challenge",
    Log = "log",
    Bypass = "bypass",
    RateLimit = "rate_limit",
}

export enum CreateProjectAlgo {
    FixedWindow = "fixed_window",
    TokenBucket = "token_bucket",
}

export type CreateProjectErl = {
    algo: CreateProjectAlgo;
    window: number;
    limit: number;
    keys: Array<string>;
};

export type CreateProjectMitigate = {
    action: CreateProjectAction;
    ruleId: string;
    erl?: CreateProjectErl | undefined;
};

export type CreateProjectFirewallRoutes = {
    src?: CreateProjectSrc2 | string | undefined;
    has?: Array<CreateProjectHas> | undefined;
    missing?: Array<CreateProjectMissing> | undefined;
    dest?: string | undefined;
    status?: number | undefined;
    handle?: CreateProjectHandle | undefined;
    mitigate?: CreateProjectMitigate | undefined;
};

export type CreateProjectSecurity = {
    attackModeEnabled?: boolean | undefined;
    attackModeUpdatedAt?: number | undefined;
    firewallEnabled?: boolean | undefined;
    firewallUpdatedAt?: number | undefined;
    attackModeActiveUntil?: number | null | undefined;
    firewallConfigVersion?: number | undefined;
    firewallRoutes?: Array<CreateProjectFirewallRoutes> | undefined;
    firewallSeawallEnabled?: boolean | undefined;
    ja3Enabled?: boolean | undefined;
    ja4Enabled?: boolean | undefined;
};

export type CreateProjectOidcTokenConfig = {
    enabled: boolean;
};

/**
 * The project was successfuly created
 */
export type CreateProjectResponseBody = {
    accountId: string;
    analytics?: CreateProjectAnalytics | undefined;
    speedInsights?: CreateProjectSpeedInsights | undefined;
    autoExposeSystemEnvs?: boolean | undefined;
    autoAssignCustomDomains?: boolean | undefined;
    autoAssignCustomDomainsUpdatedBy?: string | undefined;
    buildCommand?: string | null | undefined;
    commandForIgnoringBuildStep?: string | null | undefined;
    connectConfigurationId?: string | null | undefined;
    connectBuildsEnabled?: boolean | undefined;
    createdAt?: number | undefined;
    customerSupportCodeVisibility?: boolean | undefined;
    crons?: CreateProjectCrons | undefined;
    dataCache?: CreateProjectDataCache | undefined;
    devCommand?: string | null | undefined;
    directoryListing: boolean;
    installCommand?: string | null | undefined;
    env?: Array<CreateProjectEnv> | undefined;
    framework?: CreateProjectProjectsFramework | null | undefined;
    gitForkProtection?: boolean | undefined;
    gitLFS?: boolean | undefined;
    id: string;
    latestDeployments?: Array<CreateProjectLatestDeployments> | undefined;
    link?: CreateProjectLink1 | CreateProjectLink2 | CreateProjectLink3 | undefined;
    name: string;
    nodeVersion: CreateProjectNodeVersion;
    optionsAllowlist?: CreateProjectOptionsAllowlist | null | undefined;
    outputDirectory?: string | null | undefined;
    passiveConnectConfigurationId?: string | null | undefined;
    passwordProtection?: CreateProjectPasswordProtection | null | undefined;
    productionDeploymentsFastLane?: boolean | undefined;
    publicSource?: boolean | null | undefined;
    rootDirectory?: string | null | undefined;
    serverlessFunctionRegion?: string | null | undefined;
    serverlessFunctionZeroConfigFailover?: boolean | undefined;
    skewProtectionBoundaryAt?: number | undefined;
    skewProtectionMaxAge?: number | undefined;
    skipGitConnectDuringLink?: boolean | undefined;
    sourceFilesOutsideRootDirectory?: boolean | undefined;
    ssoProtection?: CreateProjectSsoProtection | null | undefined;
    targets?: { [k: string]: string | Array<string> } | undefined;
    transferCompletedAt?: number | undefined;
    transferStartedAt?: number | undefined;
    transferToAccountId?: string | undefined;
    transferredFromAccountId?: string | undefined;
    updatedAt?: number | undefined;
    live?: boolean | undefined;
    enablePreviewFeedback?: boolean | null | undefined;
    permissions?: CreateProjectPermissions | undefined;
    lastRollbackTarget?: CreateProjectLastRollbackTarget | null | undefined;
    lastAliasRequest?: CreateProjectLastAliasRequest | null | undefined;
    hasFloatingAliases?: boolean | undefined;
    protectionBypass?: { [k: string]: CreateProjectProtectionBypass } | undefined;
    hasActiveBranches?: boolean | undefined;
    trustedIps?: CreateProjectTrustedIps2 | CreateProjectTrustedIps1 | null | undefined;
    gitComments?: CreateProjectGitComments | undefined;
    paused?: boolean | undefined;
    concurrencyBucketName?: string | undefined;
    webAnalytics?: CreateProjectWebAnalytics | undefined;
    security?: CreateProjectSecurity | undefined;
    oidcTokenConfig?: CreateProjectOidcTokenConfig | undefined;
};

/** @internal */
export namespace Target2$ {
    export const inboundSchema: z.ZodNativeEnum<typeof Target2> = z.nativeEnum(Target2);
    export const outboundSchema: z.ZodNativeEnum<typeof Target2> = inboundSchema;
}

/** @internal */
export namespace Target1$ {
    export const inboundSchema: z.ZodNativeEnum<typeof Target1> = z.nativeEnum(Target1);
    export const outboundSchema: z.ZodNativeEnum<typeof Target1> = inboundSchema;
}

/** @internal */
export namespace CreateProjectTarget$ {
    export const inboundSchema: z.ZodType<CreateProjectTarget, z.ZodTypeDef, unknown> = z.union([
        Target1$.inboundSchema,
        z.array(Target2$.inboundSchema),
    ]);

    export type Outbound = string | Array<string>;
    export const outboundSchema: z.ZodType<Outbound, z.ZodTypeDef, CreateProjectTarget> = z.union([
        Target1$.outboundSchema,
        z.array(Target2$.outboundSchema),
    ]);
}

/** @internal */
export namespace CreateProjectType$ {
    export const inboundSchema: z.ZodNativeEnum<typeof CreateProjectType> =
        z.nativeEnum(CreateProjectType);
    export const outboundSchema: z.ZodNativeEnum<typeof CreateProjectType> = inboundSchema;
}

/** @internal */
export namespace EnvironmentVariables$ {
    export const inboundSchema: z.ZodType<EnvironmentVariables, z.ZodTypeDef, unknown> = z.object({
        key: z.string(),
        target: z.union([Target1$.inboundSchema, z.array(Target2$.inboundSchema)]),
        gitBranch: z.string().optional(),
        type: CreateProjectType$.inboundSchema.optional(),
        value: z.string(),
    });

    export type Outbound = {
        key: string;
        target: string | Array<string>;
        gitBranch?: string | undefined;
        type?: string | undefined;
        value: string;
    };

    export const outboundSchema: z.ZodType<Outbound, z.ZodTypeDef, EnvironmentVariables> = z.object(
        {
            key: z.string(),
            target: z.union([Target1$.outboundSchema, z.array(Target2$.outboundSchema)]),
            gitBranch: z.string().optional(),
            type: CreateProjectType$.outboundSchema.optional(),
            value: z.string(),
        }
    );
}

/** @internal */
export namespace CreateProjectFramework$ {
    export const inboundSchema: z.ZodNativeEnum<typeof CreateProjectFramework> =
        z.nativeEnum(CreateProjectFramework);
    export const outboundSchema: z.ZodNativeEnum<typeof CreateProjectFramework> = inboundSchema;
}

/** @internal */
export namespace CreateProjectProjectsType$ {
    export const inboundSchema: z.ZodNativeEnum<typeof CreateProjectProjectsType> =
        z.nativeEnum(CreateProjectProjectsType);
    export const outboundSchema: z.ZodNativeEnum<typeof CreateProjectProjectsType> = inboundSchema;
}

/** @internal */
export namespace GitRepository$ {
    export const inboundSchema: z.ZodType<GitRepository, z.ZodTypeDef, unknown> = z.object({
        repo: z.string(),
        type: CreateProjectProjectsType$.inboundSchema,
    });

    export type Outbound = {
        repo: string;
        type: string;
    };

    export const outboundSchema: z.ZodType<Outbound, z.ZodTypeDef, GitRepository> = z.object({
        repo: z.string(),
        type: CreateProjectProjectsType$.outboundSchema,
    });
}

/** @internal */
export namespace CreateProjectRequestBody$ {
    export const inboundSchema: z.ZodType<CreateProjectRequestBody, z.ZodTypeDef, unknown> =
        z.object({
            buildCommand: z.nullable(z.string()).optional(),
            commandForIgnoringBuildStep: z.nullable(z.string()).optional(),
            devCommand: z.nullable(z.string()).optional(),
            environmentVariables: z
                .array(z.lazy(() => EnvironmentVariables$.inboundSchema))
                .optional(),
            framework: CreateProjectFramework$.inboundSchema.optional(),
            gitRepository: z.lazy(() => GitRepository$.inboundSchema).optional(),
            installCommand: z.nullable(z.string()).optional(),
            name: z.string(),
            skipGitConnectDuringLink: z.boolean().optional(),
            outputDirectory: z.nullable(z.string()).optional(),
            publicSource: z.nullable(z.boolean()).optional(),
            rootDirectory: z.nullable(z.string()).optional(),
            serverlessFunctionRegion: z.nullable(z.string()).optional(),
            serverlessFunctionZeroConfigFailover: z.boolean().optional(),
        });

    export type Outbound = {
        buildCommand?: string | null | undefined;
        commandForIgnoringBuildStep?: string | null | undefined;
        devCommand?: string | null | undefined;
        environmentVariables?: Array<EnvironmentVariables$.Outbound> | undefined;
        framework?: string | undefined;
        gitRepository?: GitRepository$.Outbound | undefined;
        installCommand?: string | null | undefined;
        name: string;
        skipGitConnectDuringLink?: boolean | undefined;
        outputDirectory?: string | null | undefined;
        publicSource?: boolean | null | undefined;
        rootDirectory?: string | null | undefined;
        serverlessFunctionRegion?: string | null | undefined;
        serverlessFunctionZeroConfigFailover?: boolean | undefined;
    };

    export const outboundSchema: z.ZodType<Outbound, z.ZodTypeDef, CreateProjectRequestBody> =
        z.object({
            buildCommand: z.nullable(z.string()).optional(),
            commandForIgnoringBuildStep: z.nullable(z.string()).optional(),
            devCommand: z.nullable(z.string()).optional(),
            environmentVariables: z
                .array(z.lazy(() => EnvironmentVariables$.outboundSchema))
                .optional(),
            framework: CreateProjectFramework$.outboundSchema.optional(),
            gitRepository: z.lazy(() => GitRepository$.outboundSchema).optional(),
            installCommand: z.nullable(z.string()).optional(),
            name: z.string(),
            skipGitConnectDuringLink: z.boolean().optional(),
            outputDirectory: z.nullable(z.string()).optional(),
            publicSource: z.nullable(z.boolean()).optional(),
            rootDirectory: z.nullable(z.string()).optional(),
            serverlessFunctionRegion: z.nullable(z.string()).optional(),
            serverlessFunctionZeroConfigFailover: z.boolean().optional(),
        });
}

/** @internal */
export namespace CreateProjectRequest$ {
    export const inboundSchema: z.ZodType<CreateProjectRequest, z.ZodTypeDef, unknown> = z
        .object({
            teamId: z.string().optional(),
            slug: z.string().optional(),
            RequestBody: z.lazy(() => CreateProjectRequestBody$.inboundSchema).optional(),
        })
        .transform((v) => {
            return remap$(v, {
                RequestBody: "requestBody",
            });
        });

    export type Outbound = {
        teamId?: string | undefined;
        slug?: string | undefined;
        RequestBody?: CreateProjectRequestBody$.Outbound | undefined;
    };

    export const outboundSchema: z.ZodType<Outbound, z.ZodTypeDef, CreateProjectRequest> = z
        .object({
            teamId: z.string().optional(),
            slug: z.string().optional(),
            requestBody: z.lazy(() => CreateProjectRequestBody$.outboundSchema).optional(),
        })
        .transform((v) => {
            return remap$(v, {
                requestBody: "RequestBody",
            });
        });
}

/** @internal */
export namespace CreateProjectAnalytics$ {
    export const inboundSchema: z.ZodType<CreateProjectAnalytics, z.ZodTypeDef, unknown> = z.object(
        {
            id: z.string(),
            canceledAt: z.nullable(z.number()).optional(),
            disabledAt: z.number(),
            enabledAt: z.number(),
            paidAt: z.number().optional(),
            sampleRatePercent: z.nullable(z.number()).optional(),
            spendLimitInDollars: z.nullable(z.number()).optional(),
        }
    );

    export type Outbound = {
        id: string;
        canceledAt?: number | null | undefined;
        disabledAt: number;
        enabledAt: number;
        paidAt?: number | undefined;
        sampleRatePercent?: number | null | undefined;
        spendLimitInDollars?: number | null | undefined;
    };

    export const outboundSchema: z.ZodType<Outbound, z.ZodTypeDef, CreateProjectAnalytics> =
        z.object({
            id: z.string(),
            canceledAt: z.nullable(z.number()).optional(),
            disabledAt: z.number(),
            enabledAt: z.number(),
            paidAt: z.number().optional(),
            sampleRatePercent: z.nullable(z.number()).optional(),
            spendLimitInDollars: z.nullable(z.number()).optional(),
        });
}

/** @internal */
export namespace CreateProjectSpeedInsights$ {
    export const inboundSchema: z.ZodType<CreateProjectSpeedInsights, z.ZodTypeDef, unknown> =
        z.object({
            id: z.string(),
            enabledAt: z.number().optional(),
            disabledAt: z.number().optional(),
            canceledAt: z.number().optional(),
            hasData: z.boolean().optional(),
            paidAt: z.number().optional(),
        });

    export type Outbound = {
        id: string;
        enabledAt?: number | undefined;
        disabledAt?: number | undefined;
        canceledAt?: number | undefined;
        hasData?: boolean | undefined;
        paidAt?: number | undefined;
    };

    export const outboundSchema: z.ZodType<Outbound, z.ZodTypeDef, CreateProjectSpeedInsights> =
        z.object({
            id: z.string(),
            enabledAt: z.number().optional(),
            disabledAt: z.number().optional(),
            canceledAt: z.number().optional(),
            hasData: z.boolean().optional(),
            paidAt: z.number().optional(),
        });
}

/** @internal */
export namespace CreateProjectDefinitions$ {
    export const inboundSchema: z.ZodType<CreateProjectDefinitions, z.ZodTypeDef, unknown> =
        z.object({
            host: z.string(),
            path: z.string(),
            schedule: z.string(),
        });

    export type Outbound = {
        host: string;
        path: string;
        schedule: string;
    };

    export const outboundSchema: z.ZodType<Outbound, z.ZodTypeDef, CreateProjectDefinitions> =
        z.object({
            host: z.string(),
            path: z.string(),
            schedule: z.string(),
        });
}

/** @internal */
export namespace CreateProjectCrons$ {
    export const inboundSchema: z.ZodType<CreateProjectCrons, z.ZodTypeDef, unknown> = z.object({
        enabledAt: z.number(),
        disabledAt: z.nullable(z.number()),
        updatedAt: z.number(),
        deploymentId: z.nullable(z.string()),
        definitions: z.array(z.lazy(() => CreateProjectDefinitions$.inboundSchema)),
    });

    export type Outbound = {
        enabledAt: number;
        disabledAt: number | null;
        updatedAt: number;
        deploymentId: string | null;
        definitions: Array<CreateProjectDefinitions$.Outbound>;
    };

    export const outboundSchema: z.ZodType<Outbound, z.ZodTypeDef, CreateProjectCrons> = z.object({
        enabledAt: z.number(),
        disabledAt: z.nullable(z.number()),
        updatedAt: z.number(),
        deploymentId: z.nullable(z.string()),
        definitions: z.array(z.lazy(() => CreateProjectDefinitions$.outboundSchema)),
    });
}

/** @internal */
export namespace CreateProjectDataCache$ {
    export const inboundSchema: z.ZodType<CreateProjectDataCache, z.ZodTypeDef, unknown> = z.object(
        {
            userDisabled: z.boolean(),
            storageSizeBytes: z.nullable(z.number()).optional(),
            unlimited: z.boolean().optional(),
        }
    );

    export type Outbound = {
        userDisabled: boolean;
        storageSizeBytes?: number | null | undefined;
        unlimited?: boolean | undefined;
    };

    export const outboundSchema: z.ZodType<Outbound, z.ZodTypeDef, CreateProjectDataCache> =
        z.object({
            userDisabled: z.boolean(),
            storageSizeBytes: z.nullable(z.number()).optional(),
            unlimited: z.boolean().optional(),
        });
}

/** @internal */
export namespace CreateProjectTarget2$ {
    export const inboundSchema: z.ZodNativeEnum<typeof CreateProjectTarget2> =
        z.nativeEnum(CreateProjectTarget2);
    export const outboundSchema: z.ZodNativeEnum<typeof CreateProjectTarget2> = inboundSchema;
}

/** @internal */
export namespace CreateProjectTarget1$ {
    export const inboundSchema: z.ZodNativeEnum<typeof CreateProjectTarget1> =
        z.nativeEnum(CreateProjectTarget1);
    export const outboundSchema: z.ZodNativeEnum<typeof CreateProjectTarget1> = inboundSchema;
}

/** @internal */
export namespace CreateProjectProjectsTarget$ {
    export const inboundSchema: z.ZodType<CreateProjectProjectsTarget, z.ZodTypeDef, unknown> =
        z.union([
            z.array(CreateProjectTarget1$.inboundSchema),
            CreateProjectTarget2$.inboundSchema,
        ]);

    export type Outbound = Array<string> | string;
    export const outboundSchema: z.ZodType<Outbound, z.ZodTypeDef, CreateProjectProjectsTarget> =
        z.union([
            z.array(CreateProjectTarget1$.outboundSchema),
            CreateProjectTarget2$.outboundSchema,
        ]);
}

/** @internal */
export namespace CreateProjectProjectsResponseType$ {
    export const inboundSchema: z.ZodNativeEnum<typeof CreateProjectProjectsResponseType> =
        z.nativeEnum(CreateProjectProjectsResponseType);
    export const outboundSchema: z.ZodNativeEnum<typeof CreateProjectProjectsResponseType> =
        inboundSchema;
}

/** @internal */
export namespace CreateProjectContentHintProjectsResponse200ApplicationJSONResponseBodyEnv14Type$ {
    export const inboundSchema: z.ZodNativeEnum<
        typeof CreateProjectContentHintProjectsResponse200ApplicationJSONResponseBodyEnv14Type
    > = z.nativeEnum(
        CreateProjectContentHintProjectsResponse200ApplicationJSONResponseBodyEnv14Type
    );
    export const outboundSchema: z.ZodNativeEnum<
        typeof CreateProjectContentHintProjectsResponse200ApplicationJSONResponseBodyEnv14Type
    > = inboundSchema;
}

/** @internal */
export namespace ContentHint14$ {
    export const inboundSchema: z.ZodType<ContentHint14, z.ZodTypeDef, unknown> = z.object({
        type: CreateProjectContentHintProjectsResponse200ApplicationJSONResponseBodyEnv14Type$.inboundSchema,
        storeId: z.string(),
    });

    export type Outbound = {
        type: string;
        storeId: string;
    };

    export const outboundSchema: z.ZodType<Outbound, z.ZodTypeDef, ContentHint14> = z.object({
        type: CreateProjectContentHintProjectsResponse200ApplicationJSONResponseBodyEnv14Type$.outboundSchema,
        storeId: z.string(),
    });
}

/** @internal */
export namespace CreateProjectContentHintProjectsResponse200ApplicationJSONResponseBodyEnv13Type$ {
    export const inboundSchema: z.ZodNativeEnum<
        typeof CreateProjectContentHintProjectsResponse200ApplicationJSONResponseBodyEnv13Type
    > = z.nativeEnum(
        CreateProjectContentHintProjectsResponse200ApplicationJSONResponseBodyEnv13Type
    );
    export const outboundSchema: z.ZodNativeEnum<
        typeof CreateProjectContentHintProjectsResponse200ApplicationJSONResponseBodyEnv13Type
    > = inboundSchema;
}

/** @internal */
export namespace ContentHint13$ {
    export const inboundSchema: z.ZodType<ContentHint13, z.ZodTypeDef, unknown> = z.object({
        type: CreateProjectContentHintProjectsResponse200ApplicationJSONResponseBodyEnv13Type$.inboundSchema,
        storeId: z.string(),
    });

    export type Outbound = {
        type: string;
        storeId: string;
    };

    export const outboundSchema: z.ZodType<Outbound, z.ZodTypeDef, ContentHint13> = z.object({
        type: CreateProjectContentHintProjectsResponse200ApplicationJSONResponseBodyEnv13Type$.outboundSchema,
        storeId: z.string(),
    });
}

/** @internal */
export namespace CreateProjectContentHintProjectsResponse200ApplicationJSONResponseBodyEnv12Type$ {
    export const inboundSchema: z.ZodNativeEnum<
        typeof CreateProjectContentHintProjectsResponse200ApplicationJSONResponseBodyEnv12Type
    > = z.nativeEnum(
        CreateProjectContentHintProjectsResponse200ApplicationJSONResponseBodyEnv12Type
    );
    export const outboundSchema: z.ZodNativeEnum<
        typeof CreateProjectContentHintProjectsResponse200ApplicationJSONResponseBodyEnv12Type
    > = inboundSchema;
}

/** @internal */
export namespace ContentHint12$ {
    export const inboundSchema: z.ZodType<ContentHint12, z.ZodTypeDef, unknown> = z.object({
        type: CreateProjectContentHintProjectsResponse200ApplicationJSONResponseBodyEnv12Type$.inboundSchema,
        storeId: z.string(),
    });

    export type Outbound = {
        type: string;
        storeId: string;
    };

    export const outboundSchema: z.ZodType<Outbound, z.ZodTypeDef, ContentHint12> = z.object({
        type: CreateProjectContentHintProjectsResponse200ApplicationJSONResponseBodyEnv12Type$.outboundSchema,
        storeId: z.string(),
    });
}

/** @internal */
export namespace CreateProjectContentHintProjectsResponse200ApplicationJSONResponseBodyEnv11Type$ {
    export const inboundSchema: z.ZodNativeEnum<
        typeof CreateProjectContentHintProjectsResponse200ApplicationJSONResponseBodyEnv11Type
    > = z.nativeEnum(
        CreateProjectContentHintProjectsResponse200ApplicationJSONResponseBodyEnv11Type
    );
    export const outboundSchema: z.ZodNativeEnum<
        typeof CreateProjectContentHintProjectsResponse200ApplicationJSONResponseBodyEnv11Type
    > = inboundSchema;
}

/** @internal */
export namespace ContentHint11$ {
    export const inboundSchema: z.ZodType<ContentHint11, z.ZodTypeDef, unknown> = z.object({
        type: CreateProjectContentHintProjectsResponse200ApplicationJSONResponseBodyEnv11Type$.inboundSchema,
        storeId: z.string(),
    });

    export type Outbound = {
        type: string;
        storeId: string;
    };

    export const outboundSchema: z.ZodType<Outbound, z.ZodTypeDef, ContentHint11> = z.object({
        type: CreateProjectContentHintProjectsResponse200ApplicationJSONResponseBodyEnv11Type$.outboundSchema,
        storeId: z.string(),
    });
}

/** @internal */
export namespace CreateProjectContentHintProjectsResponse200ApplicationJSONResponseBodyEnv10Type$ {
    export const inboundSchema: z.ZodNativeEnum<
        typeof CreateProjectContentHintProjectsResponse200ApplicationJSONResponseBodyEnv10Type
    > = z.nativeEnum(
        CreateProjectContentHintProjectsResponse200ApplicationJSONResponseBodyEnv10Type
    );
    export const outboundSchema: z.ZodNativeEnum<
        typeof CreateProjectContentHintProjectsResponse200ApplicationJSONResponseBodyEnv10Type
    > = inboundSchema;
}

/** @internal */
export namespace CreateProjectContentHint10$ {
    export const inboundSchema: z.ZodType<CreateProjectContentHint10, z.ZodTypeDef, unknown> =
        z.object({
            type: CreateProjectContentHintProjectsResponse200ApplicationJSONResponseBodyEnv10Type$.inboundSchema,
            storeId: z.string(),
        });

    export type Outbound = {
        type: string;
        storeId: string;
    };

    export const outboundSchema: z.ZodType<Outbound, z.ZodTypeDef, CreateProjectContentHint10> =
        z.object({
            type: CreateProjectContentHintProjectsResponse200ApplicationJSONResponseBodyEnv10Type$.outboundSchema,
            storeId: z.string(),
        });
}

/** @internal */
export namespace CreateProjectContentHintProjectsResponse200ApplicationJSONResponseBodyEnv9Type$ {
    export const inboundSchema: z.ZodNativeEnum<
        typeof CreateProjectContentHintProjectsResponse200ApplicationJSONResponseBodyEnv9Type
    > = z.nativeEnum(
        CreateProjectContentHintProjectsResponse200ApplicationJSONResponseBodyEnv9Type
    );
    export const outboundSchema: z.ZodNativeEnum<
        typeof CreateProjectContentHintProjectsResponse200ApplicationJSONResponseBodyEnv9Type
    > = inboundSchema;
}

/** @internal */
export namespace CreateProjectContentHint9$ {
    export const inboundSchema: z.ZodType<CreateProjectContentHint9, z.ZodTypeDef, unknown> =
        z.object({
            type: CreateProjectContentHintProjectsResponse200ApplicationJSONResponseBodyEnv9Type$.inboundSchema,
            storeId: z.string(),
        });

    export type Outbound = {
        type: string;
        storeId: string;
    };

    export const outboundSchema: z.ZodType<Outbound, z.ZodTypeDef, CreateProjectContentHint9> =
        z.object({
            type: CreateProjectContentHintProjectsResponse200ApplicationJSONResponseBodyEnv9Type$.outboundSchema,
            storeId: z.string(),
        });
}

/** @internal */
export namespace CreateProjectContentHintProjectsResponse200ApplicationJSONResponseBodyEnv8Type$ {
    export const inboundSchema: z.ZodNativeEnum<
        typeof CreateProjectContentHintProjectsResponse200ApplicationJSONResponseBodyEnv8Type
    > = z.nativeEnum(
        CreateProjectContentHintProjectsResponse200ApplicationJSONResponseBodyEnv8Type
    );
    export const outboundSchema: z.ZodNativeEnum<
        typeof CreateProjectContentHintProjectsResponse200ApplicationJSONResponseBodyEnv8Type
    > = inboundSchema;
}

/** @internal */
export namespace CreateProjectContentHint8$ {
    export const inboundSchema: z.ZodType<CreateProjectContentHint8, z.ZodTypeDef, unknown> =
        z.object({
            type: CreateProjectContentHintProjectsResponse200ApplicationJSONResponseBodyEnv8Type$.inboundSchema,
            storeId: z.string(),
        });

    export type Outbound = {
        type: string;
        storeId: string;
    };

    export const outboundSchema: z.ZodType<Outbound, z.ZodTypeDef, CreateProjectContentHint8> =
        z.object({
            type: CreateProjectContentHintProjectsResponse200ApplicationJSONResponseBodyEnv8Type$.outboundSchema,
            storeId: z.string(),
        });
}

/** @internal */
export namespace CreateProjectContentHintProjectsResponse200ApplicationJSONResponseBodyEnvType$ {
    export const inboundSchema: z.ZodNativeEnum<
        typeof CreateProjectContentHintProjectsResponse200ApplicationJSONResponseBodyEnvType
    > = z.nativeEnum(CreateProjectContentHintProjectsResponse200ApplicationJSONResponseBodyEnvType);
    export const outboundSchema: z.ZodNativeEnum<
        typeof CreateProjectContentHintProjectsResponse200ApplicationJSONResponseBodyEnvType
    > = inboundSchema;
}

/** @internal */
export namespace CreateProjectContentHint7$ {
    export const inboundSchema: z.ZodType<CreateProjectContentHint7, z.ZodTypeDef, unknown> =
        z.object({
            type: CreateProjectContentHintProjectsResponse200ApplicationJSONResponseBodyEnvType$.inboundSchema,
            storeId: z.string(),
        });

    export type Outbound = {
        type: string;
        storeId: string;
    };

    export const outboundSchema: z.ZodType<Outbound, z.ZodTypeDef, CreateProjectContentHint7> =
        z.object({
            type: CreateProjectContentHintProjectsResponse200ApplicationJSONResponseBodyEnvType$.outboundSchema,
            storeId: z.string(),
        });
}

/** @internal */
export namespace CreateProjectContentHintProjectsResponse200ApplicationJSONResponseBodyType$ {
    export const inboundSchema: z.ZodNativeEnum<
        typeof CreateProjectContentHintProjectsResponse200ApplicationJSONResponseBodyType
    > = z.nativeEnum(CreateProjectContentHintProjectsResponse200ApplicationJSONResponseBodyType);
    export const outboundSchema: z.ZodNativeEnum<
        typeof CreateProjectContentHintProjectsResponse200ApplicationJSONResponseBodyType
    > = inboundSchema;
}

/** @internal */
export namespace CreateProjectContentHint6$ {
    export const inboundSchema: z.ZodType<CreateProjectContentHint6, z.ZodTypeDef, unknown> =
        z.object({
            type: CreateProjectContentHintProjectsResponse200ApplicationJSONResponseBodyType$.inboundSchema,
            storeId: z.string(),
        });

    export type Outbound = {
        type: string;
        storeId: string;
    };

    export const outboundSchema: z.ZodType<Outbound, z.ZodTypeDef, CreateProjectContentHint6> =
        z.object({
            type: CreateProjectContentHintProjectsResponse200ApplicationJSONResponseBodyType$.outboundSchema,
            storeId: z.string(),
        });
}

/** @internal */
export namespace CreateProjectContentHintProjectsResponse200ApplicationJSONType$ {
    export const inboundSchema: z.ZodNativeEnum<
        typeof CreateProjectContentHintProjectsResponse200ApplicationJSONType
    > = z.nativeEnum(CreateProjectContentHintProjectsResponse200ApplicationJSONType);
    export const outboundSchema: z.ZodNativeEnum<
        typeof CreateProjectContentHintProjectsResponse200ApplicationJSONType
    > = inboundSchema;
}

/** @internal */
export namespace CreateProjectContentHint5$ {
    export const inboundSchema: z.ZodType<CreateProjectContentHint5, z.ZodTypeDef, unknown> =
        z.object({
            type: CreateProjectContentHintProjectsResponse200ApplicationJSONType$.inboundSchema,
            storeId: z.string(),
        });

    export type Outbound = {
        type: string;
        storeId: string;
    };

    export const outboundSchema: z.ZodType<Outbound, z.ZodTypeDef, CreateProjectContentHint5> =
        z.object({
            type: CreateProjectContentHintProjectsResponse200ApplicationJSONType$.outboundSchema,
            storeId: z.string(),
        });
}

/** @internal */
export namespace CreateProjectContentHintProjectsResponse200Type$ {
    export const inboundSchema: z.ZodNativeEnum<
        typeof CreateProjectContentHintProjectsResponse200Type
    > = z.nativeEnum(CreateProjectContentHintProjectsResponse200Type);
    export const outboundSchema: z.ZodNativeEnum<
        typeof CreateProjectContentHintProjectsResponse200Type
    > = inboundSchema;
}

/** @internal */
export namespace CreateProjectContentHint4$ {
    export const inboundSchema: z.ZodType<CreateProjectContentHint4, z.ZodTypeDef, unknown> =
        z.object({
            type: CreateProjectContentHintProjectsResponse200Type$.inboundSchema,
            storeId: z.string(),
        });

    export type Outbound = {
        type: string;
        storeId: string;
    };

    export const outboundSchema: z.ZodType<Outbound, z.ZodTypeDef, CreateProjectContentHint4> =
        z.object({
            type: CreateProjectContentHintProjectsResponse200Type$.outboundSchema,
            storeId: z.string(),
        });
}

/** @internal */
export namespace CreateProjectContentHintProjectsResponseType$ {
    export const inboundSchema: z.ZodNativeEnum<
        typeof CreateProjectContentHintProjectsResponseType
    > = z.nativeEnum(CreateProjectContentHintProjectsResponseType);
    export const outboundSchema: z.ZodNativeEnum<
        typeof CreateProjectContentHintProjectsResponseType
    > = inboundSchema;
}

/** @internal */
export namespace CreateProjectContentHint3$ {
    export const inboundSchema: z.ZodType<CreateProjectContentHint3, z.ZodTypeDef, unknown> =
        z.object({
            type: CreateProjectContentHintProjectsResponseType$.inboundSchema,
            storeId: z.string(),
        });

    export type Outbound = {
        type: string;
        storeId: string;
    };

    export const outboundSchema: z.ZodType<Outbound, z.ZodTypeDef, CreateProjectContentHint3> =
        z.object({
            type: CreateProjectContentHintProjectsResponseType$.outboundSchema,
            storeId: z.string(),
        });
}

/** @internal */
export namespace CreateProjectContentHintProjectsType$ {
    export const inboundSchema: z.ZodNativeEnum<typeof CreateProjectContentHintProjectsType> =
        z.nativeEnum(CreateProjectContentHintProjectsType);
    export const outboundSchema: z.ZodNativeEnum<typeof CreateProjectContentHintProjectsType> =
        inboundSchema;
}

/** @internal */
export namespace CreateProjectContentHint2$ {
    export const inboundSchema: z.ZodType<CreateProjectContentHint2, z.ZodTypeDef, unknown> =
        z.object({
            type: CreateProjectContentHintProjectsType$.inboundSchema,
            storeId: z.string(),
        });

    export type Outbound = {
        type: string;
        storeId: string;
    };

    export const outboundSchema: z.ZodType<Outbound, z.ZodTypeDef, CreateProjectContentHint2> =
        z.object({
            type: CreateProjectContentHintProjectsType$.outboundSchema,
            storeId: z.string(),
        });
}

/** @internal */
export namespace CreateProjectContentHintType$ {
    export const inboundSchema: z.ZodNativeEnum<typeof CreateProjectContentHintType> = z.nativeEnum(
        CreateProjectContentHintType
    );
    export const outboundSchema: z.ZodNativeEnum<typeof CreateProjectContentHintType> =
        inboundSchema;
}

/** @internal */
export namespace CreateProjectContentHint1$ {
    export const inboundSchema: z.ZodType<CreateProjectContentHint1, z.ZodTypeDef, unknown> =
        z.object({
            type: CreateProjectContentHintType$.inboundSchema,
            storeId: z.string(),
        });

    export type Outbound = {
        type: string;
        storeId: string;
    };

    export const outboundSchema: z.ZodType<Outbound, z.ZodTypeDef, CreateProjectContentHint1> =
        z.object({
            type: CreateProjectContentHintType$.outboundSchema,
            storeId: z.string(),
        });
}

/** @internal */
export namespace CreateProjectContentHint$ {
    export const inboundSchema: z.ZodType<CreateProjectContentHint, z.ZodTypeDef, unknown> =
        z.union([
            z.lazy(() => CreateProjectContentHint1$.inboundSchema),
            z.lazy(() => CreateProjectContentHint2$.inboundSchema),
            z.lazy(() => CreateProjectContentHint3$.inboundSchema),
            z.lazy(() => CreateProjectContentHint4$.inboundSchema),
            z.lazy(() => CreateProjectContentHint5$.inboundSchema),
            z.lazy(() => CreateProjectContentHint6$.inboundSchema),
            z.lazy(() => CreateProjectContentHint7$.inboundSchema),
            z.lazy(() => CreateProjectContentHint8$.inboundSchema),
            z.lazy(() => CreateProjectContentHint9$.inboundSchema),
            z.lazy(() => CreateProjectContentHint10$.inboundSchema),
            z.lazy(() => ContentHint11$.inboundSchema),
            z.lazy(() => ContentHint12$.inboundSchema),
            z.lazy(() => ContentHint13$.inboundSchema),
            z.lazy(() => ContentHint14$.inboundSchema),
        ]);

    export type Outbound =
        | CreateProjectContentHint1$.Outbound
        | CreateProjectContentHint2$.Outbound
        | CreateProjectContentHint3$.Outbound
        | CreateProjectContentHint4$.Outbound
        | CreateProjectContentHint5$.Outbound
        | CreateProjectContentHint6$.Outbound
        | CreateProjectContentHint7$.Outbound
        | CreateProjectContentHint8$.Outbound
        | CreateProjectContentHint9$.Outbound
        | CreateProjectContentHint10$.Outbound
        | ContentHint11$.Outbound
        | ContentHint12$.Outbound
        | ContentHint13$.Outbound
        | ContentHint14$.Outbound;
    export const outboundSchema: z.ZodType<Outbound, z.ZodTypeDef, CreateProjectContentHint> =
        z.union([
            z.lazy(() => CreateProjectContentHint1$.outboundSchema),
            z.lazy(() => CreateProjectContentHint2$.outboundSchema),
            z.lazy(() => CreateProjectContentHint3$.outboundSchema),
            z.lazy(() => CreateProjectContentHint4$.outboundSchema),
            z.lazy(() => CreateProjectContentHint5$.outboundSchema),
            z.lazy(() => CreateProjectContentHint6$.outboundSchema),
            z.lazy(() => CreateProjectContentHint7$.outboundSchema),
            z.lazy(() => CreateProjectContentHint8$.outboundSchema),
            z.lazy(() => CreateProjectContentHint9$.outboundSchema),
            z.lazy(() => CreateProjectContentHint10$.outboundSchema),
            z.lazy(() => ContentHint11$.outboundSchema),
            z.lazy(() => ContentHint12$.outboundSchema),
            z.lazy(() => ContentHint13$.outboundSchema),
            z.lazy(() => ContentHint14$.outboundSchema),
        ]);
}

/** @internal */
export namespace CreateProjectProjectsResponse200ApplicationJSONResponseBodyType$ {
    export const inboundSchema: z.ZodNativeEnum<
        typeof CreateProjectProjectsResponse200ApplicationJSONResponseBodyType
    > = z.nativeEnum(CreateProjectProjectsResponse200ApplicationJSONResponseBodyType);
    export const outboundSchema: z.ZodNativeEnum<
        typeof CreateProjectProjectsResponse200ApplicationJSONResponseBodyType
    > = inboundSchema;
}

/** @internal */
export namespace CreateProjectInternalContentHint$ {
    export const inboundSchema: z.ZodType<CreateProjectInternalContentHint, z.ZodTypeDef, unknown> =
        z.object({
            type: CreateProjectProjectsResponse200ApplicationJSONResponseBodyType$.inboundSchema,
            encryptedValue: z.string(),
        });

    export type Outbound = {
        type: string;
        encryptedValue: string;
    };

    export const outboundSchema: z.ZodType<
        Outbound,
        z.ZodTypeDef,
        CreateProjectInternalContentHint
    > = z.object({
        type: CreateProjectProjectsResponse200ApplicationJSONResponseBodyType$.outboundSchema,
        encryptedValue: z.string(),
    });
}

/** @internal */
export namespace CreateProjectEnv$ {
    export const inboundSchema: z.ZodType<CreateProjectEnv, z.ZodTypeDef, unknown> = z.object({
        target: z
            .union([
                z.array(CreateProjectTarget1$.inboundSchema),
                CreateProjectTarget2$.inboundSchema,
            ])
            .optional(),
        type: CreateProjectProjectsResponseType$.inboundSchema,
        id: z.string().optional(),
        key: z.string(),
        value: z.string(),
        configurationId: z.nullable(z.string()).optional(),
        createdAt: z.number().optional(),
        updatedAt: z.number().optional(),
        createdBy: z.nullable(z.string()).optional(),
        updatedBy: z.nullable(z.string()).optional(),
        gitBranch: z.string().optional(),
        edgeConfigId: z.nullable(z.string()).optional(),
        edgeConfigTokenId: z.nullable(z.string()).optional(),
        contentHint: z
            .nullable(
                z.union([
                    z.lazy(() => CreateProjectContentHint1$.inboundSchema),
                    z.lazy(() => CreateProjectContentHint2$.inboundSchema),
                    z.lazy(() => CreateProjectContentHint3$.inboundSchema),
                    z.lazy(() => CreateProjectContentHint4$.inboundSchema),
                    z.lazy(() => CreateProjectContentHint5$.inboundSchema),
                    z.lazy(() => CreateProjectContentHint6$.inboundSchema),
                    z.lazy(() => CreateProjectContentHint7$.inboundSchema),
                    z.lazy(() => CreateProjectContentHint8$.inboundSchema),
                    z.lazy(() => CreateProjectContentHint9$.inboundSchema),
                    z.lazy(() => CreateProjectContentHint10$.inboundSchema),
                    z.lazy(() => ContentHint11$.inboundSchema),
                    z.lazy(() => ContentHint12$.inboundSchema),
                    z.lazy(() => ContentHint13$.inboundSchema),
                    z.lazy(() => ContentHint14$.inboundSchema),
                ])
            )
            .optional(),
        internalContentHint: z
            .nullable(z.lazy(() => CreateProjectInternalContentHint$.inboundSchema))
            .optional(),
        decrypted: z.boolean().optional(),
        comment: z.string().optional(),
        customEnvironmentId: z.string().optional(),
    });

    export type Outbound = {
        target?: Array<string> | string | undefined;
        type: string;
        id?: string | undefined;
        key: string;
        value: string;
        configurationId?: string | null | undefined;
        createdAt?: number | undefined;
        updatedAt?: number | undefined;
        createdBy?: string | null | undefined;
        updatedBy?: string | null | undefined;
        gitBranch?: string | undefined;
        edgeConfigId?: string | null | undefined;
        edgeConfigTokenId?: string | null | undefined;
        contentHint?:
            | CreateProjectContentHint1$.Outbound
            | CreateProjectContentHint2$.Outbound
            | CreateProjectContentHint3$.Outbound
            | CreateProjectContentHint4$.Outbound
            | CreateProjectContentHint5$.Outbound
            | CreateProjectContentHint6$.Outbound
            | CreateProjectContentHint7$.Outbound
            | CreateProjectContentHint8$.Outbound
            | CreateProjectContentHint9$.Outbound
            | CreateProjectContentHint10$.Outbound
            | ContentHint11$.Outbound
            | ContentHint12$.Outbound
            | ContentHint13$.Outbound
            | ContentHint14$.Outbound
            | null
            | undefined;
        internalContentHint?: CreateProjectInternalContentHint$.Outbound | null | undefined;
        decrypted?: boolean | undefined;
        comment?: string | undefined;
        customEnvironmentId?: string | undefined;
    };

    export const outboundSchema: z.ZodType<Outbound, z.ZodTypeDef, CreateProjectEnv> = z.object({
        target: z
            .union([
                z.array(CreateProjectTarget1$.outboundSchema),
                CreateProjectTarget2$.outboundSchema,
            ])
            .optional(),
        type: CreateProjectProjectsResponseType$.outboundSchema,
        id: z.string().optional(),
        key: z.string(),
        value: z.string(),
        configurationId: z.nullable(z.string()).optional(),
        createdAt: z.number().optional(),
        updatedAt: z.number().optional(),
        createdBy: z.nullable(z.string()).optional(),
        updatedBy: z.nullable(z.string()).optional(),
        gitBranch: z.string().optional(),
        edgeConfigId: z.nullable(z.string()).optional(),
        edgeConfigTokenId: z.nullable(z.string()).optional(),
        contentHint: z
            .nullable(
                z.union([
                    z.lazy(() => CreateProjectContentHint1$.outboundSchema),
                    z.lazy(() => CreateProjectContentHint2$.outboundSchema),
                    z.lazy(() => CreateProjectContentHint3$.outboundSchema),
                    z.lazy(() => CreateProjectContentHint4$.outboundSchema),
                    z.lazy(() => CreateProjectContentHint5$.outboundSchema),
                    z.lazy(() => CreateProjectContentHint6$.outboundSchema),
                    z.lazy(() => CreateProjectContentHint7$.outboundSchema),
                    z.lazy(() => CreateProjectContentHint8$.outboundSchema),
                    z.lazy(() => CreateProjectContentHint9$.outboundSchema),
                    z.lazy(() => CreateProjectContentHint10$.outboundSchema),
                    z.lazy(() => ContentHint11$.outboundSchema),
                    z.lazy(() => ContentHint12$.outboundSchema),
                    z.lazy(() => ContentHint13$.outboundSchema),
                    z.lazy(() => ContentHint14$.outboundSchema),
                ])
            )
            .optional(),
        internalContentHint: z
            .nullable(z.lazy(() => CreateProjectInternalContentHint$.outboundSchema))
            .optional(),
        decrypted: z.boolean().optional(),
        comment: z.string().optional(),
        customEnvironmentId: z.string().optional(),
    });
}

/** @internal */
export namespace CreateProjectProjectsFramework$ {
    export const inboundSchema: z.ZodNativeEnum<typeof CreateProjectProjectsFramework> =
        z.nativeEnum(CreateProjectProjectsFramework);
    export const outboundSchema: z.ZodNativeEnum<typeof CreateProjectProjectsFramework> =
        inboundSchema;
}

/** @internal */
export namespace CreateProjectAliasAssigned$ {
    export const inboundSchema: z.ZodType<CreateProjectAliasAssigned, z.ZodTypeDef, unknown> =
        z.union([z.number(), z.boolean()]);

    export type Outbound = number | boolean;
    export const outboundSchema: z.ZodType<Outbound, z.ZodTypeDef, CreateProjectAliasAssigned> =
        z.union([z.number(), z.boolean()]);
}

/** @internal */
export namespace CreateProjectAliasError$ {
    export const inboundSchema: z.ZodType<CreateProjectAliasError, z.ZodTypeDef, unknown> =
        z.object({
            code: z.string(),
            message: z.string(),
        });

    export type Outbound = {
        code: string;
        message: string;
    };

    export const outboundSchema: z.ZodType<Outbound, z.ZodTypeDef, CreateProjectAliasError> =
        z.object({
            code: z.string(),
            message: z.string(),
        });
}

/** @internal */
export namespace CreateProjectBuilds$ {
    export const inboundSchema: z.ZodType<CreateProjectBuilds, z.ZodTypeDef, unknown> = z.object({
        use: z.string(),
        src: z.string().optional(),
        dest: z.string().optional(),
    });

    export type Outbound = {
        use: string;
        src?: string | undefined;
        dest?: string | undefined;
    };

    export const outboundSchema: z.ZodType<Outbound, z.ZodTypeDef, CreateProjectBuilds> = z.object({
        use: z.string(),
        src: z.string().optional(),
        dest: z.string().optional(),
    });
}

/** @internal */
export namespace CreateProjectCreator$ {
    export const inboundSchema: z.ZodType<CreateProjectCreator, z.ZodTypeDef, unknown> = z.object({
        email: z.string(),
        githubLogin: z.string().optional(),
        gitlabLogin: z.string().optional(),
        uid: z.string(),
        username: z.string(),
    });

    export type Outbound = {
        email: string;
        githubLogin?: string | undefined;
        gitlabLogin?: string | undefined;
        uid: string;
        username: string;
    };

    export const outboundSchema: z.ZodType<Outbound, z.ZodTypeDef, CreateProjectCreator> = z.object(
        {
            email: z.string(),
            githubLogin: z.string().optional(),
            gitlabLogin: z.string().optional(),
            uid: z.string(),
            username: z.string(),
        }
    );
}

/** @internal */
export namespace CreateProjectPlan$ {
    export const inboundSchema: z.ZodNativeEnum<typeof CreateProjectPlan> =
        z.nativeEnum(CreateProjectPlan);
    export const outboundSchema: z.ZodNativeEnum<typeof CreateProjectPlan> = inboundSchema;
}

/** @internal */
export namespace CreateProjectReadyState$ {
    export const inboundSchema: z.ZodNativeEnum<typeof CreateProjectReadyState> =
        z.nativeEnum(CreateProjectReadyState);
    export const outboundSchema: z.ZodNativeEnum<typeof CreateProjectReadyState> = inboundSchema;
}

/** @internal */
export namespace CreateProjectReadySubstate$ {
    export const inboundSchema: z.ZodNativeEnum<typeof CreateProjectReadySubstate> = z.nativeEnum(
        CreateProjectReadySubstate
    );
    export const outboundSchema: z.ZodNativeEnum<typeof CreateProjectReadySubstate> = inboundSchema;
}

/** @internal */
export namespace CreateProjectProjectsResponse200Type$ {
    export const inboundSchema: z.ZodNativeEnum<typeof CreateProjectProjectsResponse200Type> =
        z.nativeEnum(CreateProjectProjectsResponse200Type);
    export const outboundSchema: z.ZodNativeEnum<typeof CreateProjectProjectsResponse200Type> =
        inboundSchema;
}

/** @internal */
export namespace CreateProjectChecksConclusion$ {
    export const inboundSchema: z.ZodNativeEnum<typeof CreateProjectChecksConclusion> =
        z.nativeEnum(CreateProjectChecksConclusion);
    export const outboundSchema: z.ZodNativeEnum<typeof CreateProjectChecksConclusion> =
        inboundSchema;
}

/** @internal */
export namespace CreateProjectChecksState$ {
    export const inboundSchema: z.ZodNativeEnum<typeof CreateProjectChecksState> =
        z.nativeEnum(CreateProjectChecksState);
    export const outboundSchema: z.ZodNativeEnum<typeof CreateProjectChecksState> = inboundSchema;
}

/** @internal */
export namespace CreateProjectOidcTokenClaims$ {
    export const inboundSchema: z.ZodType<CreateProjectOidcTokenClaims, z.ZodTypeDef, unknown> =
        z.union([z.string(), z.array(z.string())]);

    export type Outbound = string | Array<string>;
    export const outboundSchema: z.ZodType<Outbound, z.ZodTypeDef, CreateProjectOidcTokenClaims> =
        z.union([z.string(), z.array(z.string())]);
}

/** @internal */
export namespace CreateProjectLatestDeployments$ {
    export const inboundSchema: z.ZodType<CreateProjectLatestDeployments, z.ZodTypeDef, unknown> =
        z.object({
            alias: z.array(z.string()).optional(),
            aliasAssigned: z.nullable(z.union([z.number(), z.boolean()])).optional(),
            aliasError: z.nullable(z.lazy(() => CreateProjectAliasError$.inboundSchema)).optional(),
            aliasFinal: z.nullable(z.string()).optional(),
            automaticAliases: z.array(z.string()).optional(),
            builds: z.array(z.lazy(() => CreateProjectBuilds$.inboundSchema)).optional(),
            connectBuildsEnabled: z.boolean().optional(),
            connectConfigurationId: z.string().optional(),
            createdAt: z.number(),
            createdIn: z.string(),
            creator: z.nullable(z.lazy(() => CreateProjectCreator$.inboundSchema)),
            deploymentHostname: z.string(),
            name: z.string(),
            forced: z.boolean().optional(),
            id: z.string(),
            meta: z.record(z.string()).optional(),
            monorepoManager: z.nullable(z.string()).optional(),
            plan: CreateProjectPlan$.inboundSchema,
            private: z.boolean(),
            readyState: CreateProjectReadyState$.inboundSchema,
            readySubstate: CreateProjectReadySubstate$.inboundSchema.optional(),
            requestedAt: z.number().optional(),
            target: z.nullable(z.string()).optional(),
            teamId: z.nullable(z.string()).optional(),
            type: CreateProjectProjectsResponse200Type$.inboundSchema,
            url: z.string(),
            userId: z.string(),
            withCache: z.boolean().optional(),
            checksConclusion: CreateProjectChecksConclusion$.inboundSchema.optional(),
            checksState: CreateProjectChecksState$.inboundSchema.optional(),
            readyAt: z.number().optional(),
            buildingAt: z.number().optional(),
            previewCommentsEnabled: z.boolean().optional(),
            oidcTokenClaims: z.record(z.union([z.string(), z.array(z.string())])).optional(),
        });

    export type Outbound = {
        alias?: Array<string> | undefined;
        aliasAssigned?: number | boolean | null | undefined;
        aliasError?: CreateProjectAliasError$.Outbound | null | undefined;
        aliasFinal?: string | null | undefined;
        automaticAliases?: Array<string> | undefined;
        builds?: Array<CreateProjectBuilds$.Outbound> | undefined;
        connectBuildsEnabled?: boolean | undefined;
        connectConfigurationId?: string | undefined;
        createdAt: number;
        createdIn: string;
        creator: CreateProjectCreator$.Outbound | null;
        deploymentHostname: string;
        name: string;
        forced?: boolean | undefined;
        id: string;
        meta?: { [k: string]: string } | undefined;
        monorepoManager?: string | null | undefined;
        plan: string;
        private: boolean;
        readyState: string;
        readySubstate?: string | undefined;
        requestedAt?: number | undefined;
        target?: string | null | undefined;
        teamId?: string | null | undefined;
        type: string;
        url: string;
        userId: string;
        withCache?: boolean | undefined;
        checksConclusion?: string | undefined;
        checksState?: string | undefined;
        readyAt?: number | undefined;
        buildingAt?: number | undefined;
        previewCommentsEnabled?: boolean | undefined;
        oidcTokenClaims?: { [k: string]: string | Array<string> } | undefined;
    };

    export const outboundSchema: z.ZodType<Outbound, z.ZodTypeDef, CreateProjectLatestDeployments> =
        z.object({
            alias: z.array(z.string()).optional(),
            aliasAssigned: z.nullable(z.union([z.number(), z.boolean()])).optional(),
            aliasError: z
                .nullable(z.lazy(() => CreateProjectAliasError$.outboundSchema))
                .optional(),
            aliasFinal: z.nullable(z.string()).optional(),
            automaticAliases: z.array(z.string()).optional(),
            builds: z.array(z.lazy(() => CreateProjectBuilds$.outboundSchema)).optional(),
            connectBuildsEnabled: z.boolean().optional(),
            connectConfigurationId: z.string().optional(),
            createdAt: z.number(),
            createdIn: z.string(),
            creator: z.nullable(z.lazy(() => CreateProjectCreator$.outboundSchema)),
            deploymentHostname: z.string(),
            name: z.string(),
            forced: z.boolean().optional(),
            id: z.string(),
            meta: z.record(z.string()).optional(),
            monorepoManager: z.nullable(z.string()).optional(),
            plan: CreateProjectPlan$.outboundSchema,
            private: z.boolean(),
            readyState: CreateProjectReadyState$.outboundSchema,
            readySubstate: CreateProjectReadySubstate$.outboundSchema.optional(),
            requestedAt: z.number().optional(),
            target: z.nullable(z.string()).optional(),
            teamId: z.nullable(z.string()).optional(),
            type: CreateProjectProjectsResponse200Type$.outboundSchema,
            url: z.string(),
            userId: z.string(),
            withCache: z.boolean().optional(),
            checksConclusion: CreateProjectChecksConclusion$.outboundSchema.optional(),
            checksState: CreateProjectChecksState$.outboundSchema.optional(),
            readyAt: z.number().optional(),
            buildingAt: z.number().optional(),
            previewCommentsEnabled: z.boolean().optional(),
            oidcTokenClaims: z.record(z.union([z.string(), z.array(z.string())])).optional(),
        });
}

/** @internal */
export namespace CreateProjectLinkProjectsResponseType$ {
    export const inboundSchema: z.ZodNativeEnum<typeof CreateProjectLinkProjectsResponseType> =
        z.nativeEnum(CreateProjectLinkProjectsResponseType);
    export const outboundSchema: z.ZodNativeEnum<typeof CreateProjectLinkProjectsResponseType> =
        inboundSchema;
}

/** @internal */
export namespace CreateProjectLinkProjectsResponseDeployHooks$ {
    export const inboundSchema: z.ZodType<
        CreateProjectLinkProjectsResponseDeployHooks,
        z.ZodTypeDef,
        unknown
    > = z.object({
        createdAt: z.number().optional(),
        id: z.string(),
        name: z.string(),
        ref: z.string(),
        url: z.string(),
    });

    export type Outbound = {
        createdAt?: number | undefined;
        id: string;
        name: string;
        ref: string;
        url: string;
    };

    export const outboundSchema: z.ZodType<
        Outbound,
        z.ZodTypeDef,
        CreateProjectLinkProjectsResponseDeployHooks
    > = z.object({
        createdAt: z.number().optional(),
        id: z.string(),
        name: z.string(),
        ref: z.string(),
        url: z.string(),
    });
}

/** @internal */
export namespace CreateProjectLink3$ {
    export const inboundSchema: z.ZodType<CreateProjectLink3, z.ZodTypeDef, unknown> = z.object({
        name: z.string().optional(),
        slug: z.string().optional(),
        owner: z.string().optional(),
        type: CreateProjectLinkProjectsResponseType$.inboundSchema.optional(),
        uuid: z.string().optional(),
        workspaceUuid: z.string().optional(),
        createdAt: z.number().optional(),
        deployHooks: z.array(
            z.lazy(() => CreateProjectLinkProjectsResponseDeployHooks$.inboundSchema)
        ),
        gitCredentialId: z.string().optional(),
        updatedAt: z.number().optional(),
        sourceless: z.boolean().optional(),
        productionBranch: z.string().optional(),
    });

    export type Outbound = {
        name?: string | undefined;
        slug?: string | undefined;
        owner?: string | undefined;
        type?: string | undefined;
        uuid?: string | undefined;
        workspaceUuid?: string | undefined;
        createdAt?: number | undefined;
        deployHooks: Array<CreateProjectLinkProjectsResponseDeployHooks$.Outbound>;
        gitCredentialId?: string | undefined;
        updatedAt?: number | undefined;
        sourceless?: boolean | undefined;
        productionBranch?: string | undefined;
    };

    export const outboundSchema: z.ZodType<Outbound, z.ZodTypeDef, CreateProjectLink3> = z.object({
        name: z.string().optional(),
        slug: z.string().optional(),
        owner: z.string().optional(),
        type: CreateProjectLinkProjectsResponseType$.outboundSchema.optional(),
        uuid: z.string().optional(),
        workspaceUuid: z.string().optional(),
        createdAt: z.number().optional(),
        deployHooks: z.array(
            z.lazy(() => CreateProjectLinkProjectsResponseDeployHooks$.outboundSchema)
        ),
        gitCredentialId: z.string().optional(),
        updatedAt: z.number().optional(),
        sourceless: z.boolean().optional(),
        productionBranch: z.string().optional(),
    });
}

/** @internal */
export namespace CreateProjectLinkProjectsType$ {
    export const inboundSchema: z.ZodNativeEnum<typeof CreateProjectLinkProjectsType> =
        z.nativeEnum(CreateProjectLinkProjectsType);
    export const outboundSchema: z.ZodNativeEnum<typeof CreateProjectLinkProjectsType> =
        inboundSchema;
}

/** @internal */
export namespace CreateProjectLinkProjectsDeployHooks$ {
    export const inboundSchema: z.ZodType<
        CreateProjectLinkProjectsDeployHooks,
        z.ZodTypeDef,
        unknown
    > = z.object({
        createdAt: z.number().optional(),
        id: z.string(),
        name: z.string(),
        ref: z.string(),
        url: z.string(),
    });

    export type Outbound = {
        createdAt?: number | undefined;
        id: string;
        name: string;
        ref: string;
        url: string;
    };

    export const outboundSchema: z.ZodType<
        Outbound,
        z.ZodTypeDef,
        CreateProjectLinkProjectsDeployHooks
    > = z.object({
        createdAt: z.number().optional(),
        id: z.string(),
        name: z.string(),
        ref: z.string(),
        url: z.string(),
    });
}

/** @internal */
export namespace CreateProjectLink2$ {
    export const inboundSchema: z.ZodType<CreateProjectLink2, z.ZodTypeDef, unknown> = z.object({
        projectId: z.string().optional(),
        projectName: z.string().optional(),
        projectNameWithNamespace: z.string().optional(),
        projectNamespace: z.string().optional(),
        projectUrl: z.string().optional(),
        type: CreateProjectLinkProjectsType$.inboundSchema.optional(),
        createdAt: z.number().optional(),
        deployHooks: z.array(z.lazy(() => CreateProjectLinkProjectsDeployHooks$.inboundSchema)),
        gitCredentialId: z.string().optional(),
        updatedAt: z.number().optional(),
        sourceless: z.boolean().optional(),
        productionBranch: z.string().optional(),
    });

    export type Outbound = {
        projectId?: string | undefined;
        projectName?: string | undefined;
        projectNameWithNamespace?: string | undefined;
        projectNamespace?: string | undefined;
        projectUrl?: string | undefined;
        type?: string | undefined;
        createdAt?: number | undefined;
        deployHooks: Array<CreateProjectLinkProjectsDeployHooks$.Outbound>;
        gitCredentialId?: string | undefined;
        updatedAt?: number | undefined;
        sourceless?: boolean | undefined;
        productionBranch?: string | undefined;
    };

    export const outboundSchema: z.ZodType<Outbound, z.ZodTypeDef, CreateProjectLink2> = z.object({
        projectId: z.string().optional(),
        projectName: z.string().optional(),
        projectNameWithNamespace: z.string().optional(),
        projectNamespace: z.string().optional(),
        projectUrl: z.string().optional(),
        type: CreateProjectLinkProjectsType$.outboundSchema.optional(),
        createdAt: z.number().optional(),
        deployHooks: z.array(z.lazy(() => CreateProjectLinkProjectsDeployHooks$.outboundSchema)),
        gitCredentialId: z.string().optional(),
        updatedAt: z.number().optional(),
        sourceless: z.boolean().optional(),
        productionBranch: z.string().optional(),
    });
}

/** @internal */
export namespace CreateProjectLinkType$ {
    export const inboundSchema: z.ZodNativeEnum<typeof CreateProjectLinkType> =
        z.nativeEnum(CreateProjectLinkType);
    export const outboundSchema: z.ZodNativeEnum<typeof CreateProjectLinkType> = inboundSchema;
}

/** @internal */
export namespace CreateProjectLinkDeployHooks$ {
    export const inboundSchema: z.ZodType<CreateProjectLinkDeployHooks, z.ZodTypeDef, unknown> =
        z.object({
            createdAt: z.number().optional(),
            id: z.string(),
            name: z.string(),
            ref: z.string(),
            url: z.string(),
        });

    export type Outbound = {
        createdAt?: number | undefined;
        id: string;
        name: string;
        ref: string;
        url: string;
    };

    export const outboundSchema: z.ZodType<Outbound, z.ZodTypeDef, CreateProjectLinkDeployHooks> =
        z.object({
            createdAt: z.number().optional(),
            id: z.string(),
            name: z.string(),
            ref: z.string(),
            url: z.string(),
        });
}

/** @internal */
export namespace CreateProjectLink1$ {
    export const inboundSchema: z.ZodType<CreateProjectLink1, z.ZodTypeDef, unknown> = z.object({
        org: z.string().optional(),
        repo: z.string().optional(),
        repoId: z.number().optional(),
        type: CreateProjectLinkType$.inboundSchema.optional(),
        createdAt: z.number().optional(),
        deployHooks: z.array(z.lazy(() => CreateProjectLinkDeployHooks$.inboundSchema)),
        gitCredentialId: z.string().optional(),
        updatedAt: z.number().optional(),
        sourceless: z.boolean().optional(),
        productionBranch: z.string().optional(),
    });

    export type Outbound = {
        org?: string | undefined;
        repo?: string | undefined;
        repoId?: number | undefined;
        type?: string | undefined;
        createdAt?: number | undefined;
        deployHooks: Array<CreateProjectLinkDeployHooks$.Outbound>;
        gitCredentialId?: string | undefined;
        updatedAt?: number | undefined;
        sourceless?: boolean | undefined;
        productionBranch?: string | undefined;
    };

    export const outboundSchema: z.ZodType<Outbound, z.ZodTypeDef, CreateProjectLink1> = z.object({
        org: z.string().optional(),
        repo: z.string().optional(),
        repoId: z.number().optional(),
        type: CreateProjectLinkType$.outboundSchema.optional(),
        createdAt: z.number().optional(),
        deployHooks: z.array(z.lazy(() => CreateProjectLinkDeployHooks$.outboundSchema)),
        gitCredentialId: z.string().optional(),
        updatedAt: z.number().optional(),
        sourceless: z.boolean().optional(),
        productionBranch: z.string().optional(),
    });
}

/** @internal */
export namespace CreateProjectLink$ {
    export const inboundSchema: z.ZodType<CreateProjectLink, z.ZodTypeDef, unknown> = z.union([
        z.lazy(() => CreateProjectLink1$.inboundSchema),
        z.lazy(() => CreateProjectLink2$.inboundSchema),
        z.lazy(() => CreateProjectLink3$.inboundSchema),
    ]);

    export type Outbound =
        | CreateProjectLink1$.Outbound
        | CreateProjectLink2$.Outbound
        | CreateProjectLink3$.Outbound;
    export const outboundSchema: z.ZodType<Outbound, z.ZodTypeDef, CreateProjectLink> = z.union([
        z.lazy(() => CreateProjectLink1$.outboundSchema),
        z.lazy(() => CreateProjectLink2$.outboundSchema),
        z.lazy(() => CreateProjectLink3$.outboundSchema),
    ]);
}

/** @internal */
export namespace CreateProjectNodeVersion$ {
    export const inboundSchema: z.ZodNativeEnum<typeof CreateProjectNodeVersion> =
        z.nativeEnum(CreateProjectNodeVersion);
    export const outboundSchema: z.ZodNativeEnum<typeof CreateProjectNodeVersion> = inboundSchema;
}

/** @internal */
export namespace CreateProjectPaths$ {
    export const inboundSchema: z.ZodType<CreateProjectPaths, z.ZodTypeDef, unknown> = z.object({
        value: z.string(),
    });

    export type Outbound = {
        value: string;
    };

    export const outboundSchema: z.ZodType<Outbound, z.ZodTypeDef, CreateProjectPaths> = z.object({
        value: z.string(),
    });
}

/** @internal */
export namespace CreateProjectOptionsAllowlist$ {
    export const inboundSchema: z.ZodType<CreateProjectOptionsAllowlist, z.ZodTypeDef, unknown> =
        z.object({
            paths: z.array(z.lazy(() => CreateProjectPaths$.inboundSchema)),
        });

    export type Outbound = {
        paths: Array<CreateProjectPaths$.Outbound>;
    };

    export const outboundSchema: z.ZodType<Outbound, z.ZodTypeDef, CreateProjectOptionsAllowlist> =
        z.object({
            paths: z.array(z.lazy(() => CreateProjectPaths$.outboundSchema)),
        });
}

/** @internal */
export namespace CreateProjectPasswordProtection$ {
    export const inboundSchema: z.ZodType<CreateProjectPasswordProtection, z.ZodTypeDef, unknown> =
        z.object({});

    export type Outbound = {};

    export const outboundSchema: z.ZodType<
        Outbound,
        z.ZodTypeDef,
        CreateProjectPasswordProtection
    > = z.object({});
}

/** @internal */
export namespace CreateProjectDeploymentType$ {
    export const inboundSchema: z.ZodNativeEnum<typeof CreateProjectDeploymentType> = z.nativeEnum(
        CreateProjectDeploymentType
    );
    export const outboundSchema: z.ZodNativeEnum<typeof CreateProjectDeploymentType> =
        inboundSchema;
}

/** @internal */
export namespace CreateProjectSsoProtection$ {
    export const inboundSchema: z.ZodType<CreateProjectSsoProtection, z.ZodTypeDef, unknown> =
        z.object({
            deploymentType: CreateProjectDeploymentType$.inboundSchema,
        });

    export type Outbound = {
        deploymentType: string;
    };

    export const outboundSchema: z.ZodType<Outbound, z.ZodTypeDef, CreateProjectSsoProtection> =
        z.object({
            deploymentType: CreateProjectDeploymentType$.outboundSchema,
        });
}

/** @internal */
export namespace CreateProjectTargets$ {
    export const inboundSchema: z.ZodType<CreateProjectTargets, z.ZodTypeDef, unknown> = z.union([
        z.string(),
        z.array(z.string()),
    ]);

    export type Outbound = string | Array<string>;
    export const outboundSchema: z.ZodType<Outbound, z.ZodTypeDef, CreateProjectTargets> = z.union([
        z.string(),
        z.array(z.string()),
    ]);
}

/** @internal */
export namespace CreateProjectPermissions$ {
    export const inboundSchema: z.ZodType<CreateProjectPermissions, z.ZodTypeDef, unknown> = z
        .object({
            accessGroup: z.array(ACLAction$.inboundSchema).optional(),
            aliasGlobal: z.array(ACLAction$.inboundSchema).optional(),
            analyticsSampling: z.array(ACLAction$.inboundSchema).optional(),
            analyticsUsage: z.array(ACLAction$.inboundSchema).optional(),
            auditLog: z.array(ACLAction$.inboundSchema).optional(),
            billingAddress: z.array(ACLAction$.inboundSchema).optional(),
            billingInformation: z.array(ACLAction$.inboundSchema).optional(),
            billingInvoice: z.array(ACLAction$.inboundSchema).optional(),
            billingInvoiceEmailRecipient: z.array(ACLAction$.inboundSchema).optional(),
            billingInvoiceLanguage: z.array(ACLAction$.inboundSchema).optional(),
            billingPlan: z.array(ACLAction$.inboundSchema).optional(),
            billingPurchaseOrder: z.array(ACLAction$.inboundSchema).optional(),
            billingTaxId: z.array(ACLAction$.inboundSchema).optional(),
            blob: z.array(ACLAction$.inboundSchema).optional(),
            budget: z.array(ACLAction$.inboundSchema).optional(),
            cacheArtifact: z.array(ACLAction$.inboundSchema).optional(),
            cacheArtifactUsageEvent: z.array(ACLAction$.inboundSchema).optional(),
            codeChecks: z.array(ACLAction$.inboundSchema).optional(),
            concurrentBuilds: z.array(ACLAction$.inboundSchema).optional(),
            connect: z.array(ACLAction$.inboundSchema).optional(),
            connectConfiguration: z.array(ACLAction$.inboundSchema).optional(),
            domain: z.array(ACLAction$.inboundSchema).optional(),
            domainAcceptDelegation: z.array(ACLAction$.inboundSchema).optional(),
            domainAuthCodes: z.array(ACLAction$.inboundSchema).optional(),
            domainCertificate: z.array(ACLAction$.inboundSchema).optional(),
            domainCheckConfig: z.array(ACLAction$.inboundSchema).optional(),
            domainMove: z.array(ACLAction$.inboundSchema).optional(),
            domainPurchase: z.array(ACLAction$.inboundSchema).optional(),
            domainRecord: z.array(ACLAction$.inboundSchema).optional(),
            domainTransferIn: z.array(ACLAction$.inboundSchema).optional(),
            event: z.array(ACLAction$.inboundSchema).optional(),
            ownEvent: z.array(ACLAction$.inboundSchema).optional(),
            sensitiveEnvironmentVariablePolicy: z.array(ACLAction$.inboundSchema).optional(),
            fileUpload: z.array(ACLAction$.inboundSchema).optional(),
            gitRepository: z.array(ACLAction$.inboundSchema).optional(),
            ipBlocking: z.array(ACLAction$.inboundSchema).optional(),
            integration: z.array(ACLAction$.inboundSchema).optional(),
            integrationConfiguration: z.array(ACLAction$.inboundSchema).optional(),
            integrationConfigurationTransfer: z.array(ACLAction$.inboundSchema).optional(),
            integrationConfigurationProjects: z.array(ACLAction$.inboundSchema).optional(),
            integrationVercelConfigurationOverride: z.array(ACLAction$.inboundSchema).optional(),
            integrationStore: z.array(ACLAction$.inboundSchema).optional(),
            integrationEvent: z.array(ACLAction$.inboundSchema).optional(),
            integrationResourceSecrets: z.array(ACLAction$.inboundSchema).optional(),
            marketplaceBillingData: z.array(ACLAction$.inboundSchema).optional(),
            jobGlobal: z.array(ACLAction$.inboundSchema).optional(),
            logDrain: z.array(ACLAction$.inboundSchema).optional(),
            Monitoring: z.array(ACLAction$.inboundSchema).optional(),
            monitoringSettings: z.array(ACLAction$.inboundSchema).optional(),
            monitoringQuery: z.array(ACLAction$.inboundSchema).optional(),
            monitoringChart: z.array(ACLAction$.inboundSchema).optional(),
            monitoringAlert: z.array(ACLAction$.inboundSchema).optional(),
            notificationDeploymentFailed: z.array(ACLAction$.inboundSchema).optional(),
            notificationDomainConfiguration: z.array(ACLAction$.inboundSchema).optional(),
            notificationDomainExpire: z.array(ACLAction$.inboundSchema).optional(),
            notificationDomainMoved: z.array(ACLAction$.inboundSchema).optional(),
            notificationDomainPurchase: z.array(ACLAction$.inboundSchema).optional(),
            notificationDomainRenewal: z.array(ACLAction$.inboundSchema).optional(),
            notificationDomainTransfer: z.array(ACLAction$.inboundSchema).optional(),
            notificationDomainUnverified: z.array(ACLAction$.inboundSchema).optional(),
            NotificationMonitoringAlert: z.array(ACLAction$.inboundSchema).optional(),
            notificationPaymentFailed: z.array(ACLAction$.inboundSchema).optional(),
            notificationUsageAlert: z.array(ACLAction$.inboundSchema).optional(),
            notificationCustomerBudget: z.array(ACLAction$.inboundSchema).optional(),
            notificationStatementOfReasons: z.array(ACLAction$.inboundSchema).optional(),
            oauth2Connection: z.array(ACLAction$.inboundSchema).optional(),
            openTelemetryEndpoint: z.array(ACLAction$.inboundSchema).optional(),
            paymentMethod: z.array(ACLAction$.inboundSchema).optional(),
            permissions: z.array(ACLAction$.inboundSchema).optional(),
            postgres: z.array(ACLAction$.inboundSchema).optional(),
            previewDeploymentSuffix: z.array(ACLAction$.inboundSchema).optional(),
            proTrialOnboarding: z.array(ACLAction$.inboundSchema).optional(),
            seawallConfig: z.array(ACLAction$.inboundSchema).optional(),
            sharedEnvVars: z.array(ACLAction$.inboundSchema).optional(),
            sharedEnvVarsProduction: z.array(ACLAction$.inboundSchema).optional(),
            space: z.array(ACLAction$.inboundSchema).optional(),
            spaceRun: z.array(ACLAction$.inboundSchema).optional(),
            passwordProtectionInvoiceItem: z.array(ACLAction$.inboundSchema).optional(),
            rateLimit: z.array(ACLAction$.inboundSchema).optional(),
            redis: z.array(ACLAction$.inboundSchema).optional(),
            repository: z.array(ACLAction$.inboundSchema).optional(),
            remoteCaching: z.array(ACLAction$.inboundSchema).optional(),
            samlConfig: z.array(ACLAction$.inboundSchema).optional(),
            secret: z.array(ACLAction$.inboundSchema).optional(),
            redisStoreTokenSet: z.array(ACLAction$.inboundSchema).optional(),
            blobStoreTokenSet: z.array(ACLAction$.inboundSchema).optional(),
            postgresStoreTokenSet: z.array(ACLAction$.inboundSchema).optional(),
            integrationStoreTokenSet: z.array(ACLAction$.inboundSchema).optional(),
            supportCase: z.array(ACLAction$.inboundSchema).optional(),
            supportCaseComment: z.array(ACLAction$.inboundSchema).optional(),
            dataCacheBillingSettings: z.array(ACLAction$.inboundSchema).optional(),
            team: z.array(ACLAction$.inboundSchema).optional(),
            teamAccessRequest: z.array(ACLAction$.inboundSchema).optional(),
            teamFellowMembership: z.array(ACLAction$.inboundSchema).optional(),
            teamInvite: z.array(ACLAction$.inboundSchema).optional(),
            teamInviteCode: z.array(ACLAction$.inboundSchema).optional(),
            teamJoin: z.array(ACLAction$.inboundSchema).optional(),
            teamOwnMembership: z.array(ACLAction$.inboundSchema).optional(),
            teamOwnMembershipDisconnectSAML: z.array(ACLAction$.inboundSchema).optional(),
            token: z.array(ACLAction$.inboundSchema).optional(),
            usage: z.array(ACLAction$.inboundSchema).optional(),
            usageCycle: z.array(ACLAction$.inboundSchema).optional(),
            user: z.array(ACLAction$.inboundSchema).optional(),
            userConnection: z.array(ACLAction$.inboundSchema).optional(),
            webAnalyticsPlan: z.array(ACLAction$.inboundSchema).optional(),
            webAuthn: z.array(ACLAction$.inboundSchema).optional(),
            edgeConfig: z.array(ACLAction$.inboundSchema).optional(),
            edgeConfigItem: z.array(ACLAction$.inboundSchema).optional(),
            edgeConfigSchema: z.array(ACLAction$.inboundSchema).optional(),
            edgeConfigToken: z.array(ACLAction$.inboundSchema).optional(),
            webhook: z.array(ACLAction$.inboundSchema).optional(),
            "webhook-event": z.array(ACLAction$.inboundSchema).optional(),
            endpointVerification: z.array(ACLAction$.inboundSchema).optional(),
            projectTransferIn: z.array(ACLAction$.inboundSchema).optional(),
            oauth2Application: z.array(ACLAction$.inboundSchema).optional(),
            aliasProject: z.array(ACLAction$.inboundSchema).optional(),
            aliasProtectionBypass: z.array(ACLAction$.inboundSchema).optional(),
            productionAliasProtectionBypass: z.array(ACLAction$.inboundSchema).optional(),
            connectConfigurationLink: z.array(ACLAction$.inboundSchema).optional(),
            dataCacheNamespace: z.array(ACLAction$.inboundSchema).optional(),
            deployment: z.array(ACLAction$.inboundSchema).optional(),
            deploymentCheck: z.array(ACLAction$.inboundSchema).optional(),
            deploymentCheckPreview: z.array(ACLAction$.inboundSchema).optional(),
            deploymentCheckReRunFromProductionBranch: z.array(ACLAction$.inboundSchema).optional(),
            deploymentProductionGit: z.array(ACLAction$.inboundSchema).optional(),
            deploymentPreview: z.array(ACLAction$.inboundSchema).optional(),
            deploymentPrivate: z.array(ACLAction$.inboundSchema).optional(),
            deploymentPromote: z.array(ACLAction$.inboundSchema).optional(),
            deploymentRollback: z.array(ACLAction$.inboundSchema).optional(),
            environments: z.array(ACLAction$.inboundSchema).optional(),
            logs: z.array(ACLAction$.inboundSchema).optional(),
            logsPreset: z.array(ACLAction$.inboundSchema).optional(),
            passwordProtection: z.array(ACLAction$.inboundSchema).optional(),
            optionsAllowlist: z.array(ACLAction$.inboundSchema).optional(),
            job: z.array(ACLAction$.inboundSchema).optional(),
            project: z.array(ACLAction$.inboundSchema).optional(),
            projectAccessGroup: z.array(ACLAction$.inboundSchema).optional(),
            projectAnalyticsSampling: z.array(ACLAction$.inboundSchema).optional(),
            projectDeploymentHook: z.array(ACLAction$.inboundSchema).optional(),
            projectDomain: z.array(ACLAction$.inboundSchema).optional(),
            projectDomainMove: z.array(ACLAction$.inboundSchema).optional(),
            projectDomainCheckConfig: z.array(ACLAction$.inboundSchema).optional(),
            projectEnvVars: z.array(ACLAction$.inboundSchema).optional(),
            projectEnvVarsProduction: z.array(ACLAction$.inboundSchema).optional(),
            projectEnvVarsUnownedByIntegration: z.array(ACLAction$.inboundSchema).optional(),
            projectId: z.array(ACLAction$.inboundSchema).optional(),
            projectIntegrationConfiguration: z.array(ACLAction$.inboundSchema).optional(),
            projectLink: z.array(ACLAction$.inboundSchema).optional(),
            projectMember: z.array(ACLAction$.inboundSchema).optional(),
            projectMonitoring: z.array(ACLAction$.inboundSchema).optional(),
            projectPermissions: z.array(ACLAction$.inboundSchema).optional(),
            projectProductionBranch: z.array(ACLAction$.inboundSchema).optional(),
            projectTransfer: z.array(ACLAction$.inboundSchema).optional(),
            projectTransferOut: z.array(ACLAction$.inboundSchema).optional(),
            projectProtectionBypass: z.array(ACLAction$.inboundSchema).optional(),
            projectUsage: z.array(ACLAction$.inboundSchema).optional(),
            projectAnalyticsUsage: z.array(ACLAction$.inboundSchema).optional(),
            projectSupportCase: z.array(ACLAction$.inboundSchema).optional(),
            projectSupportCaseComment: z.array(ACLAction$.inboundSchema).optional(),
            projectDeploymentExpiration: z.array(ACLAction$.inboundSchema).optional(),
            skewProtection: z.array(ACLAction$.inboundSchema).optional(),
            analytics: z.array(ACLAction$.inboundSchema).optional(),
            trustedIps: z.array(ACLAction$.inboundSchema).optional(),
            webAnalytics: z.array(ACLAction$.inboundSchema).optional(),
            sharedEnvVarConnection: z.array(ACLAction$.inboundSchema).optional(),
        })
        .transform((v) => {
            return remap$(v, {
                Monitoring: "monitoring",
                NotificationMonitoringAlert: "notificationMonitoringAlert",
                "webhook-event": "webhookEvent",
            });
        });

    export type Outbound = {
        accessGroup?: Array<string> | undefined;
        aliasGlobal?: Array<string> | undefined;
        analyticsSampling?: Array<string> | undefined;
        analyticsUsage?: Array<string> | undefined;
        auditLog?: Array<string> | undefined;
        billingAddress?: Array<string> | undefined;
        billingInformation?: Array<string> | undefined;
        billingInvoice?: Array<string> | undefined;
        billingInvoiceEmailRecipient?: Array<string> | undefined;
        billingInvoiceLanguage?: Array<string> | undefined;
        billingPlan?: Array<string> | undefined;
        billingPurchaseOrder?: Array<string> | undefined;
        billingTaxId?: Array<string> | undefined;
        blob?: Array<string> | undefined;
        budget?: Array<string> | undefined;
        cacheArtifact?: Array<string> | undefined;
        cacheArtifactUsageEvent?: Array<string> | undefined;
        codeChecks?: Array<string> | undefined;
        concurrentBuilds?: Array<string> | undefined;
        connect?: Array<string> | undefined;
        connectConfiguration?: Array<string> | undefined;
        domain?: Array<string> | undefined;
        domainAcceptDelegation?: Array<string> | undefined;
        domainAuthCodes?: Array<string> | undefined;
        domainCertificate?: Array<string> | undefined;
        domainCheckConfig?: Array<string> | undefined;
        domainMove?: Array<string> | undefined;
        domainPurchase?: Array<string> | undefined;
        domainRecord?: Array<string> | undefined;
        domainTransferIn?: Array<string> | undefined;
        event?: Array<string> | undefined;
        ownEvent?: Array<string> | undefined;
        sensitiveEnvironmentVariablePolicy?: Array<string> | undefined;
        fileUpload?: Array<string> | undefined;
        gitRepository?: Array<string> | undefined;
        ipBlocking?: Array<string> | undefined;
        integration?: Array<string> | undefined;
        integrationConfiguration?: Array<string> | undefined;
        integrationConfigurationTransfer?: Array<string> | undefined;
        integrationConfigurationProjects?: Array<string> | undefined;
        integrationVercelConfigurationOverride?: Array<string> | undefined;
        integrationStore?: Array<string> | undefined;
        integrationEvent?: Array<string> | undefined;
        integrationResourceSecrets?: Array<string> | undefined;
        marketplaceBillingData?: Array<string> | undefined;
        jobGlobal?: Array<string> | undefined;
        logDrain?: Array<string> | undefined;
        Monitoring?: Array<string> | undefined;
        monitoringSettings?: Array<string> | undefined;
        monitoringQuery?: Array<string> | undefined;
        monitoringChart?: Array<string> | undefined;
        monitoringAlert?: Array<string> | undefined;
        notificationDeploymentFailed?: Array<string> | undefined;
        notificationDomainConfiguration?: Array<string> | undefined;
        notificationDomainExpire?: Array<string> | undefined;
        notificationDomainMoved?: Array<string> | undefined;
        notificationDomainPurchase?: Array<string> | undefined;
        notificationDomainRenewal?: Array<string> | undefined;
        notificationDomainTransfer?: Array<string> | undefined;
        notificationDomainUnverified?: Array<string> | undefined;
        NotificationMonitoringAlert?: Array<string> | undefined;
        notificationPaymentFailed?: Array<string> | undefined;
        notificationUsageAlert?: Array<string> | undefined;
        notificationCustomerBudget?: Array<string> | undefined;
        notificationStatementOfReasons?: Array<string> | undefined;
        oauth2Connection?: Array<string> | undefined;
        openTelemetryEndpoint?: Array<string> | undefined;
        paymentMethod?: Array<string> | undefined;
        permissions?: Array<string> | undefined;
        postgres?: Array<string> | undefined;
        previewDeploymentSuffix?: Array<string> | undefined;
        proTrialOnboarding?: Array<string> | undefined;
        seawallConfig?: Array<string> | undefined;
        sharedEnvVars?: Array<string> | undefined;
        sharedEnvVarsProduction?: Array<string> | undefined;
        space?: Array<string> | undefined;
        spaceRun?: Array<string> | undefined;
        passwordProtectionInvoiceItem?: Array<string> | undefined;
        rateLimit?: Array<string> | undefined;
        redis?: Array<string> | undefined;
        repository?: Array<string> | undefined;
        remoteCaching?: Array<string> | undefined;
        samlConfig?: Array<string> | undefined;
        secret?: Array<string> | undefined;
        redisStoreTokenSet?: Array<string> | undefined;
        blobStoreTokenSet?: Array<string> | undefined;
        postgresStoreTokenSet?: Array<string> | undefined;
        integrationStoreTokenSet?: Array<string> | undefined;
        supportCase?: Array<string> | undefined;
        supportCaseComment?: Array<string> | undefined;
        dataCacheBillingSettings?: Array<string> | undefined;
        team?: Array<string> | undefined;
        teamAccessRequest?: Array<string> | undefined;
        teamFellowMembership?: Array<string> | undefined;
        teamInvite?: Array<string> | undefined;
        teamInviteCode?: Array<string> | undefined;
        teamJoin?: Array<string> | undefined;
        teamOwnMembership?: Array<string> | undefined;
        teamOwnMembershipDisconnectSAML?: Array<string> | undefined;
        token?: Array<string> | undefined;
        usage?: Array<string> | undefined;
        usageCycle?: Array<string> | undefined;
        user?: Array<string> | undefined;
        userConnection?: Array<string> | undefined;
        webAnalyticsPlan?: Array<string> | undefined;
        webAuthn?: Array<string> | undefined;
        edgeConfig?: Array<string> | undefined;
        edgeConfigItem?: Array<string> | undefined;
        edgeConfigSchema?: Array<string> | undefined;
        edgeConfigToken?: Array<string> | undefined;
        webhook?: Array<string> | undefined;
        "webhook-event"?: Array<string> | undefined;
        endpointVerification?: Array<string> | undefined;
        projectTransferIn?: Array<string> | undefined;
        oauth2Application?: Array<string> | undefined;
        aliasProject?: Array<string> | undefined;
        aliasProtectionBypass?: Array<string> | undefined;
        productionAliasProtectionBypass?: Array<string> | undefined;
        connectConfigurationLink?: Array<string> | undefined;
        dataCacheNamespace?: Array<string> | undefined;
        deployment?: Array<string> | undefined;
        deploymentCheck?: Array<string> | undefined;
        deploymentCheckPreview?: Array<string> | undefined;
        deploymentCheckReRunFromProductionBranch?: Array<string> | undefined;
        deploymentProductionGit?: Array<string> | undefined;
        deploymentPreview?: Array<string> | undefined;
        deploymentPrivate?: Array<string> | undefined;
        deploymentPromote?: Array<string> | undefined;
        deploymentRollback?: Array<string> | undefined;
        environments?: Array<string> | undefined;
        logs?: Array<string> | undefined;
        logsPreset?: Array<string> | undefined;
        passwordProtection?: Array<string> | undefined;
        optionsAllowlist?: Array<string> | undefined;
        job?: Array<string> | undefined;
        project?: Array<string> | undefined;
        projectAccessGroup?: Array<string> | undefined;
        projectAnalyticsSampling?: Array<string> | undefined;
        projectDeploymentHook?: Array<string> | undefined;
        projectDomain?: Array<string> | undefined;
        projectDomainMove?: Array<string> | undefined;
        projectDomainCheckConfig?: Array<string> | undefined;
        projectEnvVars?: Array<string> | undefined;
        projectEnvVarsProduction?: Array<string> | undefined;
        projectEnvVarsUnownedByIntegration?: Array<string> | undefined;
        projectId?: Array<string> | undefined;
        projectIntegrationConfiguration?: Array<string> | undefined;
        projectLink?: Array<string> | undefined;
        projectMember?: Array<string> | undefined;
        projectMonitoring?: Array<string> | undefined;
        projectPermissions?: Array<string> | undefined;
        projectProductionBranch?: Array<string> | undefined;
        projectTransfer?: Array<string> | undefined;
        projectTransferOut?: Array<string> | undefined;
        projectProtectionBypass?: Array<string> | undefined;
        projectUsage?: Array<string> | undefined;
        projectAnalyticsUsage?: Array<string> | undefined;
        projectSupportCase?: Array<string> | undefined;
        projectSupportCaseComment?: Array<string> | undefined;
        projectDeploymentExpiration?: Array<string> | undefined;
        skewProtection?: Array<string> | undefined;
        analytics?: Array<string> | undefined;
        trustedIps?: Array<string> | undefined;
        webAnalytics?: Array<string> | undefined;
        sharedEnvVarConnection?: Array<string> | undefined;
    };

    export const outboundSchema: z.ZodType<Outbound, z.ZodTypeDef, CreateProjectPermissions> = z
        .object({
            accessGroup: z.array(ACLAction$.outboundSchema).optional(),
            aliasGlobal: z.array(ACLAction$.outboundSchema).optional(),
            analyticsSampling: z.array(ACLAction$.outboundSchema).optional(),
            analyticsUsage: z.array(ACLAction$.outboundSchema).optional(),
            auditLog: z.array(ACLAction$.outboundSchema).optional(),
            billingAddress: z.array(ACLAction$.outboundSchema).optional(),
            billingInformation: z.array(ACLAction$.outboundSchema).optional(),
            billingInvoice: z.array(ACLAction$.outboundSchema).optional(),
            billingInvoiceEmailRecipient: z.array(ACLAction$.outboundSchema).optional(),
            billingInvoiceLanguage: z.array(ACLAction$.outboundSchema).optional(),
            billingPlan: z.array(ACLAction$.outboundSchema).optional(),
            billingPurchaseOrder: z.array(ACLAction$.outboundSchema).optional(),
            billingTaxId: z.array(ACLAction$.outboundSchema).optional(),
            blob: z.array(ACLAction$.outboundSchema).optional(),
            budget: z.array(ACLAction$.outboundSchema).optional(),
            cacheArtifact: z.array(ACLAction$.outboundSchema).optional(),
            cacheArtifactUsageEvent: z.array(ACLAction$.outboundSchema).optional(),
            codeChecks: z.array(ACLAction$.outboundSchema).optional(),
            concurrentBuilds: z.array(ACLAction$.outboundSchema).optional(),
            connect: z.array(ACLAction$.outboundSchema).optional(),
            connectConfiguration: z.array(ACLAction$.outboundSchema).optional(),
            domain: z.array(ACLAction$.outboundSchema).optional(),
            domainAcceptDelegation: z.array(ACLAction$.outboundSchema).optional(),
            domainAuthCodes: z.array(ACLAction$.outboundSchema).optional(),
            domainCertificate: z.array(ACLAction$.outboundSchema).optional(),
            domainCheckConfig: z.array(ACLAction$.outboundSchema).optional(),
            domainMove: z.array(ACLAction$.outboundSchema).optional(),
            domainPurchase: z.array(ACLAction$.outboundSchema).optional(),
            domainRecord: z.array(ACLAction$.outboundSchema).optional(),
            domainTransferIn: z.array(ACLAction$.outboundSchema).optional(),
            event: z.array(ACLAction$.outboundSchema).optional(),
            ownEvent: z.array(ACLAction$.outboundSchema).optional(),
            sensitiveEnvironmentVariablePolicy: z.array(ACLAction$.outboundSchema).optional(),
            fileUpload: z.array(ACLAction$.outboundSchema).optional(),
            gitRepository: z.array(ACLAction$.outboundSchema).optional(),
            ipBlocking: z.array(ACLAction$.outboundSchema).optional(),
            integration: z.array(ACLAction$.outboundSchema).optional(),
            integrationConfiguration: z.array(ACLAction$.outboundSchema).optional(),
            integrationConfigurationTransfer: z.array(ACLAction$.outboundSchema).optional(),
            integrationConfigurationProjects: z.array(ACLAction$.outboundSchema).optional(),
            integrationVercelConfigurationOverride: z.array(ACLAction$.outboundSchema).optional(),
            integrationStore: z.array(ACLAction$.outboundSchema).optional(),
            integrationEvent: z.array(ACLAction$.outboundSchema).optional(),
            integrationResourceSecrets: z.array(ACLAction$.outboundSchema).optional(),
            marketplaceBillingData: z.array(ACLAction$.outboundSchema).optional(),
            jobGlobal: z.array(ACLAction$.outboundSchema).optional(),
            logDrain: z.array(ACLAction$.outboundSchema).optional(),
            monitoring: z.array(ACLAction$.outboundSchema).optional(),
            monitoringSettings: z.array(ACLAction$.outboundSchema).optional(),
            monitoringQuery: z.array(ACLAction$.outboundSchema).optional(),
            monitoringChart: z.array(ACLAction$.outboundSchema).optional(),
            monitoringAlert: z.array(ACLAction$.outboundSchema).optional(),
            notificationDeploymentFailed: z.array(ACLAction$.outboundSchema).optional(),
            notificationDomainConfiguration: z.array(ACLAction$.outboundSchema).optional(),
            notificationDomainExpire: z.array(ACLAction$.outboundSchema).optional(),
            notificationDomainMoved: z.array(ACLAction$.outboundSchema).optional(),
            notificationDomainPurchase: z.array(ACLAction$.outboundSchema).optional(),
            notificationDomainRenewal: z.array(ACLAction$.outboundSchema).optional(),
            notificationDomainTransfer: z.array(ACLAction$.outboundSchema).optional(),
            notificationDomainUnverified: z.array(ACLAction$.outboundSchema).optional(),
            notificationMonitoringAlert: z.array(ACLAction$.outboundSchema).optional(),
            notificationPaymentFailed: z.array(ACLAction$.outboundSchema).optional(),
            notificationUsageAlert: z.array(ACLAction$.outboundSchema).optional(),
            notificationCustomerBudget: z.array(ACLAction$.outboundSchema).optional(),
            notificationStatementOfReasons: z.array(ACLAction$.outboundSchema).optional(),
            oauth2Connection: z.array(ACLAction$.outboundSchema).optional(),
            openTelemetryEndpoint: z.array(ACLAction$.outboundSchema).optional(),
            paymentMethod: z.array(ACLAction$.outboundSchema).optional(),
            permissions: z.array(ACLAction$.outboundSchema).optional(),
            postgres: z.array(ACLAction$.outboundSchema).optional(),
            previewDeploymentSuffix: z.array(ACLAction$.outboundSchema).optional(),
            proTrialOnboarding: z.array(ACLAction$.outboundSchema).optional(),
            seawallConfig: z.array(ACLAction$.outboundSchema).optional(),
            sharedEnvVars: z.array(ACLAction$.outboundSchema).optional(),
            sharedEnvVarsProduction: z.array(ACLAction$.outboundSchema).optional(),
            space: z.array(ACLAction$.outboundSchema).optional(),
            spaceRun: z.array(ACLAction$.outboundSchema).optional(),
            passwordProtectionInvoiceItem: z.array(ACLAction$.outboundSchema).optional(),
            rateLimit: z.array(ACLAction$.outboundSchema).optional(),
            redis: z.array(ACLAction$.outboundSchema).optional(),
            repository: z.array(ACLAction$.outboundSchema).optional(),
            remoteCaching: z.array(ACLAction$.outboundSchema).optional(),
            samlConfig: z.array(ACLAction$.outboundSchema).optional(),
            secret: z.array(ACLAction$.outboundSchema).optional(),
            redisStoreTokenSet: z.array(ACLAction$.outboundSchema).optional(),
            blobStoreTokenSet: z.array(ACLAction$.outboundSchema).optional(),
            postgresStoreTokenSet: z.array(ACLAction$.outboundSchema).optional(),
            integrationStoreTokenSet: z.array(ACLAction$.outboundSchema).optional(),
            supportCase: z.array(ACLAction$.outboundSchema).optional(),
            supportCaseComment: z.array(ACLAction$.outboundSchema).optional(),
            dataCacheBillingSettings: z.array(ACLAction$.outboundSchema).optional(),
            team: z.array(ACLAction$.outboundSchema).optional(),
            teamAccessRequest: z.array(ACLAction$.outboundSchema).optional(),
            teamFellowMembership: z.array(ACLAction$.outboundSchema).optional(),
            teamInvite: z.array(ACLAction$.outboundSchema).optional(),
            teamInviteCode: z.array(ACLAction$.outboundSchema).optional(),
            teamJoin: z.array(ACLAction$.outboundSchema).optional(),
            teamOwnMembership: z.array(ACLAction$.outboundSchema).optional(),
            teamOwnMembershipDisconnectSAML: z.array(ACLAction$.outboundSchema).optional(),
            token: z.array(ACLAction$.outboundSchema).optional(),
            usage: z.array(ACLAction$.outboundSchema).optional(),
            usageCycle: z.array(ACLAction$.outboundSchema).optional(),
            user: z.array(ACLAction$.outboundSchema).optional(),
            userConnection: z.array(ACLAction$.outboundSchema).optional(),
            webAnalyticsPlan: z.array(ACLAction$.outboundSchema).optional(),
            webAuthn: z.array(ACLAction$.outboundSchema).optional(),
            edgeConfig: z.array(ACLAction$.outboundSchema).optional(),
            edgeConfigItem: z.array(ACLAction$.outboundSchema).optional(),
            edgeConfigSchema: z.array(ACLAction$.outboundSchema).optional(),
            edgeConfigToken: z.array(ACLAction$.outboundSchema).optional(),
            webhook: z.array(ACLAction$.outboundSchema).optional(),
            webhookEvent: z.array(ACLAction$.outboundSchema).optional(),
            endpointVerification: z.array(ACLAction$.outboundSchema).optional(),
            projectTransferIn: z.array(ACLAction$.outboundSchema).optional(),
            oauth2Application: z.array(ACLAction$.outboundSchema).optional(),
            aliasProject: z.array(ACLAction$.outboundSchema).optional(),
            aliasProtectionBypass: z.array(ACLAction$.outboundSchema).optional(),
            productionAliasProtectionBypass: z.array(ACLAction$.outboundSchema).optional(),
            connectConfigurationLink: z.array(ACLAction$.outboundSchema).optional(),
            dataCacheNamespace: z.array(ACLAction$.outboundSchema).optional(),
            deployment: z.array(ACLAction$.outboundSchema).optional(),
            deploymentCheck: z.array(ACLAction$.outboundSchema).optional(),
            deploymentCheckPreview: z.array(ACLAction$.outboundSchema).optional(),
            deploymentCheckReRunFromProductionBranch: z.array(ACLAction$.outboundSchema).optional(),
            deploymentProductionGit: z.array(ACLAction$.outboundSchema).optional(),
            deploymentPreview: z.array(ACLAction$.outboundSchema).optional(),
            deploymentPrivate: z.array(ACLAction$.outboundSchema).optional(),
            deploymentPromote: z.array(ACLAction$.outboundSchema).optional(),
            deploymentRollback: z.array(ACLAction$.outboundSchema).optional(),
            environments: z.array(ACLAction$.outboundSchema).optional(),
            logs: z.array(ACLAction$.outboundSchema).optional(),
            logsPreset: z.array(ACLAction$.outboundSchema).optional(),
            passwordProtection: z.array(ACLAction$.outboundSchema).optional(),
            optionsAllowlist: z.array(ACLAction$.outboundSchema).optional(),
            job: z.array(ACLAction$.outboundSchema).optional(),
            project: z.array(ACLAction$.outboundSchema).optional(),
            projectAccessGroup: z.array(ACLAction$.outboundSchema).optional(),
            projectAnalyticsSampling: z.array(ACLAction$.outboundSchema).optional(),
            projectDeploymentHook: z.array(ACLAction$.outboundSchema).optional(),
            projectDomain: z.array(ACLAction$.outboundSchema).optional(),
            projectDomainMove: z.array(ACLAction$.outboundSchema).optional(),
            projectDomainCheckConfig: z.array(ACLAction$.outboundSchema).optional(),
            projectEnvVars: z.array(ACLAction$.outboundSchema).optional(),
            projectEnvVarsProduction: z.array(ACLAction$.outboundSchema).optional(),
            projectEnvVarsUnownedByIntegration: z.array(ACLAction$.outboundSchema).optional(),
            projectId: z.array(ACLAction$.outboundSchema).optional(),
            projectIntegrationConfiguration: z.array(ACLAction$.outboundSchema).optional(),
            projectLink: z.array(ACLAction$.outboundSchema).optional(),
            projectMember: z.array(ACLAction$.outboundSchema).optional(),
            projectMonitoring: z.array(ACLAction$.outboundSchema).optional(),
            projectPermissions: z.array(ACLAction$.outboundSchema).optional(),
            projectProductionBranch: z.array(ACLAction$.outboundSchema).optional(),
            projectTransfer: z.array(ACLAction$.outboundSchema).optional(),
            projectTransferOut: z.array(ACLAction$.outboundSchema).optional(),
            projectProtectionBypass: z.array(ACLAction$.outboundSchema).optional(),
            projectUsage: z.array(ACLAction$.outboundSchema).optional(),
            projectAnalyticsUsage: z.array(ACLAction$.outboundSchema).optional(),
            projectSupportCase: z.array(ACLAction$.outboundSchema).optional(),
            projectSupportCaseComment: z.array(ACLAction$.outboundSchema).optional(),
            projectDeploymentExpiration: z.array(ACLAction$.outboundSchema).optional(),
            skewProtection: z.array(ACLAction$.outboundSchema).optional(),
            analytics: z.array(ACLAction$.outboundSchema).optional(),
            trustedIps: z.array(ACLAction$.outboundSchema).optional(),
            webAnalytics: z.array(ACLAction$.outboundSchema).optional(),
            sharedEnvVarConnection: z.array(ACLAction$.outboundSchema).optional(),
        })
        .transform((v) => {
            return remap$(v, {
                monitoring: "Monitoring",
                notificationMonitoringAlert: "NotificationMonitoringAlert",
                webhookEvent: "webhook-event",
            });
        });
}

/** @internal */
export namespace CreateProjectLastRollbackTarget$ {
    export const inboundSchema: z.ZodType<CreateProjectLastRollbackTarget, z.ZodTypeDef, unknown> =
        z.object({});

    export type Outbound = {};

    export const outboundSchema: z.ZodType<
        Outbound,
        z.ZodTypeDef,
        CreateProjectLastRollbackTarget
    > = z.object({});
}

/** @internal */
export namespace CreateProjectJobStatus$ {
    export const inboundSchema: z.ZodNativeEnum<typeof CreateProjectJobStatus> =
        z.nativeEnum(CreateProjectJobStatus);
    export const outboundSchema: z.ZodNativeEnum<typeof CreateProjectJobStatus> = inboundSchema;
}

/** @internal */
export namespace CreateProjectProjectsResponse200ApplicationJSONType$ {
    export const inboundSchema: z.ZodNativeEnum<
        typeof CreateProjectProjectsResponse200ApplicationJSONType
    > = z.nativeEnum(CreateProjectProjectsResponse200ApplicationJSONType);
    export const outboundSchema: z.ZodNativeEnum<
        typeof CreateProjectProjectsResponse200ApplicationJSONType
    > = inboundSchema;
}

/** @internal */
export namespace CreateProjectLastAliasRequest$ {
    export const inboundSchema: z.ZodType<CreateProjectLastAliasRequest, z.ZodTypeDef, unknown> =
        z.object({
            fromDeploymentId: z.string(),
            toDeploymentId: z.string(),
            jobStatus: CreateProjectJobStatus$.inboundSchema,
            requestedAt: z.number(),
            type: CreateProjectProjectsResponse200ApplicationJSONType$.inboundSchema,
        });

    export type Outbound = {
        fromDeploymentId: string;
        toDeploymentId: string;
        jobStatus: string;
        requestedAt: number;
        type: string;
    };

    export const outboundSchema: z.ZodType<Outbound, z.ZodTypeDef, CreateProjectLastAliasRequest> =
        z.object({
            fromDeploymentId: z.string(),
            toDeploymentId: z.string(),
            jobStatus: CreateProjectJobStatus$.outboundSchema,
            requestedAt: z.number(),
            type: CreateProjectProjectsResponse200ApplicationJSONType$.outboundSchema,
        });
}

/** @internal */
export namespace CreateProjectScope$ {
    export const inboundSchema: z.ZodNativeEnum<typeof CreateProjectScope> =
        z.nativeEnum(CreateProjectScope);
    export const outboundSchema: z.ZodNativeEnum<typeof CreateProjectScope> = inboundSchema;
}

/** @internal */
export namespace CreateProjectProtectionBypass$ {
    export const inboundSchema: z.ZodType<CreateProjectProtectionBypass, z.ZodTypeDef, unknown> =
        z.object({
            createdAt: z.number(),
            createdBy: z.string(),
            scope: CreateProjectScope$.inboundSchema,
        });

    export type Outbound = {
        createdAt: number;
        createdBy: string;
        scope: string;
    };

    export const outboundSchema: z.ZodType<Outbound, z.ZodTypeDef, CreateProjectProtectionBypass> =
        z.object({
            createdAt: z.number(),
            createdBy: z.string(),
            scope: CreateProjectScope$.outboundSchema,
        });
}

/** @internal */
export namespace CreateProjectTrustedIpsProjectsDeploymentType$ {
    export const inboundSchema: z.ZodNativeEnum<
        typeof CreateProjectTrustedIpsProjectsDeploymentType
    > = z.nativeEnum(CreateProjectTrustedIpsProjectsDeploymentType);
    export const outboundSchema: z.ZodNativeEnum<
        typeof CreateProjectTrustedIpsProjectsDeploymentType
    > = inboundSchema;
}

/** @internal */
export namespace CreateProjectTrustedIps2$ {
    export const inboundSchema: z.ZodType<CreateProjectTrustedIps2, z.ZodTypeDef, unknown> =
        z.object({
            deploymentType: CreateProjectTrustedIpsProjectsDeploymentType$.inboundSchema,
        });

    export type Outbound = {
        deploymentType: string;
    };

    export const outboundSchema: z.ZodType<Outbound, z.ZodTypeDef, CreateProjectTrustedIps2> =
        z.object({
            deploymentType: CreateProjectTrustedIpsProjectsDeploymentType$.outboundSchema,
        });
}

/** @internal */
export namespace CreateProjectTrustedIpsDeploymentType$ {
    export const inboundSchema: z.ZodNativeEnum<typeof CreateProjectTrustedIpsDeploymentType> =
        z.nativeEnum(CreateProjectTrustedIpsDeploymentType);
    export const outboundSchema: z.ZodNativeEnum<typeof CreateProjectTrustedIpsDeploymentType> =
        inboundSchema;
}

/** @internal */
export namespace TrustedIpsAddresses$ {
    export const inboundSchema: z.ZodType<TrustedIpsAddresses, z.ZodTypeDef, unknown> = z.object({
        value: z.string(),
        note: z.string().optional(),
    });

    export type Outbound = {
        value: string;
        note?: string | undefined;
    };

    export const outboundSchema: z.ZodType<Outbound, z.ZodTypeDef, TrustedIpsAddresses> = z.object({
        value: z.string(),
        note: z.string().optional(),
    });
}

/** @internal */
export namespace TrustedIpsProtectionMode$ {
    export const inboundSchema: z.ZodNativeEnum<typeof TrustedIpsProtectionMode> =
        z.nativeEnum(TrustedIpsProtectionMode);
    export const outboundSchema: z.ZodNativeEnum<typeof TrustedIpsProtectionMode> = inboundSchema;
}

/** @internal */
export namespace CreateProjectTrustedIps1$ {
    export const inboundSchema: z.ZodType<CreateProjectTrustedIps1, z.ZodTypeDef, unknown> =
        z.object({
            deploymentType: CreateProjectTrustedIpsDeploymentType$.inboundSchema,
            addresses: z.array(z.lazy(() => TrustedIpsAddresses$.inboundSchema)),
            protectionMode: TrustedIpsProtectionMode$.inboundSchema,
        });

    export type Outbound = {
        deploymentType: string;
        addresses: Array<TrustedIpsAddresses$.Outbound>;
        protectionMode: string;
    };

    export const outboundSchema: z.ZodType<Outbound, z.ZodTypeDef, CreateProjectTrustedIps1> =
        z.object({
            deploymentType: CreateProjectTrustedIpsDeploymentType$.outboundSchema,
            addresses: z.array(z.lazy(() => TrustedIpsAddresses$.outboundSchema)),
            protectionMode: TrustedIpsProtectionMode$.outboundSchema,
        });
}

/** @internal */
export namespace CreateProjectTrustedIps$ {
    export const inboundSchema: z.ZodType<CreateProjectTrustedIps, z.ZodTypeDef, unknown> = z.union(
        [
            z.lazy(() => CreateProjectTrustedIps2$.inboundSchema),
            z.lazy(() => CreateProjectTrustedIps1$.inboundSchema),
        ]
    );

    export type Outbound = CreateProjectTrustedIps2$.Outbound | CreateProjectTrustedIps1$.Outbound;
    export const outboundSchema: z.ZodType<Outbound, z.ZodTypeDef, CreateProjectTrustedIps> =
        z.union([
            z.lazy(() => CreateProjectTrustedIps2$.outboundSchema),
            z.lazy(() => CreateProjectTrustedIps1$.outboundSchema),
        ]);
}

/** @internal */
export namespace CreateProjectGitComments$ {
    export const inboundSchema: z.ZodType<CreateProjectGitComments, z.ZodTypeDef, unknown> =
        z.object({
            onPullRequest: z.boolean(),
            onCommit: z.boolean(),
        });

    export type Outbound = {
        onPullRequest: boolean;
        onCommit: boolean;
    };

    export const outboundSchema: z.ZodType<Outbound, z.ZodTypeDef, CreateProjectGitComments> =
        z.object({
            onPullRequest: z.boolean(),
            onCommit: z.boolean(),
        });
}

/** @internal */
export namespace CreateProjectWebAnalytics$ {
    export const inboundSchema: z.ZodType<CreateProjectWebAnalytics, z.ZodTypeDef, unknown> =
        z.object({
            id: z.string(),
            disabledAt: z.number().optional(),
            canceledAt: z.number().optional(),
            enabledAt: z.number().optional(),
            hasData: z.boolean().optional(),
        });

    export type Outbound = {
        id: string;
        disabledAt?: number | undefined;
        canceledAt?: number | undefined;
        enabledAt?: number | undefined;
        hasData?: boolean | undefined;
    };

    export const outboundSchema: z.ZodType<Outbound, z.ZodTypeDef, CreateProjectWebAnalytics> =
        z.object({
            id: z.string(),
            disabledAt: z.number().optional(),
            canceledAt: z.number().optional(),
            enabledAt: z.number().optional(),
            hasData: z.boolean().optional(),
        });
}

/** @internal */
export namespace CreateProjectSrc2$ {
    export const inboundSchema: z.ZodType<CreateProjectSrc2, z.ZodTypeDef, unknown> = z.object({
        re: z.string().optional(),
        eq: z.string().optional(),
        neq: z.string().optional(),
        inc: z.array(z.string()).optional(),
        ninc: z.array(z.string()).optional(),
        pre: z.string().optional(),
        suf: z.string().optional(),
        gt: z.number().optional(),
        gte: z.number().optional(),
        lt: z.number().optional(),
        lte: z.number().optional(),
    });

    export type Outbound = {
        re?: string | undefined;
        eq?: string | undefined;
        neq?: string | undefined;
        inc?: Array<string> | undefined;
        ninc?: Array<string> | undefined;
        pre?: string | undefined;
        suf?: string | undefined;
        gt?: number | undefined;
        gte?: number | undefined;
        lt?: number | undefined;
        lte?: number | undefined;
    };

    export const outboundSchema: z.ZodType<Outbound, z.ZodTypeDef, CreateProjectSrc2> = z.object({
        re: z.string().optional(),
        eq: z.string().optional(),
        neq: z.string().optional(),
        inc: z.array(z.string()).optional(),
        ninc: z.array(z.string()).optional(),
        pre: z.string().optional(),
        suf: z.string().optional(),
        gt: z.number().optional(),
        gte: z.number().optional(),
        lt: z.number().optional(),
        lte: z.number().optional(),
    });
}

/** @internal */
export namespace CreateProjectSrc$ {
    export const inboundSchema: z.ZodType<CreateProjectSrc, z.ZodTypeDef, unknown> = z.union([
        z.lazy(() => CreateProjectSrc2$.inboundSchema),
        z.string(),
    ]);

    export type Outbound = CreateProjectSrc2$.Outbound | string;
    export const outboundSchema: z.ZodType<Outbound, z.ZodTypeDef, CreateProjectSrc> = z.union([
        z.lazy(() => CreateProjectSrc2$.outboundSchema),
        z.string(),
    ]);
}

/** @internal */
export namespace CreateProjectProjectsResponse200ApplicationJSONResponseBodySecurityType$ {
    export const inboundSchema: z.ZodNativeEnum<
        typeof CreateProjectProjectsResponse200ApplicationJSONResponseBodySecurityType
    > = z.nativeEnum(CreateProjectProjectsResponse200ApplicationJSONResponseBodySecurityType);
    export const outboundSchema: z.ZodNativeEnum<
        typeof CreateProjectProjectsResponse200ApplicationJSONResponseBodySecurityType
    > = inboundSchema;
}

/** @internal */
export namespace CreateProjectValue2$ {
    export const inboundSchema: z.ZodType<CreateProjectValue2, z.ZodTypeDef, unknown> = z.object({
        re: z.string().optional(),
        eq: z.string().optional(),
        neq: z.string().optional(),
        inc: z.array(z.string()).optional(),
        ninc: z.array(z.string()).optional(),
        pre: z.string().optional(),
        suf: z.string().optional(),
        gt: z.number().optional(),
        gte: z.number().optional(),
        lt: z.number().optional(),
        lte: z.number().optional(),
    });

    export type Outbound = {
        re?: string | undefined;
        eq?: string | undefined;
        neq?: string | undefined;
        inc?: Array<string> | undefined;
        ninc?: Array<string> | undefined;
        pre?: string | undefined;
        suf?: string | undefined;
        gt?: number | undefined;
        gte?: number | undefined;
        lt?: number | undefined;
        lte?: number | undefined;
    };

    export const outboundSchema: z.ZodType<Outbound, z.ZodTypeDef, CreateProjectValue2> = z.object({
        re: z.string().optional(),
        eq: z.string().optional(),
        neq: z.string().optional(),
        inc: z.array(z.string()).optional(),
        ninc: z.array(z.string()).optional(),
        pre: z.string().optional(),
        suf: z.string().optional(),
        gt: z.number().optional(),
        gte: z.number().optional(),
        lt: z.number().optional(),
        lte: z.number().optional(),
    });
}

/** @internal */
export namespace CreateProjectValue$ {
    export const inboundSchema: z.ZodType<CreateProjectValue, z.ZodTypeDef, unknown> = z.union([
        z.lazy(() => CreateProjectValue2$.inboundSchema),
        z.string(),
    ]);

    export type Outbound = CreateProjectValue2$.Outbound | string;
    export const outboundSchema: z.ZodType<Outbound, z.ZodTypeDef, CreateProjectValue> = z.union([
        z.lazy(() => CreateProjectValue2$.outboundSchema),
        z.string(),
    ]);
}

/** @internal */
export namespace CreateProjectHas$ {
    export const inboundSchema: z.ZodType<CreateProjectHas, z.ZodTypeDef, unknown> = z.object({
        type: CreateProjectProjectsResponse200ApplicationJSONResponseBodySecurityType$.inboundSchema,
        key: z.string().optional(),
        value: z.union([z.lazy(() => CreateProjectValue2$.inboundSchema), z.string()]).optional(),
    });

    export type Outbound = {
        type: string;
        key?: string | undefined;
        value?: CreateProjectValue2$.Outbound | string | undefined;
    };

    export const outboundSchema: z.ZodType<Outbound, z.ZodTypeDef, CreateProjectHas> = z.object({
        type: CreateProjectProjectsResponse200ApplicationJSONResponseBodySecurityType$.outboundSchema,
        key: z.string().optional(),
        value: z.union([z.lazy(() => CreateProjectValue2$.outboundSchema), z.string()]).optional(),
    });
}

/** @internal */
export namespace CreateProjectProjectsResponse200ApplicationJSONResponseBodySecurityFirewallRoutesType$ {
    export const inboundSchema: z.ZodNativeEnum<
        typeof CreateProjectProjectsResponse200ApplicationJSONResponseBodySecurityFirewallRoutesType
    > = z.nativeEnum(
        CreateProjectProjectsResponse200ApplicationJSONResponseBodySecurityFirewallRoutesType
    );
    export const outboundSchema: z.ZodNativeEnum<
        typeof CreateProjectProjectsResponse200ApplicationJSONResponseBodySecurityFirewallRoutesType
    > = inboundSchema;
}

/** @internal */
export namespace CreateProjectValueProjects2$ {
    export const inboundSchema: z.ZodType<CreateProjectValueProjects2, z.ZodTypeDef, unknown> =
        z.object({
            re: z.string().optional(),
            eq: z.string().optional(),
            neq: z.string().optional(),
            inc: z.array(z.string()).optional(),
            ninc: z.array(z.string()).optional(),
            pre: z.string().optional(),
            suf: z.string().optional(),
            gt: z.number().optional(),
            gte: z.number().optional(),
            lt: z.number().optional(),
            lte: z.number().optional(),
        });

    export type Outbound = {
        re?: string | undefined;
        eq?: string | undefined;
        neq?: string | undefined;
        inc?: Array<string> | undefined;
        ninc?: Array<string> | undefined;
        pre?: string | undefined;
        suf?: string | undefined;
        gt?: number | undefined;
        gte?: number | undefined;
        lt?: number | undefined;
        lte?: number | undefined;
    };

    export const outboundSchema: z.ZodType<Outbound, z.ZodTypeDef, CreateProjectValueProjects2> =
        z.object({
            re: z.string().optional(),
            eq: z.string().optional(),
            neq: z.string().optional(),
            inc: z.array(z.string()).optional(),
            ninc: z.array(z.string()).optional(),
            pre: z.string().optional(),
            suf: z.string().optional(),
            gt: z.number().optional(),
            gte: z.number().optional(),
            lt: z.number().optional(),
            lte: z.number().optional(),
        });
}

/** @internal */
export namespace CreateProjectProjectsValue$ {
    export const inboundSchema: z.ZodType<CreateProjectProjectsValue, z.ZodTypeDef, unknown> =
        z.union([z.lazy(() => CreateProjectValueProjects2$.inboundSchema), z.string()]);

    export type Outbound = CreateProjectValueProjects2$.Outbound | string;
    export const outboundSchema: z.ZodType<Outbound, z.ZodTypeDef, CreateProjectProjectsValue> =
        z.union([z.lazy(() => CreateProjectValueProjects2$.outboundSchema), z.string()]);
}

/** @internal */
export namespace CreateProjectMissing$ {
    export const inboundSchema: z.ZodType<CreateProjectMissing, z.ZodTypeDef, unknown> = z.object({
        type: CreateProjectProjectsResponse200ApplicationJSONResponseBodySecurityFirewallRoutesType$.inboundSchema,
        key: z.string().optional(),
        value: z
            .union([z.lazy(() => CreateProjectValueProjects2$.inboundSchema), z.string()])
            .optional(),
    });

    export type Outbound = {
        type: string;
        key?: string | undefined;
        value?: CreateProjectValueProjects2$.Outbound | string | undefined;
    };

    export const outboundSchema: z.ZodType<Outbound, z.ZodTypeDef, CreateProjectMissing> = z.object(
        {
            type: CreateProjectProjectsResponse200ApplicationJSONResponseBodySecurityFirewallRoutesType$.outboundSchema,
            key: z.string().optional(),
            value: z
                .union([z.lazy(() => CreateProjectValueProjects2$.outboundSchema), z.string()])
                .optional(),
        }
    );
}

/** @internal */
export namespace CreateProjectHandle$ {
    export const inboundSchema: z.ZodNativeEnum<typeof CreateProjectHandle> =
        z.nativeEnum(CreateProjectHandle);
    export const outboundSchema: z.ZodNativeEnum<typeof CreateProjectHandle> = inboundSchema;
}

/** @internal */
export namespace CreateProjectAction$ {
    export const inboundSchema: z.ZodNativeEnum<typeof CreateProjectAction> =
        z.nativeEnum(CreateProjectAction);
    export const outboundSchema: z.ZodNativeEnum<typeof CreateProjectAction> = inboundSchema;
}

/** @internal */
export namespace CreateProjectAlgo$ {
    export const inboundSchema: z.ZodNativeEnum<typeof CreateProjectAlgo> =
        z.nativeEnum(CreateProjectAlgo);
    export const outboundSchema: z.ZodNativeEnum<typeof CreateProjectAlgo> = inboundSchema;
}

/** @internal */
export namespace CreateProjectErl$ {
    export const inboundSchema: z.ZodType<CreateProjectErl, z.ZodTypeDef, unknown> = z.object({
        algo: CreateProjectAlgo$.inboundSchema,
        window: z.number(),
        limit: z.number(),
        keys: z.array(z.string()),
    });

    export type Outbound = {
        algo: string;
        window: number;
        limit: number;
        keys: Array<string>;
    };

    export const outboundSchema: z.ZodType<Outbound, z.ZodTypeDef, CreateProjectErl> = z.object({
        algo: CreateProjectAlgo$.outboundSchema,
        window: z.number(),
        limit: z.number(),
        keys: z.array(z.string()),
    });
}

/** @internal */
export namespace CreateProjectMitigate$ {
    export const inboundSchema: z.ZodType<CreateProjectMitigate, z.ZodTypeDef, unknown> = z
        .object({
            action: CreateProjectAction$.inboundSchema,
            rule_id: z.string(),
            erl: z.lazy(() => CreateProjectErl$.inboundSchema).optional(),
        })
        .transform((v) => {
            return remap$(v, {
                rule_id: "ruleId",
            });
        });

    export type Outbound = {
        action: string;
        rule_id: string;
        erl?: CreateProjectErl$.Outbound | undefined;
    };

    export const outboundSchema: z.ZodType<Outbound, z.ZodTypeDef, CreateProjectMitigate> = z
        .object({
            action: CreateProjectAction$.outboundSchema,
            ruleId: z.string(),
            erl: z.lazy(() => CreateProjectErl$.outboundSchema).optional(),
        })
        .transform((v) => {
            return remap$(v, {
                ruleId: "rule_id",
            });
        });
}

/** @internal */
export namespace CreateProjectFirewallRoutes$ {
    export const inboundSchema: z.ZodType<CreateProjectFirewallRoutes, z.ZodTypeDef, unknown> =
        z.object({
            src: z.union([z.lazy(() => CreateProjectSrc2$.inboundSchema), z.string()]).optional(),
            has: z.array(z.lazy(() => CreateProjectHas$.inboundSchema)).optional(),
            missing: z.array(z.lazy(() => CreateProjectMissing$.inboundSchema)).optional(),
            dest: z.string().optional(),
            status: z.number().optional(),
            handle: CreateProjectHandle$.inboundSchema.optional(),
            mitigate: z.lazy(() => CreateProjectMitigate$.inboundSchema).optional(),
        });

    export type Outbound = {
        src?: CreateProjectSrc2$.Outbound | string | undefined;
        has?: Array<CreateProjectHas$.Outbound> | undefined;
        missing?: Array<CreateProjectMissing$.Outbound> | undefined;
        dest?: string | undefined;
        status?: number | undefined;
        handle?: string | undefined;
        mitigate?: CreateProjectMitigate$.Outbound | undefined;
    };

    export const outboundSchema: z.ZodType<Outbound, z.ZodTypeDef, CreateProjectFirewallRoutes> =
        z.object({
            src: z.union([z.lazy(() => CreateProjectSrc2$.outboundSchema), z.string()]).optional(),
            has: z.array(z.lazy(() => CreateProjectHas$.outboundSchema)).optional(),
            missing: z.array(z.lazy(() => CreateProjectMissing$.outboundSchema)).optional(),
            dest: z.string().optional(),
            status: z.number().optional(),
            handle: CreateProjectHandle$.outboundSchema.optional(),
            mitigate: z.lazy(() => CreateProjectMitigate$.outboundSchema).optional(),
        });
}

/** @internal */
export namespace CreateProjectSecurity$ {
    export const inboundSchema: z.ZodType<CreateProjectSecurity, z.ZodTypeDef, unknown> = z.object({
        attackModeEnabled: z.boolean().optional(),
        attackModeUpdatedAt: z.number().optional(),
        firewallEnabled: z.boolean().optional(),
        firewallUpdatedAt: z.number().optional(),
        attackModeActiveUntil: z.nullable(z.number()).optional(),
        firewallConfigVersion: z.number().optional(),
        firewallRoutes: z
            .array(z.lazy(() => CreateProjectFirewallRoutes$.inboundSchema))
            .optional(),
        firewallSeawallEnabled: z.boolean().optional(),
        ja3Enabled: z.boolean().optional(),
        ja4Enabled: z.boolean().optional(),
    });

    export type Outbound = {
        attackModeEnabled?: boolean | undefined;
        attackModeUpdatedAt?: number | undefined;
        firewallEnabled?: boolean | undefined;
        firewallUpdatedAt?: number | undefined;
        attackModeActiveUntil?: number | null | undefined;
        firewallConfigVersion?: number | undefined;
        firewallRoutes?: Array<CreateProjectFirewallRoutes$.Outbound> | undefined;
        firewallSeawallEnabled?: boolean | undefined;
        ja3Enabled?: boolean | undefined;
        ja4Enabled?: boolean | undefined;
    };

    export const outboundSchema: z.ZodType<Outbound, z.ZodTypeDef, CreateProjectSecurity> =
        z.object({
            attackModeEnabled: z.boolean().optional(),
            attackModeUpdatedAt: z.number().optional(),
            firewallEnabled: z.boolean().optional(),
            firewallUpdatedAt: z.number().optional(),
            attackModeActiveUntil: z.nullable(z.number()).optional(),
            firewallConfigVersion: z.number().optional(),
            firewallRoutes: z
                .array(z.lazy(() => CreateProjectFirewallRoutes$.outboundSchema))
                .optional(),
            firewallSeawallEnabled: z.boolean().optional(),
            ja3Enabled: z.boolean().optional(),
            ja4Enabled: z.boolean().optional(),
        });
}

/** @internal */
export namespace CreateProjectOidcTokenConfig$ {
    export const inboundSchema: z.ZodType<CreateProjectOidcTokenConfig, z.ZodTypeDef, unknown> =
        z.object({
            enabled: z.boolean(),
        });

    export type Outbound = {
        enabled: boolean;
    };

    export const outboundSchema: z.ZodType<Outbound, z.ZodTypeDef, CreateProjectOidcTokenConfig> =
        z.object({
            enabled: z.boolean(),
        });
}

/** @internal */
export namespace CreateProjectResponseBody$ {
    export const inboundSchema: z.ZodType<CreateProjectResponseBody, z.ZodTypeDef, unknown> =
        z.object({
            accountId: z.string(),
            analytics: z.lazy(() => CreateProjectAnalytics$.inboundSchema).optional(),
            speedInsights: z.lazy(() => CreateProjectSpeedInsights$.inboundSchema).optional(),
            autoExposeSystemEnvs: z.boolean().optional(),
            autoAssignCustomDomains: z.boolean().optional(),
            autoAssignCustomDomainsUpdatedBy: z.string().optional(),
            buildCommand: z.nullable(z.string()).optional(),
            commandForIgnoringBuildStep: z.nullable(z.string()).optional(),
            connectConfigurationId: z.nullable(z.string()).optional(),
            connectBuildsEnabled: z.boolean().optional(),
            createdAt: z.number().optional(),
            customerSupportCodeVisibility: z.boolean().optional(),
            crons: z.lazy(() => CreateProjectCrons$.inboundSchema).optional(),
            dataCache: z.lazy(() => CreateProjectDataCache$.inboundSchema).optional(),
            devCommand: z.nullable(z.string()).optional(),
            directoryListing: z.boolean(),
            installCommand: z.nullable(z.string()).optional(),
            env: z.array(z.lazy(() => CreateProjectEnv$.inboundSchema)).optional(),
            framework: z.nullable(CreateProjectProjectsFramework$.inboundSchema).optional(),
            gitForkProtection: z.boolean().optional(),
            gitLFS: z.boolean().optional(),
            id: z.string(),
            latestDeployments: z
                .array(z.lazy(() => CreateProjectLatestDeployments$.inboundSchema))
                .optional(),
            link: z
                .union([
                    z.lazy(() => CreateProjectLink1$.inboundSchema),
                    z.lazy(() => CreateProjectLink2$.inboundSchema),
                    z.lazy(() => CreateProjectLink3$.inboundSchema),
                ])
                .optional(),
            name: z.string(),
            nodeVersion: CreateProjectNodeVersion$.inboundSchema,
            optionsAllowlist: z
                .nullable(z.lazy(() => CreateProjectOptionsAllowlist$.inboundSchema))
                .optional(),
            outputDirectory: z.nullable(z.string()).optional(),
            passiveConnectConfigurationId: z.nullable(z.string()).optional(),
            passwordProtection: z
                .nullable(z.lazy(() => CreateProjectPasswordProtection$.inboundSchema))
                .optional(),
            productionDeploymentsFastLane: z.boolean().optional(),
            publicSource: z.nullable(z.boolean()).optional(),
            rootDirectory: z.nullable(z.string()).optional(),
            serverlessFunctionRegion: z.nullable(z.string()).optional(),
            serverlessFunctionZeroConfigFailover: z.boolean().optional(),
            skewProtectionBoundaryAt: z.number().optional(),
            skewProtectionMaxAge: z.number().optional(),
            skipGitConnectDuringLink: z.boolean().optional(),
            sourceFilesOutsideRootDirectory: z.boolean().optional(),
            ssoProtection: z
                .nullable(z.lazy(() => CreateProjectSsoProtection$.inboundSchema))
                .optional(),
            targets: z.record(z.union([z.string(), z.array(z.string())])).optional(),
            transferCompletedAt: z.number().optional(),
            transferStartedAt: z.number().optional(),
            transferToAccountId: z.string().optional(),
            transferredFromAccountId: z.string().optional(),
            updatedAt: z.number().optional(),
            live: z.boolean().optional(),
            enablePreviewFeedback: z.nullable(z.boolean()).optional(),
            permissions: z.lazy(() => CreateProjectPermissions$.inboundSchema).optional(),
            lastRollbackTarget: z
                .nullable(z.lazy(() => CreateProjectLastRollbackTarget$.inboundSchema))
                .optional(),
            lastAliasRequest: z
                .nullable(z.lazy(() => CreateProjectLastAliasRequest$.inboundSchema))
                .optional(),
            hasFloatingAliases: z.boolean().optional(),
            protectionBypass: z
                .record(z.lazy(() => CreateProjectProtectionBypass$.inboundSchema))
                .optional(),
            hasActiveBranches: z.boolean().optional(),
            trustedIps: z
                .nullable(
                    z.union([
                        z.lazy(() => CreateProjectTrustedIps2$.inboundSchema),
                        z.lazy(() => CreateProjectTrustedIps1$.inboundSchema),
                    ])
                )
                .optional(),
            gitComments: z.lazy(() => CreateProjectGitComments$.inboundSchema).optional(),
            paused: z.boolean().optional(),
            concurrencyBucketName: z.string().optional(),
            webAnalytics: z.lazy(() => CreateProjectWebAnalytics$.inboundSchema).optional(),
            security: z.lazy(() => CreateProjectSecurity$.inboundSchema).optional(),
            oidcTokenConfig: z.lazy(() => CreateProjectOidcTokenConfig$.inboundSchema).optional(),
        });

    export type Outbound = {
        accountId: string;
        analytics?: CreateProjectAnalytics$.Outbound | undefined;
        speedInsights?: CreateProjectSpeedInsights$.Outbound | undefined;
        autoExposeSystemEnvs?: boolean | undefined;
        autoAssignCustomDomains?: boolean | undefined;
        autoAssignCustomDomainsUpdatedBy?: string | undefined;
        buildCommand?: string | null | undefined;
        commandForIgnoringBuildStep?: string | null | undefined;
        connectConfigurationId?: string | null | undefined;
        connectBuildsEnabled?: boolean | undefined;
        createdAt?: number | undefined;
        customerSupportCodeVisibility?: boolean | undefined;
        crons?: CreateProjectCrons$.Outbound | undefined;
        dataCache?: CreateProjectDataCache$.Outbound | undefined;
        devCommand?: string | null | undefined;
        directoryListing: boolean;
        installCommand?: string | null | undefined;
        env?: Array<CreateProjectEnv$.Outbound> | undefined;
        framework?: string | null | undefined;
        gitForkProtection?: boolean | undefined;
        gitLFS?: boolean | undefined;
        id: string;
        latestDeployments?: Array<CreateProjectLatestDeployments$.Outbound> | undefined;
        link?:
            | CreateProjectLink1$.Outbound
            | CreateProjectLink2$.Outbound
            | CreateProjectLink3$.Outbound
            | undefined;
        name: string;
        nodeVersion: string;
        optionsAllowlist?: CreateProjectOptionsAllowlist$.Outbound | null | undefined;
        outputDirectory?: string | null | undefined;
        passiveConnectConfigurationId?: string | null | undefined;
        passwordProtection?: CreateProjectPasswordProtection$.Outbound | null | undefined;
        productionDeploymentsFastLane?: boolean | undefined;
        publicSource?: boolean | null | undefined;
        rootDirectory?: string | null | undefined;
        serverlessFunctionRegion?: string | null | undefined;
        serverlessFunctionZeroConfigFailover?: boolean | undefined;
        skewProtectionBoundaryAt?: number | undefined;
        skewProtectionMaxAge?: number | undefined;
        skipGitConnectDuringLink?: boolean | undefined;
        sourceFilesOutsideRootDirectory?: boolean | undefined;
        ssoProtection?: CreateProjectSsoProtection$.Outbound | null | undefined;
        targets?: { [k: string]: string | Array<string> } | undefined;
        transferCompletedAt?: number | undefined;
        transferStartedAt?: number | undefined;
        transferToAccountId?: string | undefined;
        transferredFromAccountId?: string | undefined;
        updatedAt?: number | undefined;
        live?: boolean | undefined;
        enablePreviewFeedback?: boolean | null | undefined;
        permissions?: CreateProjectPermissions$.Outbound | undefined;
        lastRollbackTarget?: CreateProjectLastRollbackTarget$.Outbound | null | undefined;
        lastAliasRequest?: CreateProjectLastAliasRequest$.Outbound | null | undefined;
        hasFloatingAliases?: boolean | undefined;
        protectionBypass?: { [k: string]: CreateProjectProtectionBypass$.Outbound } | undefined;
        hasActiveBranches?: boolean | undefined;
        trustedIps?:
            | CreateProjectTrustedIps2$.Outbound
            | CreateProjectTrustedIps1$.Outbound
            | null
            | undefined;
        gitComments?: CreateProjectGitComments$.Outbound | undefined;
        paused?: boolean | undefined;
        concurrencyBucketName?: string | undefined;
        webAnalytics?: CreateProjectWebAnalytics$.Outbound | undefined;
        security?: CreateProjectSecurity$.Outbound | undefined;
        oidcTokenConfig?: CreateProjectOidcTokenConfig$.Outbound | undefined;
    };

    export const outboundSchema: z.ZodType<Outbound, z.ZodTypeDef, CreateProjectResponseBody> =
        z.object({
            accountId: z.string(),
            analytics: z.lazy(() => CreateProjectAnalytics$.outboundSchema).optional(),
            speedInsights: z.lazy(() => CreateProjectSpeedInsights$.outboundSchema).optional(),
            autoExposeSystemEnvs: z.boolean().optional(),
            autoAssignCustomDomains: z.boolean().optional(),
            autoAssignCustomDomainsUpdatedBy: z.string().optional(),
            buildCommand: z.nullable(z.string()).optional(),
            commandForIgnoringBuildStep: z.nullable(z.string()).optional(),
            connectConfigurationId: z.nullable(z.string()).optional(),
            connectBuildsEnabled: z.boolean().optional(),
            createdAt: z.number().optional(),
            customerSupportCodeVisibility: z.boolean().optional(),
            crons: z.lazy(() => CreateProjectCrons$.outboundSchema).optional(),
            dataCache: z.lazy(() => CreateProjectDataCache$.outboundSchema).optional(),
            devCommand: z.nullable(z.string()).optional(),
            directoryListing: z.boolean(),
            installCommand: z.nullable(z.string()).optional(),
            env: z.array(z.lazy(() => CreateProjectEnv$.outboundSchema)).optional(),
            framework: z.nullable(CreateProjectProjectsFramework$.outboundSchema).optional(),
            gitForkProtection: z.boolean().optional(),
            gitLFS: z.boolean().optional(),
            id: z.string(),
            latestDeployments: z
                .array(z.lazy(() => CreateProjectLatestDeployments$.outboundSchema))
                .optional(),
            link: z
                .union([
                    z.lazy(() => CreateProjectLink1$.outboundSchema),
                    z.lazy(() => CreateProjectLink2$.outboundSchema),
                    z.lazy(() => CreateProjectLink3$.outboundSchema),
                ])
                .optional(),
            name: z.string(),
            nodeVersion: CreateProjectNodeVersion$.outboundSchema,
            optionsAllowlist: z
                .nullable(z.lazy(() => CreateProjectOptionsAllowlist$.outboundSchema))
                .optional(),
            outputDirectory: z.nullable(z.string()).optional(),
            passiveConnectConfigurationId: z.nullable(z.string()).optional(),
            passwordProtection: z
                .nullable(z.lazy(() => CreateProjectPasswordProtection$.outboundSchema))
                .optional(),
            productionDeploymentsFastLane: z.boolean().optional(),
            publicSource: z.nullable(z.boolean()).optional(),
            rootDirectory: z.nullable(z.string()).optional(),
            serverlessFunctionRegion: z.nullable(z.string()).optional(),
            serverlessFunctionZeroConfigFailover: z.boolean().optional(),
            skewProtectionBoundaryAt: z.number().optional(),
            skewProtectionMaxAge: z.number().optional(),
            skipGitConnectDuringLink: z.boolean().optional(),
            sourceFilesOutsideRootDirectory: z.boolean().optional(),
            ssoProtection: z
                .nullable(z.lazy(() => CreateProjectSsoProtection$.outboundSchema))
                .optional(),
            targets: z.record(z.union([z.string(), z.array(z.string())])).optional(),
            transferCompletedAt: z.number().optional(),
            transferStartedAt: z.number().optional(),
            transferToAccountId: z.string().optional(),
            transferredFromAccountId: z.string().optional(),
            updatedAt: z.number().optional(),
            live: z.boolean().optional(),
            enablePreviewFeedback: z.nullable(z.boolean()).optional(),
            permissions: z.lazy(() => CreateProjectPermissions$.outboundSchema).optional(),
            lastRollbackTarget: z
                .nullable(z.lazy(() => CreateProjectLastRollbackTarget$.outboundSchema))
                .optional(),
            lastAliasRequest: z
                .nullable(z.lazy(() => CreateProjectLastAliasRequest$.outboundSchema))
                .optional(),
            hasFloatingAliases: z.boolean().optional(),
            protectionBypass: z
                .record(z.lazy(() => CreateProjectProtectionBypass$.outboundSchema))
                .optional(),
            hasActiveBranches: z.boolean().optional(),
            trustedIps: z
                .nullable(
                    z.union([
                        z.lazy(() => CreateProjectTrustedIps2$.outboundSchema),
                        z.lazy(() => CreateProjectTrustedIps1$.outboundSchema),
                    ])
                )
                .optional(),
            gitComments: z.lazy(() => CreateProjectGitComments$.outboundSchema).optional(),
            paused: z.boolean().optional(),
            concurrencyBucketName: z.string().optional(),
            webAnalytics: z.lazy(() => CreateProjectWebAnalytics$.outboundSchema).optional(),
            security: z.lazy(() => CreateProjectSecurity$.outboundSchema).optional(),
            oidcTokenConfig: z.lazy(() => CreateProjectOidcTokenConfig$.outboundSchema).optional(),
        });
}
