/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import {
    UserEvent,
    UserEvent$inboundSchema,
    UserEvent$Outbound,
    UserEvent$outboundSchema,
} from "./userevent.js";
import * as z from "zod";

export type ListUserEventRequest = {
    /**
     * Maximum number of items which may be returned.
     */
    limit?: number | undefined;
    /**
     * Timestamp to only include items created since then.
     */
    since?: string | undefined;
    /**
     * Timestamp to only include items created until then.
     */
    until?: string | undefined;
    /**
     * Comma-delimited list of event \"types\" to filter the results by.
     */
    types?: string | undefined;
    /**
     * When retrieving events for a Team, the `userId` parameter may be specified to filter events generated by a specific member of the Team.
     */
    userId?: string | undefined;
    /**
     * The Team identifier to perform the request on behalf of.
     */
    teamId?: string | undefined;
    /**
     * The Team slug to perform the request on behalf of.
     */
    slug?: string | undefined;
};

/**
 * Successful response.
 */
export type ListUserEventResponseBody = {
    /**
     * Array of events generated by the User.
     */
    events: Array<UserEvent>;
};

/** @internal */
export const ListUserEventRequest$inboundSchema: z.ZodType<
    ListUserEventRequest,
    z.ZodTypeDef,
    unknown
> = z.object({
    limit: z.number().optional(),
    since: z.string().optional(),
    until: z.string().optional(),
    types: z.string().optional(),
    userId: z.string().optional(),
    teamId: z.string().optional(),
    slug: z.string().optional(),
});

/** @internal */
export type ListUserEventRequest$Outbound = {
    limit?: number | undefined;
    since?: string | undefined;
    until?: string | undefined;
    types?: string | undefined;
    userId?: string | undefined;
    teamId?: string | undefined;
    slug?: string | undefined;
};

/** @internal */
export const ListUserEventRequest$outboundSchema: z.ZodType<
    ListUserEventRequest$Outbound,
    z.ZodTypeDef,
    ListUserEventRequest
> = z.object({
    limit: z.number().optional(),
    since: z.string().optional(),
    until: z.string().optional(),
    types: z.string().optional(),
    userId: z.string().optional(),
    teamId: z.string().optional(),
    slug: z.string().optional(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace ListUserEventRequest$ {
    /** @deprecated use `ListUserEventRequest$inboundSchema` instead. */
    export const inboundSchema = ListUserEventRequest$inboundSchema;
    /** @deprecated use `ListUserEventRequest$outboundSchema` instead. */
    export const outboundSchema = ListUserEventRequest$outboundSchema;
    /** @deprecated use `ListUserEventRequest$Outbound` instead. */
    export type Outbound = ListUserEventRequest$Outbound;
}

/** @internal */
export const ListUserEventResponseBody$inboundSchema: z.ZodType<
    ListUserEventResponseBody,
    z.ZodTypeDef,
    unknown
> = z.object({
    events: z.array(UserEvent$inboundSchema),
});

/** @internal */
export type ListUserEventResponseBody$Outbound = {
    events: Array<UserEvent$Outbound>;
};

/** @internal */
export const ListUserEventResponseBody$outboundSchema: z.ZodType<
    ListUserEventResponseBody$Outbound,
    z.ZodTypeDef,
    ListUserEventResponseBody
> = z.object({
    events: z.array(UserEvent$outboundSchema),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace ListUserEventResponseBody$ {
    /** @deprecated use `ListUserEventResponseBody$inboundSchema` instead. */
    export const inboundSchema = ListUserEventResponseBody$inboundSchema;
    /** @deprecated use `ListUserEventResponseBody$outboundSchema` instead. */
    export const outboundSchema = ListUserEventResponseBody$outboundSchema;
    /** @deprecated use `ListUserEventResponseBody$Outbound` instead. */
    export type Outbound = ListUserEventResponseBody$Outbound;
}
