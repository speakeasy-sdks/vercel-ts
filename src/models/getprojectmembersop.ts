/*
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

import * as z from "zod";

export type GetProjectMembersRequest = {
    /**
     * The ID or name of the Project.
     */
    idOrName: string;
    /**
     * Limit how many project members should be returned
     */
    limit?: number | undefined;
    /**
     * Timestamp in milliseconds to only include members added since then.
     */
    since?: number | undefined;
    /**
     * Timestamp in milliseconds to only include members added until then.
     */
    until?: number | undefined;
    /**
     * Search project members by their name, username, and email.
     */
    search?: string | undefined;
    /**
     * The Team identifier to perform the request on behalf of.
     */
    teamId?: string | undefined;
    /**
     * The Team slug to perform the request on behalf of.
     */
    slug?: string | undefined;
};

/**
 * Role of this user in the project.
 */
export enum GetProjectMembersResponseBodyRole {
    Admin = "ADMIN",
    ProjectDeveloper = "PROJECT_DEVELOPER",
    ProjectViewer = "PROJECT_VIEWER",
}

/**
 * Role of this user in the project.
 */
export enum ComputedProjectRole {
    Admin = "ADMIN",
    ProjectDeveloper = "PROJECT_DEVELOPER",
    ProjectViewer = "PROJECT_VIEWER",
}

/**
 * The role of this user in the team.
 */
export enum TeamRole {
    Owner = "OWNER",
    Member = "MEMBER",
    Developer = "DEVELOPER",
    Billing = "BILLING",
    Viewer = "VIEWER",
    Contributor = "CONTRIBUTOR",
}

export type ResponseBodyMembers = {
    /**
     * ID of the file for the Avatar of this member.
     */
    avatar?: string | undefined;
    /**
     * The email of this member.
     */
    email: string;
    /**
     * Role of this user in the project.
     */
    role: GetProjectMembersResponseBodyRole;
    /**
     * Role of this user in the project.
     */
    computedProjectRole: ComputedProjectRole;
    /**
     * The ID of this user.
     */
    uid: string;
    /**
     * The unique username of this user.
     */
    username: string;
    /**
     * The name of this user.
     */
    name?: string | undefined;
    /**
     * Timestamp in milliseconds when this member was added.
     */
    createdAt: number;
    /**
     * The role of this user in the team.
     */
    teamRole: TeamRole;
};

export type ResponseBodyPagination = {
    hasNext: boolean;
    /**
     * Amount of items in the current page.
     */
    count: number;
    /**
     * Timestamp that must be used to request the next page.
     */
    next: number | null;
    /**
     * Timestamp that must be used to request the previous page.
     */
    prev: number | null;
};

/**
 * Paginated list of members for the project.
 */
export type GetProjectMembersResponseBody2 = {
    members: Array<ResponseBodyMembers>;
    pagination: ResponseBodyPagination;
};

export type GetProjectMembersResponseBody1 = {};

/**
 * Paginated list of members for the project.
 */
export type GetProjectMembersResponseBody =
    | GetProjectMembersResponseBody1
    | GetProjectMembersResponseBody2;

/** @internal */
export namespace GetProjectMembersRequest$ {
    export const inboundSchema: z.ZodType<GetProjectMembersRequest, z.ZodTypeDef, unknown> =
        z.object({
            idOrName: z.string(),
            limit: z.number().int().optional(),
            since: z.number().int().optional(),
            until: z.number().int().optional(),
            search: z.string().optional(),
            teamId: z.string().optional(),
            slug: z.string().optional(),
        });

    export type Outbound = {
        idOrName: string;
        limit?: number | undefined;
        since?: number | undefined;
        until?: number | undefined;
        search?: string | undefined;
        teamId?: string | undefined;
        slug?: string | undefined;
    };

    export const outboundSchema: z.ZodType<Outbound, z.ZodTypeDef, GetProjectMembersRequest> =
        z.object({
            idOrName: z.string(),
            limit: z.number().int().optional(),
            since: z.number().int().optional(),
            until: z.number().int().optional(),
            search: z.string().optional(),
            teamId: z.string().optional(),
            slug: z.string().optional(),
        });
}

/** @internal */
export namespace GetProjectMembersResponseBodyRole$ {
    export const inboundSchema: z.ZodNativeEnum<typeof GetProjectMembersResponseBodyRole> =
        z.nativeEnum(GetProjectMembersResponseBodyRole);
    export const outboundSchema: z.ZodNativeEnum<typeof GetProjectMembersResponseBodyRole> =
        inboundSchema;
}

/** @internal */
export namespace ComputedProjectRole$ {
    export const inboundSchema: z.ZodNativeEnum<typeof ComputedProjectRole> =
        z.nativeEnum(ComputedProjectRole);
    export const outboundSchema: z.ZodNativeEnum<typeof ComputedProjectRole> = inboundSchema;
}

/** @internal */
export namespace TeamRole$ {
    export const inboundSchema: z.ZodNativeEnum<typeof TeamRole> = z.nativeEnum(TeamRole);
    export const outboundSchema: z.ZodNativeEnum<typeof TeamRole> = inboundSchema;
}

/** @internal */
export namespace ResponseBodyMembers$ {
    export const inboundSchema: z.ZodType<ResponseBodyMembers, z.ZodTypeDef, unknown> = z.object({
        avatar: z.string().optional(),
        email: z.string(),
        role: GetProjectMembersResponseBodyRole$.inboundSchema,
        computedProjectRole: ComputedProjectRole$.inboundSchema,
        uid: z.string(),
        username: z.string(),
        name: z.string().optional(),
        createdAt: z.number(),
        teamRole: TeamRole$.inboundSchema,
    });

    export type Outbound = {
        avatar?: string | undefined;
        email: string;
        role: string;
        computedProjectRole: string;
        uid: string;
        username: string;
        name?: string | undefined;
        createdAt: number;
        teamRole: string;
    };

    export const outboundSchema: z.ZodType<Outbound, z.ZodTypeDef, ResponseBodyMembers> = z.object({
        avatar: z.string().optional(),
        email: z.string(),
        role: GetProjectMembersResponseBodyRole$.outboundSchema,
        computedProjectRole: ComputedProjectRole$.outboundSchema,
        uid: z.string(),
        username: z.string(),
        name: z.string().optional(),
        createdAt: z.number(),
        teamRole: TeamRole$.outboundSchema,
    });
}

/** @internal */
export namespace ResponseBodyPagination$ {
    export const inboundSchema: z.ZodType<ResponseBodyPagination, z.ZodTypeDef, unknown> = z.object(
        {
            hasNext: z.boolean(),
            count: z.number(),
            next: z.nullable(z.number()),
            prev: z.nullable(z.number()),
        }
    );

    export type Outbound = {
        hasNext: boolean;
        count: number;
        next: number | null;
        prev: number | null;
    };

    export const outboundSchema: z.ZodType<Outbound, z.ZodTypeDef, ResponseBodyPagination> =
        z.object({
            hasNext: z.boolean(),
            count: z.number(),
            next: z.nullable(z.number()),
            prev: z.nullable(z.number()),
        });
}

/** @internal */
export namespace GetProjectMembersResponseBody2$ {
    export const inboundSchema: z.ZodType<GetProjectMembersResponseBody2, z.ZodTypeDef, unknown> =
        z.object({
            members: z.array(z.lazy(() => ResponseBodyMembers$.inboundSchema)),
            pagination: z.lazy(() => ResponseBodyPagination$.inboundSchema),
        });

    export type Outbound = {
        members: Array<ResponseBodyMembers$.Outbound>;
        pagination: ResponseBodyPagination$.Outbound;
    };

    export const outboundSchema: z.ZodType<Outbound, z.ZodTypeDef, GetProjectMembersResponseBody2> =
        z.object({
            members: z.array(z.lazy(() => ResponseBodyMembers$.outboundSchema)),
            pagination: z.lazy(() => ResponseBodyPagination$.outboundSchema),
        });
}

/** @internal */
export namespace GetProjectMembersResponseBody1$ {
    export const inboundSchema: z.ZodType<GetProjectMembersResponseBody1, z.ZodTypeDef, unknown> =
        z.object({});

    export type Outbound = {};

    export const outboundSchema: z.ZodType<Outbound, z.ZodTypeDef, GetProjectMembersResponseBody1> =
        z.object({});
}

/** @internal */
export namespace GetProjectMembersResponseBody$ {
    export const inboundSchema: z.ZodType<GetProjectMembersResponseBody, z.ZodTypeDef, unknown> =
        z.union([
            z.lazy(() => GetProjectMembersResponseBody1$.inboundSchema),
            z.lazy(() => GetProjectMembersResponseBody2$.inboundSchema),
        ]);

    export type Outbound =
        | GetProjectMembersResponseBody1$.Outbound
        | GetProjectMembersResponseBody2$.Outbound;
    export const outboundSchema: z.ZodType<Outbound, z.ZodTypeDef, GetProjectMembersResponseBody> =
        z.union([
            z.lazy(() => GetProjectMembersResponseBody1$.outboundSchema),
            z.lazy(() => GetProjectMembersResponseBody2$.outboundSchema),
        ]);
}
