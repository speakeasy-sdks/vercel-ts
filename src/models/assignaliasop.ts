/*
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

import { remap as remap$ } from "../lib/primitives.js";
import * as z from "zod";

export type AssignAliasRequestBody = {
    /**
     * The alias we want to assign to the deployment defined in the URL
     */
    alias?: string | undefined;
    /**
     * The redirect property will take precedence over the deployment id from the URL and consists of a hostname (like test.com) to which the alias should redirect using status code 307
     */
    redirect?: string | null | undefined;
};

export type AssignAliasRequest = {
    /**
     * The ID of the deployment the aliases should be listed for
     */
    id: string;
    /**
     * The Team identifier to perform the request on behalf of.
     */
    teamId?: string | undefined;
    /**
     * The Team slug to perform the request on behalf of.
     */
    slug?: string | undefined;
    requestBody?: AssignAliasRequestBody | undefined;
};

/**
 * The alias was successfully assigned to the deployment
 */
export type AssignAliasResponseBody = {
    /**
     * The unique identifier of the alias
     */
    uid: string;
    /**
     * The assigned alias name
     */
    alias: string;
    /**
     * The date when the alias was created
     */
    created: Date;
    /**
     * The unique identifier of the previously aliased deployment, only received when the alias was used before
     */
    oldDeploymentId?: string | null | undefined;
};

/** @internal */
export namespace AssignAliasRequestBody$ {
    export const inboundSchema: z.ZodType<AssignAliasRequestBody, z.ZodTypeDef, unknown> = z.object(
        {
            alias: z.string().optional(),
            redirect: z.nullable(z.string()).optional(),
        }
    );

    export type Outbound = {
        alias?: string | undefined;
        redirect?: string | null | undefined;
    };

    export const outboundSchema: z.ZodType<Outbound, z.ZodTypeDef, AssignAliasRequestBody> =
        z.object({
            alias: z.string().optional(),
            redirect: z.nullable(z.string()).optional(),
        });
}

/** @internal */
export namespace AssignAliasRequest$ {
    export const inboundSchema: z.ZodType<AssignAliasRequest, z.ZodTypeDef, unknown> = z
        .object({
            id: z.string(),
            teamId: z.string().optional(),
            slug: z.string().optional(),
            RequestBody: z.lazy(() => AssignAliasRequestBody$.inboundSchema).optional(),
        })
        .transform((v) => {
            return remap$(v, {
                RequestBody: "requestBody",
            });
        });

    export type Outbound = {
        id: string;
        teamId?: string | undefined;
        slug?: string | undefined;
        RequestBody?: AssignAliasRequestBody$.Outbound | undefined;
    };

    export const outboundSchema: z.ZodType<Outbound, z.ZodTypeDef, AssignAliasRequest> = z
        .object({
            id: z.string(),
            teamId: z.string().optional(),
            slug: z.string().optional(),
            requestBody: z.lazy(() => AssignAliasRequestBody$.outboundSchema).optional(),
        })
        .transform((v) => {
            return remap$(v, {
                requestBody: "RequestBody",
            });
        });
}

/** @internal */
export namespace AssignAliasResponseBody$ {
    export const inboundSchema: z.ZodType<AssignAliasResponseBody, z.ZodTypeDef, unknown> =
        z.object({
            uid: z.string(),
            alias: z.string(),
            created: z
                .string()
                .datetime({ offset: true })
                .transform((v) => new Date(v)),
            oldDeploymentId: z.nullable(z.string()).optional(),
        });

    export type Outbound = {
        uid: string;
        alias: string;
        created: string;
        oldDeploymentId?: string | null | undefined;
    };

    export const outboundSchema: z.ZodType<Outbound, z.ZodTypeDef, AssignAliasResponseBody> =
        z.object({
            uid: z.string(),
            alias: z.string(),
            created: z.date().transform((v) => v.toISOString()),
            oldDeploymentId: z.nullable(z.string()).optional(),
        });
}
