/*
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

import { HTTPMetadata, HTTPMetadata$ } from "./httpmetadata";
import { Pagination, Pagination$ } from "./pagination";
import * as z from "zod";

/**
 * Filter deployments based on the environment.
 */
export enum QueryParamTarget {
    Production = "production",
    Preview = "preview",
}

export type GetDeploymentsRequest = {
    /**
     * Name of the deployment.
     */
    app?: string | undefined;
    /**
     * Gets the deployment created after this Date timestamp. (default: current time)
     */
    from?: number | undefined;
    /**
     * Maximum number of deployments to list from a request.
     */
    limit?: number | undefined;
    /**
     * Filter deployments from the given `projectId`.
     */
    projectId?: string | undefined;
    /**
     * Filter deployments based on the environment.
     */
    target?: QueryParamTarget | undefined;
    /**
     * Gets the deployment created before this Date timestamp. (default: current time)
     */
    to?: number | undefined;
    /**
     * Filter out deployments based on users who have created the deployment.
     */
    users?: string | undefined;
    /**
     * Get Deployments created after this JavaScript timestamp.
     */
    since?: number | undefined;
    /**
     * Get Deployments created before this JavaScript timestamp.
     */
    until?: number | undefined;
    /**
     * Filter deployments based on their state (`BUILDING`, `ERROR`, `INITIALIZING`, `QUEUED`, `READY`, `CANCELED`)
     */
    state?: string | undefined;
    /**
     * Filter deployments based on their rollback candidacy
     */
    rollbackCandidate?: boolean | undefined;
    /**
     * The Team identifier to perform the request on behalf of.
     */
    teamId?: string | undefined;
    /**
     * The Team slug to perform the request on behalf of.
     */
    slug?: string | undefined;
};

/**
 * The source of the deployment.
 */
export enum GetDeploymentsSource {
    ApiTriggerGitDeploy = "api-trigger-git-deploy",
    Cli = "cli",
    CloneRepo = "clone/repo",
    Git = "git",
    Import = "import",
    ImportRepo = "import/repo",
}

/**
 * In which state is the deployment.
 */
export enum GetDeploymentsState {
    Building = "BUILDING",
    Error = "ERROR",
    Initializing = "INITIALIZING",
    Queued = "QUEUED",
    Ready = "READY",
    Canceled = "CANCELED",
}

/**
 * In which state is the deployment.
 */
export enum GetDeploymentsReadyState {
    Building = "BUILDING",
    Error = "ERROR",
    Initializing = "INITIALIZING",
    Queued = "QUEUED",
    Ready = "READY",
    Canceled = "CANCELED",
}

/**
 * The type of the deployment.
 */
export enum GetDeploymentsType {
    Lambdas = "LAMBDAS",
}

/**
 * Metadata information of the user who created the deployment.
 */
export type GetDeploymentsCreator = {
    /**
     * The unique identifier of the user.
     */
    uid: string;
    /**
     * The email address of the user.
     */
    email?: string | undefined;
    /**
     * The username of the user.
     */
    username?: string | undefined;
    /**
     * The GitHub login of the user.
     */
    githubLogin?: string | undefined;
    /**
     * The GitLab login of the user.
     */
    gitlabLogin?: string | undefined;
};

/**
 * On which environment has the deployment been deployed to.
 */
export enum GetDeploymentsTarget {
    Production = "production",
    Staging = "staging",
}

/**
 * An error object in case aliasing of the deployment failed.
 */
export type GetDeploymentsAliasError = {
    code: string;
    message: string;
};

export type GetDeploymentsAliasAssigned = number | boolean;

/**
 * Since June 2023 Substate of deployment when readyState is 'READY' Tracks whether or not deployment has seen production traffic: - STAGED: never seen production traffic - PROMOTED: has seen production traffic
 */
export enum GetDeploymentsReadySubstate {
    Staged = "STAGED",
    Promoted = "PROMOTED",
}

/**
 * State of all registered checks
 */
export enum GetDeploymentsChecksState {
    Registered = "registered",
    Running = "running",
    Completed = "completed",
}

/**
 * Conclusion for checks
 */
export enum GetDeploymentsChecksConclusion {
    Succeeded = "succeeded",
    Failed = "failed",
    Skipped = "skipped",
    Canceled = "canceled",
}

export enum GetDeploymentsFramework {
    Blitzjs = "blitzjs",
    Nextjs = "nextjs",
    Gatsby = "gatsby",
    Remix = "remix",
    Astro = "astro",
    Hexo = "hexo",
    Eleventy = "eleventy",
    Docusaurus2 = "docusaurus-2",
    Docusaurus = "docusaurus",
    Preact = "preact",
    Solidstart1 = "solidstart-1",
    Solidstart = "solidstart",
    Dojo = "dojo",
    Ember = "ember",
    Vue = "vue",
    Scully = "scully",
    IonicAngular = "ionic-angular",
    Angular = "angular",
    Polymer = "polymer",
    Svelte = "svelte",
    Sveltekit = "sveltekit",
    Sveltekit1 = "sveltekit-1",
    IonicReact = "ionic-react",
    CreateReactApp = "create-react-app",
    Gridsome = "gridsome",
    Umijs = "umijs",
    Sapper = "sapper",
    Saber = "saber",
    Stencil = "stencil",
    Nuxtjs = "nuxtjs",
    Redwoodjs = "redwoodjs",
    Hugo = "hugo",
    Jekyll = "jekyll",
    Brunch = "brunch",
    Middleman = "middleman",
    Zola = "zola",
    Hydrogen = "hydrogen",
    Vite = "vite",
    Vitepress = "vitepress",
    Vuepress = "vuepress",
    Parcel = "parcel",
    Sanity = "sanity",
    Storybook = "storybook",
}

export enum GetDeploymentsNodeVersion {
    TwentyX = "20.x",
    EighteenX = "18.x",
    SixteenX = "16.x",
    FourteenX = "14.x",
    TwelveX = "12.x",
    TenX = "10.x",
    Eight10X = "8.10.x",
}

export type GetDeploymentsSpeedInsights = {
    id: string;
    enabledAt?: number | undefined;
    disabledAt?: number | undefined;
    canceledAt?: number | undefined;
    hasData?: boolean | undefined;
    paidAt?: number | undefined;
};

export type GetDeploymentsWebAnalytics = {
    id: string;
    disabledAt?: number | undefined;
    canceledAt?: number | undefined;
    enabledAt?: number | undefined;
    hasData?: boolean | undefined;
};

/**
 * Since June '23
 */
export type GetDeploymentsGitComments = {
    /**
     * Whether the Vercel bot should comment on PRs
     */
    onPullRequest: boolean;
    /**
     * Whether the Vercel bot should comment on commits
     */
    onCommit: boolean;
};

/**
 * The project settings which was used for this deployment
 */
export type GetDeploymentsProjectSettings = {
    framework?: GetDeploymentsFramework | null | undefined;
    gitForkProtection?: boolean | undefined;
    customerSupportCodeVisibility?: boolean | undefined;
    gitLFS?: boolean | undefined;
    devCommand?: string | null | undefined;
    installCommand?: string | null | undefined;
    buildCommand?: string | null | undefined;
    nodeVersion?: GetDeploymentsNodeVersion | undefined;
    outputDirectory?: string | null | undefined;
    publicSource?: boolean | null | undefined;
    rootDirectory?: string | null | undefined;
    serverlessFunctionRegion?: string | null | undefined;
    sourceFilesOutsideRootDirectory?: boolean | undefined;
    commandForIgnoringBuildStep?: string | null | undefined;
    createdAt?: number | undefined;
    speedInsights?: GetDeploymentsSpeedInsights | undefined;
    webAnalytics?: GetDeploymentsWebAnalytics | undefined;
    skipGitConnectDuringLink?: boolean | undefined;
    /**
     * Since June '23
     */
    gitComments?: GetDeploymentsGitComments | undefined;
};

export type GetDeploymentsDeployments = {
    /**
     * The unique identifier of the deployment.
     */
    uid: string;
    /**
     * The name of the deployment.
     */
    name: string;
    /**
     * The URL of the deployment.
     */
    url: string;
    /**
     * Timestamp of when the deployment got created.
     */
    created: number;
    /**
     * The source of the deployment.
     */
    source?: GetDeploymentsSource | undefined;
    /**
     * In which state is the deployment.
     */
    state?: GetDeploymentsState | undefined;
    /**
     * In which state is the deployment.
     */
    readyState?: GetDeploymentsReadyState | undefined;
    /**
     * The type of the deployment.
     */
    type: GetDeploymentsType;
    /**
     * Metadata information of the user who created the deployment.
     */
    creator: GetDeploymentsCreator;
    /**
     * Metadata information from the Git provider.
     */
    meta?: Record<string, string> | undefined;
    /**
     * On which environment has the deployment been deployed to.
     */
    target?: GetDeploymentsTarget | null | undefined;
    /**
     * An error object in case aliasing of the deployment failed.
     */
    aliasError?: GetDeploymentsAliasError | null | undefined;
    aliasAssigned?: number | boolean | null | undefined;
    /**
     * Timestamp of when the deployment got created.
     */
    createdAt?: number | undefined;
    /**
     * Timestamp of when the deployment started building at.
     */
    buildingAt?: number | undefined;
    /**
     * Timestamp of when the deployment got ready.
     */
    ready?: number | undefined;
    /**
     * Since June 2023 Substate of deployment when readyState is 'READY' Tracks whether or not deployment has seen production traffic: - STAGED: never seen production traffic - PROMOTED: has seen production traffic
     */
    readySubstate?: GetDeploymentsReadySubstate | undefined;
    /**
     * State of all registered checks
     */
    checksState?: GetDeploymentsChecksState | undefined;
    /**
     * Conclusion for checks
     */
    checksConclusion?: GetDeploymentsChecksConclusion | undefined;
    /**
     * Vercel URL to inspect the deployment.
     */
    inspectorUrl: string | null;
    /**
     * Deployment can be used for instant rollback
     */
    isRollbackCandidate?: boolean | null | undefined;
    /**
     * The project settings which was used for this deployment
     */
    projectSettings?: GetDeploymentsProjectSettings | undefined;
    /**
     * The flag saying if Vercel Connect configuration is used for builds
     */
    connectBuildsEnabled?: boolean | undefined;
    /**
     * The ID of Vercel Connect configuration used for this deployment
     */
    connectConfigurationId?: string | undefined;
    /**
     * The ID of Vercel Connect configuration used for this deployment's passive functions
     */
    passiveConnectConfigurationId?: string | undefined;
};

export type GetDeploymentsResponseBody = {
    /**
     * This object contains information related to the pagination of the current request, including the necessary parameters to get the next or previous page of data.
     */
    pagination: Pagination;
    deployments: Array<GetDeploymentsDeployments>;
};

export type GetDeploymentsResponse = {
    httpMeta: HTTPMetadata;
    object?: GetDeploymentsResponseBody | undefined;
};

/** @internal */
export namespace QueryParamTarget$ {
    export const inboundSchema = z.nativeEnum(QueryParamTarget);
    export const outboundSchema = inboundSchema;
}

/** @internal */
export namespace GetDeploymentsRequest$ {
    export const inboundSchema: z.ZodType<GetDeploymentsRequest, z.ZodTypeDef, unknown> = z
        .object({
            app: z.string().optional(),
            from: z.number().optional(),
            limit: z.number().optional(),
            projectId: z.string().optional(),
            target: QueryParamTarget$.inboundSchema.optional(),
            to: z.number().optional(),
            users: z.string().optional(),
            since: z.number().optional(),
            until: z.number().optional(),
            state: z.string().optional(),
            rollbackCandidate: z.boolean().optional(),
            teamId: z.string().optional(),
            slug: z.string().optional(),
        })
        .transform((v) => {
            return {
                ...(v.app === undefined ? null : { app: v.app }),
                ...(v.from === undefined ? null : { from: v.from }),
                ...(v.limit === undefined ? null : { limit: v.limit }),
                ...(v.projectId === undefined ? null : { projectId: v.projectId }),
                ...(v.target === undefined ? null : { target: v.target }),
                ...(v.to === undefined ? null : { to: v.to }),
                ...(v.users === undefined ? null : { users: v.users }),
                ...(v.since === undefined ? null : { since: v.since }),
                ...(v.until === undefined ? null : { until: v.until }),
                ...(v.state === undefined ? null : { state: v.state }),
                ...(v.rollbackCandidate === undefined
                    ? null
                    : { rollbackCandidate: v.rollbackCandidate }),
                ...(v.teamId === undefined ? null : { teamId: v.teamId }),
                ...(v.slug === undefined ? null : { slug: v.slug }),
            };
        });

    export type Outbound = {
        app?: string | undefined;
        from?: number | undefined;
        limit?: number | undefined;
        projectId?: string | undefined;
        target?: string | undefined;
        to?: number | undefined;
        users?: string | undefined;
        since?: number | undefined;
        until?: number | undefined;
        state?: string | undefined;
        rollbackCandidate?: boolean | undefined;
        teamId?: string | undefined;
        slug?: string | undefined;
    };

    export const outboundSchema: z.ZodType<Outbound, z.ZodTypeDef, GetDeploymentsRequest> = z
        .object({
            app: z.string().optional(),
            from: z.number().optional(),
            limit: z.number().optional(),
            projectId: z.string().optional(),
            target: QueryParamTarget$.outboundSchema.optional(),
            to: z.number().optional(),
            users: z.string().optional(),
            since: z.number().optional(),
            until: z.number().optional(),
            state: z.string().optional(),
            rollbackCandidate: z.boolean().optional(),
            teamId: z.string().optional(),
            slug: z.string().optional(),
        })
        .transform((v) => {
            return {
                ...(v.app === undefined ? null : { app: v.app }),
                ...(v.from === undefined ? null : { from: v.from }),
                ...(v.limit === undefined ? null : { limit: v.limit }),
                ...(v.projectId === undefined ? null : { projectId: v.projectId }),
                ...(v.target === undefined ? null : { target: v.target }),
                ...(v.to === undefined ? null : { to: v.to }),
                ...(v.users === undefined ? null : { users: v.users }),
                ...(v.since === undefined ? null : { since: v.since }),
                ...(v.until === undefined ? null : { until: v.until }),
                ...(v.state === undefined ? null : { state: v.state }),
                ...(v.rollbackCandidate === undefined
                    ? null
                    : { rollbackCandidate: v.rollbackCandidate }),
                ...(v.teamId === undefined ? null : { teamId: v.teamId }),
                ...(v.slug === undefined ? null : { slug: v.slug }),
            };
        });
}

/** @internal */
export namespace GetDeploymentsSource$ {
    export const inboundSchema = z.nativeEnum(GetDeploymentsSource);
    export const outboundSchema = inboundSchema;
}

/** @internal */
export namespace GetDeploymentsState$ {
    export const inboundSchema = z.nativeEnum(GetDeploymentsState);
    export const outboundSchema = inboundSchema;
}

/** @internal */
export namespace GetDeploymentsReadyState$ {
    export const inboundSchema = z.nativeEnum(GetDeploymentsReadyState);
    export const outboundSchema = inboundSchema;
}

/** @internal */
export namespace GetDeploymentsType$ {
    export const inboundSchema = z.nativeEnum(GetDeploymentsType);
    export const outboundSchema = inboundSchema;
}

/** @internal */
export namespace GetDeploymentsCreator$ {
    export const inboundSchema: z.ZodType<GetDeploymentsCreator, z.ZodTypeDef, unknown> = z
        .object({
            uid: z.string(),
            email: z.string().optional(),
            username: z.string().optional(),
            githubLogin: z.string().optional(),
            gitlabLogin: z.string().optional(),
        })
        .transform((v) => {
            return {
                uid: v.uid,
                ...(v.email === undefined ? null : { email: v.email }),
                ...(v.username === undefined ? null : { username: v.username }),
                ...(v.githubLogin === undefined ? null : { githubLogin: v.githubLogin }),
                ...(v.gitlabLogin === undefined ? null : { gitlabLogin: v.gitlabLogin }),
            };
        });

    export type Outbound = {
        uid: string;
        email?: string | undefined;
        username?: string | undefined;
        githubLogin?: string | undefined;
        gitlabLogin?: string | undefined;
    };

    export const outboundSchema: z.ZodType<Outbound, z.ZodTypeDef, GetDeploymentsCreator> = z
        .object({
            uid: z.string(),
            email: z.string().optional(),
            username: z.string().optional(),
            githubLogin: z.string().optional(),
            gitlabLogin: z.string().optional(),
        })
        .transform((v) => {
            return {
                uid: v.uid,
                ...(v.email === undefined ? null : { email: v.email }),
                ...(v.username === undefined ? null : { username: v.username }),
                ...(v.githubLogin === undefined ? null : { githubLogin: v.githubLogin }),
                ...(v.gitlabLogin === undefined ? null : { gitlabLogin: v.gitlabLogin }),
            };
        });
}

/** @internal */
export namespace GetDeploymentsTarget$ {
    export const inboundSchema = z.nativeEnum(GetDeploymentsTarget);
    export const outboundSchema = inboundSchema;
}

/** @internal */
export namespace GetDeploymentsAliasError$ {
    export const inboundSchema: z.ZodType<GetDeploymentsAliasError, z.ZodTypeDef, unknown> = z
        .object({
            code: z.string(),
            message: z.string(),
        })
        .transform((v) => {
            return {
                code: v.code,
                message: v.message,
            };
        });

    export type Outbound = {
        code: string;
        message: string;
    };

    export const outboundSchema: z.ZodType<Outbound, z.ZodTypeDef, GetDeploymentsAliasError> = z
        .object({
            code: z.string(),
            message: z.string(),
        })
        .transform((v) => {
            return {
                code: v.code,
                message: v.message,
            };
        });
}

/** @internal */
export namespace GetDeploymentsAliasAssigned$ {
    export const inboundSchema: z.ZodType<GetDeploymentsAliasAssigned, z.ZodTypeDef, unknown> =
        z.union([z.number(), z.boolean()]);

    export type Outbound = number | boolean;
    export const outboundSchema: z.ZodType<Outbound, z.ZodTypeDef, GetDeploymentsAliasAssigned> =
        z.union([z.number(), z.boolean()]);
}

/** @internal */
export namespace GetDeploymentsReadySubstate$ {
    export const inboundSchema = z.nativeEnum(GetDeploymentsReadySubstate);
    export const outboundSchema = inboundSchema;
}

/** @internal */
export namespace GetDeploymentsChecksState$ {
    export const inboundSchema = z.nativeEnum(GetDeploymentsChecksState);
    export const outboundSchema = inboundSchema;
}

/** @internal */
export namespace GetDeploymentsChecksConclusion$ {
    export const inboundSchema = z.nativeEnum(GetDeploymentsChecksConclusion);
    export const outboundSchema = inboundSchema;
}

/** @internal */
export namespace GetDeploymentsFramework$ {
    export const inboundSchema = z.nativeEnum(GetDeploymentsFramework);
    export const outboundSchema = inboundSchema;
}

/** @internal */
export namespace GetDeploymentsNodeVersion$ {
    export const inboundSchema = z.nativeEnum(GetDeploymentsNodeVersion);
    export const outboundSchema = inboundSchema;
}

/** @internal */
export namespace GetDeploymentsSpeedInsights$ {
    export const inboundSchema: z.ZodType<GetDeploymentsSpeedInsights, z.ZodTypeDef, unknown> = z
        .object({
            id: z.string(),
            enabledAt: z.number().optional(),
            disabledAt: z.number().optional(),
            canceledAt: z.number().optional(),
            hasData: z.boolean().optional(),
            paidAt: z.number().optional(),
        })
        .transform((v) => {
            return {
                id: v.id,
                ...(v.enabledAt === undefined ? null : { enabledAt: v.enabledAt }),
                ...(v.disabledAt === undefined ? null : { disabledAt: v.disabledAt }),
                ...(v.canceledAt === undefined ? null : { canceledAt: v.canceledAt }),
                ...(v.hasData === undefined ? null : { hasData: v.hasData }),
                ...(v.paidAt === undefined ? null : { paidAt: v.paidAt }),
            };
        });

    export type Outbound = {
        id: string;
        enabledAt?: number | undefined;
        disabledAt?: number | undefined;
        canceledAt?: number | undefined;
        hasData?: boolean | undefined;
        paidAt?: number | undefined;
    };

    export const outboundSchema: z.ZodType<Outbound, z.ZodTypeDef, GetDeploymentsSpeedInsights> = z
        .object({
            id: z.string(),
            enabledAt: z.number().optional(),
            disabledAt: z.number().optional(),
            canceledAt: z.number().optional(),
            hasData: z.boolean().optional(),
            paidAt: z.number().optional(),
        })
        .transform((v) => {
            return {
                id: v.id,
                ...(v.enabledAt === undefined ? null : { enabledAt: v.enabledAt }),
                ...(v.disabledAt === undefined ? null : { disabledAt: v.disabledAt }),
                ...(v.canceledAt === undefined ? null : { canceledAt: v.canceledAt }),
                ...(v.hasData === undefined ? null : { hasData: v.hasData }),
                ...(v.paidAt === undefined ? null : { paidAt: v.paidAt }),
            };
        });
}

/** @internal */
export namespace GetDeploymentsWebAnalytics$ {
    export const inboundSchema: z.ZodType<GetDeploymentsWebAnalytics, z.ZodTypeDef, unknown> = z
        .object({
            id: z.string(),
            disabledAt: z.number().optional(),
            canceledAt: z.number().optional(),
            enabledAt: z.number().optional(),
            hasData: z.boolean().optional(),
        })
        .transform((v) => {
            return {
                id: v.id,
                ...(v.disabledAt === undefined ? null : { disabledAt: v.disabledAt }),
                ...(v.canceledAt === undefined ? null : { canceledAt: v.canceledAt }),
                ...(v.enabledAt === undefined ? null : { enabledAt: v.enabledAt }),
                ...(v.hasData === undefined ? null : { hasData: v.hasData }),
            };
        });

    export type Outbound = {
        id: string;
        disabledAt?: number | undefined;
        canceledAt?: number | undefined;
        enabledAt?: number | undefined;
        hasData?: boolean | undefined;
    };

    export const outboundSchema: z.ZodType<Outbound, z.ZodTypeDef, GetDeploymentsWebAnalytics> = z
        .object({
            id: z.string(),
            disabledAt: z.number().optional(),
            canceledAt: z.number().optional(),
            enabledAt: z.number().optional(),
            hasData: z.boolean().optional(),
        })
        .transform((v) => {
            return {
                id: v.id,
                ...(v.disabledAt === undefined ? null : { disabledAt: v.disabledAt }),
                ...(v.canceledAt === undefined ? null : { canceledAt: v.canceledAt }),
                ...(v.enabledAt === undefined ? null : { enabledAt: v.enabledAt }),
                ...(v.hasData === undefined ? null : { hasData: v.hasData }),
            };
        });
}

/** @internal */
export namespace GetDeploymentsGitComments$ {
    export const inboundSchema: z.ZodType<GetDeploymentsGitComments, z.ZodTypeDef, unknown> = z
        .object({
            onPullRequest: z.boolean(),
            onCommit: z.boolean(),
        })
        .transform((v) => {
            return {
                onPullRequest: v.onPullRequest,
                onCommit: v.onCommit,
            };
        });

    export type Outbound = {
        onPullRequest: boolean;
        onCommit: boolean;
    };

    export const outboundSchema: z.ZodType<Outbound, z.ZodTypeDef, GetDeploymentsGitComments> = z
        .object({
            onPullRequest: z.boolean(),
            onCommit: z.boolean(),
        })
        .transform((v) => {
            return {
                onPullRequest: v.onPullRequest,
                onCommit: v.onCommit,
            };
        });
}

/** @internal */
export namespace GetDeploymentsProjectSettings$ {
    export const inboundSchema: z.ZodType<GetDeploymentsProjectSettings, z.ZodTypeDef, unknown> = z
        .object({
            framework: z.nullable(GetDeploymentsFramework$.inboundSchema).optional(),
            gitForkProtection: z.boolean().optional(),
            customerSupportCodeVisibility: z.boolean().optional(),
            gitLFS: z.boolean().optional(),
            devCommand: z.nullable(z.string()).optional(),
            installCommand: z.nullable(z.string()).optional(),
            buildCommand: z.nullable(z.string()).optional(),
            nodeVersion: GetDeploymentsNodeVersion$.inboundSchema.optional(),
            outputDirectory: z.nullable(z.string()).optional(),
            publicSource: z.nullable(z.boolean()).optional(),
            rootDirectory: z.nullable(z.string()).optional(),
            serverlessFunctionRegion: z.nullable(z.string()).optional(),
            sourceFilesOutsideRootDirectory: z.boolean().optional(),
            commandForIgnoringBuildStep: z.nullable(z.string()).optional(),
            createdAt: z.number().optional(),
            speedInsights: z.lazy(() => GetDeploymentsSpeedInsights$.inboundSchema).optional(),
            webAnalytics: z.lazy(() => GetDeploymentsWebAnalytics$.inboundSchema).optional(),
            skipGitConnectDuringLink: z.boolean().optional(),
            gitComments: z.lazy(() => GetDeploymentsGitComments$.inboundSchema).optional(),
        })
        .transform((v) => {
            return {
                ...(v.framework === undefined ? null : { framework: v.framework }),
                ...(v.gitForkProtection === undefined
                    ? null
                    : { gitForkProtection: v.gitForkProtection }),
                ...(v.customerSupportCodeVisibility === undefined
                    ? null
                    : { customerSupportCodeVisibility: v.customerSupportCodeVisibility }),
                ...(v.gitLFS === undefined ? null : { gitLFS: v.gitLFS }),
                ...(v.devCommand === undefined ? null : { devCommand: v.devCommand }),
                ...(v.installCommand === undefined ? null : { installCommand: v.installCommand }),
                ...(v.buildCommand === undefined ? null : { buildCommand: v.buildCommand }),
                ...(v.nodeVersion === undefined ? null : { nodeVersion: v.nodeVersion }),
                ...(v.outputDirectory === undefined
                    ? null
                    : { outputDirectory: v.outputDirectory }),
                ...(v.publicSource === undefined ? null : { publicSource: v.publicSource }),
                ...(v.rootDirectory === undefined ? null : { rootDirectory: v.rootDirectory }),
                ...(v.serverlessFunctionRegion === undefined
                    ? null
                    : { serverlessFunctionRegion: v.serverlessFunctionRegion }),
                ...(v.sourceFilesOutsideRootDirectory === undefined
                    ? null
                    : { sourceFilesOutsideRootDirectory: v.sourceFilesOutsideRootDirectory }),
                ...(v.commandForIgnoringBuildStep === undefined
                    ? null
                    : { commandForIgnoringBuildStep: v.commandForIgnoringBuildStep }),
                ...(v.createdAt === undefined ? null : { createdAt: v.createdAt }),
                ...(v.speedInsights === undefined ? null : { speedInsights: v.speedInsights }),
                ...(v.webAnalytics === undefined ? null : { webAnalytics: v.webAnalytics }),
                ...(v.skipGitConnectDuringLink === undefined
                    ? null
                    : { skipGitConnectDuringLink: v.skipGitConnectDuringLink }),
                ...(v.gitComments === undefined ? null : { gitComments: v.gitComments }),
            };
        });

    export type Outbound = {
        framework?: string | null | undefined;
        gitForkProtection?: boolean | undefined;
        customerSupportCodeVisibility?: boolean | undefined;
        gitLFS?: boolean | undefined;
        devCommand?: string | null | undefined;
        installCommand?: string | null | undefined;
        buildCommand?: string | null | undefined;
        nodeVersion?: string | undefined;
        outputDirectory?: string | null | undefined;
        publicSource?: boolean | null | undefined;
        rootDirectory?: string | null | undefined;
        serverlessFunctionRegion?: string | null | undefined;
        sourceFilesOutsideRootDirectory?: boolean | undefined;
        commandForIgnoringBuildStep?: string | null | undefined;
        createdAt?: number | undefined;
        speedInsights?: GetDeploymentsSpeedInsights$.Outbound | undefined;
        webAnalytics?: GetDeploymentsWebAnalytics$.Outbound | undefined;
        skipGitConnectDuringLink?: boolean | undefined;
        gitComments?: GetDeploymentsGitComments$.Outbound | undefined;
    };

    export const outboundSchema: z.ZodType<Outbound, z.ZodTypeDef, GetDeploymentsProjectSettings> =
        z
            .object({
                framework: z.nullable(GetDeploymentsFramework$.outboundSchema).optional(),
                gitForkProtection: z.boolean().optional(),
                customerSupportCodeVisibility: z.boolean().optional(),
                gitLFS: z.boolean().optional(),
                devCommand: z.nullable(z.string()).optional(),
                installCommand: z.nullable(z.string()).optional(),
                buildCommand: z.nullable(z.string()).optional(),
                nodeVersion: GetDeploymentsNodeVersion$.outboundSchema.optional(),
                outputDirectory: z.nullable(z.string()).optional(),
                publicSource: z.nullable(z.boolean()).optional(),
                rootDirectory: z.nullable(z.string()).optional(),
                serverlessFunctionRegion: z.nullable(z.string()).optional(),
                sourceFilesOutsideRootDirectory: z.boolean().optional(),
                commandForIgnoringBuildStep: z.nullable(z.string()).optional(),
                createdAt: z.number().optional(),
                speedInsights: z.lazy(() => GetDeploymentsSpeedInsights$.outboundSchema).optional(),
                webAnalytics: z.lazy(() => GetDeploymentsWebAnalytics$.outboundSchema).optional(),
                skipGitConnectDuringLink: z.boolean().optional(),
                gitComments: z.lazy(() => GetDeploymentsGitComments$.outboundSchema).optional(),
            })
            .transform((v) => {
                return {
                    ...(v.framework === undefined ? null : { framework: v.framework }),
                    ...(v.gitForkProtection === undefined
                        ? null
                        : { gitForkProtection: v.gitForkProtection }),
                    ...(v.customerSupportCodeVisibility === undefined
                        ? null
                        : { customerSupportCodeVisibility: v.customerSupportCodeVisibility }),
                    ...(v.gitLFS === undefined ? null : { gitLFS: v.gitLFS }),
                    ...(v.devCommand === undefined ? null : { devCommand: v.devCommand }),
                    ...(v.installCommand === undefined
                        ? null
                        : { installCommand: v.installCommand }),
                    ...(v.buildCommand === undefined ? null : { buildCommand: v.buildCommand }),
                    ...(v.nodeVersion === undefined ? null : { nodeVersion: v.nodeVersion }),
                    ...(v.outputDirectory === undefined
                        ? null
                        : { outputDirectory: v.outputDirectory }),
                    ...(v.publicSource === undefined ? null : { publicSource: v.publicSource }),
                    ...(v.rootDirectory === undefined ? null : { rootDirectory: v.rootDirectory }),
                    ...(v.serverlessFunctionRegion === undefined
                        ? null
                        : { serverlessFunctionRegion: v.serverlessFunctionRegion }),
                    ...(v.sourceFilesOutsideRootDirectory === undefined
                        ? null
                        : { sourceFilesOutsideRootDirectory: v.sourceFilesOutsideRootDirectory }),
                    ...(v.commandForIgnoringBuildStep === undefined
                        ? null
                        : { commandForIgnoringBuildStep: v.commandForIgnoringBuildStep }),
                    ...(v.createdAt === undefined ? null : { createdAt: v.createdAt }),
                    ...(v.speedInsights === undefined ? null : { speedInsights: v.speedInsights }),
                    ...(v.webAnalytics === undefined ? null : { webAnalytics: v.webAnalytics }),
                    ...(v.skipGitConnectDuringLink === undefined
                        ? null
                        : { skipGitConnectDuringLink: v.skipGitConnectDuringLink }),
                    ...(v.gitComments === undefined ? null : { gitComments: v.gitComments }),
                };
            });
}

/** @internal */
export namespace GetDeploymentsDeployments$ {
    export const inboundSchema: z.ZodType<GetDeploymentsDeployments, z.ZodTypeDef, unknown> = z
        .object({
            uid: z.string(),
            name: z.string(),
            url: z.string(),
            created: z.number(),
            source: GetDeploymentsSource$.inboundSchema.optional(),
            state: GetDeploymentsState$.inboundSchema.optional(),
            readyState: GetDeploymentsReadyState$.inboundSchema.optional(),
            type: GetDeploymentsType$.inboundSchema,
            creator: z.lazy(() => GetDeploymentsCreator$.inboundSchema),
            meta: z.record(z.string()).optional(),
            target: z.nullable(GetDeploymentsTarget$.inboundSchema).optional(),
            aliasError: z
                .nullable(z.lazy(() => GetDeploymentsAliasError$.inboundSchema))
                .optional(),
            aliasAssigned: z.nullable(z.union([z.number(), z.boolean()])).optional(),
            createdAt: z.number().optional(),
            buildingAt: z.number().optional(),
            ready: z.number().optional(),
            readySubstate: GetDeploymentsReadySubstate$.inboundSchema.optional(),
            checksState: GetDeploymentsChecksState$.inboundSchema.optional(),
            checksConclusion: GetDeploymentsChecksConclusion$.inboundSchema.optional(),
            inspectorUrl: z.nullable(z.string()),
            isRollbackCandidate: z.nullable(z.boolean()).optional(),
            projectSettings: z.lazy(() => GetDeploymentsProjectSettings$.inboundSchema).optional(),
            connectBuildsEnabled: z.boolean().optional(),
            connectConfigurationId: z.string().optional(),
            passiveConnectConfigurationId: z.string().optional(),
        })
        .transform((v) => {
            return {
                uid: v.uid,
                name: v.name,
                url: v.url,
                created: v.created,
                ...(v.source === undefined ? null : { source: v.source }),
                ...(v.state === undefined ? null : { state: v.state }),
                ...(v.readyState === undefined ? null : { readyState: v.readyState }),
                type: v.type,
                creator: v.creator,
                ...(v.meta === undefined ? null : { meta: v.meta }),
                ...(v.target === undefined ? null : { target: v.target }),
                ...(v.aliasError === undefined ? null : { aliasError: v.aliasError }),
                ...(v.aliasAssigned === undefined ? null : { aliasAssigned: v.aliasAssigned }),
                ...(v.createdAt === undefined ? null : { createdAt: v.createdAt }),
                ...(v.buildingAt === undefined ? null : { buildingAt: v.buildingAt }),
                ...(v.ready === undefined ? null : { ready: v.ready }),
                ...(v.readySubstate === undefined ? null : { readySubstate: v.readySubstate }),
                ...(v.checksState === undefined ? null : { checksState: v.checksState }),
                ...(v.checksConclusion === undefined
                    ? null
                    : { checksConclusion: v.checksConclusion }),
                inspectorUrl: v.inspectorUrl,
                ...(v.isRollbackCandidate === undefined
                    ? null
                    : { isRollbackCandidate: v.isRollbackCandidate }),
                ...(v.projectSettings === undefined
                    ? null
                    : { projectSettings: v.projectSettings }),
                ...(v.connectBuildsEnabled === undefined
                    ? null
                    : { connectBuildsEnabled: v.connectBuildsEnabled }),
                ...(v.connectConfigurationId === undefined
                    ? null
                    : { connectConfigurationId: v.connectConfigurationId }),
                ...(v.passiveConnectConfigurationId === undefined
                    ? null
                    : { passiveConnectConfigurationId: v.passiveConnectConfigurationId }),
            };
        });

    export type Outbound = {
        uid: string;
        name: string;
        url: string;
        created: number;
        source?: string | undefined;
        state?: string | undefined;
        readyState?: string | undefined;
        type: string;
        creator: GetDeploymentsCreator$.Outbound;
        meta?: Record<string, string> | undefined;
        target?: string | null | undefined;
        aliasError?: GetDeploymentsAliasError$.Outbound | null | undefined;
        aliasAssigned?: number | boolean | null | undefined;
        createdAt?: number | undefined;
        buildingAt?: number | undefined;
        ready?: number | undefined;
        readySubstate?: string | undefined;
        checksState?: string | undefined;
        checksConclusion?: string | undefined;
        inspectorUrl: string | null;
        isRollbackCandidate?: boolean | null | undefined;
        projectSettings?: GetDeploymentsProjectSettings$.Outbound | undefined;
        connectBuildsEnabled?: boolean | undefined;
        connectConfigurationId?: string | undefined;
        passiveConnectConfigurationId?: string | undefined;
    };

    export const outboundSchema: z.ZodType<Outbound, z.ZodTypeDef, GetDeploymentsDeployments> = z
        .object({
            uid: z.string(),
            name: z.string(),
            url: z.string(),
            created: z.number(),
            source: GetDeploymentsSource$.outboundSchema.optional(),
            state: GetDeploymentsState$.outboundSchema.optional(),
            readyState: GetDeploymentsReadyState$.outboundSchema.optional(),
            type: GetDeploymentsType$.outboundSchema,
            creator: z.lazy(() => GetDeploymentsCreator$.outboundSchema),
            meta: z.record(z.string()).optional(),
            target: z.nullable(GetDeploymentsTarget$.outboundSchema).optional(),
            aliasError: z
                .nullable(z.lazy(() => GetDeploymentsAliasError$.outboundSchema))
                .optional(),
            aliasAssigned: z.nullable(z.union([z.number(), z.boolean()])).optional(),
            createdAt: z.number().optional(),
            buildingAt: z.number().optional(),
            ready: z.number().optional(),
            readySubstate: GetDeploymentsReadySubstate$.outboundSchema.optional(),
            checksState: GetDeploymentsChecksState$.outboundSchema.optional(),
            checksConclusion: GetDeploymentsChecksConclusion$.outboundSchema.optional(),
            inspectorUrl: z.nullable(z.string()),
            isRollbackCandidate: z.nullable(z.boolean()).optional(),
            projectSettings: z.lazy(() => GetDeploymentsProjectSettings$.outboundSchema).optional(),
            connectBuildsEnabled: z.boolean().optional(),
            connectConfigurationId: z.string().optional(),
            passiveConnectConfigurationId: z.string().optional(),
        })
        .transform((v) => {
            return {
                uid: v.uid,
                name: v.name,
                url: v.url,
                created: v.created,
                ...(v.source === undefined ? null : { source: v.source }),
                ...(v.state === undefined ? null : { state: v.state }),
                ...(v.readyState === undefined ? null : { readyState: v.readyState }),
                type: v.type,
                creator: v.creator,
                ...(v.meta === undefined ? null : { meta: v.meta }),
                ...(v.target === undefined ? null : { target: v.target }),
                ...(v.aliasError === undefined ? null : { aliasError: v.aliasError }),
                ...(v.aliasAssigned === undefined ? null : { aliasAssigned: v.aliasAssigned }),
                ...(v.createdAt === undefined ? null : { createdAt: v.createdAt }),
                ...(v.buildingAt === undefined ? null : { buildingAt: v.buildingAt }),
                ...(v.ready === undefined ? null : { ready: v.ready }),
                ...(v.readySubstate === undefined ? null : { readySubstate: v.readySubstate }),
                ...(v.checksState === undefined ? null : { checksState: v.checksState }),
                ...(v.checksConclusion === undefined
                    ? null
                    : { checksConclusion: v.checksConclusion }),
                inspectorUrl: v.inspectorUrl,
                ...(v.isRollbackCandidate === undefined
                    ? null
                    : { isRollbackCandidate: v.isRollbackCandidate }),
                ...(v.projectSettings === undefined
                    ? null
                    : { projectSettings: v.projectSettings }),
                ...(v.connectBuildsEnabled === undefined
                    ? null
                    : { connectBuildsEnabled: v.connectBuildsEnabled }),
                ...(v.connectConfigurationId === undefined
                    ? null
                    : { connectConfigurationId: v.connectConfigurationId }),
                ...(v.passiveConnectConfigurationId === undefined
                    ? null
                    : { passiveConnectConfigurationId: v.passiveConnectConfigurationId }),
            };
        });
}

/** @internal */
export namespace GetDeploymentsResponseBody$ {
    export const inboundSchema: z.ZodType<GetDeploymentsResponseBody, z.ZodTypeDef, unknown> = z
        .object({
            pagination: Pagination$.inboundSchema,
            deployments: z.array(z.lazy(() => GetDeploymentsDeployments$.inboundSchema)),
        })
        .transform((v) => {
            return {
                pagination: v.pagination,
                deployments: v.deployments,
            };
        });

    export type Outbound = {
        pagination: Pagination$.Outbound;
        deployments: Array<GetDeploymentsDeployments$.Outbound>;
    };

    export const outboundSchema: z.ZodType<Outbound, z.ZodTypeDef, GetDeploymentsResponseBody> = z
        .object({
            pagination: Pagination$.outboundSchema,
            deployments: z.array(z.lazy(() => GetDeploymentsDeployments$.outboundSchema)),
        })
        .transform((v) => {
            return {
                pagination: v.pagination,
                deployments: v.deployments,
            };
        });
}

/** @internal */
export namespace GetDeploymentsResponse$ {
    export const inboundSchema: z.ZodType<GetDeploymentsResponse, z.ZodTypeDef, unknown> = z
        .object({
            HttpMeta: HTTPMetadata$.inboundSchema,
            object: z.lazy(() => GetDeploymentsResponseBody$.inboundSchema).optional(),
        })
        .transform((v) => {
            return {
                httpMeta: v.HttpMeta,
                ...(v.object === undefined ? null : { object: v.object }),
            };
        });

    export type Outbound = {
        HttpMeta: HTTPMetadata$.Outbound;
        object?: GetDeploymentsResponseBody$.Outbound | undefined;
    };

    export const outboundSchema: z.ZodType<Outbound, z.ZodTypeDef, GetDeploymentsResponse> = z
        .object({
            httpMeta: HTTPMetadata$.outboundSchema,
            object: z.lazy(() => GetDeploymentsResponseBody$.outboundSchema).optional(),
        })
        .transform((v) => {
            return {
                HttpMeta: v.httpMeta,
                ...(v.object === undefined ? null : { object: v.object }),
            };
        });
}
