/*
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

import { AuthToken, AuthToken$ } from "./authtoken";
import { HTTPMetadata, HTTPMetadata$ } from "./httpmetadata";
import { Pagination, Pagination$ } from "./pagination";
import * as z from "zod";

export type ListAuthTokensResponseBody = {
    tokens: Array<AuthToken>;
    /**
     * Authentication token metadata.
     */
    testingToken?: AuthToken | undefined;
    /**
     * This object contains information related to the pagination of the current request, including the necessary parameters to get the next or previous page of data.
     */
    pagination: Pagination;
};

export type ListAuthTokensResponse = {
    httpMeta: HTTPMetadata;
    object?: ListAuthTokensResponseBody | undefined;
};

/** @internal */
export namespace ListAuthTokensResponseBody$ {
    export const inboundSchema: z.ZodType<ListAuthTokensResponseBody, z.ZodTypeDef, unknown> = z
        .object({
            tokens: z.array(AuthToken$.inboundSchema),
            testingToken: AuthToken$.inboundSchema.optional(),
            pagination: Pagination$.inboundSchema,
        })
        .transform((v) => {
            return {
                tokens: v.tokens,
                ...(v.testingToken === undefined ? null : { testingToken: v.testingToken }),
                pagination: v.pagination,
            };
        });

    export type Outbound = {
        tokens: Array<AuthToken$.Outbound>;
        testingToken?: AuthToken$.Outbound | undefined;
        pagination: Pagination$.Outbound;
    };

    export const outboundSchema: z.ZodType<Outbound, z.ZodTypeDef, ListAuthTokensResponseBody> = z
        .object({
            tokens: z.array(AuthToken$.outboundSchema),
            testingToken: AuthToken$.outboundSchema.optional(),
            pagination: Pagination$.outboundSchema,
        })
        .transform((v) => {
            return {
                tokens: v.tokens,
                ...(v.testingToken === undefined ? null : { testingToken: v.testingToken }),
                pagination: v.pagination,
            };
        });
}

/** @internal */
export namespace ListAuthTokensResponse$ {
    export const inboundSchema: z.ZodType<ListAuthTokensResponse, z.ZodTypeDef, unknown> = z
        .object({
            HttpMeta: HTTPMetadata$.inboundSchema,
            object: z.lazy(() => ListAuthTokensResponseBody$.inboundSchema).optional(),
        })
        .transform((v) => {
            return {
                httpMeta: v.HttpMeta,
                ...(v.object === undefined ? null : { object: v.object }),
            };
        });

    export type Outbound = {
        HttpMeta: HTTPMetadata$.Outbound;
        object?: ListAuthTokensResponseBody$.Outbound | undefined;
    };

    export const outboundSchema: z.ZodType<Outbound, z.ZodTypeDef, ListAuthTokensResponse> = z
        .object({
            httpMeta: HTTPMetadata$.outboundSchema,
            object: z.lazy(() => ListAuthTokensResponseBody$.outboundSchema).optional(),
        })
        .transform((v) => {
            return {
                HttpMeta: v.httpMeta,
                ...(v.object === undefined ? null : { object: v.object }),
            };
        });
}
