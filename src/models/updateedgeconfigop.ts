/*
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

import { remap as remap$ } from "../lib/primitives";
import * as z from "zod";

export type UpdateEdgeConfigRequestBody = {
    slug: string;
};

export type UpdateEdgeConfigRequest = {
    edgeConfigId: string;
    /**
     * The Team identifier to perform the request on behalf of.
     */
    teamId?: string | undefined;
    /**
     * The Team slug to perform the request on behalf of.
     */
    slug?: string | undefined;
    requestBody?: UpdateEdgeConfigRequestBody | undefined;
};

/**
 * Keeps track of the current state of the Edge Config while it gets transferred.
 */
export type UpdateEdgeConfigTransfer = {
    fromAccountId: string;
    startedAt: number;
    doneAt: number | null;
};

export type UpdateEdgeConfigSchema = {};

/**
 * An Edge Config
 */
export type UpdateEdgeConfigResponseBody = {
    createdAt?: number | undefined;
    updatedAt?: number | undefined;
    id?: string | undefined;
    /**
     * Name for the Edge Config Names are not unique. Must start with an alphabetic character and can contain only alphanumeric characters and underscores).
     */
    slug?: string | undefined;
    ownerId?: string | undefined;
    digest?: string | undefined;
    /**
     * Keeps track of the current state of the Edge Config while it gets transferred.
     */
    transfer?: UpdateEdgeConfigTransfer | undefined;
    schema?: UpdateEdgeConfigSchema | undefined;
    sizeInBytes: number;
    itemCount: number;
};

/** @internal */
export namespace UpdateEdgeConfigRequestBody$ {
    export const inboundSchema: z.ZodType<UpdateEdgeConfigRequestBody, z.ZodTypeDef, unknown> =
        z.object({
            slug: z.string(),
        });

    export type Outbound = {
        slug: string;
    };

    export const outboundSchema: z.ZodType<Outbound, z.ZodTypeDef, UpdateEdgeConfigRequestBody> =
        z.object({
            slug: z.string(),
        });
}

/** @internal */
export namespace UpdateEdgeConfigRequest$ {
    export const inboundSchema: z.ZodType<UpdateEdgeConfigRequest, z.ZodTypeDef, unknown> = z
        .object({
            edgeConfigId: z.string(),
            teamId: z.string().optional(),
            slug: z.string().optional(),
            RequestBody: z.lazy(() => UpdateEdgeConfigRequestBody$.inboundSchema).optional(),
        })
        .transform((v) => {
            return remap$(v, {
                RequestBody: "requestBody",
            });
        });

    export type Outbound = {
        edgeConfigId: string;
        teamId?: string | undefined;
        slug?: string | undefined;
        RequestBody?: UpdateEdgeConfigRequestBody$.Outbound | undefined;
    };

    export const outboundSchema: z.ZodType<Outbound, z.ZodTypeDef, UpdateEdgeConfigRequest> = z
        .object({
            edgeConfigId: z.string(),
            teamId: z.string().optional(),
            slug: z.string().optional(),
            requestBody: z.lazy(() => UpdateEdgeConfigRequestBody$.outboundSchema).optional(),
        })
        .transform((v) => {
            return remap$(v, {
                requestBody: "RequestBody",
            });
        });
}

/** @internal */
export namespace UpdateEdgeConfigTransfer$ {
    export const inboundSchema: z.ZodType<UpdateEdgeConfigTransfer, z.ZodTypeDef, unknown> =
        z.object({
            fromAccountId: z.string(),
            startedAt: z.number(),
            doneAt: z.nullable(z.number()),
        });

    export type Outbound = {
        fromAccountId: string;
        startedAt: number;
        doneAt: number | null;
    };

    export const outboundSchema: z.ZodType<Outbound, z.ZodTypeDef, UpdateEdgeConfigTransfer> =
        z.object({
            fromAccountId: z.string(),
            startedAt: z.number(),
            doneAt: z.nullable(z.number()),
        });
}

/** @internal */
export namespace UpdateEdgeConfigSchema$ {
    export const inboundSchema: z.ZodType<UpdateEdgeConfigSchema, z.ZodTypeDef, unknown> = z.object(
        {}
    );

    export type Outbound = {};

    export const outboundSchema: z.ZodType<Outbound, z.ZodTypeDef, UpdateEdgeConfigSchema> =
        z.object({});
}

/** @internal */
export namespace UpdateEdgeConfigResponseBody$ {
    export const inboundSchema: z.ZodType<UpdateEdgeConfigResponseBody, z.ZodTypeDef, unknown> =
        z.object({
            createdAt: z.number().optional(),
            updatedAt: z.number().optional(),
            id: z.string().optional(),
            slug: z.string().optional(),
            ownerId: z.string().optional(),
            digest: z.string().optional(),
            transfer: z.lazy(() => UpdateEdgeConfigTransfer$.inboundSchema).optional(),
            schema: z.lazy(() => UpdateEdgeConfigSchema$.inboundSchema).optional(),
            sizeInBytes: z.number(),
            itemCount: z.number(),
        });

    export type Outbound = {
        createdAt?: number | undefined;
        updatedAt?: number | undefined;
        id?: string | undefined;
        slug?: string | undefined;
        ownerId?: string | undefined;
        digest?: string | undefined;
        transfer?: UpdateEdgeConfigTransfer$.Outbound | undefined;
        schema?: UpdateEdgeConfigSchema$.Outbound | undefined;
        sizeInBytes: number;
        itemCount: number;
    };

    export const outboundSchema: z.ZodType<Outbound, z.ZodTypeDef, UpdateEdgeConfigResponseBody> =
        z.object({
            createdAt: z.number().optional(),
            updatedAt: z.number().optional(),
            id: z.string().optional(),
            slug: z.string().optional(),
            ownerId: z.string().optional(),
            digest: z.string().optional(),
            transfer: z.lazy(() => UpdateEdgeConfigTransfer$.outboundSchema).optional(),
            schema: z.lazy(() => UpdateEdgeConfigSchema$.outboundSchema).optional(),
            sizeInBytes: z.number(),
            itemCount: z.number(),
        });
}
