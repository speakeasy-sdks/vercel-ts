/*
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

import { FileTree, FileTree$ } from "./filetree";
import { HTTPMetadata, HTTPMetadata$ } from "./httpmetadata";
import * as z from "zod";

export type ListDeploymentFilesRequest = {
    /**
     * The unique deployment identifier
     */
    id: string;
    /**
     * The Team identifier to perform the request on behalf of.
     */
    teamId?: string | undefined;
    /**
     * The Team slug to perform the request on behalf of.
     */
    slug?: string | undefined;
};

export type ListDeploymentFilesResponse = {
    httpMeta: HTTPMetadata;
    /**
     * Retrieved the file tree successfully
     */
    fileTrees?: Array<FileTree> | undefined;
};

/** @internal */
export namespace ListDeploymentFilesRequest$ {
    export const inboundSchema: z.ZodType<ListDeploymentFilesRequest, z.ZodTypeDef, unknown> = z
        .object({
            id: z.string(),
            teamId: z.string().optional(),
            slug: z.string().optional(),
        })
        .transform((v) => {
            return {
                id: v.id,
                ...(v.teamId === undefined ? null : { teamId: v.teamId }),
                ...(v.slug === undefined ? null : { slug: v.slug }),
            };
        });

    export type Outbound = {
        id: string;
        teamId?: string | undefined;
        slug?: string | undefined;
    };

    export const outboundSchema: z.ZodType<Outbound, z.ZodTypeDef, ListDeploymentFilesRequest> = z
        .object({
            id: z.string(),
            teamId: z.string().optional(),
            slug: z.string().optional(),
        })
        .transform((v) => {
            return {
                id: v.id,
                ...(v.teamId === undefined ? null : { teamId: v.teamId }),
                ...(v.slug === undefined ? null : { slug: v.slug }),
            };
        });
}

/** @internal */
export namespace ListDeploymentFilesResponse$ {
    export const inboundSchema: z.ZodType<ListDeploymentFilesResponse, z.ZodTypeDef, unknown> = z
        .object({
            HttpMeta: HTTPMetadata$.inboundSchema,
            FileTrees: z.array(FileTree$.inboundSchema).optional(),
        })
        .transform((v) => {
            return {
                httpMeta: v.HttpMeta,
                ...(v.FileTrees === undefined ? null : { fileTrees: v.FileTrees }),
            };
        });

    export type Outbound = {
        HttpMeta: HTTPMetadata$.Outbound;
        FileTrees?: Array<FileTree$.Outbound> | undefined;
    };

    export const outboundSchema: z.ZodType<Outbound, z.ZodTypeDef, ListDeploymentFilesResponse> = z
        .object({
            httpMeta: HTTPMetadata$.outboundSchema,
            fileTrees: z.array(FileTree$.outboundSchema).optional(),
        })
        .transform((v) => {
            return {
                HttpMeta: v.httpMeta,
                ...(v.fileTrees === undefined ? null : { FileTrees: v.fileTrees }),
            };
        });
}
