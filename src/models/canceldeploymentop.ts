/*
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

import * as z from "zod";

export type CancelDeploymentRequest = {
    /**
     * The unique identifier of the deployment.
     */
    id: string;
    /**
     * The Team identifier to perform the request on behalf of.
     */
    teamId?: string | undefined;
    /**
     * The Team slug to perform the request on behalf of.
     */
    slug?: string | undefined;
};

export type CancelDeploymentBuild = {
    /**
     * The keys of the environment variables that were assigned during the build phase.
     */
    env: Array<string>;
};

export type CancelDeploymentBuilds = {};

/**
 * The cron jobs associated with this deployment. Note that preview deployments are also allowed to have this property, but only production deployments create cron jobs. If a preview deployment is promoted to production, only then they'll take effect.
 */
export type CancelDeploymentCrons = {
    schedule: string;
    path: string;
};

/**
 * An object used to configure your Serverless Functions
 */
export type CancelDeploymentFunctions = {
    memory?: number | undefined;
    maxDuration?: number | undefined;
    runtime?: string | undefined;
    includeFiles?: string | undefined;
    excludeFiles?: string | undefined;
};

/**
 * The pricing plan the deployment was made under
 */
export enum CancelDeploymentPlan {
    Pro = "pro",
    Enterprise = "enterprise",
    Hobby = "hobby",
}

/**
 * A list of routes objects used to rewrite paths to point towards other internal or external paths
 */
export type CancelDeploymentRoutes3 = {
    src: string;
    continue: boolean;
    middleware: number;
};

export enum CancelDeploymentRoutesHandle {
    Error = "error",
    Filesystem = "filesystem",
    Hit = "hit",
    Miss = "miss",
    Rewrite = "rewrite",
    Resource = "resource",
}

/**
 * A list of routes objects used to rewrite paths to point towards other internal or external paths
 */
export type CancelDeploymentRoutes2 = {
    handle: CancelDeploymentRoutesHandle;
    src?: string | undefined;
    dest?: string | undefined;
    status?: number | undefined;
};

export enum CancelDeploymentHasDeploymentsType {
    Header = "header",
    Cookie = "cookie",
    Query = "query",
}

export type CancelDeploymentHas2 = {
    type: CancelDeploymentHasDeploymentsType;
    key: string;
    value?: string | undefined;
};

export enum CancelDeploymentHasType {
    Host = "host",
}

export type CancelDeploymentHas1 = {
    type: CancelDeploymentHasType;
    value: string;
};

export type CancelDeploymentRoutesHas = CancelDeploymentHas1 | CancelDeploymentHas2;

export enum CancelDeploymentMissingDeploymentsType {
    Header = "header",
    Cookie = "cookie",
    Query = "query",
}

export type CancelDeploymentMissing2 = {
    type: CancelDeploymentMissingDeploymentsType;
    key: string;
    value?: string | undefined;
};

export enum CancelDeploymentMissingType {
    Host = "host",
}

export type CancelDeploymentMissing1 = {
    type: CancelDeploymentMissingType;
    value: string;
};

export type CancelDeploymentRoutesMissing = CancelDeploymentMissing1 | CancelDeploymentMissing2;

export type RoutesLocale = {
    redirect?: Record<string, string> | undefined;
    cookie?: string | undefined;
};

/**
 * A list of routes objects used to rewrite paths to point towards other internal or external paths
 */
export type CancelDeploymentRoutes1 = {
    src: string;
    dest?: string | undefined;
    headers?: Record<string, string> | undefined;
    methods?: Array<string> | undefined;
    continue?: boolean | undefined;
    override?: boolean | undefined;
    caseSensitive?: boolean | undefined;
    check?: boolean | undefined;
    important?: boolean | undefined;
    status?: number | undefined;
    has?: Array<CancelDeploymentHas1 | CancelDeploymentHas2> | undefined;
    missing?: Array<CancelDeploymentMissing1 | CancelDeploymentMissing2> | undefined;
    locale?: RoutesLocale | undefined;
    /**
     * A middleware key within the `output` key under the build result. Overrides a `middleware` definition.
     */
    middlewarePath?: string | undefined;
    /**
     * The original middleware matchers.
     */
    middlewareRawSrc?: Array<string> | undefined;
    /**
     * A middleware index in the `middleware` key under the build result
     */
    middleware?: number | undefined;
};

export type CancelDeploymentRoutes =
    | CancelDeploymentRoutes3
    | CancelDeploymentRoutes2
    | CancelDeploymentRoutes1;

export enum CancelDeploymentGitRepoDeploymentsResponseType {
    Bitbucket = "bitbucket",
}

export enum CancelDeploymentGitRepoDeploymentsResponseOwnerType {
    User = "user",
    Team = "team",
}

export type CancelDeploymentGitRepo3 = {
    owner: string;
    repoUuid: string;
    slug: string;
    type: CancelDeploymentGitRepoDeploymentsResponseType;
    workspaceUuid: string;
    path: string;
    defaultBranch: string;
    name: string;
    private: boolean;
    ownerType: CancelDeploymentGitRepoDeploymentsResponseOwnerType;
};

export enum CancelDeploymentGitRepoDeploymentsType {
    Github = "github",
}

export enum CancelDeploymentGitRepoDeploymentsOwnerType {
    User = "user",
    Team = "team",
}

export type CancelDeploymentGitRepo2 = {
    org: string;
    repo: string;
    repoId: number;
    type: CancelDeploymentGitRepoDeploymentsType;
    repoOwnerId: string;
    path: string;
    defaultBranch: string;
    name: string;
    private: boolean;
    ownerType: CancelDeploymentGitRepoDeploymentsOwnerType;
};

export enum CancelDeploymentGitRepoType {
    Gitlab = "gitlab",
}

export enum CancelDeploymentGitRepoOwnerType {
    User = "user",
    Team = "team",
}

export type CancelDeploymentGitRepo1 = {
    namespace: string;
    projectId: number;
    type: CancelDeploymentGitRepoType;
    url: string;
    path: string;
    defaultBranch: string;
    name: string;
    private: boolean;
    ownerType: CancelDeploymentGitRepoOwnerType;
};

export type CancelDeploymentGitRepo =
    | CancelDeploymentGitRepo1
    | CancelDeploymentGitRepo2
    | CancelDeploymentGitRepo3;

export type CancelDeploymentAliasAssignedAt = number | boolean;

export enum CancelDeploymentDeploymentsReadyState {
    Initializing = "INITIALIZING",
    Building = "BUILDING",
    Ready = "READY",
    Error = "ERROR",
}

export type CancelDeploymentOutput = {
    path: string;
    functionName: string;
};

export type CancelDeploymentLambdas = {
    id: string;
    createdAt?: number | undefined;
    entrypoint?: string | null | undefined;
    readyState?: CancelDeploymentDeploymentsReadyState | undefined;
    readyStateAt?: number | undefined;
    output: Array<CancelDeploymentOutput>;
};

/**
 * The public project information associated with the deployment.
 */
export type CancelDeploymentProject = {
    id: string;
    name: string;
    framework?: string | null | undefined;
};

/**
 * The state of the deployment depending on the process of deploying, or if it is ready or in an error state
 */
export enum CancelDeploymentReadyState {
    Initializing = "INITIALIZING",
    Building = "BUILDING",
    Ready = "READY",
    Error = "ERROR",
    Queued = "QUEUED",
    Canceled = "CANCELED",
}

/**
 * The substate of the deployment when the state is "READY"
 */
export enum CancelDeploymentReadySubstate {
    Staged = "STAGED",
    Promoted = "PROMOTED",
}

/**
 * Where was the deployment created from
 */
export enum CancelDeploymentSource {
    ApiTriggerGitDeploy = "api-trigger-git-deploy",
    Cli = "cli",
    CloneRepo = "clone/repo",
    Git = "git",
    Import = "import",
    ImportRepo = "import/repo",
}

/**
 * If defined, either `staging` if a staging alias in the format `<project>.<team>.now.sh` was assigned upon creation, or `production` if the aliases from `alias` were assigned
 */
export enum CancelDeploymentTarget {
    Staging = "staging",
    Production = "production",
}

/**
 * The team that owns the deployment if any
 */
export type CancelDeploymentTeam = {
    /**
     * The ID of the team owner
     */
    id: string;
    /**
     * The name of the team owner
     */
    name: string;
    /**
     * The slug of the team owner
     */
    slug: string;
    /**
     * The avatar of the team owner
     */
    avatar?: string | undefined;
};

export enum CancelDeploymentType {
    Lambdas = "LAMBDAS",
}

/**
 * An object that will contain a `code` and a `message` when the aliasing fails, otherwise the value will be `null`
 */
export type CancelDeploymentAliasError = {
    code: string;
    message: string;
};

export type CancelDeploymentAliasWarning = {
    code: string;
    message: string;
    link?: string | undefined;
    action?: string | undefined;
};

export enum CancelDeploymentChecksState {
    Registered = "registered",
    Running = "running",
    Completed = "completed",
}

export enum CancelDeploymentChecksConclusion {
    Succeeded = "succeeded",
    Failed = "failed",
    Skipped = "skipped",
    Canceled = "canceled",
}

/**
 * Information about the deployment creator
 */
export type CancelDeploymentCreator = {
    /**
     * The ID of the user that created the deployment
     */
    uid: string;
    /**
     * The username of the user that created the deployment
     */
    username?: string | undefined;
    /**
     * The avatar of the user that created the deployment
     */
    avatar?: string | undefined;
};

export enum CancelDeploymentGitSourceDeploymentsResponse200ApplicationJSONResponseBody9Type {
    Bitbucket = "bitbucket",
}

export type GitSource9 = {
    type: CancelDeploymentGitSourceDeploymentsResponse200ApplicationJSONResponseBody9Type;
    ref: string;
    sha: string;
    owner?: string | undefined;
    slug?: string | undefined;
    workspaceUuid: string;
    repoUuid: string;
};

export enum CancelDeploymentGitSourceDeploymentsResponse200ApplicationJSONResponseBody8Type {
    Gitlab = "gitlab",
}

export type GitSource8 = {
    type: CancelDeploymentGitSourceDeploymentsResponse200ApplicationJSONResponseBody8Type;
    ref: string;
    sha: string;
    projectId: number;
};

export enum CancelDeploymentGitSourceDeploymentsResponse200ApplicationJSONResponseBody7Type {
    Github = "github",
}

export type GitSource7 = {
    type: CancelDeploymentGitSourceDeploymentsResponse200ApplicationJSONResponseBody7Type;
    ref: string;
    sha: string;
    repoId: number;
    org?: string | undefined;
    repo?: string | undefined;
};

export enum CancelDeploymentGitSourceDeploymentsResponse200ApplicationJSONResponseBodyType {
    Custom = "custom",
}

export type GitSource6 = {
    type: CancelDeploymentGitSourceDeploymentsResponse200ApplicationJSONResponseBodyType;
    ref: string;
    sha: string;
    gitUrl: string;
};

export enum CancelDeploymentGitSourceDeploymentsResponse200ApplicationJSONType {
    Bitbucket = "bitbucket",
}

export type CancelDeploymentGitSource5 = {
    type: CancelDeploymentGitSourceDeploymentsResponse200ApplicationJSONType;
    owner: string;
    slug: string;
    ref?: string | null | undefined;
    sha?: string | undefined;
    prId?: number | null | undefined;
};

export enum CancelDeploymentGitSourceDeploymentsResponse200Type {
    Bitbucket = "bitbucket",
}

export type CancelDeploymentGitSource4 = {
    type: CancelDeploymentGitSourceDeploymentsResponse200Type;
    workspaceUuid?: string | undefined;
    repoUuid: string;
    ref?: string | null | undefined;
    sha?: string | undefined;
    prId?: number | null | undefined;
};

export enum CancelDeploymentGitSourceDeploymentsResponseType {
    Gitlab = "gitlab",
}

export type CancelDeploymentGitSourceProjectId = string | number;

export type CancelDeploymentGitSource3 = {
    type: CancelDeploymentGitSourceDeploymentsResponseType;
    projectId: string | number;
    ref?: string | null | undefined;
    sha?: string | undefined;
    prId?: number | null | undefined;
};

export enum CancelDeploymentGitSourceDeploymentsType {
    Github = "github",
}

export type CancelDeploymentGitSource2 = {
    type: CancelDeploymentGitSourceDeploymentsType;
    org: string;
    repo: string;
    ref?: string | null | undefined;
    sha?: string | undefined;
    prId?: number | null | undefined;
};

export enum CancelDeploymentGitSourceType {
    Github = "github",
}

export type CancelDeploymentGitSourceRepoId = string | number;

export type CancelDeploymentGitSource1 = {
    type: CancelDeploymentGitSourceType;
    repoId: string | number;
    ref?: string | null | undefined;
    sha?: string | undefined;
    prId?: number | null | undefined;
};

export type CancelDeploymentGitSource =
    | GitSource6
    | GitSource8
    | CancelDeploymentGitSource1
    | CancelDeploymentGitSource3
    | CancelDeploymentGitSource2
    | CancelDeploymentGitSource4
    | CancelDeploymentGitSource5
    | GitSource7
    | GitSource9;

export type CancelDeploymentResponseBody = {
    build: CancelDeploymentBuild;
    builds?: Array<CancelDeploymentBuilds> | undefined;
    /**
     * The flag saying if Vercel Connect configuration is used for builds
     */
    connectBuildsEnabled?: boolean | undefined;
    /**
     * The ID of Vercel Connect configuration used for this deployment
     */
    connectConfigurationId?: string | undefined;
    /**
     * The region where the deployment was first created
     */
    createdIn: string;
    /**
     * The cron jobs associated with this deployment. Note that preview deployments are also allowed to have this property, but only production deployments create cron jobs. If a preview deployment is promoted to production, only then they'll take effect.
     */
    crons?: Array<CancelDeploymentCrons> | undefined;
    /**
     * The keys of the environment variables that were assigned during runtime
     */
    env: Array<string>;
    /**
     * An object used to configure your Serverless Functions
     */
    functions?: Record<string, CancelDeploymentFunctions> | null | undefined;
    /**
     * Vercel URL to inspect the deployment.
     */
    inspectorUrl: string | null;
    /**
     * Is the deployment currently queued waiting for a Concurrent Build Slot to be available
     */
    isInConcurrentBuildsQueue: boolean;
    /**
     * An object containing the deployment's metadata
     */
    meta: Record<string, string>;
    /**
     * An monorepo manager that was used for the deployment
     */
    monorepoManager?: string | null | undefined;
    /**
     * The name of the project associated with the deployment at the time that the deployment was created
     */
    name: string;
    /**
     * The unique ID of the user or team the deployment belongs to
     */
    ownerId: string;
    /**
     * The connect configuration ID used to deploy passive lambdas into for secure compute enabled deployments.
     */
    passiveConnectConfigurationId?: string | undefined;
    /**
     * The pricing plan the deployment was made under
     */
    plan: CancelDeploymentPlan;
    /**
     * The ID of the project the deployment is associated with
     */
    projectId: string;
    /**
     * A list of routes objects used to rewrite paths to point towards other internal or external paths
     */
    routes: Array<
        CancelDeploymentRoutes3 | CancelDeploymentRoutes2 | CancelDeploymentRoutes1
    > | null;
    gitRepo?:
        | CancelDeploymentGitRepo1
        | CancelDeploymentGitRepo2
        | CancelDeploymentGitRepo3
        | null
        | undefined;
    aliasAssignedAt?: number | boolean | null | undefined;
    lambdas?: Array<CancelDeploymentLambdas> | undefined;
    /**
     * The public project information associated with the deployment.
     */
    project?: CancelDeploymentProject | undefined;
    /**
     * A boolean representing if the deployment is public or not. By default this is `false`
     */
    public: boolean;
    /**
     * The state of the deployment depending on the process of deploying, or if it is ready or in an error state
     */
    readyState: CancelDeploymentReadyState;
    /**
     * The substate of the deployment when the state is "READY"
     */
    readySubstate?: CancelDeploymentReadySubstate | undefined;
    /**
     * The regions the deployment exists in
     */
    regions: Array<string>;
    /**
     * Where was the deployment created from
     */
    source?: CancelDeploymentSource | undefined;
    /**
     * If defined, either `staging` if a staging alias in the format `<project>.<team>.now.sh` was assigned upon creation, or `production` if the aliases from `alias` were assigned
     */
    target?: CancelDeploymentTarget | null | undefined;
    /**
     * The team that owns the deployment if any
     */
    team?: CancelDeploymentTeam | undefined;
    type: CancelDeploymentType;
    /**
     * A string with the unique URL of the deployment
     */
    url: string;
    /**
     * An array of domains that were provided by the user when creating the Deployment.
     */
    userAliases?: Array<string> | undefined;
    /**
     * The platform version that was used to create the deployment.
     */
    version: number;
    /**
     * Whether or not preview comments are enabled for the deployment
     */
    previewCommentsEnabled?: boolean | undefined;
    /**
     * A list of all the aliases (default aliases, staging aliases and production aliases) that were assigned upon deployment creation
     */
    alias: Array<string>;
    /**
     * A boolean that will be true when the aliases from the alias property were assigned successfully
     */
    aliasAssigned: boolean;
    /**
     * An object that will contain a `code` and a `message` when the aliasing fails, otherwise the value will be `null`
     */
    aliasError?: CancelDeploymentAliasError | null | undefined;
    aliasFinal?: string | null | undefined;
    aliasWarning?: CancelDeploymentAliasWarning | null | undefined;
    autoAssignCustomDomains?: boolean | undefined;
    automaticAliases?: Array<string> | undefined;
    bootedAt: number;
    buildErrorAt?: number | undefined;
    buildingAt: number;
    canceledAt?: number | undefined;
    checksState?: CancelDeploymentChecksState | undefined;
    checksConclusion?: CancelDeploymentChecksConclusion | undefined;
    /**
     * A number containing the date when the deployment was created in milliseconds
     */
    createdAt: number;
    /**
     * Information about the deployment creator
     */
    creator: CancelDeploymentCreator;
    errorCode?: string | undefined;
    errorLink?: string | undefined;
    errorMessage?: string | null | undefined;
    errorStep?: string | undefined;
    passiveRegions?: Array<string> | undefined;
    gitSource?:
        | GitSource6
        | GitSource8
        | CancelDeploymentGitSource1
        | CancelDeploymentGitSource3
        | CancelDeploymentGitSource2
        | CancelDeploymentGitSource4
        | CancelDeploymentGitSource5
        | GitSource7
        | GitSource9
        | undefined;
    /**
     * A string holding the unique ID of the deployment
     */
    id: string;
};

/** @internal */
export namespace CancelDeploymentRequest$ {
    export const inboundSchema: z.ZodType<CancelDeploymentRequest, z.ZodTypeDef, unknown> = z
        .object({
            id: z.string(),
            teamId: z.string().optional(),
            slug: z.string().optional(),
        })
        .transform((v) => {
            return {
                id: v.id,
                ...(v.teamId === undefined ? null : { teamId: v.teamId }),
                ...(v.slug === undefined ? null : { slug: v.slug }),
            };
        });

    export type Outbound = {
        id: string;
        teamId?: string | undefined;
        slug?: string | undefined;
    };

    export const outboundSchema: z.ZodType<Outbound, z.ZodTypeDef, CancelDeploymentRequest> = z
        .object({
            id: z.string(),
            teamId: z.string().optional(),
            slug: z.string().optional(),
        })
        .transform((v) => {
            return {
                id: v.id,
                ...(v.teamId === undefined ? null : { teamId: v.teamId }),
                ...(v.slug === undefined ? null : { slug: v.slug }),
            };
        });
}

/** @internal */
export namespace CancelDeploymentBuild$ {
    export const inboundSchema: z.ZodType<CancelDeploymentBuild, z.ZodTypeDef, unknown> = z
        .object({
            env: z.array(z.string()),
        })
        .transform((v) => {
            return {
                env: v.env,
            };
        });

    export type Outbound = {
        env: Array<string>;
    };

    export const outboundSchema: z.ZodType<Outbound, z.ZodTypeDef, CancelDeploymentBuild> = z
        .object({
            env: z.array(z.string()),
        })
        .transform((v) => {
            return {
                env: v.env,
            };
        });
}

/** @internal */
export namespace CancelDeploymentBuilds$ {
    export const inboundSchema: z.ZodType<CancelDeploymentBuilds, z.ZodTypeDef, unknown> = z.object(
        {}
    );

    export type Outbound = {};

    export const outboundSchema: z.ZodType<Outbound, z.ZodTypeDef, CancelDeploymentBuilds> =
        z.object({});
}

/** @internal */
export namespace CancelDeploymentCrons$ {
    export const inboundSchema: z.ZodType<CancelDeploymentCrons, z.ZodTypeDef, unknown> = z
        .object({
            schedule: z.string(),
            path: z.string(),
        })
        .transform((v) => {
            return {
                schedule: v.schedule,
                path: v.path,
            };
        });

    export type Outbound = {
        schedule: string;
        path: string;
    };

    export const outboundSchema: z.ZodType<Outbound, z.ZodTypeDef, CancelDeploymentCrons> = z
        .object({
            schedule: z.string(),
            path: z.string(),
        })
        .transform((v) => {
            return {
                schedule: v.schedule,
                path: v.path,
            };
        });
}

/** @internal */
export namespace CancelDeploymentFunctions$ {
    export const inboundSchema: z.ZodType<CancelDeploymentFunctions, z.ZodTypeDef, unknown> = z
        .object({
            memory: z.number().optional(),
            maxDuration: z.number().optional(),
            runtime: z.string().optional(),
            includeFiles: z.string().optional(),
            excludeFiles: z.string().optional(),
        })
        .transform((v) => {
            return {
                ...(v.memory === undefined ? null : { memory: v.memory }),
                ...(v.maxDuration === undefined ? null : { maxDuration: v.maxDuration }),
                ...(v.runtime === undefined ? null : { runtime: v.runtime }),
                ...(v.includeFiles === undefined ? null : { includeFiles: v.includeFiles }),
                ...(v.excludeFiles === undefined ? null : { excludeFiles: v.excludeFiles }),
            };
        });

    export type Outbound = {
        memory?: number | undefined;
        maxDuration?: number | undefined;
        runtime?: string | undefined;
        includeFiles?: string | undefined;
        excludeFiles?: string | undefined;
    };

    export const outboundSchema: z.ZodType<Outbound, z.ZodTypeDef, CancelDeploymentFunctions> = z
        .object({
            memory: z.number().optional(),
            maxDuration: z.number().optional(),
            runtime: z.string().optional(),
            includeFiles: z.string().optional(),
            excludeFiles: z.string().optional(),
        })
        .transform((v) => {
            return {
                ...(v.memory === undefined ? null : { memory: v.memory }),
                ...(v.maxDuration === undefined ? null : { maxDuration: v.maxDuration }),
                ...(v.runtime === undefined ? null : { runtime: v.runtime }),
                ...(v.includeFiles === undefined ? null : { includeFiles: v.includeFiles }),
                ...(v.excludeFiles === undefined ? null : { excludeFiles: v.excludeFiles }),
            };
        });
}

/** @internal */
export namespace CancelDeploymentPlan$ {
    export const inboundSchema = z.nativeEnum(CancelDeploymentPlan);
    export const outboundSchema = inboundSchema;
}

/** @internal */
export namespace CancelDeploymentRoutes3$ {
    export const inboundSchema: z.ZodType<CancelDeploymentRoutes3, z.ZodTypeDef, unknown> = z
        .object({
            src: z.string(),
            continue: z.boolean(),
            middleware: z.number(),
        })
        .transform((v) => {
            return {
                src: v.src,
                continue: v.continue,
                middleware: v.middleware,
            };
        });

    export type Outbound = {
        src: string;
        continue: boolean;
        middleware: number;
    };

    export const outboundSchema: z.ZodType<Outbound, z.ZodTypeDef, CancelDeploymentRoutes3> = z
        .object({
            src: z.string(),
            continue: z.boolean(),
            middleware: z.number(),
        })
        .transform((v) => {
            return {
                src: v.src,
                continue: v.continue,
                middleware: v.middleware,
            };
        });
}

/** @internal */
export namespace CancelDeploymentRoutesHandle$ {
    export const inboundSchema = z.nativeEnum(CancelDeploymentRoutesHandle);
    export const outboundSchema = inboundSchema;
}

/** @internal */
export namespace CancelDeploymentRoutes2$ {
    export const inboundSchema: z.ZodType<CancelDeploymentRoutes2, z.ZodTypeDef, unknown> = z
        .object({
            handle: CancelDeploymentRoutesHandle$.inboundSchema,
            src: z.string().optional(),
            dest: z.string().optional(),
            status: z.number().optional(),
        })
        .transform((v) => {
            return {
                handle: v.handle,
                ...(v.src === undefined ? null : { src: v.src }),
                ...(v.dest === undefined ? null : { dest: v.dest }),
                ...(v.status === undefined ? null : { status: v.status }),
            };
        });

    export type Outbound = {
        handle: string;
        src?: string | undefined;
        dest?: string | undefined;
        status?: number | undefined;
    };

    export const outboundSchema: z.ZodType<Outbound, z.ZodTypeDef, CancelDeploymentRoutes2> = z
        .object({
            handle: CancelDeploymentRoutesHandle$.outboundSchema,
            src: z.string().optional(),
            dest: z.string().optional(),
            status: z.number().optional(),
        })
        .transform((v) => {
            return {
                handle: v.handle,
                ...(v.src === undefined ? null : { src: v.src }),
                ...(v.dest === undefined ? null : { dest: v.dest }),
                ...(v.status === undefined ? null : { status: v.status }),
            };
        });
}

/** @internal */
export namespace CancelDeploymentHasDeploymentsType$ {
    export const inboundSchema = z.nativeEnum(CancelDeploymentHasDeploymentsType);
    export const outboundSchema = inboundSchema;
}

/** @internal */
export namespace CancelDeploymentHas2$ {
    export const inboundSchema: z.ZodType<CancelDeploymentHas2, z.ZodTypeDef, unknown> = z
        .object({
            type: CancelDeploymentHasDeploymentsType$.inboundSchema,
            key: z.string(),
            value: z.string().optional(),
        })
        .transform((v) => {
            return {
                type: v.type,
                key: v.key,
                ...(v.value === undefined ? null : { value: v.value }),
            };
        });

    export type Outbound = {
        type: string;
        key: string;
        value?: string | undefined;
    };

    export const outboundSchema: z.ZodType<Outbound, z.ZodTypeDef, CancelDeploymentHas2> = z
        .object({
            type: CancelDeploymentHasDeploymentsType$.outboundSchema,
            key: z.string(),
            value: z.string().optional(),
        })
        .transform((v) => {
            return {
                type: v.type,
                key: v.key,
                ...(v.value === undefined ? null : { value: v.value }),
            };
        });
}

/** @internal */
export namespace CancelDeploymentHasType$ {
    export const inboundSchema = z.nativeEnum(CancelDeploymentHasType);
    export const outboundSchema = inboundSchema;
}

/** @internal */
export namespace CancelDeploymentHas1$ {
    export const inboundSchema: z.ZodType<CancelDeploymentHas1, z.ZodTypeDef, unknown> = z
        .object({
            type: CancelDeploymentHasType$.inboundSchema,
            value: z.string(),
        })
        .transform((v) => {
            return {
                type: v.type,
                value: v.value,
            };
        });

    export type Outbound = {
        type: string;
        value: string;
    };

    export const outboundSchema: z.ZodType<Outbound, z.ZodTypeDef, CancelDeploymentHas1> = z
        .object({
            type: CancelDeploymentHasType$.outboundSchema,
            value: z.string(),
        })
        .transform((v) => {
            return {
                type: v.type,
                value: v.value,
            };
        });
}

/** @internal */
export namespace CancelDeploymentRoutesHas$ {
    export const inboundSchema: z.ZodType<CancelDeploymentRoutesHas, z.ZodTypeDef, unknown> =
        z.union([
            z.lazy(() => CancelDeploymentHas1$.inboundSchema),
            z.lazy(() => CancelDeploymentHas2$.inboundSchema),
        ]);

    export type Outbound = CancelDeploymentHas1$.Outbound | CancelDeploymentHas2$.Outbound;
    export const outboundSchema: z.ZodType<Outbound, z.ZodTypeDef, CancelDeploymentRoutesHas> =
        z.union([
            z.lazy(() => CancelDeploymentHas1$.outboundSchema),
            z.lazy(() => CancelDeploymentHas2$.outboundSchema),
        ]);
}

/** @internal */
export namespace CancelDeploymentMissingDeploymentsType$ {
    export const inboundSchema = z.nativeEnum(CancelDeploymentMissingDeploymentsType);
    export const outboundSchema = inboundSchema;
}

/** @internal */
export namespace CancelDeploymentMissing2$ {
    export const inboundSchema: z.ZodType<CancelDeploymentMissing2, z.ZodTypeDef, unknown> = z
        .object({
            type: CancelDeploymentMissingDeploymentsType$.inboundSchema,
            key: z.string(),
            value: z.string().optional(),
        })
        .transform((v) => {
            return {
                type: v.type,
                key: v.key,
                ...(v.value === undefined ? null : { value: v.value }),
            };
        });

    export type Outbound = {
        type: string;
        key: string;
        value?: string | undefined;
    };

    export const outboundSchema: z.ZodType<Outbound, z.ZodTypeDef, CancelDeploymentMissing2> = z
        .object({
            type: CancelDeploymentMissingDeploymentsType$.outboundSchema,
            key: z.string(),
            value: z.string().optional(),
        })
        .transform((v) => {
            return {
                type: v.type,
                key: v.key,
                ...(v.value === undefined ? null : { value: v.value }),
            };
        });
}

/** @internal */
export namespace CancelDeploymentMissingType$ {
    export const inboundSchema = z.nativeEnum(CancelDeploymentMissingType);
    export const outboundSchema = inboundSchema;
}

/** @internal */
export namespace CancelDeploymentMissing1$ {
    export const inboundSchema: z.ZodType<CancelDeploymentMissing1, z.ZodTypeDef, unknown> = z
        .object({
            type: CancelDeploymentMissingType$.inboundSchema,
            value: z.string(),
        })
        .transform((v) => {
            return {
                type: v.type,
                value: v.value,
            };
        });

    export type Outbound = {
        type: string;
        value: string;
    };

    export const outboundSchema: z.ZodType<Outbound, z.ZodTypeDef, CancelDeploymentMissing1> = z
        .object({
            type: CancelDeploymentMissingType$.outboundSchema,
            value: z.string(),
        })
        .transform((v) => {
            return {
                type: v.type,
                value: v.value,
            };
        });
}

/** @internal */
export namespace CancelDeploymentRoutesMissing$ {
    export const inboundSchema: z.ZodType<CancelDeploymentRoutesMissing, z.ZodTypeDef, unknown> =
        z.union([
            z.lazy(() => CancelDeploymentMissing1$.inboundSchema),
            z.lazy(() => CancelDeploymentMissing2$.inboundSchema),
        ]);

    export type Outbound = CancelDeploymentMissing1$.Outbound | CancelDeploymentMissing2$.Outbound;
    export const outboundSchema: z.ZodType<Outbound, z.ZodTypeDef, CancelDeploymentRoutesMissing> =
        z.union([
            z.lazy(() => CancelDeploymentMissing1$.outboundSchema),
            z.lazy(() => CancelDeploymentMissing2$.outboundSchema),
        ]);
}

/** @internal */
export namespace RoutesLocale$ {
    export const inboundSchema: z.ZodType<RoutesLocale, z.ZodTypeDef, unknown> = z
        .object({
            redirect: z.record(z.string()).optional(),
            cookie: z.string().optional(),
        })
        .transform((v) => {
            return {
                ...(v.redirect === undefined ? null : { redirect: v.redirect }),
                ...(v.cookie === undefined ? null : { cookie: v.cookie }),
            };
        });

    export type Outbound = {
        redirect?: Record<string, string> | undefined;
        cookie?: string | undefined;
    };

    export const outboundSchema: z.ZodType<Outbound, z.ZodTypeDef, RoutesLocale> = z
        .object({
            redirect: z.record(z.string()).optional(),
            cookie: z.string().optional(),
        })
        .transform((v) => {
            return {
                ...(v.redirect === undefined ? null : { redirect: v.redirect }),
                ...(v.cookie === undefined ? null : { cookie: v.cookie }),
            };
        });
}

/** @internal */
export namespace CancelDeploymentRoutes1$ {
    export const inboundSchema: z.ZodType<CancelDeploymentRoutes1, z.ZodTypeDef, unknown> = z
        .object({
            src: z.string(),
            dest: z.string().optional(),
            headers: z.record(z.string()).optional(),
            methods: z.array(z.string()).optional(),
            continue: z.boolean().optional(),
            override: z.boolean().optional(),
            caseSensitive: z.boolean().optional(),
            check: z.boolean().optional(),
            important: z.boolean().optional(),
            status: z.number().optional(),
            has: z
                .array(
                    z.union([
                        z.lazy(() => CancelDeploymentHas1$.inboundSchema),
                        z.lazy(() => CancelDeploymentHas2$.inboundSchema),
                    ])
                )
                .optional(),
            missing: z
                .array(
                    z.union([
                        z.lazy(() => CancelDeploymentMissing1$.inboundSchema),
                        z.lazy(() => CancelDeploymentMissing2$.inboundSchema),
                    ])
                )
                .optional(),
            locale: z.lazy(() => RoutesLocale$.inboundSchema).optional(),
            middlewarePath: z.string().optional(),
            middlewareRawSrc: z.array(z.string()).optional(),
            middleware: z.number().optional(),
        })
        .transform((v) => {
            return {
                src: v.src,
                ...(v.dest === undefined ? null : { dest: v.dest }),
                ...(v.headers === undefined ? null : { headers: v.headers }),
                ...(v.methods === undefined ? null : { methods: v.methods }),
                ...(v.continue === undefined ? null : { continue: v.continue }),
                ...(v.override === undefined ? null : { override: v.override }),
                ...(v.caseSensitive === undefined ? null : { caseSensitive: v.caseSensitive }),
                ...(v.check === undefined ? null : { check: v.check }),
                ...(v.important === undefined ? null : { important: v.important }),
                ...(v.status === undefined ? null : { status: v.status }),
                ...(v.has === undefined ? null : { has: v.has }),
                ...(v.missing === undefined ? null : { missing: v.missing }),
                ...(v.locale === undefined ? null : { locale: v.locale }),
                ...(v.middlewarePath === undefined ? null : { middlewarePath: v.middlewarePath }),
                ...(v.middlewareRawSrc === undefined
                    ? null
                    : { middlewareRawSrc: v.middlewareRawSrc }),
                ...(v.middleware === undefined ? null : { middleware: v.middleware }),
            };
        });

    export type Outbound = {
        src: string;
        dest?: string | undefined;
        headers?: Record<string, string> | undefined;
        methods?: Array<string> | undefined;
        continue?: boolean | undefined;
        override?: boolean | undefined;
        caseSensitive?: boolean | undefined;
        check?: boolean | undefined;
        important?: boolean | undefined;
        status?: number | undefined;
        has?: Array<CancelDeploymentHas1$.Outbound | CancelDeploymentHas2$.Outbound> | undefined;
        missing?:
            | Array<CancelDeploymentMissing1$.Outbound | CancelDeploymentMissing2$.Outbound>
            | undefined;
        locale?: RoutesLocale$.Outbound | undefined;
        middlewarePath?: string | undefined;
        middlewareRawSrc?: Array<string> | undefined;
        middleware?: number | undefined;
    };

    export const outboundSchema: z.ZodType<Outbound, z.ZodTypeDef, CancelDeploymentRoutes1> = z
        .object({
            src: z.string(),
            dest: z.string().optional(),
            headers: z.record(z.string()).optional(),
            methods: z.array(z.string()).optional(),
            continue: z.boolean().optional(),
            override: z.boolean().optional(),
            caseSensitive: z.boolean().optional(),
            check: z.boolean().optional(),
            important: z.boolean().optional(),
            status: z.number().optional(),
            has: z
                .array(
                    z.union([
                        z.lazy(() => CancelDeploymentHas1$.outboundSchema),
                        z.lazy(() => CancelDeploymentHas2$.outboundSchema),
                    ])
                )
                .optional(),
            missing: z
                .array(
                    z.union([
                        z.lazy(() => CancelDeploymentMissing1$.outboundSchema),
                        z.lazy(() => CancelDeploymentMissing2$.outboundSchema),
                    ])
                )
                .optional(),
            locale: z.lazy(() => RoutesLocale$.outboundSchema).optional(),
            middlewarePath: z.string().optional(),
            middlewareRawSrc: z.array(z.string()).optional(),
            middleware: z.number().optional(),
        })
        .transform((v) => {
            return {
                src: v.src,
                ...(v.dest === undefined ? null : { dest: v.dest }),
                ...(v.headers === undefined ? null : { headers: v.headers }),
                ...(v.methods === undefined ? null : { methods: v.methods }),
                ...(v.continue === undefined ? null : { continue: v.continue }),
                ...(v.override === undefined ? null : { override: v.override }),
                ...(v.caseSensitive === undefined ? null : { caseSensitive: v.caseSensitive }),
                ...(v.check === undefined ? null : { check: v.check }),
                ...(v.important === undefined ? null : { important: v.important }),
                ...(v.status === undefined ? null : { status: v.status }),
                ...(v.has === undefined ? null : { has: v.has }),
                ...(v.missing === undefined ? null : { missing: v.missing }),
                ...(v.locale === undefined ? null : { locale: v.locale }),
                ...(v.middlewarePath === undefined ? null : { middlewarePath: v.middlewarePath }),
                ...(v.middlewareRawSrc === undefined
                    ? null
                    : { middlewareRawSrc: v.middlewareRawSrc }),
                ...(v.middleware === undefined ? null : { middleware: v.middleware }),
            };
        });
}

/** @internal */
export namespace CancelDeploymentRoutes$ {
    export const inboundSchema: z.ZodType<CancelDeploymentRoutes, z.ZodTypeDef, unknown> = z.union([
        z.lazy(() => CancelDeploymentRoutes3$.inboundSchema),
        z.lazy(() => CancelDeploymentRoutes2$.inboundSchema),
        z.lazy(() => CancelDeploymentRoutes1$.inboundSchema),
    ]);

    export type Outbound =
        | CancelDeploymentRoutes3$.Outbound
        | CancelDeploymentRoutes2$.Outbound
        | CancelDeploymentRoutes1$.Outbound;
    export const outboundSchema: z.ZodType<Outbound, z.ZodTypeDef, CancelDeploymentRoutes> =
        z.union([
            z.lazy(() => CancelDeploymentRoutes3$.outboundSchema),
            z.lazy(() => CancelDeploymentRoutes2$.outboundSchema),
            z.lazy(() => CancelDeploymentRoutes1$.outboundSchema),
        ]);
}

/** @internal */
export namespace CancelDeploymentGitRepoDeploymentsResponseType$ {
    export const inboundSchema = z.nativeEnum(CancelDeploymentGitRepoDeploymentsResponseType);
    export const outboundSchema = inboundSchema;
}

/** @internal */
export namespace CancelDeploymentGitRepoDeploymentsResponseOwnerType$ {
    export const inboundSchema = z.nativeEnum(CancelDeploymentGitRepoDeploymentsResponseOwnerType);
    export const outboundSchema = inboundSchema;
}

/** @internal */
export namespace CancelDeploymentGitRepo3$ {
    export const inboundSchema: z.ZodType<CancelDeploymentGitRepo3, z.ZodTypeDef, unknown> = z
        .object({
            owner: z.string(),
            repoUuid: z.string(),
            slug: z.string(),
            type: CancelDeploymentGitRepoDeploymentsResponseType$.inboundSchema,
            workspaceUuid: z.string(),
            path: z.string(),
            defaultBranch: z.string(),
            name: z.string(),
            private: z.boolean(),
            ownerType: CancelDeploymentGitRepoDeploymentsResponseOwnerType$.inboundSchema,
        })
        .transform((v) => {
            return {
                owner: v.owner,
                repoUuid: v.repoUuid,
                slug: v.slug,
                type: v.type,
                workspaceUuid: v.workspaceUuid,
                path: v.path,
                defaultBranch: v.defaultBranch,
                name: v.name,
                private: v.private,
                ownerType: v.ownerType,
            };
        });

    export type Outbound = {
        owner: string;
        repoUuid: string;
        slug: string;
        type: string;
        workspaceUuid: string;
        path: string;
        defaultBranch: string;
        name: string;
        private: boolean;
        ownerType: string;
    };

    export const outboundSchema: z.ZodType<Outbound, z.ZodTypeDef, CancelDeploymentGitRepo3> = z
        .object({
            owner: z.string(),
            repoUuid: z.string(),
            slug: z.string(),
            type: CancelDeploymentGitRepoDeploymentsResponseType$.outboundSchema,
            workspaceUuid: z.string(),
            path: z.string(),
            defaultBranch: z.string(),
            name: z.string(),
            private: z.boolean(),
            ownerType: CancelDeploymentGitRepoDeploymentsResponseOwnerType$.outboundSchema,
        })
        .transform((v) => {
            return {
                owner: v.owner,
                repoUuid: v.repoUuid,
                slug: v.slug,
                type: v.type,
                workspaceUuid: v.workspaceUuid,
                path: v.path,
                defaultBranch: v.defaultBranch,
                name: v.name,
                private: v.private,
                ownerType: v.ownerType,
            };
        });
}

/** @internal */
export namespace CancelDeploymentGitRepoDeploymentsType$ {
    export const inboundSchema = z.nativeEnum(CancelDeploymentGitRepoDeploymentsType);
    export const outboundSchema = inboundSchema;
}

/** @internal */
export namespace CancelDeploymentGitRepoDeploymentsOwnerType$ {
    export const inboundSchema = z.nativeEnum(CancelDeploymentGitRepoDeploymentsOwnerType);
    export const outboundSchema = inboundSchema;
}

/** @internal */
export namespace CancelDeploymentGitRepo2$ {
    export const inboundSchema: z.ZodType<CancelDeploymentGitRepo2, z.ZodTypeDef, unknown> = z
        .object({
            org: z.string(),
            repo: z.string(),
            repoId: z.number(),
            type: CancelDeploymentGitRepoDeploymentsType$.inboundSchema,
            repoOwnerId: z.string(),
            path: z.string(),
            defaultBranch: z.string(),
            name: z.string(),
            private: z.boolean(),
            ownerType: CancelDeploymentGitRepoDeploymentsOwnerType$.inboundSchema,
        })
        .transform((v) => {
            return {
                org: v.org,
                repo: v.repo,
                repoId: v.repoId,
                type: v.type,
                repoOwnerId: v.repoOwnerId,
                path: v.path,
                defaultBranch: v.defaultBranch,
                name: v.name,
                private: v.private,
                ownerType: v.ownerType,
            };
        });

    export type Outbound = {
        org: string;
        repo: string;
        repoId: number;
        type: string;
        repoOwnerId: string;
        path: string;
        defaultBranch: string;
        name: string;
        private: boolean;
        ownerType: string;
    };

    export const outboundSchema: z.ZodType<Outbound, z.ZodTypeDef, CancelDeploymentGitRepo2> = z
        .object({
            org: z.string(),
            repo: z.string(),
            repoId: z.number(),
            type: CancelDeploymentGitRepoDeploymentsType$.outboundSchema,
            repoOwnerId: z.string(),
            path: z.string(),
            defaultBranch: z.string(),
            name: z.string(),
            private: z.boolean(),
            ownerType: CancelDeploymentGitRepoDeploymentsOwnerType$.outboundSchema,
        })
        .transform((v) => {
            return {
                org: v.org,
                repo: v.repo,
                repoId: v.repoId,
                type: v.type,
                repoOwnerId: v.repoOwnerId,
                path: v.path,
                defaultBranch: v.defaultBranch,
                name: v.name,
                private: v.private,
                ownerType: v.ownerType,
            };
        });
}

/** @internal */
export namespace CancelDeploymentGitRepoType$ {
    export const inboundSchema = z.nativeEnum(CancelDeploymentGitRepoType);
    export const outboundSchema = inboundSchema;
}

/** @internal */
export namespace CancelDeploymentGitRepoOwnerType$ {
    export const inboundSchema = z.nativeEnum(CancelDeploymentGitRepoOwnerType);
    export const outboundSchema = inboundSchema;
}

/** @internal */
export namespace CancelDeploymentGitRepo1$ {
    export const inboundSchema: z.ZodType<CancelDeploymentGitRepo1, z.ZodTypeDef, unknown> = z
        .object({
            namespace: z.string(),
            projectId: z.number(),
            type: CancelDeploymentGitRepoType$.inboundSchema,
            url: z.string(),
            path: z.string(),
            defaultBranch: z.string(),
            name: z.string(),
            private: z.boolean(),
            ownerType: CancelDeploymentGitRepoOwnerType$.inboundSchema,
        })
        .transform((v) => {
            return {
                namespace: v.namespace,
                projectId: v.projectId,
                type: v.type,
                url: v.url,
                path: v.path,
                defaultBranch: v.defaultBranch,
                name: v.name,
                private: v.private,
                ownerType: v.ownerType,
            };
        });

    export type Outbound = {
        namespace: string;
        projectId: number;
        type: string;
        url: string;
        path: string;
        defaultBranch: string;
        name: string;
        private: boolean;
        ownerType: string;
    };

    export const outboundSchema: z.ZodType<Outbound, z.ZodTypeDef, CancelDeploymentGitRepo1> = z
        .object({
            namespace: z.string(),
            projectId: z.number(),
            type: CancelDeploymentGitRepoType$.outboundSchema,
            url: z.string(),
            path: z.string(),
            defaultBranch: z.string(),
            name: z.string(),
            private: z.boolean(),
            ownerType: CancelDeploymentGitRepoOwnerType$.outboundSchema,
        })
        .transform((v) => {
            return {
                namespace: v.namespace,
                projectId: v.projectId,
                type: v.type,
                url: v.url,
                path: v.path,
                defaultBranch: v.defaultBranch,
                name: v.name,
                private: v.private,
                ownerType: v.ownerType,
            };
        });
}

/** @internal */
export namespace CancelDeploymentGitRepo$ {
    export const inboundSchema: z.ZodType<CancelDeploymentGitRepo, z.ZodTypeDef, unknown> = z.union(
        [
            z.lazy(() => CancelDeploymentGitRepo1$.inboundSchema),
            z.lazy(() => CancelDeploymentGitRepo2$.inboundSchema),
            z.lazy(() => CancelDeploymentGitRepo3$.inboundSchema),
        ]
    );

    export type Outbound =
        | CancelDeploymentGitRepo1$.Outbound
        | CancelDeploymentGitRepo2$.Outbound
        | CancelDeploymentGitRepo3$.Outbound;
    export const outboundSchema: z.ZodType<Outbound, z.ZodTypeDef, CancelDeploymentGitRepo> =
        z.union([
            z.lazy(() => CancelDeploymentGitRepo1$.outboundSchema),
            z.lazy(() => CancelDeploymentGitRepo2$.outboundSchema),
            z.lazy(() => CancelDeploymentGitRepo3$.outboundSchema),
        ]);
}

/** @internal */
export namespace CancelDeploymentAliasAssignedAt$ {
    export const inboundSchema: z.ZodType<CancelDeploymentAliasAssignedAt, z.ZodTypeDef, unknown> =
        z.union([z.number(), z.boolean()]);

    export type Outbound = number | boolean;
    export const outboundSchema: z.ZodType<
        Outbound,
        z.ZodTypeDef,
        CancelDeploymentAliasAssignedAt
    > = z.union([z.number(), z.boolean()]);
}

/** @internal */
export namespace CancelDeploymentDeploymentsReadyState$ {
    export const inboundSchema = z.nativeEnum(CancelDeploymentDeploymentsReadyState);
    export const outboundSchema = inboundSchema;
}

/** @internal */
export namespace CancelDeploymentOutput$ {
    export const inboundSchema: z.ZodType<CancelDeploymentOutput, z.ZodTypeDef, unknown> = z
        .object({
            path: z.string(),
            functionName: z.string(),
        })
        .transform((v) => {
            return {
                path: v.path,
                functionName: v.functionName,
            };
        });

    export type Outbound = {
        path: string;
        functionName: string;
    };

    export const outboundSchema: z.ZodType<Outbound, z.ZodTypeDef, CancelDeploymentOutput> = z
        .object({
            path: z.string(),
            functionName: z.string(),
        })
        .transform((v) => {
            return {
                path: v.path,
                functionName: v.functionName,
            };
        });
}

/** @internal */
export namespace CancelDeploymentLambdas$ {
    export const inboundSchema: z.ZodType<CancelDeploymentLambdas, z.ZodTypeDef, unknown> = z
        .object({
            id: z.string(),
            createdAt: z.number().optional(),
            entrypoint: z.nullable(z.string()).optional(),
            readyState: CancelDeploymentDeploymentsReadyState$.inboundSchema.optional(),
            readyStateAt: z.number().optional(),
            output: z.array(z.lazy(() => CancelDeploymentOutput$.inboundSchema)),
        })
        .transform((v) => {
            return {
                id: v.id,
                ...(v.createdAt === undefined ? null : { createdAt: v.createdAt }),
                ...(v.entrypoint === undefined ? null : { entrypoint: v.entrypoint }),
                ...(v.readyState === undefined ? null : { readyState: v.readyState }),
                ...(v.readyStateAt === undefined ? null : { readyStateAt: v.readyStateAt }),
                output: v.output,
            };
        });

    export type Outbound = {
        id: string;
        createdAt?: number | undefined;
        entrypoint?: string | null | undefined;
        readyState?: string | undefined;
        readyStateAt?: number | undefined;
        output: Array<CancelDeploymentOutput$.Outbound>;
    };

    export const outboundSchema: z.ZodType<Outbound, z.ZodTypeDef, CancelDeploymentLambdas> = z
        .object({
            id: z.string(),
            createdAt: z.number().optional(),
            entrypoint: z.nullable(z.string()).optional(),
            readyState: CancelDeploymentDeploymentsReadyState$.outboundSchema.optional(),
            readyStateAt: z.number().optional(),
            output: z.array(z.lazy(() => CancelDeploymentOutput$.outboundSchema)),
        })
        .transform((v) => {
            return {
                id: v.id,
                ...(v.createdAt === undefined ? null : { createdAt: v.createdAt }),
                ...(v.entrypoint === undefined ? null : { entrypoint: v.entrypoint }),
                ...(v.readyState === undefined ? null : { readyState: v.readyState }),
                ...(v.readyStateAt === undefined ? null : { readyStateAt: v.readyStateAt }),
                output: v.output,
            };
        });
}

/** @internal */
export namespace CancelDeploymentProject$ {
    export const inboundSchema: z.ZodType<CancelDeploymentProject, z.ZodTypeDef, unknown> = z
        .object({
            id: z.string(),
            name: z.string(),
            framework: z.nullable(z.string()).optional(),
        })
        .transform((v) => {
            return {
                id: v.id,
                name: v.name,
                ...(v.framework === undefined ? null : { framework: v.framework }),
            };
        });

    export type Outbound = {
        id: string;
        name: string;
        framework?: string | null | undefined;
    };

    export const outboundSchema: z.ZodType<Outbound, z.ZodTypeDef, CancelDeploymentProject> = z
        .object({
            id: z.string(),
            name: z.string(),
            framework: z.nullable(z.string()).optional(),
        })
        .transform((v) => {
            return {
                id: v.id,
                name: v.name,
                ...(v.framework === undefined ? null : { framework: v.framework }),
            };
        });
}

/** @internal */
export namespace CancelDeploymentReadyState$ {
    export const inboundSchema = z.nativeEnum(CancelDeploymentReadyState);
    export const outboundSchema = inboundSchema;
}

/** @internal */
export namespace CancelDeploymentReadySubstate$ {
    export const inboundSchema = z.nativeEnum(CancelDeploymentReadySubstate);
    export const outboundSchema = inboundSchema;
}

/** @internal */
export namespace CancelDeploymentSource$ {
    export const inboundSchema = z.nativeEnum(CancelDeploymentSource);
    export const outboundSchema = inboundSchema;
}

/** @internal */
export namespace CancelDeploymentTarget$ {
    export const inboundSchema = z.nativeEnum(CancelDeploymentTarget);
    export const outboundSchema = inboundSchema;
}

/** @internal */
export namespace CancelDeploymentTeam$ {
    export const inboundSchema: z.ZodType<CancelDeploymentTeam, z.ZodTypeDef, unknown> = z
        .object({
            id: z.string(),
            name: z.string(),
            slug: z.string(),
            avatar: z.string().optional(),
        })
        .transform((v) => {
            return {
                id: v.id,
                name: v.name,
                slug: v.slug,
                ...(v.avatar === undefined ? null : { avatar: v.avatar }),
            };
        });

    export type Outbound = {
        id: string;
        name: string;
        slug: string;
        avatar?: string | undefined;
    };

    export const outboundSchema: z.ZodType<Outbound, z.ZodTypeDef, CancelDeploymentTeam> = z
        .object({
            id: z.string(),
            name: z.string(),
            slug: z.string(),
            avatar: z.string().optional(),
        })
        .transform((v) => {
            return {
                id: v.id,
                name: v.name,
                slug: v.slug,
                ...(v.avatar === undefined ? null : { avatar: v.avatar }),
            };
        });
}

/** @internal */
export namespace CancelDeploymentType$ {
    export const inboundSchema = z.nativeEnum(CancelDeploymentType);
    export const outboundSchema = inboundSchema;
}

/** @internal */
export namespace CancelDeploymentAliasError$ {
    export const inboundSchema: z.ZodType<CancelDeploymentAliasError, z.ZodTypeDef, unknown> = z
        .object({
            code: z.string(),
            message: z.string(),
        })
        .transform((v) => {
            return {
                code: v.code,
                message: v.message,
            };
        });

    export type Outbound = {
        code: string;
        message: string;
    };

    export const outboundSchema: z.ZodType<Outbound, z.ZodTypeDef, CancelDeploymentAliasError> = z
        .object({
            code: z.string(),
            message: z.string(),
        })
        .transform((v) => {
            return {
                code: v.code,
                message: v.message,
            };
        });
}

/** @internal */
export namespace CancelDeploymentAliasWarning$ {
    export const inboundSchema: z.ZodType<CancelDeploymentAliasWarning, z.ZodTypeDef, unknown> = z
        .object({
            code: z.string(),
            message: z.string(),
            link: z.string().optional(),
            action: z.string().optional(),
        })
        .transform((v) => {
            return {
                code: v.code,
                message: v.message,
                ...(v.link === undefined ? null : { link: v.link }),
                ...(v.action === undefined ? null : { action: v.action }),
            };
        });

    export type Outbound = {
        code: string;
        message: string;
        link?: string | undefined;
        action?: string | undefined;
    };

    export const outboundSchema: z.ZodType<Outbound, z.ZodTypeDef, CancelDeploymentAliasWarning> = z
        .object({
            code: z.string(),
            message: z.string(),
            link: z.string().optional(),
            action: z.string().optional(),
        })
        .transform((v) => {
            return {
                code: v.code,
                message: v.message,
                ...(v.link === undefined ? null : { link: v.link }),
                ...(v.action === undefined ? null : { action: v.action }),
            };
        });
}

/** @internal */
export namespace CancelDeploymentChecksState$ {
    export const inboundSchema = z.nativeEnum(CancelDeploymentChecksState);
    export const outboundSchema = inboundSchema;
}

/** @internal */
export namespace CancelDeploymentChecksConclusion$ {
    export const inboundSchema = z.nativeEnum(CancelDeploymentChecksConclusion);
    export const outboundSchema = inboundSchema;
}

/** @internal */
export namespace CancelDeploymentCreator$ {
    export const inboundSchema: z.ZodType<CancelDeploymentCreator, z.ZodTypeDef, unknown> = z
        .object({
            uid: z.string(),
            username: z.string().optional(),
            avatar: z.string().optional(),
        })
        .transform((v) => {
            return {
                uid: v.uid,
                ...(v.username === undefined ? null : { username: v.username }),
                ...(v.avatar === undefined ? null : { avatar: v.avatar }),
            };
        });

    export type Outbound = {
        uid: string;
        username?: string | undefined;
        avatar?: string | undefined;
    };

    export const outboundSchema: z.ZodType<Outbound, z.ZodTypeDef, CancelDeploymentCreator> = z
        .object({
            uid: z.string(),
            username: z.string().optional(),
            avatar: z.string().optional(),
        })
        .transform((v) => {
            return {
                uid: v.uid,
                ...(v.username === undefined ? null : { username: v.username }),
                ...(v.avatar === undefined ? null : { avatar: v.avatar }),
            };
        });
}

/** @internal */
export namespace CancelDeploymentGitSourceDeploymentsResponse200ApplicationJSONResponseBody9Type$ {
    export const inboundSchema = z.nativeEnum(
        CancelDeploymentGitSourceDeploymentsResponse200ApplicationJSONResponseBody9Type
    );
    export const outboundSchema = inboundSchema;
}

/** @internal */
export namespace GitSource9$ {
    export const inboundSchema: z.ZodType<GitSource9, z.ZodTypeDef, unknown> = z
        .object({
            type: CancelDeploymentGitSourceDeploymentsResponse200ApplicationJSONResponseBody9Type$.inboundSchema,
            ref: z.string(),
            sha: z.string(),
            owner: z.string().optional(),
            slug: z.string().optional(),
            workspaceUuid: z.string(),
            repoUuid: z.string(),
        })
        .transform((v) => {
            return {
                type: v.type,
                ref: v.ref,
                sha: v.sha,
                ...(v.owner === undefined ? null : { owner: v.owner }),
                ...(v.slug === undefined ? null : { slug: v.slug }),
                workspaceUuid: v.workspaceUuid,
                repoUuid: v.repoUuid,
            };
        });

    export type Outbound = {
        type: string;
        ref: string;
        sha: string;
        owner?: string | undefined;
        slug?: string | undefined;
        workspaceUuid: string;
        repoUuid: string;
    };

    export const outboundSchema: z.ZodType<Outbound, z.ZodTypeDef, GitSource9> = z
        .object({
            type: CancelDeploymentGitSourceDeploymentsResponse200ApplicationJSONResponseBody9Type$.outboundSchema,
            ref: z.string(),
            sha: z.string(),
            owner: z.string().optional(),
            slug: z.string().optional(),
            workspaceUuid: z.string(),
            repoUuid: z.string(),
        })
        .transform((v) => {
            return {
                type: v.type,
                ref: v.ref,
                sha: v.sha,
                ...(v.owner === undefined ? null : { owner: v.owner }),
                ...(v.slug === undefined ? null : { slug: v.slug }),
                workspaceUuid: v.workspaceUuid,
                repoUuid: v.repoUuid,
            };
        });
}

/** @internal */
export namespace CancelDeploymentGitSourceDeploymentsResponse200ApplicationJSONResponseBody8Type$ {
    export const inboundSchema = z.nativeEnum(
        CancelDeploymentGitSourceDeploymentsResponse200ApplicationJSONResponseBody8Type
    );
    export const outboundSchema = inboundSchema;
}

/** @internal */
export namespace GitSource8$ {
    export const inboundSchema: z.ZodType<GitSource8, z.ZodTypeDef, unknown> = z
        .object({
            type: CancelDeploymentGitSourceDeploymentsResponse200ApplicationJSONResponseBody8Type$.inboundSchema,
            ref: z.string(),
            sha: z.string(),
            projectId: z.number(),
        })
        .transform((v) => {
            return {
                type: v.type,
                ref: v.ref,
                sha: v.sha,
                projectId: v.projectId,
            };
        });

    export type Outbound = {
        type: string;
        ref: string;
        sha: string;
        projectId: number;
    };

    export const outboundSchema: z.ZodType<Outbound, z.ZodTypeDef, GitSource8> = z
        .object({
            type: CancelDeploymentGitSourceDeploymentsResponse200ApplicationJSONResponseBody8Type$.outboundSchema,
            ref: z.string(),
            sha: z.string(),
            projectId: z.number(),
        })
        .transform((v) => {
            return {
                type: v.type,
                ref: v.ref,
                sha: v.sha,
                projectId: v.projectId,
            };
        });
}

/** @internal */
export namespace CancelDeploymentGitSourceDeploymentsResponse200ApplicationJSONResponseBody7Type$ {
    export const inboundSchema = z.nativeEnum(
        CancelDeploymentGitSourceDeploymentsResponse200ApplicationJSONResponseBody7Type
    );
    export const outboundSchema = inboundSchema;
}

/** @internal */
export namespace GitSource7$ {
    export const inboundSchema: z.ZodType<GitSource7, z.ZodTypeDef, unknown> = z
        .object({
            type: CancelDeploymentGitSourceDeploymentsResponse200ApplicationJSONResponseBody7Type$.inboundSchema,
            ref: z.string(),
            sha: z.string(),
            repoId: z.number(),
            org: z.string().optional(),
            repo: z.string().optional(),
        })
        .transform((v) => {
            return {
                type: v.type,
                ref: v.ref,
                sha: v.sha,
                repoId: v.repoId,
                ...(v.org === undefined ? null : { org: v.org }),
                ...(v.repo === undefined ? null : { repo: v.repo }),
            };
        });

    export type Outbound = {
        type: string;
        ref: string;
        sha: string;
        repoId: number;
        org?: string | undefined;
        repo?: string | undefined;
    };

    export const outboundSchema: z.ZodType<Outbound, z.ZodTypeDef, GitSource7> = z
        .object({
            type: CancelDeploymentGitSourceDeploymentsResponse200ApplicationJSONResponseBody7Type$.outboundSchema,
            ref: z.string(),
            sha: z.string(),
            repoId: z.number(),
            org: z.string().optional(),
            repo: z.string().optional(),
        })
        .transform((v) => {
            return {
                type: v.type,
                ref: v.ref,
                sha: v.sha,
                repoId: v.repoId,
                ...(v.org === undefined ? null : { org: v.org }),
                ...(v.repo === undefined ? null : { repo: v.repo }),
            };
        });
}

/** @internal */
export namespace CancelDeploymentGitSourceDeploymentsResponse200ApplicationJSONResponseBodyType$ {
    export const inboundSchema = z.nativeEnum(
        CancelDeploymentGitSourceDeploymentsResponse200ApplicationJSONResponseBodyType
    );
    export const outboundSchema = inboundSchema;
}

/** @internal */
export namespace GitSource6$ {
    export const inboundSchema: z.ZodType<GitSource6, z.ZodTypeDef, unknown> = z
        .object({
            type: CancelDeploymentGitSourceDeploymentsResponse200ApplicationJSONResponseBodyType$.inboundSchema,
            ref: z.string(),
            sha: z.string(),
            gitUrl: z.string(),
        })
        .transform((v) => {
            return {
                type: v.type,
                ref: v.ref,
                sha: v.sha,
                gitUrl: v.gitUrl,
            };
        });

    export type Outbound = {
        type: string;
        ref: string;
        sha: string;
        gitUrl: string;
    };

    export const outboundSchema: z.ZodType<Outbound, z.ZodTypeDef, GitSource6> = z
        .object({
            type: CancelDeploymentGitSourceDeploymentsResponse200ApplicationJSONResponseBodyType$.outboundSchema,
            ref: z.string(),
            sha: z.string(),
            gitUrl: z.string(),
        })
        .transform((v) => {
            return {
                type: v.type,
                ref: v.ref,
                sha: v.sha,
                gitUrl: v.gitUrl,
            };
        });
}

/** @internal */
export namespace CancelDeploymentGitSourceDeploymentsResponse200ApplicationJSONType$ {
    export const inboundSchema = z.nativeEnum(
        CancelDeploymentGitSourceDeploymentsResponse200ApplicationJSONType
    );
    export const outboundSchema = inboundSchema;
}

/** @internal */
export namespace CancelDeploymentGitSource5$ {
    export const inboundSchema: z.ZodType<CancelDeploymentGitSource5, z.ZodTypeDef, unknown> = z
        .object({
            type: CancelDeploymentGitSourceDeploymentsResponse200ApplicationJSONType$.inboundSchema,
            owner: z.string(),
            slug: z.string(),
            ref: z.nullable(z.string()).optional(),
            sha: z.string().optional(),
            prId: z.nullable(z.number()).optional(),
        })
        .transform((v) => {
            return {
                type: v.type,
                owner: v.owner,
                slug: v.slug,
                ...(v.ref === undefined ? null : { ref: v.ref }),
                ...(v.sha === undefined ? null : { sha: v.sha }),
                ...(v.prId === undefined ? null : { prId: v.prId }),
            };
        });

    export type Outbound = {
        type: string;
        owner: string;
        slug: string;
        ref?: string | null | undefined;
        sha?: string | undefined;
        prId?: number | null | undefined;
    };

    export const outboundSchema: z.ZodType<Outbound, z.ZodTypeDef, CancelDeploymentGitSource5> = z
        .object({
            type: CancelDeploymentGitSourceDeploymentsResponse200ApplicationJSONType$.outboundSchema,
            owner: z.string(),
            slug: z.string(),
            ref: z.nullable(z.string()).optional(),
            sha: z.string().optional(),
            prId: z.nullable(z.number()).optional(),
        })
        .transform((v) => {
            return {
                type: v.type,
                owner: v.owner,
                slug: v.slug,
                ...(v.ref === undefined ? null : { ref: v.ref }),
                ...(v.sha === undefined ? null : { sha: v.sha }),
                ...(v.prId === undefined ? null : { prId: v.prId }),
            };
        });
}

/** @internal */
export namespace CancelDeploymentGitSourceDeploymentsResponse200Type$ {
    export const inboundSchema = z.nativeEnum(CancelDeploymentGitSourceDeploymentsResponse200Type);
    export const outboundSchema = inboundSchema;
}

/** @internal */
export namespace CancelDeploymentGitSource4$ {
    export const inboundSchema: z.ZodType<CancelDeploymentGitSource4, z.ZodTypeDef, unknown> = z
        .object({
            type: CancelDeploymentGitSourceDeploymentsResponse200Type$.inboundSchema,
            workspaceUuid: z.string().optional(),
            repoUuid: z.string(),
            ref: z.nullable(z.string()).optional(),
            sha: z.string().optional(),
            prId: z.nullable(z.number()).optional(),
        })
        .transform((v) => {
            return {
                type: v.type,
                ...(v.workspaceUuid === undefined ? null : { workspaceUuid: v.workspaceUuid }),
                repoUuid: v.repoUuid,
                ...(v.ref === undefined ? null : { ref: v.ref }),
                ...(v.sha === undefined ? null : { sha: v.sha }),
                ...(v.prId === undefined ? null : { prId: v.prId }),
            };
        });

    export type Outbound = {
        type: string;
        workspaceUuid?: string | undefined;
        repoUuid: string;
        ref?: string | null | undefined;
        sha?: string | undefined;
        prId?: number | null | undefined;
    };

    export const outboundSchema: z.ZodType<Outbound, z.ZodTypeDef, CancelDeploymentGitSource4> = z
        .object({
            type: CancelDeploymentGitSourceDeploymentsResponse200Type$.outboundSchema,
            workspaceUuid: z.string().optional(),
            repoUuid: z.string(),
            ref: z.nullable(z.string()).optional(),
            sha: z.string().optional(),
            prId: z.nullable(z.number()).optional(),
        })
        .transform((v) => {
            return {
                type: v.type,
                ...(v.workspaceUuid === undefined ? null : { workspaceUuid: v.workspaceUuid }),
                repoUuid: v.repoUuid,
                ...(v.ref === undefined ? null : { ref: v.ref }),
                ...(v.sha === undefined ? null : { sha: v.sha }),
                ...(v.prId === undefined ? null : { prId: v.prId }),
            };
        });
}

/** @internal */
export namespace CancelDeploymentGitSourceDeploymentsResponseType$ {
    export const inboundSchema = z.nativeEnum(CancelDeploymentGitSourceDeploymentsResponseType);
    export const outboundSchema = inboundSchema;
}

/** @internal */
export namespace CancelDeploymentGitSourceProjectId$ {
    export const inboundSchema: z.ZodType<
        CancelDeploymentGitSourceProjectId,
        z.ZodTypeDef,
        unknown
    > = z.union([z.string(), z.number()]);

    export type Outbound = string | number;
    export const outboundSchema: z.ZodType<
        Outbound,
        z.ZodTypeDef,
        CancelDeploymentGitSourceProjectId
    > = z.union([z.string(), z.number()]);
}

/** @internal */
export namespace CancelDeploymentGitSource3$ {
    export const inboundSchema: z.ZodType<CancelDeploymentGitSource3, z.ZodTypeDef, unknown> = z
        .object({
            type: CancelDeploymentGitSourceDeploymentsResponseType$.inboundSchema,
            projectId: z.union([z.string(), z.number()]),
            ref: z.nullable(z.string()).optional(),
            sha: z.string().optional(),
            prId: z.nullable(z.number()).optional(),
        })
        .transform((v) => {
            return {
                type: v.type,
                projectId: v.projectId,
                ...(v.ref === undefined ? null : { ref: v.ref }),
                ...(v.sha === undefined ? null : { sha: v.sha }),
                ...(v.prId === undefined ? null : { prId: v.prId }),
            };
        });

    export type Outbound = {
        type: string;
        projectId: string | number;
        ref?: string | null | undefined;
        sha?: string | undefined;
        prId?: number | null | undefined;
    };

    export const outboundSchema: z.ZodType<Outbound, z.ZodTypeDef, CancelDeploymentGitSource3> = z
        .object({
            type: CancelDeploymentGitSourceDeploymentsResponseType$.outboundSchema,
            projectId: z.union([z.string(), z.number()]),
            ref: z.nullable(z.string()).optional(),
            sha: z.string().optional(),
            prId: z.nullable(z.number()).optional(),
        })
        .transform((v) => {
            return {
                type: v.type,
                projectId: v.projectId,
                ...(v.ref === undefined ? null : { ref: v.ref }),
                ...(v.sha === undefined ? null : { sha: v.sha }),
                ...(v.prId === undefined ? null : { prId: v.prId }),
            };
        });
}

/** @internal */
export namespace CancelDeploymentGitSourceDeploymentsType$ {
    export const inboundSchema = z.nativeEnum(CancelDeploymentGitSourceDeploymentsType);
    export const outboundSchema = inboundSchema;
}

/** @internal */
export namespace CancelDeploymentGitSource2$ {
    export const inboundSchema: z.ZodType<CancelDeploymentGitSource2, z.ZodTypeDef, unknown> = z
        .object({
            type: CancelDeploymentGitSourceDeploymentsType$.inboundSchema,
            org: z.string(),
            repo: z.string(),
            ref: z.nullable(z.string()).optional(),
            sha: z.string().optional(),
            prId: z.nullable(z.number()).optional(),
        })
        .transform((v) => {
            return {
                type: v.type,
                org: v.org,
                repo: v.repo,
                ...(v.ref === undefined ? null : { ref: v.ref }),
                ...(v.sha === undefined ? null : { sha: v.sha }),
                ...(v.prId === undefined ? null : { prId: v.prId }),
            };
        });

    export type Outbound = {
        type: string;
        org: string;
        repo: string;
        ref?: string | null | undefined;
        sha?: string | undefined;
        prId?: number | null | undefined;
    };

    export const outboundSchema: z.ZodType<Outbound, z.ZodTypeDef, CancelDeploymentGitSource2> = z
        .object({
            type: CancelDeploymentGitSourceDeploymentsType$.outboundSchema,
            org: z.string(),
            repo: z.string(),
            ref: z.nullable(z.string()).optional(),
            sha: z.string().optional(),
            prId: z.nullable(z.number()).optional(),
        })
        .transform((v) => {
            return {
                type: v.type,
                org: v.org,
                repo: v.repo,
                ...(v.ref === undefined ? null : { ref: v.ref }),
                ...(v.sha === undefined ? null : { sha: v.sha }),
                ...(v.prId === undefined ? null : { prId: v.prId }),
            };
        });
}

/** @internal */
export namespace CancelDeploymentGitSourceType$ {
    export const inboundSchema = z.nativeEnum(CancelDeploymentGitSourceType);
    export const outboundSchema = inboundSchema;
}

/** @internal */
export namespace CancelDeploymentGitSourceRepoId$ {
    export const inboundSchema: z.ZodType<CancelDeploymentGitSourceRepoId, z.ZodTypeDef, unknown> =
        z.union([z.string(), z.number()]);

    export type Outbound = string | number;
    export const outboundSchema: z.ZodType<
        Outbound,
        z.ZodTypeDef,
        CancelDeploymentGitSourceRepoId
    > = z.union([z.string(), z.number()]);
}

/** @internal */
export namespace CancelDeploymentGitSource1$ {
    export const inboundSchema: z.ZodType<CancelDeploymentGitSource1, z.ZodTypeDef, unknown> = z
        .object({
            type: CancelDeploymentGitSourceType$.inboundSchema,
            repoId: z.union([z.string(), z.number()]),
            ref: z.nullable(z.string()).optional(),
            sha: z.string().optional(),
            prId: z.nullable(z.number()).optional(),
        })
        .transform((v) => {
            return {
                type: v.type,
                repoId: v.repoId,
                ...(v.ref === undefined ? null : { ref: v.ref }),
                ...(v.sha === undefined ? null : { sha: v.sha }),
                ...(v.prId === undefined ? null : { prId: v.prId }),
            };
        });

    export type Outbound = {
        type: string;
        repoId: string | number;
        ref?: string | null | undefined;
        sha?: string | undefined;
        prId?: number | null | undefined;
    };

    export const outboundSchema: z.ZodType<Outbound, z.ZodTypeDef, CancelDeploymentGitSource1> = z
        .object({
            type: CancelDeploymentGitSourceType$.outboundSchema,
            repoId: z.union([z.string(), z.number()]),
            ref: z.nullable(z.string()).optional(),
            sha: z.string().optional(),
            prId: z.nullable(z.number()).optional(),
        })
        .transform((v) => {
            return {
                type: v.type,
                repoId: v.repoId,
                ...(v.ref === undefined ? null : { ref: v.ref }),
                ...(v.sha === undefined ? null : { sha: v.sha }),
                ...(v.prId === undefined ? null : { prId: v.prId }),
            };
        });
}

/** @internal */
export namespace CancelDeploymentGitSource$ {
    export const inboundSchema: z.ZodType<CancelDeploymentGitSource, z.ZodTypeDef, unknown> =
        z.union([
            z.lazy(() => GitSource6$.inboundSchema),
            z.lazy(() => GitSource8$.inboundSchema),
            z.lazy(() => CancelDeploymentGitSource1$.inboundSchema),
            z.lazy(() => CancelDeploymentGitSource3$.inboundSchema),
            z.lazy(() => CancelDeploymentGitSource2$.inboundSchema),
            z.lazy(() => CancelDeploymentGitSource4$.inboundSchema),
            z.lazy(() => CancelDeploymentGitSource5$.inboundSchema),
            z.lazy(() => GitSource7$.inboundSchema),
            z.lazy(() => GitSource9$.inboundSchema),
        ]);

    export type Outbound =
        | GitSource6$.Outbound
        | GitSource8$.Outbound
        | CancelDeploymentGitSource1$.Outbound
        | CancelDeploymentGitSource3$.Outbound
        | CancelDeploymentGitSource2$.Outbound
        | CancelDeploymentGitSource4$.Outbound
        | CancelDeploymentGitSource5$.Outbound
        | GitSource7$.Outbound
        | GitSource9$.Outbound;
    export const outboundSchema: z.ZodType<Outbound, z.ZodTypeDef, CancelDeploymentGitSource> =
        z.union([
            z.lazy(() => GitSource6$.outboundSchema),
            z.lazy(() => GitSource8$.outboundSchema),
            z.lazy(() => CancelDeploymentGitSource1$.outboundSchema),
            z.lazy(() => CancelDeploymentGitSource3$.outboundSchema),
            z.lazy(() => CancelDeploymentGitSource2$.outboundSchema),
            z.lazy(() => CancelDeploymentGitSource4$.outboundSchema),
            z.lazy(() => CancelDeploymentGitSource5$.outboundSchema),
            z.lazy(() => GitSource7$.outboundSchema),
            z.lazy(() => GitSource9$.outboundSchema),
        ]);
}

/** @internal */
export namespace CancelDeploymentResponseBody$ {
    export const inboundSchema: z.ZodType<CancelDeploymentResponseBody, z.ZodTypeDef, unknown> = z
        .object({
            build: z.lazy(() => CancelDeploymentBuild$.inboundSchema),
            builds: z.array(z.lazy(() => CancelDeploymentBuilds$.inboundSchema)).optional(),
            connectBuildsEnabled: z.boolean().optional(),
            connectConfigurationId: z.string().optional(),
            createdIn: z.string(),
            crons: z.array(z.lazy(() => CancelDeploymentCrons$.inboundSchema)).optional(),
            env: z.array(z.string()),
            functions: z
                .nullable(z.record(z.lazy(() => CancelDeploymentFunctions$.inboundSchema)))
                .optional(),
            inspectorUrl: z.nullable(z.string()),
            isInConcurrentBuildsQueue: z.boolean(),
            meta: z.record(z.string()),
            monorepoManager: z.nullable(z.string()).optional(),
            name: z.string(),
            ownerId: z.string(),
            passiveConnectConfigurationId: z.string().optional(),
            plan: CancelDeploymentPlan$.inboundSchema,
            projectId: z.string(),
            routes: z.nullable(
                z.array(
                    z.union([
                        z.lazy(() => CancelDeploymentRoutes3$.inboundSchema),
                        z.lazy(() => CancelDeploymentRoutes2$.inboundSchema),
                        z.lazy(() => CancelDeploymentRoutes1$.inboundSchema),
                    ])
                )
            ),
            gitRepo: z
                .nullable(
                    z.union([
                        z.lazy(() => CancelDeploymentGitRepo1$.inboundSchema),
                        z.lazy(() => CancelDeploymentGitRepo2$.inboundSchema),
                        z.lazy(() => CancelDeploymentGitRepo3$.inboundSchema),
                    ])
                )
                .optional(),
            aliasAssignedAt: z.nullable(z.union([z.number(), z.boolean()])).optional(),
            lambdas: z.array(z.lazy(() => CancelDeploymentLambdas$.inboundSchema)).optional(),
            project: z.lazy(() => CancelDeploymentProject$.inboundSchema).optional(),
            public: z.boolean(),
            readyState: CancelDeploymentReadyState$.inboundSchema,
            readySubstate: CancelDeploymentReadySubstate$.inboundSchema.optional(),
            regions: z.array(z.string()),
            source: CancelDeploymentSource$.inboundSchema.optional(),
            target: z.nullable(CancelDeploymentTarget$.inboundSchema).optional(),
            team: z.lazy(() => CancelDeploymentTeam$.inboundSchema).optional(),
            type: CancelDeploymentType$.inboundSchema,
            url: z.string(),
            userAliases: z.array(z.string()).optional(),
            version: z.number(),
            previewCommentsEnabled: z.boolean().optional(),
            alias: z.array(z.string()),
            aliasAssigned: z.boolean(),
            aliasError: z
                .nullable(z.lazy(() => CancelDeploymentAliasError$.inboundSchema))
                .optional(),
            aliasFinal: z.nullable(z.string()).optional(),
            aliasWarning: z
                .nullable(z.lazy(() => CancelDeploymentAliasWarning$.inboundSchema))
                .optional(),
            autoAssignCustomDomains: z.boolean().optional(),
            automaticAliases: z.array(z.string()).optional(),
            bootedAt: z.number(),
            buildErrorAt: z.number().optional(),
            buildingAt: z.number(),
            canceledAt: z.number().optional(),
            checksState: CancelDeploymentChecksState$.inboundSchema.optional(),
            checksConclusion: CancelDeploymentChecksConclusion$.inboundSchema.optional(),
            createdAt: z.number(),
            creator: z.lazy(() => CancelDeploymentCreator$.inboundSchema),
            errorCode: z.string().optional(),
            errorLink: z.string().optional(),
            errorMessage: z.nullable(z.string()).optional(),
            errorStep: z.string().optional(),
            passiveRegions: z.array(z.string()).optional(),
            gitSource: z
                .union([
                    z.lazy(() => GitSource6$.inboundSchema),
                    z.lazy(() => GitSource8$.inboundSchema),
                    z.lazy(() => CancelDeploymentGitSource1$.inboundSchema),
                    z.lazy(() => CancelDeploymentGitSource3$.inboundSchema),
                    z.lazy(() => CancelDeploymentGitSource2$.inboundSchema),
                    z.lazy(() => CancelDeploymentGitSource4$.inboundSchema),
                    z.lazy(() => CancelDeploymentGitSource5$.inboundSchema),
                    z.lazy(() => GitSource7$.inboundSchema),
                    z.lazy(() => GitSource9$.inboundSchema),
                ])
                .optional(),
            id: z.string(),
        })
        .transform((v) => {
            return {
                build: v.build,
                ...(v.builds === undefined ? null : { builds: v.builds }),
                ...(v.connectBuildsEnabled === undefined
                    ? null
                    : { connectBuildsEnabled: v.connectBuildsEnabled }),
                ...(v.connectConfigurationId === undefined
                    ? null
                    : { connectConfigurationId: v.connectConfigurationId }),
                createdIn: v.createdIn,
                ...(v.crons === undefined ? null : { crons: v.crons }),
                env: v.env,
                ...(v.functions === undefined ? null : { functions: v.functions }),
                inspectorUrl: v.inspectorUrl,
                isInConcurrentBuildsQueue: v.isInConcurrentBuildsQueue,
                meta: v.meta,
                ...(v.monorepoManager === undefined
                    ? null
                    : { monorepoManager: v.monorepoManager }),
                name: v.name,
                ownerId: v.ownerId,
                ...(v.passiveConnectConfigurationId === undefined
                    ? null
                    : { passiveConnectConfigurationId: v.passiveConnectConfigurationId }),
                plan: v.plan,
                projectId: v.projectId,
                routes: v.routes,
                ...(v.gitRepo === undefined ? null : { gitRepo: v.gitRepo }),
                ...(v.aliasAssignedAt === undefined
                    ? null
                    : { aliasAssignedAt: v.aliasAssignedAt }),
                ...(v.lambdas === undefined ? null : { lambdas: v.lambdas }),
                ...(v.project === undefined ? null : { project: v.project }),
                public: v.public,
                readyState: v.readyState,
                ...(v.readySubstate === undefined ? null : { readySubstate: v.readySubstate }),
                regions: v.regions,
                ...(v.source === undefined ? null : { source: v.source }),
                ...(v.target === undefined ? null : { target: v.target }),
                ...(v.team === undefined ? null : { team: v.team }),
                type: v.type,
                url: v.url,
                ...(v.userAliases === undefined ? null : { userAliases: v.userAliases }),
                version: v.version,
                ...(v.previewCommentsEnabled === undefined
                    ? null
                    : { previewCommentsEnabled: v.previewCommentsEnabled }),
                alias: v.alias,
                aliasAssigned: v.aliasAssigned,
                ...(v.aliasError === undefined ? null : { aliasError: v.aliasError }),
                ...(v.aliasFinal === undefined ? null : { aliasFinal: v.aliasFinal }),
                ...(v.aliasWarning === undefined ? null : { aliasWarning: v.aliasWarning }),
                ...(v.autoAssignCustomDomains === undefined
                    ? null
                    : { autoAssignCustomDomains: v.autoAssignCustomDomains }),
                ...(v.automaticAliases === undefined
                    ? null
                    : { automaticAliases: v.automaticAliases }),
                bootedAt: v.bootedAt,
                ...(v.buildErrorAt === undefined ? null : { buildErrorAt: v.buildErrorAt }),
                buildingAt: v.buildingAt,
                ...(v.canceledAt === undefined ? null : { canceledAt: v.canceledAt }),
                ...(v.checksState === undefined ? null : { checksState: v.checksState }),
                ...(v.checksConclusion === undefined
                    ? null
                    : { checksConclusion: v.checksConclusion }),
                createdAt: v.createdAt,
                creator: v.creator,
                ...(v.errorCode === undefined ? null : { errorCode: v.errorCode }),
                ...(v.errorLink === undefined ? null : { errorLink: v.errorLink }),
                ...(v.errorMessage === undefined ? null : { errorMessage: v.errorMessage }),
                ...(v.errorStep === undefined ? null : { errorStep: v.errorStep }),
                ...(v.passiveRegions === undefined ? null : { passiveRegions: v.passiveRegions }),
                ...(v.gitSource === undefined ? null : { gitSource: v.gitSource }),
                id: v.id,
            };
        });

    export type Outbound = {
        build: CancelDeploymentBuild$.Outbound;
        builds?: Array<CancelDeploymentBuilds$.Outbound> | undefined;
        connectBuildsEnabled?: boolean | undefined;
        connectConfigurationId?: string | undefined;
        createdIn: string;
        crons?: Array<CancelDeploymentCrons$.Outbound> | undefined;
        env: Array<string>;
        functions?: Record<string, CancelDeploymentFunctions$.Outbound> | null | undefined;
        inspectorUrl: string | null;
        isInConcurrentBuildsQueue: boolean;
        meta: Record<string, string>;
        monorepoManager?: string | null | undefined;
        name: string;
        ownerId: string;
        passiveConnectConfigurationId?: string | undefined;
        plan: string;
        projectId: string;
        routes: Array<
            | CancelDeploymentRoutes3$.Outbound
            | CancelDeploymentRoutes2$.Outbound
            | CancelDeploymentRoutes1$.Outbound
        > | null;
        gitRepo?:
            | CancelDeploymentGitRepo1$.Outbound
            | CancelDeploymentGitRepo2$.Outbound
            | CancelDeploymentGitRepo3$.Outbound
            | null
            | undefined;
        aliasAssignedAt?: number | boolean | null | undefined;
        lambdas?: Array<CancelDeploymentLambdas$.Outbound> | undefined;
        project?: CancelDeploymentProject$.Outbound | undefined;
        public: boolean;
        readyState: string;
        readySubstate?: string | undefined;
        regions: Array<string>;
        source?: string | undefined;
        target?: string | null | undefined;
        team?: CancelDeploymentTeam$.Outbound | undefined;
        type: string;
        url: string;
        userAliases?: Array<string> | undefined;
        version: number;
        previewCommentsEnabled?: boolean | undefined;
        alias: Array<string>;
        aliasAssigned: boolean;
        aliasError?: CancelDeploymentAliasError$.Outbound | null | undefined;
        aliasFinal?: string | null | undefined;
        aliasWarning?: CancelDeploymentAliasWarning$.Outbound | null | undefined;
        autoAssignCustomDomains?: boolean | undefined;
        automaticAliases?: Array<string> | undefined;
        bootedAt: number;
        buildErrorAt?: number | undefined;
        buildingAt: number;
        canceledAt?: number | undefined;
        checksState?: string | undefined;
        checksConclusion?: string | undefined;
        createdAt: number;
        creator: CancelDeploymentCreator$.Outbound;
        errorCode?: string | undefined;
        errorLink?: string | undefined;
        errorMessage?: string | null | undefined;
        errorStep?: string | undefined;
        passiveRegions?: Array<string> | undefined;
        gitSource?:
            | GitSource6$.Outbound
            | GitSource8$.Outbound
            | CancelDeploymentGitSource1$.Outbound
            | CancelDeploymentGitSource3$.Outbound
            | CancelDeploymentGitSource2$.Outbound
            | CancelDeploymentGitSource4$.Outbound
            | CancelDeploymentGitSource5$.Outbound
            | GitSource7$.Outbound
            | GitSource9$.Outbound
            | undefined;
        id: string;
    };

    export const outboundSchema: z.ZodType<Outbound, z.ZodTypeDef, CancelDeploymentResponseBody> = z
        .object({
            build: z.lazy(() => CancelDeploymentBuild$.outboundSchema),
            builds: z.array(z.lazy(() => CancelDeploymentBuilds$.outboundSchema)).optional(),
            connectBuildsEnabled: z.boolean().optional(),
            connectConfigurationId: z.string().optional(),
            createdIn: z.string(),
            crons: z.array(z.lazy(() => CancelDeploymentCrons$.outboundSchema)).optional(),
            env: z.array(z.string()),
            functions: z
                .nullable(z.record(z.lazy(() => CancelDeploymentFunctions$.outboundSchema)))
                .optional(),
            inspectorUrl: z.nullable(z.string()),
            isInConcurrentBuildsQueue: z.boolean(),
            meta: z.record(z.string()),
            monorepoManager: z.nullable(z.string()).optional(),
            name: z.string(),
            ownerId: z.string(),
            passiveConnectConfigurationId: z.string().optional(),
            plan: CancelDeploymentPlan$.outboundSchema,
            projectId: z.string(),
            routes: z.nullable(
                z.array(
                    z.union([
                        z.lazy(() => CancelDeploymentRoutes3$.outboundSchema),
                        z.lazy(() => CancelDeploymentRoutes2$.outboundSchema),
                        z.lazy(() => CancelDeploymentRoutes1$.outboundSchema),
                    ])
                )
            ),
            gitRepo: z
                .nullable(
                    z.union([
                        z.lazy(() => CancelDeploymentGitRepo1$.outboundSchema),
                        z.lazy(() => CancelDeploymentGitRepo2$.outboundSchema),
                        z.lazy(() => CancelDeploymentGitRepo3$.outboundSchema),
                    ])
                )
                .optional(),
            aliasAssignedAt: z.nullable(z.union([z.number(), z.boolean()])).optional(),
            lambdas: z.array(z.lazy(() => CancelDeploymentLambdas$.outboundSchema)).optional(),
            project: z.lazy(() => CancelDeploymentProject$.outboundSchema).optional(),
            public: z.boolean(),
            readyState: CancelDeploymentReadyState$.outboundSchema,
            readySubstate: CancelDeploymentReadySubstate$.outboundSchema.optional(),
            regions: z.array(z.string()),
            source: CancelDeploymentSource$.outboundSchema.optional(),
            target: z.nullable(CancelDeploymentTarget$.outboundSchema).optional(),
            team: z.lazy(() => CancelDeploymentTeam$.outboundSchema).optional(),
            type: CancelDeploymentType$.outboundSchema,
            url: z.string(),
            userAliases: z.array(z.string()).optional(),
            version: z.number(),
            previewCommentsEnabled: z.boolean().optional(),
            alias: z.array(z.string()),
            aliasAssigned: z.boolean(),
            aliasError: z
                .nullable(z.lazy(() => CancelDeploymentAliasError$.outboundSchema))
                .optional(),
            aliasFinal: z.nullable(z.string()).optional(),
            aliasWarning: z
                .nullable(z.lazy(() => CancelDeploymentAliasWarning$.outboundSchema))
                .optional(),
            autoAssignCustomDomains: z.boolean().optional(),
            automaticAliases: z.array(z.string()).optional(),
            bootedAt: z.number(),
            buildErrorAt: z.number().optional(),
            buildingAt: z.number(),
            canceledAt: z.number().optional(),
            checksState: CancelDeploymentChecksState$.outboundSchema.optional(),
            checksConclusion: CancelDeploymentChecksConclusion$.outboundSchema.optional(),
            createdAt: z.number(),
            creator: z.lazy(() => CancelDeploymentCreator$.outboundSchema),
            errorCode: z.string().optional(),
            errorLink: z.string().optional(),
            errorMessage: z.nullable(z.string()).optional(),
            errorStep: z.string().optional(),
            passiveRegions: z.array(z.string()).optional(),
            gitSource: z
                .union([
                    z.lazy(() => GitSource6$.outboundSchema),
                    z.lazy(() => GitSource8$.outboundSchema),
                    z.lazy(() => CancelDeploymentGitSource1$.outboundSchema),
                    z.lazy(() => CancelDeploymentGitSource3$.outboundSchema),
                    z.lazy(() => CancelDeploymentGitSource2$.outboundSchema),
                    z.lazy(() => CancelDeploymentGitSource4$.outboundSchema),
                    z.lazy(() => CancelDeploymentGitSource5$.outboundSchema),
                    z.lazy(() => GitSource7$.outboundSchema),
                    z.lazy(() => GitSource9$.outboundSchema),
                ])
                .optional(),
            id: z.string(),
        })
        .transform((v) => {
            return {
                build: v.build,
                ...(v.builds === undefined ? null : { builds: v.builds }),
                ...(v.connectBuildsEnabled === undefined
                    ? null
                    : { connectBuildsEnabled: v.connectBuildsEnabled }),
                ...(v.connectConfigurationId === undefined
                    ? null
                    : { connectConfigurationId: v.connectConfigurationId }),
                createdIn: v.createdIn,
                ...(v.crons === undefined ? null : { crons: v.crons }),
                env: v.env,
                ...(v.functions === undefined ? null : { functions: v.functions }),
                inspectorUrl: v.inspectorUrl,
                isInConcurrentBuildsQueue: v.isInConcurrentBuildsQueue,
                meta: v.meta,
                ...(v.monorepoManager === undefined
                    ? null
                    : { monorepoManager: v.monorepoManager }),
                name: v.name,
                ownerId: v.ownerId,
                ...(v.passiveConnectConfigurationId === undefined
                    ? null
                    : { passiveConnectConfigurationId: v.passiveConnectConfigurationId }),
                plan: v.plan,
                projectId: v.projectId,
                routes: v.routes,
                ...(v.gitRepo === undefined ? null : { gitRepo: v.gitRepo }),
                ...(v.aliasAssignedAt === undefined
                    ? null
                    : { aliasAssignedAt: v.aliasAssignedAt }),
                ...(v.lambdas === undefined ? null : { lambdas: v.lambdas }),
                ...(v.project === undefined ? null : { project: v.project }),
                public: v.public,
                readyState: v.readyState,
                ...(v.readySubstate === undefined ? null : { readySubstate: v.readySubstate }),
                regions: v.regions,
                ...(v.source === undefined ? null : { source: v.source }),
                ...(v.target === undefined ? null : { target: v.target }),
                ...(v.team === undefined ? null : { team: v.team }),
                type: v.type,
                url: v.url,
                ...(v.userAliases === undefined ? null : { userAliases: v.userAliases }),
                version: v.version,
                ...(v.previewCommentsEnabled === undefined
                    ? null
                    : { previewCommentsEnabled: v.previewCommentsEnabled }),
                alias: v.alias,
                aliasAssigned: v.aliasAssigned,
                ...(v.aliasError === undefined ? null : { aliasError: v.aliasError }),
                ...(v.aliasFinal === undefined ? null : { aliasFinal: v.aliasFinal }),
                ...(v.aliasWarning === undefined ? null : { aliasWarning: v.aliasWarning }),
                ...(v.autoAssignCustomDomains === undefined
                    ? null
                    : { autoAssignCustomDomains: v.autoAssignCustomDomains }),
                ...(v.automaticAliases === undefined
                    ? null
                    : { automaticAliases: v.automaticAliases }),
                bootedAt: v.bootedAt,
                ...(v.buildErrorAt === undefined ? null : { buildErrorAt: v.buildErrorAt }),
                buildingAt: v.buildingAt,
                ...(v.canceledAt === undefined ? null : { canceledAt: v.canceledAt }),
                ...(v.checksState === undefined ? null : { checksState: v.checksState }),
                ...(v.checksConclusion === undefined
                    ? null
                    : { checksConclusion: v.checksConclusion }),
                createdAt: v.createdAt,
                creator: v.creator,
                ...(v.errorCode === undefined ? null : { errorCode: v.errorCode }),
                ...(v.errorLink === undefined ? null : { errorLink: v.errorLink }),
                ...(v.errorMessage === undefined ? null : { errorMessage: v.errorMessage }),
                ...(v.errorStep === undefined ? null : { errorStep: v.errorStep }),
                ...(v.passiveRegions === undefined ? null : { passiveRegions: v.passiveRegions }),
                ...(v.gitSource === undefined ? null : { gitSource: v.gitSource }),
                id: v.id,
            };
        });
}
