/*
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

import * as z from "zod";

export type GetTeamAccessRequestRequest = {
    teamId: string;
    userId: string;
};

export enum GetTeamAccessRequestOrigin {
    Mail = "mail",
    Link = "link",
    Import = "import",
    Teams = "teams",
    Github = "github",
    Gitlab = "gitlab",
    Bitbucket = "bitbucket",
    Saml = "saml",
    Dsync = "dsync",
    Feedback = "feedback",
    OrganizationTeams = "organization-teams",
}

export type GetTeamAccessRequestGitUserId = string | number;

/**
 * A map that describes the origin from where the user joined.
 */
export type GetTeamAccessRequestJoinedFrom = {
    origin: GetTeamAccessRequestOrigin;
    commitId?: string | undefined;
    repoId?: string | undefined;
    repoPath?: string | undefined;
    gitUserId?: string | number | undefined;
    gitUserLogin?: string | undefined;
    ssoUserId?: string | undefined;
    ssoConnectedAt?: number | undefined;
    idpUserId?: string | undefined;
    dsyncUserId?: string | undefined;
    dsyncConnectedAt?: number | undefined;
};

/**
 * Map of the connected GitHub account.
 */
export type GetTeamAccessRequestGithub = {
    login?: string | undefined;
};

/**
 * Map of the connected GitLab account.
 */
export type GetTeamAccessRequestGitlab = {
    login?: string | undefined;
};

/**
 * Map of the connected Bitbucket account.
 */
export type GetTeamAccessRequestBitbucket = {
    login?: string | undefined;
};

/**
 * Successfully
 */
export type GetTeamAccessRequestResponseBody = {
    /**
     * The slug of the team.
     */
    teamSlug: string;
    /**
     * The name of the team.
     */
    teamName: string;
    /**
     * Current status of the membership. Will be `true` if confirmed, if pending it'll be `false`.
     */
    confirmed: boolean;
    /**
     * A map that describes the origin from where the user joined.
     */
    joinedFrom: GetTeamAccessRequestJoinedFrom;
    /**
     * Timestamp in milliseconds when the user requested access to the team.
     */
    accessRequestedAt: number;
    /**
     * Map of the connected GitHub account.
     */
    github: GetTeamAccessRequestGithub | null;
    /**
     * Map of the connected GitLab account.
     */
    gitlab: GetTeamAccessRequestGitlab | null;
    /**
     * Map of the connected Bitbucket account.
     */
    bitbucket: GetTeamAccessRequestBitbucket | null;
};

/** @internal */
export namespace GetTeamAccessRequestRequest$ {
    export const inboundSchema: z.ZodType<GetTeamAccessRequestRequest, z.ZodTypeDef, unknown> =
        z.object({
            teamId: z.string(),
            userId: z.string(),
        });

    export type Outbound = {
        teamId: string;
        userId: string;
    };

    export const outboundSchema: z.ZodType<Outbound, z.ZodTypeDef, GetTeamAccessRequestRequest> =
        z.object({
            teamId: z.string(),
            userId: z.string(),
        });
}

/** @internal */
export namespace GetTeamAccessRequestOrigin$ {
    export const inboundSchema: z.ZodNativeEnum<typeof GetTeamAccessRequestOrigin> = z.nativeEnum(
        GetTeamAccessRequestOrigin
    );
    export const outboundSchema: z.ZodNativeEnum<typeof GetTeamAccessRequestOrigin> = inboundSchema;
}

/** @internal */
export namespace GetTeamAccessRequestGitUserId$ {
    export const inboundSchema: z.ZodType<GetTeamAccessRequestGitUserId, z.ZodTypeDef, unknown> =
        z.union([z.string(), z.number()]);

    export type Outbound = string | number;
    export const outboundSchema: z.ZodType<Outbound, z.ZodTypeDef, GetTeamAccessRequestGitUserId> =
        z.union([z.string(), z.number()]);
}

/** @internal */
export namespace GetTeamAccessRequestJoinedFrom$ {
    export const inboundSchema: z.ZodType<GetTeamAccessRequestJoinedFrom, z.ZodTypeDef, unknown> =
        z.object({
            origin: GetTeamAccessRequestOrigin$.inboundSchema,
            commitId: z.string().optional(),
            repoId: z.string().optional(),
            repoPath: z.string().optional(),
            gitUserId: z.union([z.string(), z.number()]).optional(),
            gitUserLogin: z.string().optional(),
            ssoUserId: z.string().optional(),
            ssoConnectedAt: z.number().optional(),
            idpUserId: z.string().optional(),
            dsyncUserId: z.string().optional(),
            dsyncConnectedAt: z.number().optional(),
        });

    export type Outbound = {
        origin: string;
        commitId?: string | undefined;
        repoId?: string | undefined;
        repoPath?: string | undefined;
        gitUserId?: string | number | undefined;
        gitUserLogin?: string | undefined;
        ssoUserId?: string | undefined;
        ssoConnectedAt?: number | undefined;
        idpUserId?: string | undefined;
        dsyncUserId?: string | undefined;
        dsyncConnectedAt?: number | undefined;
    };

    export const outboundSchema: z.ZodType<Outbound, z.ZodTypeDef, GetTeamAccessRequestJoinedFrom> =
        z.object({
            origin: GetTeamAccessRequestOrigin$.outboundSchema,
            commitId: z.string().optional(),
            repoId: z.string().optional(),
            repoPath: z.string().optional(),
            gitUserId: z.union([z.string(), z.number()]).optional(),
            gitUserLogin: z.string().optional(),
            ssoUserId: z.string().optional(),
            ssoConnectedAt: z.number().optional(),
            idpUserId: z.string().optional(),
            dsyncUserId: z.string().optional(),
            dsyncConnectedAt: z.number().optional(),
        });
}

/** @internal */
export namespace GetTeamAccessRequestGithub$ {
    export const inboundSchema: z.ZodType<GetTeamAccessRequestGithub, z.ZodTypeDef, unknown> =
        z.object({
            login: z.string().optional(),
        });

    export type Outbound = {
        login?: string | undefined;
    };

    export const outboundSchema: z.ZodType<Outbound, z.ZodTypeDef, GetTeamAccessRequestGithub> =
        z.object({
            login: z.string().optional(),
        });
}

/** @internal */
export namespace GetTeamAccessRequestGitlab$ {
    export const inboundSchema: z.ZodType<GetTeamAccessRequestGitlab, z.ZodTypeDef, unknown> =
        z.object({
            login: z.string().optional(),
        });

    export type Outbound = {
        login?: string | undefined;
    };

    export const outboundSchema: z.ZodType<Outbound, z.ZodTypeDef, GetTeamAccessRequestGitlab> =
        z.object({
            login: z.string().optional(),
        });
}

/** @internal */
export namespace GetTeamAccessRequestBitbucket$ {
    export const inboundSchema: z.ZodType<GetTeamAccessRequestBitbucket, z.ZodTypeDef, unknown> =
        z.object({
            login: z.string().optional(),
        });

    export type Outbound = {
        login?: string | undefined;
    };

    export const outboundSchema: z.ZodType<Outbound, z.ZodTypeDef, GetTeamAccessRequestBitbucket> =
        z.object({
            login: z.string().optional(),
        });
}

/** @internal */
export namespace GetTeamAccessRequestResponseBody$ {
    export const inboundSchema: z.ZodType<GetTeamAccessRequestResponseBody, z.ZodTypeDef, unknown> =
        z.object({
            teamSlug: z.string(),
            teamName: z.string(),
            confirmed: z.boolean(),
            joinedFrom: z.lazy(() => GetTeamAccessRequestJoinedFrom$.inboundSchema),
            accessRequestedAt: z.number(),
            github: z.nullable(z.lazy(() => GetTeamAccessRequestGithub$.inboundSchema)),
            gitlab: z.nullable(z.lazy(() => GetTeamAccessRequestGitlab$.inboundSchema)),
            bitbucket: z.nullable(z.lazy(() => GetTeamAccessRequestBitbucket$.inboundSchema)),
        });

    export type Outbound = {
        teamSlug: string;
        teamName: string;
        confirmed: boolean;
        joinedFrom: GetTeamAccessRequestJoinedFrom$.Outbound;
        accessRequestedAt: number;
        github: GetTeamAccessRequestGithub$.Outbound | null;
        gitlab: GetTeamAccessRequestGitlab$.Outbound | null;
        bitbucket: GetTeamAccessRequestBitbucket$.Outbound | null;
    };

    export const outboundSchema: z.ZodType<
        Outbound,
        z.ZodTypeDef,
        GetTeamAccessRequestResponseBody
    > = z.object({
        teamSlug: z.string(),
        teamName: z.string(),
        confirmed: z.boolean(),
        joinedFrom: z.lazy(() => GetTeamAccessRequestJoinedFrom$.outboundSchema),
        accessRequestedAt: z.number(),
        github: z.nullable(z.lazy(() => GetTeamAccessRequestGithub$.outboundSchema)),
        gitlab: z.nullable(z.lazy(() => GetTeamAccessRequestGitlab$.outboundSchema)),
        bitbucket: z.nullable(z.lazy(() => GetTeamAccessRequestBitbucket$.outboundSchema)),
    });
}
