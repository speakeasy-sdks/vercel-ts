/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import { remap as remap$ } from "../lib/primitives.js";
import { ClosedEnum } from "../types/enums.js";
import * as z from "zod";

export type CreateSecretRequestBody = {
    /**
     * The name of the secret (max 100 characters).
     */
    name: string;
    /**
     * The value of the new secret.
     */
    value: string;
    /**
     * Whether the secret value can be decrypted after it has been created.
     */
    decryptable?: boolean | undefined;
    /**
     * Associate a secret to a project.
     *
     * @deprecated field: This will be removed in a future release, please migrate away from it as soon as possible.
     */
    projectId?: string | undefined;
};

export type CreateSecretRequest = {
    /**
     * The name of the secret.
     */
    name: string;
    requestBody?: CreateSecretRequestBody | undefined;
};

export const CreateSecretType = {
    Buffer: "Buffer",
} as const;
export type CreateSecretType = ClosedEnum<typeof CreateSecretType>;

export type CreateSecretValue = {
    type?: CreateSecretType | undefined;
    data?: Array<number> | undefined;
};

/**
 * Successful response showing the created secret.
 */
export type CreateSecretResponseBody = {
    value: CreateSecretValue;
    /**
     * The date when the secret was created.
     */
    created: Date;
    /**
     * The name of the secret.
     */
    name: string;
    /**
     * The unique identifier of the team the secret was created for.
     */
    teamId?: string | null | undefined;
    /**
     * The unique identifier of the secret.
     */
    uid: string;
    /**
     * The unique identifier of the user who created the secret.
     */
    userId?: string | undefined;
    /**
     * Timestamp for when the secret was created.
     */
    createdAt?: number | undefined;
    /**
     * The unique identifier of the project which the secret belongs to.
     */
    projectId?: string | undefined;
    /**
     * Indicates whether the secret value can be decrypted after it has been created.
     */
    decryptable?: boolean | undefined;
};

/** @internal */
export const CreateSecretRequestBody$inboundSchema: z.ZodType<
    CreateSecretRequestBody,
    z.ZodTypeDef,
    unknown
> = z.object({
    name: z.string(),
    value: z.string(),
    decryptable: z.boolean().optional(),
    projectId: z.string().optional(),
});

/** @internal */
export type CreateSecretRequestBody$Outbound = {
    name: string;
    value: string;
    decryptable?: boolean | undefined;
    projectId?: string | undefined;
};

/** @internal */
export const CreateSecretRequestBody$outboundSchema: z.ZodType<
    CreateSecretRequestBody$Outbound,
    z.ZodTypeDef,
    CreateSecretRequestBody
> = z.object({
    name: z.string(),
    value: z.string(),
    decryptable: z.boolean().optional(),
    projectId: z.string().optional(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace CreateSecretRequestBody$ {
    /** @deprecated use `CreateSecretRequestBody$inboundSchema` instead. */
    export const inboundSchema = CreateSecretRequestBody$inboundSchema;
    /** @deprecated use `CreateSecretRequestBody$outboundSchema` instead. */
    export const outboundSchema = CreateSecretRequestBody$outboundSchema;
    /** @deprecated use `CreateSecretRequestBody$Outbound` instead. */
    export type Outbound = CreateSecretRequestBody$Outbound;
}

/** @internal */
export const CreateSecretRequest$inboundSchema: z.ZodType<
    CreateSecretRequest,
    z.ZodTypeDef,
    unknown
> = z
    .object({
        name: z.string(),
        RequestBody: z.lazy(() => CreateSecretRequestBody$inboundSchema).optional(),
    })
    .transform((v) => {
        return remap$(v, {
            RequestBody: "requestBody",
        });
    });

/** @internal */
export type CreateSecretRequest$Outbound = {
    name: string;
    RequestBody?: CreateSecretRequestBody$Outbound | undefined;
};

/** @internal */
export const CreateSecretRequest$outboundSchema: z.ZodType<
    CreateSecretRequest$Outbound,
    z.ZodTypeDef,
    CreateSecretRequest
> = z
    .object({
        name: z.string(),
        requestBody: z.lazy(() => CreateSecretRequestBody$outboundSchema).optional(),
    })
    .transform((v) => {
        return remap$(v, {
            requestBody: "RequestBody",
        });
    });

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace CreateSecretRequest$ {
    /** @deprecated use `CreateSecretRequest$inboundSchema` instead. */
    export const inboundSchema = CreateSecretRequest$inboundSchema;
    /** @deprecated use `CreateSecretRequest$outboundSchema` instead. */
    export const outboundSchema = CreateSecretRequest$outboundSchema;
    /** @deprecated use `CreateSecretRequest$Outbound` instead. */
    export type Outbound = CreateSecretRequest$Outbound;
}

/** @internal */
export const CreateSecretType$inboundSchema: z.ZodNativeEnum<typeof CreateSecretType> =
    z.nativeEnum(CreateSecretType);

/** @internal */
export const CreateSecretType$outboundSchema: z.ZodNativeEnum<typeof CreateSecretType> =
    CreateSecretType$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace CreateSecretType$ {
    /** @deprecated use `CreateSecretType$inboundSchema` instead. */
    export const inboundSchema = CreateSecretType$inboundSchema;
    /** @deprecated use `CreateSecretType$outboundSchema` instead. */
    export const outboundSchema = CreateSecretType$outboundSchema;
}

/** @internal */
export const CreateSecretValue$inboundSchema: z.ZodType<CreateSecretValue, z.ZodTypeDef, unknown> =
    z.object({
        type: CreateSecretType$inboundSchema.optional(),
        data: z.array(z.number()).optional(),
    });

/** @internal */
export type CreateSecretValue$Outbound = {
    type?: string | undefined;
    data?: Array<number> | undefined;
};

/** @internal */
export const CreateSecretValue$outboundSchema: z.ZodType<
    CreateSecretValue$Outbound,
    z.ZodTypeDef,
    CreateSecretValue
> = z.object({
    type: CreateSecretType$outboundSchema.optional(),
    data: z.array(z.number()).optional(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace CreateSecretValue$ {
    /** @deprecated use `CreateSecretValue$inboundSchema` instead. */
    export const inboundSchema = CreateSecretValue$inboundSchema;
    /** @deprecated use `CreateSecretValue$outboundSchema` instead. */
    export const outboundSchema = CreateSecretValue$outboundSchema;
    /** @deprecated use `CreateSecretValue$Outbound` instead. */
    export type Outbound = CreateSecretValue$Outbound;
}

/** @internal */
export const CreateSecretResponseBody$inboundSchema: z.ZodType<
    CreateSecretResponseBody,
    z.ZodTypeDef,
    unknown
> = z.object({
    value: z.lazy(() => CreateSecretValue$inboundSchema),
    created: z
        .string()
        .datetime({ offset: true })
        .transform((v) => new Date(v)),
    name: z.string(),
    teamId: z.nullable(z.string()).optional(),
    uid: z.string(),
    userId: z.string().optional(),
    createdAt: z.number().optional(),
    projectId: z.string().optional(),
    decryptable: z.boolean().optional(),
});

/** @internal */
export type CreateSecretResponseBody$Outbound = {
    value: CreateSecretValue$Outbound;
    created: string;
    name: string;
    teamId?: string | null | undefined;
    uid: string;
    userId?: string | undefined;
    createdAt?: number | undefined;
    projectId?: string | undefined;
    decryptable?: boolean | undefined;
};

/** @internal */
export const CreateSecretResponseBody$outboundSchema: z.ZodType<
    CreateSecretResponseBody$Outbound,
    z.ZodTypeDef,
    CreateSecretResponseBody
> = z.object({
    value: z.lazy(() => CreateSecretValue$outboundSchema),
    created: z.date().transform((v) => v.toISOString()),
    name: z.string(),
    teamId: z.nullable(z.string()).optional(),
    uid: z.string(),
    userId: z.string().optional(),
    createdAt: z.number().optional(),
    projectId: z.string().optional(),
    decryptable: z.boolean().optional(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace CreateSecretResponseBody$ {
    /** @deprecated use `CreateSecretResponseBody$inboundSchema` instead. */
    export const inboundSchema = CreateSecretResponseBody$inboundSchema;
    /** @deprecated use `CreateSecretResponseBody$outboundSchema` instead. */
    export const outboundSchema = CreateSecretResponseBody$outboundSchema;
    /** @deprecated use `CreateSecretResponseBody$Outbound` instead. */
    export type Outbound = CreateSecretResponseBody$Outbound;
}
