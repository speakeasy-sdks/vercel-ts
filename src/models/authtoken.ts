/*
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

import * as z from "zod";

export enum AuthTokenScopesType {
    Team = "team",
}

export enum ScopesOrigin {
    Saml = "saml",
    Github = "github",
    Gitlab = "gitlab",
    Bitbucket = "bitbucket",
    Email = "email",
    Manual = "manual",
    Passkey = "passkey",
}

/**
 * The access scopes granted to the token.
 */
export type Scopes2 = {
    type: AuthTokenScopesType;
    teamId: string;
    origin: ScopesOrigin;
    createdAt: number;
    expiresAt?: number | undefined;
};

export enum ScopesType {
    User = "user",
}

export enum Origin {
    Saml = "saml",
    Github = "github",
    Gitlab = "gitlab",
    Bitbucket = "bitbucket",
    Email = "email",
    Manual = "manual",
    Passkey = "passkey",
}

/**
 * The access scopes granted to the token.
 */
export type Scopes1 = {
    type: ScopesType;
    origin: Origin;
    createdAt: number;
    expiresAt?: number | undefined;
};

export type Scopes = Scopes1 | Scopes2;

/**
 * Authentication token metadata.
 */
export type AuthToken = {
    /**
     * The unique identifier of the token.
     */
    id: string;
    /**
     * The human-readable name of the token.
     */
    name: string;
    /**
     * The type of the token.
     */
    type: string;
    /**
     * The origin of how the token was created.
     */
    origin?: string | undefined;
    /**
     * The access scopes granted to the token.
     */
    scopes?: Array<Scopes1 | Scopes2> | undefined;
    /**
     * Timestamp (in milliseconds) of when the token expires.
     */
    expiresAt?: number | undefined;
    /**
     * Timestamp (in milliseconds) of when the token was most recently used.
     */
    activeAt: number;
    /**
     * Timestamp (in milliseconds) of when the token was created.
     */
    createdAt: number;
};

/** @internal */
export namespace AuthTokenScopesType$ {
    export const inboundSchema = z.nativeEnum(AuthTokenScopesType);
    export const outboundSchema = inboundSchema;
}

/** @internal */
export namespace ScopesOrigin$ {
    export const inboundSchema = z.nativeEnum(ScopesOrigin);
    export const outboundSchema = inboundSchema;
}

/** @internal */
export namespace Scopes2$ {
    export const inboundSchema: z.ZodType<Scopes2, z.ZodTypeDef, unknown> = z.object({
        type: AuthTokenScopesType$.inboundSchema,
        teamId: z.string(),
        origin: ScopesOrigin$.inboundSchema,
        createdAt: z.number(),
        expiresAt: z.number().optional(),
    });

    export type Outbound = {
        type: string;
        teamId: string;
        origin: string;
        createdAt: number;
        expiresAt?: number | undefined;
    };

    export const outboundSchema: z.ZodType<Outbound, z.ZodTypeDef, Scopes2> = z.object({
        type: AuthTokenScopesType$.outboundSchema,
        teamId: z.string(),
        origin: ScopesOrigin$.outboundSchema,
        createdAt: z.number(),
        expiresAt: z.number().optional(),
    });
}

/** @internal */
export namespace ScopesType$ {
    export const inboundSchema = z.nativeEnum(ScopesType);
    export const outboundSchema = inboundSchema;
}

/** @internal */
export namespace Origin$ {
    export const inboundSchema = z.nativeEnum(Origin);
    export const outboundSchema = inboundSchema;
}

/** @internal */
export namespace Scopes1$ {
    export const inboundSchema: z.ZodType<Scopes1, z.ZodTypeDef, unknown> = z.object({
        type: ScopesType$.inboundSchema,
        origin: Origin$.inboundSchema,
        createdAt: z.number(),
        expiresAt: z.number().optional(),
    });

    export type Outbound = {
        type: string;
        origin: string;
        createdAt: number;
        expiresAt?: number | undefined;
    };

    export const outboundSchema: z.ZodType<Outbound, z.ZodTypeDef, Scopes1> = z.object({
        type: ScopesType$.outboundSchema,
        origin: Origin$.outboundSchema,
        createdAt: z.number(),
        expiresAt: z.number().optional(),
    });
}

/** @internal */
export namespace Scopes$ {
    export const inboundSchema: z.ZodType<Scopes, z.ZodTypeDef, unknown> = z.union([
        z.lazy(() => Scopes1$.inboundSchema),
        z.lazy(() => Scopes2$.inboundSchema),
    ]);

    export type Outbound = Scopes1$.Outbound | Scopes2$.Outbound;
    export const outboundSchema: z.ZodType<Outbound, z.ZodTypeDef, Scopes> = z.union([
        z.lazy(() => Scopes1$.outboundSchema),
        z.lazy(() => Scopes2$.outboundSchema),
    ]);
}

/** @internal */
export namespace AuthToken$ {
    export const inboundSchema: z.ZodType<AuthToken, z.ZodTypeDef, unknown> = z.object({
        id: z.string(),
        name: z.string(),
        type: z.string(),
        origin: z.string().optional(),
        scopes: z
            .array(
                z.union([
                    z.lazy(() => Scopes1$.inboundSchema),
                    z.lazy(() => Scopes2$.inboundSchema),
                ])
            )
            .optional(),
        expiresAt: z.number().optional(),
        activeAt: z.number(),
        createdAt: z.number(),
    });

    export type Outbound = {
        id: string;
        name: string;
        type: string;
        origin?: string | undefined;
        scopes?: Array<Scopes1$.Outbound | Scopes2$.Outbound> | undefined;
        expiresAt?: number | undefined;
        activeAt: number;
        createdAt: number;
    };

    export const outboundSchema: z.ZodType<Outbound, z.ZodTypeDef, AuthToken> = z.object({
        id: z.string(),
        name: z.string(),
        type: z.string(),
        origin: z.string().optional(),
        scopes: z
            .array(
                z.union([
                    z.lazy(() => Scopes1$.outboundSchema),
                    z.lazy(() => Scopes2$.outboundSchema),
                ])
            )
            .optional(),
        expiresAt: z.number().optional(),
        activeAt: z.number(),
        createdAt: z.number(),
    });
}
