/*
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

import { remap as remap$ } from "../lib/primitives";
import * as z from "zod";

/**
 * An object describing the reason why the team is being deleted.
 */
export type Reasons = {
    /**
     * Idenitifier slug of the reason why the team is being deleted.
     */
    slug: string;
    /**
     * Description of the reason why the team is being deleted.
     */
    description: string;
};

export type DeleteTeamRequestBody = {
    /**
     * Optional array of objects that describe the reason why the team is being deleted.
     */
    reasons?: Array<Reasons> | undefined;
};

export type DeleteTeamRequest = {
    /**
     * Id of the team to be set as the new default team
     */
    newDefaultTeamId?: string | undefined;
    /**
     * The Team identifier to perform the request on behalf of.
     */
    teamId: string;
    /**
     * The Team slug to perform the request on behalf of.
     */
    slug?: string | undefined;
    requestBody?: DeleteTeamRequestBody | undefined;
};

/**
 * The Team was successfully deleted
 */
export type DeleteTeamResponseBody = {
    /**
     * The ID of the deleted Team
     */
    id: string;
    /**
     * Signifies whether the default team update has failed, when newDefaultTeamId is provided in request query.
     */
    newDefaultTeamIdError?: boolean | undefined;
};

/** @internal */
export namespace Reasons$ {
    export const inboundSchema: z.ZodType<Reasons, z.ZodTypeDef, unknown> = z.object({
        slug: z.string(),
        description: z.string(),
    });

    export type Outbound = {
        slug: string;
        description: string;
    };

    export const outboundSchema: z.ZodType<Outbound, z.ZodTypeDef, Reasons> = z.object({
        slug: z.string(),
        description: z.string(),
    });
}

/** @internal */
export namespace DeleteTeamRequestBody$ {
    export const inboundSchema: z.ZodType<DeleteTeamRequestBody, z.ZodTypeDef, unknown> = z.object({
        reasons: z.array(z.lazy(() => Reasons$.inboundSchema)).optional(),
    });

    export type Outbound = {
        reasons?: Array<Reasons$.Outbound> | undefined;
    };

    export const outboundSchema: z.ZodType<Outbound, z.ZodTypeDef, DeleteTeamRequestBody> =
        z.object({
            reasons: z.array(z.lazy(() => Reasons$.outboundSchema)).optional(),
        });
}

/** @internal */
export namespace DeleteTeamRequest$ {
    export const inboundSchema: z.ZodType<DeleteTeamRequest, z.ZodTypeDef, unknown> = z
        .object({
            newDefaultTeamId: z.string().optional(),
            teamId: z.string(),
            slug: z.string().optional(),
            RequestBody: z.lazy(() => DeleteTeamRequestBody$.inboundSchema).optional(),
        })
        .transform((v) => {
            return remap$(v, {
                RequestBody: "requestBody",
            });
        });

    export type Outbound = {
        newDefaultTeamId?: string | undefined;
        teamId: string;
        slug?: string | undefined;
        RequestBody?: DeleteTeamRequestBody$.Outbound | undefined;
    };

    export const outboundSchema: z.ZodType<Outbound, z.ZodTypeDef, DeleteTeamRequest> = z
        .object({
            newDefaultTeamId: z.string().optional(),
            teamId: z.string(),
            slug: z.string().optional(),
            requestBody: z.lazy(() => DeleteTeamRequestBody$.outboundSchema).optional(),
        })
        .transform((v) => {
            return remap$(v, {
                requestBody: "RequestBody",
            });
        });
}

/** @internal */
export namespace DeleteTeamResponseBody$ {
    export const inboundSchema: z.ZodType<DeleteTeamResponseBody, z.ZodTypeDef, unknown> = z.object(
        {
            id: z.string(),
            newDefaultTeamIdError: z.boolean().optional(),
        }
    );

    export type Outbound = {
        id: string;
        newDefaultTeamIdError?: boolean | undefined;
    };

    export const outboundSchema: z.ZodType<Outbound, z.ZodTypeDef, DeleteTeamResponseBody> =
        z.object({
            id: z.string(),
            newDefaultTeamIdError: z.boolean().optional(),
        });
}
