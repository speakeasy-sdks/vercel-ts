/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import { ClosedEnum } from "../types/enums.js";
import * as z from "zod";

export type GetConfigurableLogDrainRequest = {
    id: string;
    /**
     * The Team identifier to perform the request on behalf of.
     */
    teamId?: string | undefined;
    /**
     * The Team slug to perform the request on behalf of.
     */
    slug?: string | undefined;
};

export const GetConfigurableLogDrainDeliveryFormat = {
    Json: "json",
    Ndjson: "ndjson",
    Syslog: "syslog",
} as const;
export type GetConfigurableLogDrainDeliveryFormat = ClosedEnum<
    typeof GetConfigurableLogDrainDeliveryFormat
>;

export const GetConfigurableLogDrainSources = {
    Build: "build",
    Edge: "edge",
    Lambda: "lambda",
    Static: "static",
    External: "external",
    Firewall: "firewall",
} as const;
export type GetConfigurableLogDrainSources = ClosedEnum<typeof GetConfigurableLogDrainSources>;

export const GetConfigurableLogDrainEnvironments = {
    Production: "production",
    Preview: "preview",
} as const;
export type GetConfigurableLogDrainEnvironments = ClosedEnum<
    typeof GetConfigurableLogDrainEnvironments
>;

export const GetConfigurableLogDrainStatus = {
    Enabled: "enabled",
    Disabled: "disabled",
    Errored: "errored",
} as const;
export type GetConfigurableLogDrainStatus = ClosedEnum<typeof GetConfigurableLogDrainStatus>;

export const GetConfigurableLogDrainDisabledReason = {
    DisabledByOwner: "disabled-by-owner",
    FeatureNotAvailable: "feature-not-available",
    AccountPlanDowngrade: "account-plan-downgrade",
    DisabledByAdmin: "disabled-by-admin",
} as const;
export type GetConfigurableLogDrainDisabledReason = ClosedEnum<
    typeof GetConfigurableLogDrainDisabledReason
>;

export const Compression = {
    Gzip: "gzip",
    Zstd: "zstd",
    None: "none",
} as const;
export type Compression = ClosedEnum<typeof Compression>;

export const GetConfigurableLogDrainCreatedFrom = {
    SelfServed: "self-served",
} as const;
export type GetConfigurableLogDrainCreatedFrom = ClosedEnum<
    typeof GetConfigurableLogDrainCreatedFrom
>;

export type GetConfigurableLogDrainResponseBody = {
    id: string;
    deliveryFormat: GetConfigurableLogDrainDeliveryFormat;
    url: string;
    name: string;
    clientId?: string | undefined;
    configurationId?: string | undefined;
    teamId?: string | null | undefined;
    ownerId: string;
    projectIds?: Array<string> | undefined;
    createdAt: number;
    deletedAt: number | null;
    updatedAt: number;
    sources?: Array<GetConfigurableLogDrainSources> | undefined;
    headers?: { [k: string]: string } | undefined;
    environments: Array<GetConfigurableLogDrainEnvironments>;
    status?: GetConfigurableLogDrainStatus | undefined;
    disabledAt?: number | undefined;
    disabledReason?: GetConfigurableLogDrainDisabledReason | undefined;
    disabledBy?: string | undefined;
    firstErrorTimestamp?: number | undefined;
    samplingRate?: number | undefined;
    compression?: Compression | undefined;
    secret: string;
    createdFrom?: GetConfigurableLogDrainCreatedFrom | undefined;
};

/** @internal */
export const GetConfigurableLogDrainRequest$inboundSchema: z.ZodType<
    GetConfigurableLogDrainRequest,
    z.ZodTypeDef,
    unknown
> = z.object({
    id: z.string(),
    teamId: z.string().optional(),
    slug: z.string().optional(),
});

/** @internal */
export type GetConfigurableLogDrainRequest$Outbound = {
    id: string;
    teamId?: string | undefined;
    slug?: string | undefined;
};

/** @internal */
export const GetConfigurableLogDrainRequest$outboundSchema: z.ZodType<
    GetConfigurableLogDrainRequest$Outbound,
    z.ZodTypeDef,
    GetConfigurableLogDrainRequest
> = z.object({
    id: z.string(),
    teamId: z.string().optional(),
    slug: z.string().optional(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace GetConfigurableLogDrainRequest$ {
    /** @deprecated use `GetConfigurableLogDrainRequest$inboundSchema` instead. */
    export const inboundSchema = GetConfigurableLogDrainRequest$inboundSchema;
    /** @deprecated use `GetConfigurableLogDrainRequest$outboundSchema` instead. */
    export const outboundSchema = GetConfigurableLogDrainRequest$outboundSchema;
    /** @deprecated use `GetConfigurableLogDrainRequest$Outbound` instead. */
    export type Outbound = GetConfigurableLogDrainRequest$Outbound;
}

/** @internal */
export const GetConfigurableLogDrainDeliveryFormat$inboundSchema: z.ZodNativeEnum<
    typeof GetConfigurableLogDrainDeliveryFormat
> = z.nativeEnum(GetConfigurableLogDrainDeliveryFormat);

/** @internal */
export const GetConfigurableLogDrainDeliveryFormat$outboundSchema: z.ZodNativeEnum<
    typeof GetConfigurableLogDrainDeliveryFormat
> = GetConfigurableLogDrainDeliveryFormat$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace GetConfigurableLogDrainDeliveryFormat$ {
    /** @deprecated use `GetConfigurableLogDrainDeliveryFormat$inboundSchema` instead. */
    export const inboundSchema = GetConfigurableLogDrainDeliveryFormat$inboundSchema;
    /** @deprecated use `GetConfigurableLogDrainDeliveryFormat$outboundSchema` instead. */
    export const outboundSchema = GetConfigurableLogDrainDeliveryFormat$outboundSchema;
}

/** @internal */
export const GetConfigurableLogDrainSources$inboundSchema: z.ZodNativeEnum<
    typeof GetConfigurableLogDrainSources
> = z.nativeEnum(GetConfigurableLogDrainSources);

/** @internal */
export const GetConfigurableLogDrainSources$outboundSchema: z.ZodNativeEnum<
    typeof GetConfigurableLogDrainSources
> = GetConfigurableLogDrainSources$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace GetConfigurableLogDrainSources$ {
    /** @deprecated use `GetConfigurableLogDrainSources$inboundSchema` instead. */
    export const inboundSchema = GetConfigurableLogDrainSources$inboundSchema;
    /** @deprecated use `GetConfigurableLogDrainSources$outboundSchema` instead. */
    export const outboundSchema = GetConfigurableLogDrainSources$outboundSchema;
}

/** @internal */
export const GetConfigurableLogDrainEnvironments$inboundSchema: z.ZodNativeEnum<
    typeof GetConfigurableLogDrainEnvironments
> = z.nativeEnum(GetConfigurableLogDrainEnvironments);

/** @internal */
export const GetConfigurableLogDrainEnvironments$outboundSchema: z.ZodNativeEnum<
    typeof GetConfigurableLogDrainEnvironments
> = GetConfigurableLogDrainEnvironments$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace GetConfigurableLogDrainEnvironments$ {
    /** @deprecated use `GetConfigurableLogDrainEnvironments$inboundSchema` instead. */
    export const inboundSchema = GetConfigurableLogDrainEnvironments$inboundSchema;
    /** @deprecated use `GetConfigurableLogDrainEnvironments$outboundSchema` instead. */
    export const outboundSchema = GetConfigurableLogDrainEnvironments$outboundSchema;
}

/** @internal */
export const GetConfigurableLogDrainStatus$inboundSchema: z.ZodNativeEnum<
    typeof GetConfigurableLogDrainStatus
> = z.nativeEnum(GetConfigurableLogDrainStatus);

/** @internal */
export const GetConfigurableLogDrainStatus$outboundSchema: z.ZodNativeEnum<
    typeof GetConfigurableLogDrainStatus
> = GetConfigurableLogDrainStatus$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace GetConfigurableLogDrainStatus$ {
    /** @deprecated use `GetConfigurableLogDrainStatus$inboundSchema` instead. */
    export const inboundSchema = GetConfigurableLogDrainStatus$inboundSchema;
    /** @deprecated use `GetConfigurableLogDrainStatus$outboundSchema` instead. */
    export const outboundSchema = GetConfigurableLogDrainStatus$outboundSchema;
}

/** @internal */
export const GetConfigurableLogDrainDisabledReason$inboundSchema: z.ZodNativeEnum<
    typeof GetConfigurableLogDrainDisabledReason
> = z.nativeEnum(GetConfigurableLogDrainDisabledReason);

/** @internal */
export const GetConfigurableLogDrainDisabledReason$outboundSchema: z.ZodNativeEnum<
    typeof GetConfigurableLogDrainDisabledReason
> = GetConfigurableLogDrainDisabledReason$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace GetConfigurableLogDrainDisabledReason$ {
    /** @deprecated use `GetConfigurableLogDrainDisabledReason$inboundSchema` instead. */
    export const inboundSchema = GetConfigurableLogDrainDisabledReason$inboundSchema;
    /** @deprecated use `GetConfigurableLogDrainDisabledReason$outboundSchema` instead. */
    export const outboundSchema = GetConfigurableLogDrainDisabledReason$outboundSchema;
}

/** @internal */
export const Compression$inboundSchema: z.ZodNativeEnum<typeof Compression> =
    z.nativeEnum(Compression);

/** @internal */
export const Compression$outboundSchema: z.ZodNativeEnum<typeof Compression> =
    Compression$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace Compression$ {
    /** @deprecated use `Compression$inboundSchema` instead. */
    export const inboundSchema = Compression$inboundSchema;
    /** @deprecated use `Compression$outboundSchema` instead. */
    export const outboundSchema = Compression$outboundSchema;
}

/** @internal */
export const GetConfigurableLogDrainCreatedFrom$inboundSchema: z.ZodNativeEnum<
    typeof GetConfigurableLogDrainCreatedFrom
> = z.nativeEnum(GetConfigurableLogDrainCreatedFrom);

/** @internal */
export const GetConfigurableLogDrainCreatedFrom$outboundSchema: z.ZodNativeEnum<
    typeof GetConfigurableLogDrainCreatedFrom
> = GetConfigurableLogDrainCreatedFrom$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace GetConfigurableLogDrainCreatedFrom$ {
    /** @deprecated use `GetConfigurableLogDrainCreatedFrom$inboundSchema` instead. */
    export const inboundSchema = GetConfigurableLogDrainCreatedFrom$inboundSchema;
    /** @deprecated use `GetConfigurableLogDrainCreatedFrom$outboundSchema` instead. */
    export const outboundSchema = GetConfigurableLogDrainCreatedFrom$outboundSchema;
}

/** @internal */
export const GetConfigurableLogDrainResponseBody$inboundSchema: z.ZodType<
    GetConfigurableLogDrainResponseBody,
    z.ZodTypeDef,
    unknown
> = z.object({
    id: z.string(),
    deliveryFormat: GetConfigurableLogDrainDeliveryFormat$inboundSchema,
    url: z.string(),
    name: z.string(),
    clientId: z.string().optional(),
    configurationId: z.string().optional(),
    teamId: z.nullable(z.string()).optional(),
    ownerId: z.string(),
    projectIds: z.array(z.string()).optional(),
    createdAt: z.number(),
    deletedAt: z.nullable(z.number()),
    updatedAt: z.number(),
    sources: z.array(GetConfigurableLogDrainSources$inboundSchema).optional(),
    headers: z.record(z.string()).optional(),
    environments: z.array(GetConfigurableLogDrainEnvironments$inboundSchema),
    status: GetConfigurableLogDrainStatus$inboundSchema.optional(),
    disabledAt: z.number().optional(),
    disabledReason: GetConfigurableLogDrainDisabledReason$inboundSchema.optional(),
    disabledBy: z.string().optional(),
    firstErrorTimestamp: z.number().optional(),
    samplingRate: z.number().optional(),
    compression: Compression$inboundSchema.optional(),
    secret: z.string(),
    createdFrom: GetConfigurableLogDrainCreatedFrom$inboundSchema.optional(),
});

/** @internal */
export type GetConfigurableLogDrainResponseBody$Outbound = {
    id: string;
    deliveryFormat: string;
    url: string;
    name: string;
    clientId?: string | undefined;
    configurationId?: string | undefined;
    teamId?: string | null | undefined;
    ownerId: string;
    projectIds?: Array<string> | undefined;
    createdAt: number;
    deletedAt: number | null;
    updatedAt: number;
    sources?: Array<string> | undefined;
    headers?: { [k: string]: string } | undefined;
    environments: Array<string>;
    status?: string | undefined;
    disabledAt?: number | undefined;
    disabledReason?: string | undefined;
    disabledBy?: string | undefined;
    firstErrorTimestamp?: number | undefined;
    samplingRate?: number | undefined;
    compression?: string | undefined;
    secret: string;
    createdFrom?: string | undefined;
};

/** @internal */
export const GetConfigurableLogDrainResponseBody$outboundSchema: z.ZodType<
    GetConfigurableLogDrainResponseBody$Outbound,
    z.ZodTypeDef,
    GetConfigurableLogDrainResponseBody
> = z.object({
    id: z.string(),
    deliveryFormat: GetConfigurableLogDrainDeliveryFormat$outboundSchema,
    url: z.string(),
    name: z.string(),
    clientId: z.string().optional(),
    configurationId: z.string().optional(),
    teamId: z.nullable(z.string()).optional(),
    ownerId: z.string(),
    projectIds: z.array(z.string()).optional(),
    createdAt: z.number(),
    deletedAt: z.nullable(z.number()),
    updatedAt: z.number(),
    sources: z.array(GetConfigurableLogDrainSources$outboundSchema).optional(),
    headers: z.record(z.string()).optional(),
    environments: z.array(GetConfigurableLogDrainEnvironments$outboundSchema),
    status: GetConfigurableLogDrainStatus$outboundSchema.optional(),
    disabledAt: z.number().optional(),
    disabledReason: GetConfigurableLogDrainDisabledReason$outboundSchema.optional(),
    disabledBy: z.string().optional(),
    firstErrorTimestamp: z.number().optional(),
    samplingRate: z.number().optional(),
    compression: Compression$outboundSchema.optional(),
    secret: z.string(),
    createdFrom: GetConfigurableLogDrainCreatedFrom$outboundSchema.optional(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace GetConfigurableLogDrainResponseBody$ {
    /** @deprecated use `GetConfigurableLogDrainResponseBody$inboundSchema` instead. */
    export const inboundSchema = GetConfigurableLogDrainResponseBody$inboundSchema;
    /** @deprecated use `GetConfigurableLogDrainResponseBody$outboundSchema` instead. */
    export const outboundSchema = GetConfigurableLogDrainResponseBody$outboundSchema;
    /** @deprecated use `GetConfigurableLogDrainResponseBody$Outbound` instead. */
    export type Outbound = GetConfigurableLogDrainResponseBody$Outbound;
}
