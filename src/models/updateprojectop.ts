/*
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

import { remap as remap$ } from "../lib/primitives";
import { ACLAction, ACLAction$ } from "./aclaction";
import * as z from "zod";

/**
 * The framework that is being used for this project. When `null` is used no framework is selected
 */
export enum UpdateProjectFramework {
    Blitzjs = "blitzjs",
    Nextjs = "nextjs",
    Gatsby = "gatsby",
    Remix = "remix",
    Astro = "astro",
    Hexo = "hexo",
    Eleventy = "eleventy",
    Docusaurus2 = "docusaurus-2",
    Docusaurus = "docusaurus",
    Preact = "preact",
    Solidstart1 = "solidstart-1",
    Solidstart = "solidstart",
    Dojo = "dojo",
    Ember = "ember",
    Vue = "vue",
    Scully = "scully",
    IonicAngular = "ionic-angular",
    Angular = "angular",
    Polymer = "polymer",
    Svelte = "svelte",
    Sveltekit = "sveltekit",
    Sveltekit1 = "sveltekit-1",
    IonicReact = "ionic-react",
    CreateReactApp = "create-react-app",
    Gridsome = "gridsome",
    Umijs = "umijs",
    Sapper = "sapper",
    Saber = "saber",
    Stencil = "stencil",
    Nuxtjs = "nuxtjs",
    Redwoodjs = "redwoodjs",
    Hugo = "hugo",
    Jekyll = "jekyll",
    Brunch = "brunch",
    Middleman = "middleman",
    Zola = "zola",
    Hydrogen = "hydrogen",
    Vite = "vite",
    Vitepress = "vitepress",
    Vuepress = "vuepress",
    Parcel = "parcel",
    Sanity = "sanity",
    Storybook = "storybook",
}

export enum UpdateProjectNodeVersion {
    TwentyX = "20.x",
    EighteenX = "18.x",
    SixteenX = "16.x",
    FourteenX = "14.x",
    TwelveX = "12.x",
    TenX = "10.x",
}

/**
 * Specify if the password will apply to every Deployment Target or just Preview
 */
export enum DeploymentType {
    All = "all",
    Preview = "preview",
    ProdDeploymentUrlsAndAllPreviews = "prod_deployment_urls_and_all_previews",
}

/**
 * Allows to protect project deployments with a password
 */
export type UpdateProjectPasswordProtection = {
    /**
     * Specify if the password will apply to every Deployment Target or just Preview
     */
    deploymentType: DeploymentType;
    /**
     * The password that will be used to protect Project Deployments
     */
    password?: string | null | undefined;
};

/**
 * Specify if the Vercel Authentication (SSO Protection) will apply to every Deployment Target or just Preview
 */
export enum UpdateProjectDeploymentType {
    All = "all",
    Preview = "preview",
    ProdDeploymentUrlsAndAllPreviews = "prod_deployment_urls_and_all_previews",
}

/**
 * Ensures visitors to your Preview Deployments are logged into Vercel and have a minimum of Viewer access on your team
 */
export type SsoProtection = {
    /**
     * Specify if the Vercel Authentication (SSO Protection) will apply to every Deployment Target or just Preview
     */
    deploymentType?: UpdateProjectDeploymentType | undefined;
};

/**
 * Specify if the Trusted IPs will apply to every Deployment Target or just Preview
 */
export enum UpdateProjectProjectsDeploymentType {
    All = "all",
    Preview = "preview",
    Production = "production",
    ProdDeploymentUrlsAndAllPreviews = "prod_deployment_urls_and_all_previews",
}

export type Addresses = {
    /**
     * The IP addresses that are allowlisted. Supports IPv4 addresses and CIDR notations. IPv6 is not supported
     */
    value: string;
    /**
     * An optional note explaining what the IP address or subnet is used for
     */
    note?: string | undefined;
};

/**
 * exclusive: ip match is enough to bypass deployment protection (regardless of other settings). additional: ip must match + any other protection should be also provided (password, vercel auth, shareable link, automation bypass header, automation bypass query param)
 */
export enum ProtectionMode {
    Exclusive = "exclusive",
    Additional = "additional",
}

/**
 * Restricts access to deployments based on the incoming request IP address
 */
export type TrustedIps = {
    /**
     * Specify if the Trusted IPs will apply to every Deployment Target or just Preview
     */
    deploymentType: UpdateProjectProjectsDeploymentType;
    addresses: Array<Addresses>;
    /**
     * exclusive: ip match is enough to bypass deployment protection (regardless of other settings). additional: ip must match + any other protection should be also provided (password, vercel auth, shareable link, automation bypass header, automation bypass query param)
     */
    protectionMode: ProtectionMode;
};

export type Paths = {
    /**
     * The regex path that should not be protected by Deployment Protection
     */
    value: string;
};

/**
 * Specify a list of paths that should not be protected by Deployment Protection to enable Cors preflight requests
 */
export type OptionsAllowlist = {
    paths: Array<Paths>;
};

export type UpdateProjectRequestBody = {
    autoExposeSystemEnvs?: boolean | undefined;
    autoAssignCustomDomains?: boolean | undefined;
    autoAssignCustomDomainsUpdatedBy?: string | undefined;
    /**
     * The build command for this project. When `null` is used this value will be automatically detected
     */
    buildCommand?: string | null | undefined;
    commandForIgnoringBuildStep?: string | null | undefined;
    /**
     * Specifies whether customer support can see git source for a deployment
     */
    customerSupportCodeVisibility?: boolean | undefined;
    /**
     * The dev command for this project. When `null` is used this value will be automatically detected
     */
    devCommand?: string | null | undefined;
    directoryListing?: boolean | undefined;
    /**
     * The framework that is being used for this project. When `null` is used no framework is selected
     */
    framework?: UpdateProjectFramework | null | undefined;
    /**
     * Specifies whether PRs from Git forks should require a team member's authorization before it can be deployed
     */
    gitForkProtection?: boolean | undefined;
    /**
     * Specifies whether Git LFS is enabled for this project.
     */
    gitLFS?: boolean | undefined;
    /**
     * The install command for this project. When `null` is used this value will be automatically detected
     */
    installCommand?: string | null | undefined;
    /**
     * The desired name for the project
     */
    name?: string | undefined;
    nodeVersion?: UpdateProjectNodeVersion | undefined;
    /**
     * The output directory of the project. When `null` is used this value will be automatically detected
     */
    outputDirectory?: string | null | undefined;
    /**
     * Specifies whether the source code and logs of the deployments for this project should be public or not
     */
    publicSource?: boolean | null | undefined;
    /**
     * The name of a directory or relative path to the source code of your project. When `null` is used it will default to the project root
     */
    rootDirectory?: string | null | undefined;
    /**
     * The region to deploy Serverless Functions in this project
     */
    serverlessFunctionRegion?: string | null | undefined;
    /**
     * Specifies whether Zero Config Failover is enabled for this project.
     */
    serverlessFunctionZeroConfigFailover?: boolean | undefined;
    /**
     * Deployments created before this absolute datetime have Skew Protection disabled. Value is in milliseconds since epoch to match \"createdAt\" fields.
     */
    skewProtectionBoundaryAt?: number | undefined;
    /**
     * Deployments created before this rolling window have Skew Protection disabled. Value is in seconds to match \"revalidate\" fields.
     */
    skewProtectionMaxAge?: number | undefined;
    /**
     * Opts-out of the message prompting a CLI user to connect a Git repository in `vercel link`.
     *
     * @deprecated field: This will be removed in a future release, please migrate away from it as soon as possible.
     */
    skipGitConnectDuringLink?: boolean | undefined;
    /**
     * Indicates if there are source files outside of the root directory
     */
    sourceFilesOutsideRootDirectory?: boolean | undefined;
    /**
     * Opt-in to Preview comments on the project level
     */
    enablePreviewFeedback?: boolean | null | undefined;
    /**
     * Allows to protect project deployments with a password
     */
    passwordProtection?: UpdateProjectPasswordProtection | null | undefined;
    /**
     * Ensures visitors to your Preview Deployments are logged into Vercel and have a minimum of Viewer access on your team
     */
    ssoProtection?: SsoProtection | null | undefined;
    /**
     * Restricts access to deployments based on the incoming request IP address
     */
    trustedIps?: TrustedIps | null | undefined;
    /**
     * Specify a list of paths that should not be protected by Deployment Protection to enable Cors preflight requests
     */
    optionsAllowlist?: OptionsAllowlist | null | undefined;
};

export type UpdateProjectRequest = {
    /**
     * The unique project identifier or the project name
     */
    idOrName: string;
    /**
     * The Team identifier to perform the request on behalf of.
     */
    teamId?: string | undefined;
    /**
     * The Team slug to perform the request on behalf of.
     */
    slug?: string | undefined;
    requestBody?: UpdateProjectRequestBody | undefined;
};

export type UpdateProjectAnalytics = {
    id: string;
    canceledAt?: number | null | undefined;
    disabledAt: number;
    enabledAt: number;
    paidAt?: number | undefined;
    sampleRatePercent?: number | null | undefined;
    spendLimitInDollars?: number | null | undefined;
};

export type UpdateProjectSpeedInsights = {
    id: string;
    enabledAt?: number | undefined;
    disabledAt?: number | undefined;
    canceledAt?: number | undefined;
    hasData?: boolean | undefined;
    paidAt?: number | undefined;
};

export type UpdateProjectDefinitions = {
    /**
     * The hostname that should be used.
     */
    host: string;
    /**
     * The path that should be called for the cronjob.
     */
    path: string;
    /**
     * The cron expression.
     */
    schedule: string;
};

export type UpdateProjectCrons = {
    /**
     * The time the feature was enabled for this project. Note: It enables automatically with the first Deployment that outputs cronjobs.
     */
    enabledAt: number;
    /**
     * The time the feature was disabled for this project.
     */
    disabledAt: number | null;
    updatedAt: number;
    /**
     * The ID of the Deployment from which the definitions originated.
     */
    deploymentId: string | null;
    definitions: Array<UpdateProjectDefinitions>;
};

export type UpdateProjectDataCache = {
    userDisabled: boolean;
    storageSizeBytes?: number | null | undefined;
    unlimited?: boolean | undefined;
};

export enum UpdateProjectTarget2 {
    Production = "production",
    Preview = "preview",
    Development = "development",
}

export enum UpdateProjectTarget1 {
    Production = "production",
    Preview = "preview",
    Development = "development",
}

export type UpdateProjectTarget = Array<UpdateProjectTarget1> | UpdateProjectTarget2;

export enum UpdateProjectType {
    Secret = "secret",
    System = "system",
    Encrypted = "encrypted",
    Plain = "plain",
    Sensitive = "sensitive",
}

export enum UpdateProjectContentHintProjectsResponse200ApplicationJSONResponseBodyEnv14Type {
    IntegrationStoreSecret = "integration-store-secret",
}

export type UpdateProjectContentHint14 = {
    type: UpdateProjectContentHintProjectsResponse200ApplicationJSONResponseBodyEnv14Type;
    storeId: string;
};

export enum UpdateProjectContentHintProjectsResponse200ApplicationJSONResponseBodyEnv13Type {
    PostgresUrlNoSsl = "postgres-url-no-ssl",
}

export type UpdateProjectContentHint13 = {
    type: UpdateProjectContentHintProjectsResponse200ApplicationJSONResponseBodyEnv13Type;
    storeId: string;
};

export enum UpdateProjectContentHintProjectsResponse200ApplicationJSONResponseBodyEnv12Type {
    PostgresDatabase = "postgres-database",
}

export type UpdateProjectContentHint12 = {
    type: UpdateProjectContentHintProjectsResponse200ApplicationJSONResponseBodyEnv12Type;
    storeId: string;
};

export enum UpdateProjectContentHintProjectsResponse200ApplicationJSONResponseBodyEnv11Type {
    PostgresPassword = "postgres-password",
}

export type UpdateProjectContentHint11 = {
    type: UpdateProjectContentHintProjectsResponse200ApplicationJSONResponseBodyEnv11Type;
    storeId: string;
};

export enum UpdateProjectContentHintProjectsResponse200ApplicationJSONResponseBodyEnv10Type {
    PostgresHost = "postgres-host",
}

export type UpdateProjectContentHint10 = {
    type: UpdateProjectContentHintProjectsResponse200ApplicationJSONResponseBodyEnv10Type;
    storeId: string;
};

export enum UpdateProjectContentHintProjectsResponse200ApplicationJSONResponseBodyEnv9Type {
    PostgresUser = "postgres-user",
}

export type UpdateProjectContentHint9 = {
    type: UpdateProjectContentHintProjectsResponse200ApplicationJSONResponseBodyEnv9Type;
    storeId: string;
};

export enum UpdateProjectContentHintProjectsResponse200ApplicationJSONResponseBodyEnv8Type {
    PostgresPrismaUrl = "postgres-prisma-url",
}

export type UpdateProjectContentHint8 = {
    type: UpdateProjectContentHintProjectsResponse200ApplicationJSONResponseBodyEnv8Type;
    storeId: string;
};

export enum UpdateProjectContentHintProjectsResponse200ApplicationJSONResponseBodyEnvType {
    PostgresUrlNonPooling = "postgres-url-non-pooling",
}

export type UpdateProjectContentHint7 = {
    type: UpdateProjectContentHintProjectsResponse200ApplicationJSONResponseBodyEnvType;
    storeId: string;
};

export enum UpdateProjectContentHintProjectsResponse200ApplicationJSONResponseBodyType {
    PostgresUrl = "postgres-url",
}

export type UpdateProjectContentHint6 = {
    type: UpdateProjectContentHintProjectsResponse200ApplicationJSONResponseBodyType;
    storeId: string;
};

export enum UpdateProjectContentHintProjectsResponse200ApplicationJSONType {
    BlobReadWriteToken = "blob-read-write-token",
}

export type UpdateProjectContentHint5 = {
    type: UpdateProjectContentHintProjectsResponse200ApplicationJSONType;
    storeId: string;
};

export enum UpdateProjectContentHintProjectsResponse200Type {
    RedisRestApiReadOnlyToken = "redis-rest-api-read-only-token",
}

export type UpdateProjectContentHint4 = {
    type: UpdateProjectContentHintProjectsResponse200Type;
    storeId: string;
};

export enum UpdateProjectContentHintProjectsResponseType {
    RedisRestApiToken = "redis-rest-api-token",
}

export type UpdateProjectContentHint3 = {
    type: UpdateProjectContentHintProjectsResponseType;
    storeId: string;
};

export enum UpdateProjectContentHintProjectsType {
    RedisRestApiUrl = "redis-rest-api-url",
}

export type UpdateProjectContentHint2 = {
    type: UpdateProjectContentHintProjectsType;
    storeId: string;
};

export enum UpdateProjectContentHintType {
    RedisUrl = "redis-url",
}

export type UpdateProjectContentHint1 = {
    type: UpdateProjectContentHintType;
    storeId: string;
};

export type UpdateProjectContentHint =
    | UpdateProjectContentHint1
    | UpdateProjectContentHint2
    | UpdateProjectContentHint3
    | UpdateProjectContentHint4
    | UpdateProjectContentHint5
    | UpdateProjectContentHint6
    | UpdateProjectContentHint7
    | UpdateProjectContentHint8
    | UpdateProjectContentHint9
    | UpdateProjectContentHint10
    | UpdateProjectContentHint11
    | UpdateProjectContentHint12
    | UpdateProjectContentHint13
    | UpdateProjectContentHint14;

export enum UpdateProjectProjectsResponse200Type {
    FlagsSecret = "flags-secret",
}

/**
 * Similar to `contentHints`, but should not be exposed to the user.
 */
export type UpdateProjectInternalContentHint = {
    type: UpdateProjectProjectsResponse200Type;
    /**
     * Contains the `value` of the env variable, encrypted with a special key to make decryption possible in the subscriber Lambda.
     */
    encryptedValue: string;
};

export type UpdateProjectEnv = {
    target?: Array<UpdateProjectTarget1> | UpdateProjectTarget2 | undefined;
    type: UpdateProjectType;
    id?: string | undefined;
    key: string;
    value: string;
    configurationId?: string | null | undefined;
    createdAt?: number | undefined;
    updatedAt?: number | undefined;
    createdBy?: string | null | undefined;
    updatedBy?: string | null | undefined;
    gitBranch?: string | undefined;
    edgeConfigId?: string | null | undefined;
    edgeConfigTokenId?: string | null | undefined;
    contentHint?:
        | UpdateProjectContentHint1
        | UpdateProjectContentHint2
        | UpdateProjectContentHint3
        | UpdateProjectContentHint4
        | UpdateProjectContentHint5
        | UpdateProjectContentHint6
        | UpdateProjectContentHint7
        | UpdateProjectContentHint8
        | UpdateProjectContentHint9
        | UpdateProjectContentHint10
        | UpdateProjectContentHint11
        | UpdateProjectContentHint12
        | UpdateProjectContentHint13
        | UpdateProjectContentHint14
        | null
        | undefined;
    /**
     * Similar to `contentHints`, but should not be exposed to the user.
     */
    internalContentHint?: UpdateProjectInternalContentHint | null | undefined;
    /**
     * Whether `value` is decrypted.
     */
    decrypted?: boolean | undefined;
    comment?: string | undefined;
    customEnvironmentId?: string | undefined;
};

export enum UpdateProjectProjectsFramework {
    Blitzjs = "blitzjs",
    Nextjs = "nextjs",
    Gatsby = "gatsby",
    Remix = "remix",
    Astro = "astro",
    Hexo = "hexo",
    Eleventy = "eleventy",
    Docusaurus2 = "docusaurus-2",
    Docusaurus = "docusaurus",
    Preact = "preact",
    Solidstart1 = "solidstart-1",
    Solidstart = "solidstart",
    Dojo = "dojo",
    Ember = "ember",
    Vue = "vue",
    Scully = "scully",
    IonicAngular = "ionic-angular",
    Angular = "angular",
    Polymer = "polymer",
    Svelte = "svelte",
    Sveltekit = "sveltekit",
    Sveltekit1 = "sveltekit-1",
    IonicReact = "ionic-react",
    CreateReactApp = "create-react-app",
    Gridsome = "gridsome",
    Umijs = "umijs",
    Sapper = "sapper",
    Saber = "saber",
    Stencil = "stencil",
    Nuxtjs = "nuxtjs",
    Redwoodjs = "redwoodjs",
    Hugo = "hugo",
    Jekyll = "jekyll",
    Brunch = "brunch",
    Middleman = "middleman",
    Zola = "zola",
    Hydrogen = "hydrogen",
    Vite = "vite",
    Vitepress = "vitepress",
    Vuepress = "vuepress",
    Parcel = "parcel",
    Sanity = "sanity",
    Storybook = "storybook",
}

export type UpdateProjectAliasAssigned = number | boolean;

export type UpdateProjectAliasError = {
    code: string;
    message: string;
};

export type UpdateProjectBuilds = {
    use: string;
    src?: string | undefined;
    dest?: string | undefined;
};

export type UpdateProjectCreator = {
    email: string;
    githubLogin?: string | undefined;
    gitlabLogin?: string | undefined;
    uid: string;
    username: string;
};

export enum UpdateProjectPlan {
    Pro = "pro",
    Enterprise = "enterprise",
    Hobby = "hobby",
}

export enum UpdateProjectReadyState {
    Building = "BUILDING",
    Error = "ERROR",
    Initializing = "INITIALIZING",
    Queued = "QUEUED",
    Ready = "READY",
    Canceled = "CANCELED",
}

export enum UpdateProjectReadySubstate {
    Staged = "STAGED",
    Promoted = "PROMOTED",
}

export enum UpdateProjectProjectsType {
    Lambdas = "LAMBDAS",
}

export enum UpdateProjectChecksConclusion {
    Succeeded = "succeeded",
    Failed = "failed",
    Skipped = "skipped",
    Canceled = "canceled",
}

export enum UpdateProjectChecksState {
    Registered = "registered",
    Running = "running",
    Completed = "completed",
}

export type UpdateProjectOidcTokenClaims = string | Array<string>;

export type UpdateProjectLatestDeployments = {
    alias?: Array<string> | undefined;
    aliasAssigned?: number | boolean | null | undefined;
    aliasError?: UpdateProjectAliasError | null | undefined;
    aliasFinal?: string | null | undefined;
    automaticAliases?: Array<string> | undefined;
    builds?: Array<UpdateProjectBuilds> | undefined;
    connectBuildsEnabled?: boolean | undefined;
    connectConfigurationId?: string | undefined;
    createdAt: number;
    createdIn: string;
    creator: UpdateProjectCreator | null;
    deploymentHostname: string;
    name: string;
    forced?: boolean | undefined;
    id: string;
    meta?: { [k: string]: string } | undefined;
    monorepoManager?: string | null | undefined;
    plan: UpdateProjectPlan;
    private: boolean;
    readyState: UpdateProjectReadyState;
    readySubstate?: UpdateProjectReadySubstate | undefined;
    requestedAt?: number | undefined;
    target?: string | null | undefined;
    teamId?: string | null | undefined;
    type: UpdateProjectProjectsType;
    url: string;
    userId: string;
    withCache?: boolean | undefined;
    checksConclusion?: UpdateProjectChecksConclusion | undefined;
    checksState?: UpdateProjectChecksState | undefined;
    readyAt?: number | undefined;
    buildingAt?: number | undefined;
    /**
     * Whether or not preview comments are enabled for the deployment
     */
    previewCommentsEnabled?: boolean | undefined;
    oidcTokenClaims?: { [k: string]: string | Array<string> } | undefined;
};

export enum UpdateProjectLinkProjectsResponseType {
    Bitbucket = "bitbucket",
}

export type UpdateProjectLinkProjectsResponseDeployHooks = {
    createdAt?: number | undefined;
    id: string;
    name: string;
    ref: string;
    url: string;
};

export type UpdateProjectLink3 = {
    name?: string | undefined;
    slug?: string | undefined;
    owner?: string | undefined;
    type?: UpdateProjectLinkProjectsResponseType | undefined;
    uuid?: string | undefined;
    workspaceUuid?: string | undefined;
    createdAt?: number | undefined;
    deployHooks: Array<UpdateProjectLinkProjectsResponseDeployHooks>;
    gitCredentialId?: string | undefined;
    updatedAt?: number | undefined;
    sourceless?: boolean | undefined;
    productionBranch?: string | undefined;
};

export enum UpdateProjectLinkProjectsType {
    Gitlab = "gitlab",
}

export type UpdateProjectLinkProjectsDeployHooks = {
    createdAt?: number | undefined;
    id: string;
    name: string;
    ref: string;
    url: string;
};

export type UpdateProjectLink2 = {
    projectId?: string | undefined;
    projectName?: string | undefined;
    projectNameWithNamespace?: string | undefined;
    projectNamespace?: string | undefined;
    projectUrl?: string | undefined;
    type?: UpdateProjectLinkProjectsType | undefined;
    createdAt?: number | undefined;
    deployHooks: Array<UpdateProjectLinkProjectsDeployHooks>;
    gitCredentialId?: string | undefined;
    updatedAt?: number | undefined;
    sourceless?: boolean | undefined;
    productionBranch?: string | undefined;
};

export enum UpdateProjectLinkType {
    Github = "github",
}

export type UpdateProjectLinkDeployHooks = {
    createdAt?: number | undefined;
    id: string;
    name: string;
    ref: string;
    url: string;
};

export type UpdateProjectLink1 = {
    org?: string | undefined;
    repo?: string | undefined;
    repoId?: number | undefined;
    type?: UpdateProjectLinkType | undefined;
    createdAt?: number | undefined;
    deployHooks: Array<UpdateProjectLinkDeployHooks>;
    gitCredentialId?: string | undefined;
    updatedAt?: number | undefined;
    sourceless?: boolean | undefined;
    productionBranch?: string | undefined;
};

export type UpdateProjectLink = UpdateProjectLink1 | UpdateProjectLink2 | UpdateProjectLink3;

export enum UpdateProjectProjectsNodeVersion {
    TwentyX = "20.x",
    EighteenX = "18.x",
    SixteenX = "16.x",
    FourteenX = "14.x",
    TwelveX = "12.x",
    TenX = "10.x",
    Eight10X = "8.10.x",
}

export type UpdateProjectPaths = {
    value: string;
};

export type UpdateProjectOptionsAllowlist = {
    paths: Array<UpdateProjectPaths>;
};

export type UpdateProjectProjectsPasswordProtection = {};

export enum UpdateProjectProjectsResponseDeploymentType {
    All = "all",
    Preview = "preview",
    ProdDeploymentUrlsAndAllPreviews = "prod_deployment_urls_and_all_previews",
}

export type UpdateProjectSsoProtection = {
    deploymentType: UpdateProjectProjectsResponseDeploymentType;
};

export type UpdateProjectTargets = string | Array<string>;

export type UpdateProjectPermissions = {
    accessGroup?: Array<ACLAction> | undefined;
    aliasGlobal?: Array<ACLAction> | undefined;
    analyticsSampling?: Array<ACLAction> | undefined;
    analyticsUsage?: Array<ACLAction> | undefined;
    auditLog?: Array<ACLAction> | undefined;
    billingAddress?: Array<ACLAction> | undefined;
    billingInformation?: Array<ACLAction> | undefined;
    billingInvoice?: Array<ACLAction> | undefined;
    billingInvoiceEmailRecipient?: Array<ACLAction> | undefined;
    billingInvoiceLanguage?: Array<ACLAction> | undefined;
    billingPlan?: Array<ACLAction> | undefined;
    billingPurchaseOrder?: Array<ACLAction> | undefined;
    billingTaxId?: Array<ACLAction> | undefined;
    blob?: Array<ACLAction> | undefined;
    budget?: Array<ACLAction> | undefined;
    cacheArtifact?: Array<ACLAction> | undefined;
    cacheArtifactUsageEvent?: Array<ACLAction> | undefined;
    codeChecks?: Array<ACLAction> | undefined;
    concurrentBuilds?: Array<ACLAction> | undefined;
    connect?: Array<ACLAction> | undefined;
    connectConfiguration?: Array<ACLAction> | undefined;
    domain?: Array<ACLAction> | undefined;
    domainAcceptDelegation?: Array<ACLAction> | undefined;
    domainAuthCodes?: Array<ACLAction> | undefined;
    domainCertificate?: Array<ACLAction> | undefined;
    domainCheckConfig?: Array<ACLAction> | undefined;
    domainMove?: Array<ACLAction> | undefined;
    domainPurchase?: Array<ACLAction> | undefined;
    domainRecord?: Array<ACLAction> | undefined;
    domainTransferIn?: Array<ACLAction> | undefined;
    event?: Array<ACLAction> | undefined;
    ownEvent?: Array<ACLAction> | undefined;
    sensitiveEnvironmentVariablePolicy?: Array<ACLAction> | undefined;
    fileUpload?: Array<ACLAction> | undefined;
    gitRepository?: Array<ACLAction> | undefined;
    ipBlocking?: Array<ACLAction> | undefined;
    integration?: Array<ACLAction> | undefined;
    integrationConfiguration?: Array<ACLAction> | undefined;
    integrationConfigurationTransfer?: Array<ACLAction> | undefined;
    integrationConfigurationProjects?: Array<ACLAction> | undefined;
    integrationVercelConfigurationOverride?: Array<ACLAction> | undefined;
    integrationStore?: Array<ACLAction> | undefined;
    integrationEvent?: Array<ACLAction> | undefined;
    integrationResourceSecrets?: Array<ACLAction> | undefined;
    marketplaceBillingData?: Array<ACLAction> | undefined;
    jobGlobal?: Array<ACLAction> | undefined;
    logDrain?: Array<ACLAction> | undefined;
    monitoring?: Array<ACLAction> | undefined;
    monitoringSettings?: Array<ACLAction> | undefined;
    monitoringQuery?: Array<ACLAction> | undefined;
    monitoringChart?: Array<ACLAction> | undefined;
    monitoringAlert?: Array<ACLAction> | undefined;
    notificationDeploymentFailed?: Array<ACLAction> | undefined;
    notificationDomainConfiguration?: Array<ACLAction> | undefined;
    notificationDomainExpire?: Array<ACLAction> | undefined;
    notificationDomainMoved?: Array<ACLAction> | undefined;
    notificationDomainPurchase?: Array<ACLAction> | undefined;
    notificationDomainRenewal?: Array<ACLAction> | undefined;
    notificationDomainTransfer?: Array<ACLAction> | undefined;
    notificationDomainUnverified?: Array<ACLAction> | undefined;
    notificationMonitoringAlert?: Array<ACLAction> | undefined;
    notificationPaymentFailed?: Array<ACLAction> | undefined;
    notificationUsageAlert?: Array<ACLAction> | undefined;
    notificationCustomerBudget?: Array<ACLAction> | undefined;
    notificationStatementOfReasons?: Array<ACLAction> | undefined;
    oauth2Connection?: Array<ACLAction> | undefined;
    openTelemetryEndpoint?: Array<ACLAction> | undefined;
    paymentMethod?: Array<ACLAction> | undefined;
    permissions?: Array<ACLAction> | undefined;
    postgres?: Array<ACLAction> | undefined;
    previewDeploymentSuffix?: Array<ACLAction> | undefined;
    proTrialOnboarding?: Array<ACLAction> | undefined;
    seawallConfig?: Array<ACLAction> | undefined;
    sharedEnvVars?: Array<ACLAction> | undefined;
    sharedEnvVarsProduction?: Array<ACLAction> | undefined;
    space?: Array<ACLAction> | undefined;
    spaceRun?: Array<ACLAction> | undefined;
    passwordProtectionInvoiceItem?: Array<ACLAction> | undefined;
    rateLimit?: Array<ACLAction> | undefined;
    redis?: Array<ACLAction> | undefined;
    repository?: Array<ACLAction> | undefined;
    remoteCaching?: Array<ACLAction> | undefined;
    samlConfig?: Array<ACLAction> | undefined;
    secret?: Array<ACLAction> | undefined;
    redisStoreTokenSet?: Array<ACLAction> | undefined;
    blobStoreTokenSet?: Array<ACLAction> | undefined;
    postgresStoreTokenSet?: Array<ACLAction> | undefined;
    integrationStoreTokenSet?: Array<ACLAction> | undefined;
    supportCase?: Array<ACLAction> | undefined;
    supportCaseComment?: Array<ACLAction> | undefined;
    dataCacheBillingSettings?: Array<ACLAction> | undefined;
    team?: Array<ACLAction> | undefined;
    teamAccessRequest?: Array<ACLAction> | undefined;
    teamFellowMembership?: Array<ACLAction> | undefined;
    teamInvite?: Array<ACLAction> | undefined;
    teamInviteCode?: Array<ACLAction> | undefined;
    teamJoin?: Array<ACLAction> | undefined;
    teamOwnMembership?: Array<ACLAction> | undefined;
    teamOwnMembershipDisconnectSAML?: Array<ACLAction> | undefined;
    token?: Array<ACLAction> | undefined;
    usage?: Array<ACLAction> | undefined;
    usageCycle?: Array<ACLAction> | undefined;
    user?: Array<ACLAction> | undefined;
    userConnection?: Array<ACLAction> | undefined;
    webAnalyticsPlan?: Array<ACLAction> | undefined;
    webAuthn?: Array<ACLAction> | undefined;
    edgeConfig?: Array<ACLAction> | undefined;
    edgeConfigItem?: Array<ACLAction> | undefined;
    edgeConfigSchema?: Array<ACLAction> | undefined;
    edgeConfigToken?: Array<ACLAction> | undefined;
    webhook?: Array<ACLAction> | undefined;
    webhookEvent?: Array<ACLAction> | undefined;
    endpointVerification?: Array<ACLAction> | undefined;
    projectTransferIn?: Array<ACLAction> | undefined;
    oauth2Application?: Array<ACLAction> | undefined;
    aliasProject?: Array<ACLAction> | undefined;
    aliasProtectionBypass?: Array<ACLAction> | undefined;
    productionAliasProtectionBypass?: Array<ACLAction> | undefined;
    connectConfigurationLink?: Array<ACLAction> | undefined;
    dataCacheNamespace?: Array<ACLAction> | undefined;
    deployment?: Array<ACLAction> | undefined;
    deploymentCheck?: Array<ACLAction> | undefined;
    deploymentCheckPreview?: Array<ACLAction> | undefined;
    deploymentCheckReRunFromProductionBranch?: Array<ACLAction> | undefined;
    deploymentProductionGit?: Array<ACLAction> | undefined;
    deploymentPreview?: Array<ACLAction> | undefined;
    deploymentPrivate?: Array<ACLAction> | undefined;
    deploymentPromote?: Array<ACLAction> | undefined;
    deploymentRollback?: Array<ACLAction> | undefined;
    environments?: Array<ACLAction> | undefined;
    logs?: Array<ACLAction> | undefined;
    logsPreset?: Array<ACLAction> | undefined;
    passwordProtection?: Array<ACLAction> | undefined;
    optionsAllowlist?: Array<ACLAction> | undefined;
    job?: Array<ACLAction> | undefined;
    project?: Array<ACLAction> | undefined;
    projectAccessGroup?: Array<ACLAction> | undefined;
    projectAnalyticsSampling?: Array<ACLAction> | undefined;
    projectDeploymentHook?: Array<ACLAction> | undefined;
    projectDomain?: Array<ACLAction> | undefined;
    projectDomainMove?: Array<ACLAction> | undefined;
    projectDomainCheckConfig?: Array<ACLAction> | undefined;
    projectEnvVars?: Array<ACLAction> | undefined;
    projectEnvVarsProduction?: Array<ACLAction> | undefined;
    projectEnvVarsUnownedByIntegration?: Array<ACLAction> | undefined;
    projectId?: Array<ACLAction> | undefined;
    projectIntegrationConfiguration?: Array<ACLAction> | undefined;
    projectLink?: Array<ACLAction> | undefined;
    projectMember?: Array<ACLAction> | undefined;
    projectMonitoring?: Array<ACLAction> | undefined;
    projectPermissions?: Array<ACLAction> | undefined;
    projectProductionBranch?: Array<ACLAction> | undefined;
    projectTransfer?: Array<ACLAction> | undefined;
    projectTransferOut?: Array<ACLAction> | undefined;
    projectProtectionBypass?: Array<ACLAction> | undefined;
    projectUsage?: Array<ACLAction> | undefined;
    projectAnalyticsUsage?: Array<ACLAction> | undefined;
    projectSupportCase?: Array<ACLAction> | undefined;
    projectSupportCaseComment?: Array<ACLAction> | undefined;
    projectDeploymentExpiration?: Array<ACLAction> | undefined;
    skewProtection?: Array<ACLAction> | undefined;
    analytics?: Array<ACLAction> | undefined;
    trustedIps?: Array<ACLAction> | undefined;
    webAnalytics?: Array<ACLAction> | undefined;
    sharedEnvVarConnection?: Array<ACLAction> | undefined;
};

export type UpdateProjectLastRollbackTarget = {};

export enum UpdateProjectJobStatus {
    Succeeded = "succeeded",
    Failed = "failed",
    Skipped = "skipped",
    Pending = "pending",
    InProgress = "in-progress",
}

export enum UpdateProjectProjectsResponseType {
    Promote = "promote",
    Rollback = "rollback",
}

export type UpdateProjectLastAliasRequest = {
    fromDeploymentId: string;
    toDeploymentId: string;
    jobStatus: UpdateProjectJobStatus;
    requestedAt: number;
    type: UpdateProjectProjectsResponseType;
};

export enum UpdateProjectScope {
    AutomationBypass = "automation-bypass",
}

export type UpdateProjectProtectionBypass = {
    createdAt: number;
    createdBy: string;
    scope: UpdateProjectScope;
};

export enum UpdateProjectTrustedIpsProjectsDeploymentType {
    All = "all",
    Preview = "preview",
    ProdDeploymentUrlsAndAllPreviews = "prod_deployment_urls_and_all_previews",
    Production = "production",
}

export type UpdateProjectTrustedIps2 = {
    deploymentType: UpdateProjectTrustedIpsProjectsDeploymentType;
};

export enum UpdateProjectTrustedIpsDeploymentType {
    All = "all",
    Preview = "preview",
    ProdDeploymentUrlsAndAllPreviews = "prod_deployment_urls_and_all_previews",
    Production = "production",
}

export type UpdateProjectTrustedIpsAddresses = {
    value: string;
    note?: string | undefined;
};

export enum UpdateProjectTrustedIpsProtectionMode {
    Exclusive = "exclusive",
    Additional = "additional",
}

export type UpdateProjectTrustedIps1 = {
    deploymentType: UpdateProjectTrustedIpsDeploymentType;
    addresses: Array<UpdateProjectTrustedIpsAddresses>;
    protectionMode: UpdateProjectTrustedIpsProtectionMode;
};

export type UpdateProjectTrustedIps = UpdateProjectTrustedIps2 | UpdateProjectTrustedIps1;

export type UpdateProjectGitComments = {
    /**
     * Whether the Vercel bot should comment on PRs
     */
    onPullRequest: boolean;
    /**
     * Whether the Vercel bot should comment on commits
     */
    onCommit: boolean;
};

export type UpdateProjectWebAnalytics = {
    id: string;
    disabledAt?: number | undefined;
    canceledAt?: number | undefined;
    enabledAt?: number | undefined;
    hasData?: boolean | undefined;
};

export type UpdateProjectSrc2 = {
    re?: string | undefined;
    eq?: string | undefined;
    neq?: string | undefined;
    inc?: Array<string> | undefined;
    ninc?: Array<string> | undefined;
    pre?: string | undefined;
    suf?: string | undefined;
    gt?: number | undefined;
    gte?: number | undefined;
    lt?: number | undefined;
    lte?: number | undefined;
};

export type UpdateProjectSrc = UpdateProjectSrc2 | string;

export enum UpdateProjectProjectsResponse200ApplicationJSONType {
    Host = "host",
    Method = "method",
    Path = "path",
    Header = "header",
    Cookie = "cookie",
    Query = "query",
    IpAddress = "ip_address",
    Protocol = "protocol",
    Scheme = "scheme",
    Region = "region",
}

export type UpdateProjectValue2 = {
    re?: string | undefined;
    eq?: string | undefined;
    neq?: string | undefined;
    inc?: Array<string> | undefined;
    ninc?: Array<string> | undefined;
    pre?: string | undefined;
    suf?: string | undefined;
    gt?: number | undefined;
    gte?: number | undefined;
    lt?: number | undefined;
    lte?: number | undefined;
};

export type UpdateProjectValue = UpdateProjectValue2 | string;

export type UpdateProjectHas = {
    type: UpdateProjectProjectsResponse200ApplicationJSONType;
    key?: string | undefined;
    value?: UpdateProjectValue2 | string | undefined;
};

export enum UpdateProjectProjectsResponse200ApplicationJSONResponseBodyType {
    Host = "host",
    Method = "method",
    Path = "path",
    Header = "header",
    Cookie = "cookie",
    Query = "query",
    IpAddress = "ip_address",
    Protocol = "protocol",
    Scheme = "scheme",
    Region = "region",
}

export type UpdateProjectValueProjects2 = {
    re?: string | undefined;
    eq?: string | undefined;
    neq?: string | undefined;
    inc?: Array<string> | undefined;
    ninc?: Array<string> | undefined;
    pre?: string | undefined;
    suf?: string | undefined;
    gt?: number | undefined;
    gte?: number | undefined;
    lt?: number | undefined;
    lte?: number | undefined;
};

export type UpdateProjectProjectsValue = UpdateProjectValueProjects2 | string;

export type UpdateProjectMissing = {
    type: UpdateProjectProjectsResponse200ApplicationJSONResponseBodyType;
    key?: string | undefined;
    value?: UpdateProjectValueProjects2 | string | undefined;
};

export enum UpdateProjectHandle {
    Init = "init",
    Finalize = "finalize",
}

export enum UpdateProjectAction {
    Deny = "deny",
    Challenge = "challenge",
    Log = "log",
    Bypass = "bypass",
    RateLimit = "rate_limit",
}

export enum UpdateProjectAlgo {
    FixedWindow = "fixed_window",
    TokenBucket = "token_bucket",
}

export type UpdateProjectErl = {
    algo: UpdateProjectAlgo;
    window: number;
    limit: number;
    keys: Array<string>;
};

export type UpdateProjectMitigate = {
    action: UpdateProjectAction;
    ruleId: string;
    erl?: UpdateProjectErl | undefined;
};

export type UpdateProjectFirewallRoutes = {
    src?: UpdateProjectSrc2 | string | undefined;
    has?: Array<UpdateProjectHas> | undefined;
    missing?: Array<UpdateProjectMissing> | undefined;
    dest?: string | undefined;
    status?: number | undefined;
    handle?: UpdateProjectHandle | undefined;
    mitigate?: UpdateProjectMitigate | undefined;
};

export type UpdateProjectSecurity = {
    attackModeEnabled?: boolean | undefined;
    attackModeUpdatedAt?: number | undefined;
    firewallEnabled?: boolean | undefined;
    firewallUpdatedAt?: number | undefined;
    attackModeActiveUntil?: number | null | undefined;
    firewallConfigVersion?: number | undefined;
    firewallRoutes?: Array<UpdateProjectFirewallRoutes> | undefined;
    firewallSeawallEnabled?: boolean | undefined;
    ja3Enabled?: boolean | undefined;
    ja4Enabled?: boolean | undefined;
};

export type UpdateProjectOidcTokenConfig = {
    enabled: boolean;
};

/**
 * The project was successfully updated
 */
export type UpdateProjectResponseBody = {
    accountId: string;
    analytics?: UpdateProjectAnalytics | undefined;
    speedInsights?: UpdateProjectSpeedInsights | undefined;
    autoExposeSystemEnvs?: boolean | undefined;
    autoAssignCustomDomains?: boolean | undefined;
    autoAssignCustomDomainsUpdatedBy?: string | undefined;
    buildCommand?: string | null | undefined;
    commandForIgnoringBuildStep?: string | null | undefined;
    connectConfigurationId?: string | null | undefined;
    connectBuildsEnabled?: boolean | undefined;
    createdAt?: number | undefined;
    customerSupportCodeVisibility?: boolean | undefined;
    crons?: UpdateProjectCrons | undefined;
    dataCache?: UpdateProjectDataCache | undefined;
    devCommand?: string | null | undefined;
    directoryListing: boolean;
    installCommand?: string | null | undefined;
    env?: Array<UpdateProjectEnv> | undefined;
    framework?: UpdateProjectProjectsFramework | null | undefined;
    gitForkProtection?: boolean | undefined;
    gitLFS?: boolean | undefined;
    id: string;
    latestDeployments?: Array<UpdateProjectLatestDeployments> | undefined;
    link?: UpdateProjectLink1 | UpdateProjectLink2 | UpdateProjectLink3 | undefined;
    name: string;
    nodeVersion: UpdateProjectProjectsNodeVersion;
    optionsAllowlist?: UpdateProjectOptionsAllowlist | null | undefined;
    outputDirectory?: string | null | undefined;
    passiveConnectConfigurationId?: string | null | undefined;
    passwordProtection?: UpdateProjectProjectsPasswordProtection | null | undefined;
    productionDeploymentsFastLane?: boolean | undefined;
    publicSource?: boolean | null | undefined;
    rootDirectory?: string | null | undefined;
    serverlessFunctionRegion?: string | null | undefined;
    serverlessFunctionZeroConfigFailover?: boolean | undefined;
    skewProtectionBoundaryAt?: number | undefined;
    skewProtectionMaxAge?: number | undefined;
    skipGitConnectDuringLink?: boolean | undefined;
    sourceFilesOutsideRootDirectory?: boolean | undefined;
    ssoProtection?: UpdateProjectSsoProtection | null | undefined;
    targets?: { [k: string]: string | Array<string> } | undefined;
    transferCompletedAt?: number | undefined;
    transferStartedAt?: number | undefined;
    transferToAccountId?: string | undefined;
    transferredFromAccountId?: string | undefined;
    updatedAt?: number | undefined;
    live?: boolean | undefined;
    enablePreviewFeedback?: boolean | null | undefined;
    permissions?: UpdateProjectPermissions | undefined;
    lastRollbackTarget?: UpdateProjectLastRollbackTarget | null | undefined;
    lastAliasRequest?: UpdateProjectLastAliasRequest | null | undefined;
    hasFloatingAliases?: boolean | undefined;
    protectionBypass?: { [k: string]: UpdateProjectProtectionBypass } | undefined;
    hasActiveBranches?: boolean | undefined;
    trustedIps?: UpdateProjectTrustedIps2 | UpdateProjectTrustedIps1 | null | undefined;
    gitComments?: UpdateProjectGitComments | undefined;
    paused?: boolean | undefined;
    concurrencyBucketName?: string | undefined;
    webAnalytics?: UpdateProjectWebAnalytics | undefined;
    security?: UpdateProjectSecurity | undefined;
    oidcTokenConfig?: UpdateProjectOidcTokenConfig | undefined;
};

/** @internal */
export namespace UpdateProjectFramework$ {
    export const inboundSchema = z.nativeEnum(UpdateProjectFramework);
    export const outboundSchema = inboundSchema;
}

/** @internal */
export namespace UpdateProjectNodeVersion$ {
    export const inboundSchema = z.nativeEnum(UpdateProjectNodeVersion);
    export const outboundSchema = inboundSchema;
}

/** @internal */
export namespace DeploymentType$ {
    export const inboundSchema = z.nativeEnum(DeploymentType);
    export const outboundSchema = inboundSchema;
}

/** @internal */
export namespace UpdateProjectPasswordProtection$ {
    export const inboundSchema: z.ZodType<UpdateProjectPasswordProtection, z.ZodTypeDef, unknown> =
        z.object({
            deploymentType: DeploymentType$.inboundSchema,
            password: z.nullable(z.string()).optional(),
        });

    export type Outbound = {
        deploymentType: string;
        password?: string | null | undefined;
    };

    export const outboundSchema: z.ZodType<
        Outbound,
        z.ZodTypeDef,
        UpdateProjectPasswordProtection
    > = z.object({
        deploymentType: DeploymentType$.outboundSchema,
        password: z.nullable(z.string()).optional(),
    });
}

/** @internal */
export namespace UpdateProjectDeploymentType$ {
    export const inboundSchema = z.nativeEnum(UpdateProjectDeploymentType);
    export const outboundSchema = inboundSchema;
}

/** @internal */
export namespace SsoProtection$ {
    export const inboundSchema: z.ZodType<SsoProtection, z.ZodTypeDef, unknown> = z.object({
        deploymentType: UpdateProjectDeploymentType$.inboundSchema.default(
            UpdateProjectDeploymentType.Preview
        ),
    });

    export type Outbound = {
        deploymentType: string;
    };

    export const outboundSchema: z.ZodType<Outbound, z.ZodTypeDef, SsoProtection> = z.object({
        deploymentType: UpdateProjectDeploymentType$.outboundSchema.default(
            UpdateProjectDeploymentType.Preview
        ),
    });
}

/** @internal */
export namespace UpdateProjectProjectsDeploymentType$ {
    export const inboundSchema = z.nativeEnum(UpdateProjectProjectsDeploymentType);
    export const outboundSchema = inboundSchema;
}

/** @internal */
export namespace Addresses$ {
    export const inboundSchema: z.ZodType<Addresses, z.ZodTypeDef, unknown> = z.object({
        value: z.string(),
        note: z.string().optional(),
    });

    export type Outbound = {
        value: string;
        note?: string | undefined;
    };

    export const outboundSchema: z.ZodType<Outbound, z.ZodTypeDef, Addresses> = z.object({
        value: z.string(),
        note: z.string().optional(),
    });
}

/** @internal */
export namespace ProtectionMode$ {
    export const inboundSchema = z.nativeEnum(ProtectionMode);
    export const outboundSchema = inboundSchema;
}

/** @internal */
export namespace TrustedIps$ {
    export const inboundSchema: z.ZodType<TrustedIps, z.ZodTypeDef, unknown> = z.object({
        deploymentType: UpdateProjectProjectsDeploymentType$.inboundSchema,
        addresses: z.array(z.lazy(() => Addresses$.inboundSchema)),
        protectionMode: ProtectionMode$.inboundSchema,
    });

    export type Outbound = {
        deploymentType: string;
        addresses: Array<Addresses$.Outbound>;
        protectionMode: string;
    };

    export const outboundSchema: z.ZodType<Outbound, z.ZodTypeDef, TrustedIps> = z.object({
        deploymentType: UpdateProjectProjectsDeploymentType$.outboundSchema,
        addresses: z.array(z.lazy(() => Addresses$.outboundSchema)),
        protectionMode: ProtectionMode$.outboundSchema,
    });
}

/** @internal */
export namespace Paths$ {
    export const inboundSchema: z.ZodType<Paths, z.ZodTypeDef, unknown> = z.object({
        value: z.string(),
    });

    export type Outbound = {
        value: string;
    };

    export const outboundSchema: z.ZodType<Outbound, z.ZodTypeDef, Paths> = z.object({
        value: z.string(),
    });
}

/** @internal */
export namespace OptionsAllowlist$ {
    export const inboundSchema: z.ZodType<OptionsAllowlist, z.ZodTypeDef, unknown> = z.object({
        paths: z.array(z.lazy(() => Paths$.inboundSchema)),
    });

    export type Outbound = {
        paths: Array<Paths$.Outbound>;
    };

    export const outboundSchema: z.ZodType<Outbound, z.ZodTypeDef, OptionsAllowlist> = z.object({
        paths: z.array(z.lazy(() => Paths$.outboundSchema)),
    });
}

/** @internal */
export namespace UpdateProjectRequestBody$ {
    export const inboundSchema: z.ZodType<UpdateProjectRequestBody, z.ZodTypeDef, unknown> =
        z.object({
            autoExposeSystemEnvs: z.boolean().optional(),
            autoAssignCustomDomains: z.boolean().optional(),
            autoAssignCustomDomainsUpdatedBy: z.string().optional(),
            buildCommand: z.nullable(z.string()).optional(),
            commandForIgnoringBuildStep: z.nullable(z.string()).optional(),
            customerSupportCodeVisibility: z.boolean().optional(),
            devCommand: z.nullable(z.string()).optional(),
            directoryListing: z.boolean().optional(),
            framework: z.nullable(UpdateProjectFramework$.inboundSchema).optional(),
            gitForkProtection: z.boolean().optional(),
            gitLFS: z.boolean().optional(),
            installCommand: z.nullable(z.string()).optional(),
            name: z.string().optional(),
            nodeVersion: UpdateProjectNodeVersion$.inboundSchema.optional(),
            outputDirectory: z.nullable(z.string()).optional(),
            publicSource: z.nullable(z.boolean()).optional(),
            rootDirectory: z.nullable(z.string()).optional(),
            serverlessFunctionRegion: z.nullable(z.string()).optional(),
            serverlessFunctionZeroConfigFailover: z.boolean().optional(),
            skewProtectionBoundaryAt: z.number().int().optional(),
            skewProtectionMaxAge: z.number().int().optional(),
            skipGitConnectDuringLink: z.boolean().optional(),
            sourceFilesOutsideRootDirectory: z.boolean().optional(),
            enablePreviewFeedback: z.nullable(z.boolean()).optional(),
            passwordProtection: z
                .nullable(z.lazy(() => UpdateProjectPasswordProtection$.inboundSchema))
                .optional(),
            ssoProtection: z.nullable(z.lazy(() => SsoProtection$.inboundSchema)).optional(),
            trustedIps: z.nullable(z.lazy(() => TrustedIps$.inboundSchema)).optional(),
            optionsAllowlist: z.nullable(z.lazy(() => OptionsAllowlist$.inboundSchema)).optional(),
        });

    export type Outbound = {
        autoExposeSystemEnvs?: boolean | undefined;
        autoAssignCustomDomains?: boolean | undefined;
        autoAssignCustomDomainsUpdatedBy?: string | undefined;
        buildCommand?: string | null | undefined;
        commandForIgnoringBuildStep?: string | null | undefined;
        customerSupportCodeVisibility?: boolean | undefined;
        devCommand?: string | null | undefined;
        directoryListing?: boolean | undefined;
        framework?: string | null | undefined;
        gitForkProtection?: boolean | undefined;
        gitLFS?: boolean | undefined;
        installCommand?: string | null | undefined;
        name?: string | undefined;
        nodeVersion?: string | undefined;
        outputDirectory?: string | null | undefined;
        publicSource?: boolean | null | undefined;
        rootDirectory?: string | null | undefined;
        serverlessFunctionRegion?: string | null | undefined;
        serverlessFunctionZeroConfigFailover?: boolean | undefined;
        skewProtectionBoundaryAt?: number | undefined;
        skewProtectionMaxAge?: number | undefined;
        skipGitConnectDuringLink?: boolean | undefined;
        sourceFilesOutsideRootDirectory?: boolean | undefined;
        enablePreviewFeedback?: boolean | null | undefined;
        passwordProtection?: UpdateProjectPasswordProtection$.Outbound | null | undefined;
        ssoProtection?: SsoProtection$.Outbound | null | undefined;
        trustedIps?: TrustedIps$.Outbound | null | undefined;
        optionsAllowlist?: OptionsAllowlist$.Outbound | null | undefined;
    };

    export const outboundSchema: z.ZodType<Outbound, z.ZodTypeDef, UpdateProjectRequestBody> =
        z.object({
            autoExposeSystemEnvs: z.boolean().optional(),
            autoAssignCustomDomains: z.boolean().optional(),
            autoAssignCustomDomainsUpdatedBy: z.string().optional(),
            buildCommand: z.nullable(z.string()).optional(),
            commandForIgnoringBuildStep: z.nullable(z.string()).optional(),
            customerSupportCodeVisibility: z.boolean().optional(),
            devCommand: z.nullable(z.string()).optional(),
            directoryListing: z.boolean().optional(),
            framework: z.nullable(UpdateProjectFramework$.outboundSchema).optional(),
            gitForkProtection: z.boolean().optional(),
            gitLFS: z.boolean().optional(),
            installCommand: z.nullable(z.string()).optional(),
            name: z.string().optional(),
            nodeVersion: UpdateProjectNodeVersion$.outboundSchema.optional(),
            outputDirectory: z.nullable(z.string()).optional(),
            publicSource: z.nullable(z.boolean()).optional(),
            rootDirectory: z.nullable(z.string()).optional(),
            serverlessFunctionRegion: z.nullable(z.string()).optional(),
            serverlessFunctionZeroConfigFailover: z.boolean().optional(),
            skewProtectionBoundaryAt: z.number().int().optional(),
            skewProtectionMaxAge: z.number().int().optional(),
            skipGitConnectDuringLink: z.boolean().optional(),
            sourceFilesOutsideRootDirectory: z.boolean().optional(),
            enablePreviewFeedback: z.nullable(z.boolean()).optional(),
            passwordProtection: z
                .nullable(z.lazy(() => UpdateProjectPasswordProtection$.outboundSchema))
                .optional(),
            ssoProtection: z.nullable(z.lazy(() => SsoProtection$.outboundSchema)).optional(),
            trustedIps: z.nullable(z.lazy(() => TrustedIps$.outboundSchema)).optional(),
            optionsAllowlist: z.nullable(z.lazy(() => OptionsAllowlist$.outboundSchema)).optional(),
        });
}

/** @internal */
export namespace UpdateProjectRequest$ {
    export const inboundSchema: z.ZodType<UpdateProjectRequest, z.ZodTypeDef, unknown> = z
        .object({
            idOrName: z.string(),
            teamId: z.string().optional(),
            slug: z.string().optional(),
            RequestBody: z.lazy(() => UpdateProjectRequestBody$.inboundSchema).optional(),
        })
        .transform((v) => {
            return remap$(v, {
                RequestBody: "requestBody",
            });
        });

    export type Outbound = {
        idOrName: string;
        teamId?: string | undefined;
        slug?: string | undefined;
        RequestBody?: UpdateProjectRequestBody$.Outbound | undefined;
    };

    export const outboundSchema: z.ZodType<Outbound, z.ZodTypeDef, UpdateProjectRequest> = z
        .object({
            idOrName: z.string(),
            teamId: z.string().optional(),
            slug: z.string().optional(),
            requestBody: z.lazy(() => UpdateProjectRequestBody$.outboundSchema).optional(),
        })
        .transform((v) => {
            return remap$(v, {
                requestBody: "RequestBody",
            });
        });
}

/** @internal */
export namespace UpdateProjectAnalytics$ {
    export const inboundSchema: z.ZodType<UpdateProjectAnalytics, z.ZodTypeDef, unknown> = z.object(
        {
            id: z.string(),
            canceledAt: z.nullable(z.number()).optional(),
            disabledAt: z.number(),
            enabledAt: z.number(),
            paidAt: z.number().optional(),
            sampleRatePercent: z.nullable(z.number()).optional(),
            spendLimitInDollars: z.nullable(z.number()).optional(),
        }
    );

    export type Outbound = {
        id: string;
        canceledAt?: number | null | undefined;
        disabledAt: number;
        enabledAt: number;
        paidAt?: number | undefined;
        sampleRatePercent?: number | null | undefined;
        spendLimitInDollars?: number | null | undefined;
    };

    export const outboundSchema: z.ZodType<Outbound, z.ZodTypeDef, UpdateProjectAnalytics> =
        z.object({
            id: z.string(),
            canceledAt: z.nullable(z.number()).optional(),
            disabledAt: z.number(),
            enabledAt: z.number(),
            paidAt: z.number().optional(),
            sampleRatePercent: z.nullable(z.number()).optional(),
            spendLimitInDollars: z.nullable(z.number()).optional(),
        });
}

/** @internal */
export namespace UpdateProjectSpeedInsights$ {
    export const inboundSchema: z.ZodType<UpdateProjectSpeedInsights, z.ZodTypeDef, unknown> =
        z.object({
            id: z.string(),
            enabledAt: z.number().optional(),
            disabledAt: z.number().optional(),
            canceledAt: z.number().optional(),
            hasData: z.boolean().optional(),
            paidAt: z.number().optional(),
        });

    export type Outbound = {
        id: string;
        enabledAt?: number | undefined;
        disabledAt?: number | undefined;
        canceledAt?: number | undefined;
        hasData?: boolean | undefined;
        paidAt?: number | undefined;
    };

    export const outboundSchema: z.ZodType<Outbound, z.ZodTypeDef, UpdateProjectSpeedInsights> =
        z.object({
            id: z.string(),
            enabledAt: z.number().optional(),
            disabledAt: z.number().optional(),
            canceledAt: z.number().optional(),
            hasData: z.boolean().optional(),
            paidAt: z.number().optional(),
        });
}

/** @internal */
export namespace UpdateProjectDefinitions$ {
    export const inboundSchema: z.ZodType<UpdateProjectDefinitions, z.ZodTypeDef, unknown> =
        z.object({
            host: z.string(),
            path: z.string(),
            schedule: z.string(),
        });

    export type Outbound = {
        host: string;
        path: string;
        schedule: string;
    };

    export const outboundSchema: z.ZodType<Outbound, z.ZodTypeDef, UpdateProjectDefinitions> =
        z.object({
            host: z.string(),
            path: z.string(),
            schedule: z.string(),
        });
}

/** @internal */
export namespace UpdateProjectCrons$ {
    export const inboundSchema: z.ZodType<UpdateProjectCrons, z.ZodTypeDef, unknown> = z.object({
        enabledAt: z.number(),
        disabledAt: z.nullable(z.number()),
        updatedAt: z.number(),
        deploymentId: z.nullable(z.string()),
        definitions: z.array(z.lazy(() => UpdateProjectDefinitions$.inboundSchema)),
    });

    export type Outbound = {
        enabledAt: number;
        disabledAt: number | null;
        updatedAt: number;
        deploymentId: string | null;
        definitions: Array<UpdateProjectDefinitions$.Outbound>;
    };

    export const outboundSchema: z.ZodType<Outbound, z.ZodTypeDef, UpdateProjectCrons> = z.object({
        enabledAt: z.number(),
        disabledAt: z.nullable(z.number()),
        updatedAt: z.number(),
        deploymentId: z.nullable(z.string()),
        definitions: z.array(z.lazy(() => UpdateProjectDefinitions$.outboundSchema)),
    });
}

/** @internal */
export namespace UpdateProjectDataCache$ {
    export const inboundSchema: z.ZodType<UpdateProjectDataCache, z.ZodTypeDef, unknown> = z.object(
        {
            userDisabled: z.boolean(),
            storageSizeBytes: z.nullable(z.number()).optional(),
            unlimited: z.boolean().optional(),
        }
    );

    export type Outbound = {
        userDisabled: boolean;
        storageSizeBytes?: number | null | undefined;
        unlimited?: boolean | undefined;
    };

    export const outboundSchema: z.ZodType<Outbound, z.ZodTypeDef, UpdateProjectDataCache> =
        z.object({
            userDisabled: z.boolean(),
            storageSizeBytes: z.nullable(z.number()).optional(),
            unlimited: z.boolean().optional(),
        });
}

/** @internal */
export namespace UpdateProjectTarget2$ {
    export const inboundSchema = z.nativeEnum(UpdateProjectTarget2);
    export const outboundSchema = inboundSchema;
}

/** @internal */
export namespace UpdateProjectTarget1$ {
    export const inboundSchema = z.nativeEnum(UpdateProjectTarget1);
    export const outboundSchema = inboundSchema;
}

/** @internal */
export namespace UpdateProjectTarget$ {
    export const inboundSchema: z.ZodType<UpdateProjectTarget, z.ZodTypeDef, unknown> = z.union([
        z.array(UpdateProjectTarget1$.inboundSchema),
        UpdateProjectTarget2$.inboundSchema,
    ]);

    export type Outbound = Array<string> | string;
    export const outboundSchema: z.ZodType<Outbound, z.ZodTypeDef, UpdateProjectTarget> = z.union([
        z.array(UpdateProjectTarget1$.outboundSchema),
        UpdateProjectTarget2$.outboundSchema,
    ]);
}

/** @internal */
export namespace UpdateProjectType$ {
    export const inboundSchema = z.nativeEnum(UpdateProjectType);
    export const outboundSchema = inboundSchema;
}

/** @internal */
export namespace UpdateProjectContentHintProjectsResponse200ApplicationJSONResponseBodyEnv14Type$ {
    export const inboundSchema = z.nativeEnum(
        UpdateProjectContentHintProjectsResponse200ApplicationJSONResponseBodyEnv14Type
    );
    export const outboundSchema = inboundSchema;
}

/** @internal */
export namespace UpdateProjectContentHint14$ {
    export const inboundSchema: z.ZodType<UpdateProjectContentHint14, z.ZodTypeDef, unknown> =
        z.object({
            type: UpdateProjectContentHintProjectsResponse200ApplicationJSONResponseBodyEnv14Type$.inboundSchema,
            storeId: z.string(),
        });

    export type Outbound = {
        type: string;
        storeId: string;
    };

    export const outboundSchema: z.ZodType<Outbound, z.ZodTypeDef, UpdateProjectContentHint14> =
        z.object({
            type: UpdateProjectContentHintProjectsResponse200ApplicationJSONResponseBodyEnv14Type$.outboundSchema,
            storeId: z.string(),
        });
}

/** @internal */
export namespace UpdateProjectContentHintProjectsResponse200ApplicationJSONResponseBodyEnv13Type$ {
    export const inboundSchema = z.nativeEnum(
        UpdateProjectContentHintProjectsResponse200ApplicationJSONResponseBodyEnv13Type
    );
    export const outboundSchema = inboundSchema;
}

/** @internal */
export namespace UpdateProjectContentHint13$ {
    export const inboundSchema: z.ZodType<UpdateProjectContentHint13, z.ZodTypeDef, unknown> =
        z.object({
            type: UpdateProjectContentHintProjectsResponse200ApplicationJSONResponseBodyEnv13Type$.inboundSchema,
            storeId: z.string(),
        });

    export type Outbound = {
        type: string;
        storeId: string;
    };

    export const outboundSchema: z.ZodType<Outbound, z.ZodTypeDef, UpdateProjectContentHint13> =
        z.object({
            type: UpdateProjectContentHintProjectsResponse200ApplicationJSONResponseBodyEnv13Type$.outboundSchema,
            storeId: z.string(),
        });
}

/** @internal */
export namespace UpdateProjectContentHintProjectsResponse200ApplicationJSONResponseBodyEnv12Type$ {
    export const inboundSchema = z.nativeEnum(
        UpdateProjectContentHintProjectsResponse200ApplicationJSONResponseBodyEnv12Type
    );
    export const outboundSchema = inboundSchema;
}

/** @internal */
export namespace UpdateProjectContentHint12$ {
    export const inboundSchema: z.ZodType<UpdateProjectContentHint12, z.ZodTypeDef, unknown> =
        z.object({
            type: UpdateProjectContentHintProjectsResponse200ApplicationJSONResponseBodyEnv12Type$.inboundSchema,
            storeId: z.string(),
        });

    export type Outbound = {
        type: string;
        storeId: string;
    };

    export const outboundSchema: z.ZodType<Outbound, z.ZodTypeDef, UpdateProjectContentHint12> =
        z.object({
            type: UpdateProjectContentHintProjectsResponse200ApplicationJSONResponseBodyEnv12Type$.outboundSchema,
            storeId: z.string(),
        });
}

/** @internal */
export namespace UpdateProjectContentHintProjectsResponse200ApplicationJSONResponseBodyEnv11Type$ {
    export const inboundSchema = z.nativeEnum(
        UpdateProjectContentHintProjectsResponse200ApplicationJSONResponseBodyEnv11Type
    );
    export const outboundSchema = inboundSchema;
}

/** @internal */
export namespace UpdateProjectContentHint11$ {
    export const inboundSchema: z.ZodType<UpdateProjectContentHint11, z.ZodTypeDef, unknown> =
        z.object({
            type: UpdateProjectContentHintProjectsResponse200ApplicationJSONResponseBodyEnv11Type$.inboundSchema,
            storeId: z.string(),
        });

    export type Outbound = {
        type: string;
        storeId: string;
    };

    export const outboundSchema: z.ZodType<Outbound, z.ZodTypeDef, UpdateProjectContentHint11> =
        z.object({
            type: UpdateProjectContentHintProjectsResponse200ApplicationJSONResponseBodyEnv11Type$.outboundSchema,
            storeId: z.string(),
        });
}

/** @internal */
export namespace UpdateProjectContentHintProjectsResponse200ApplicationJSONResponseBodyEnv10Type$ {
    export const inboundSchema = z.nativeEnum(
        UpdateProjectContentHintProjectsResponse200ApplicationJSONResponseBodyEnv10Type
    );
    export const outboundSchema = inboundSchema;
}

/** @internal */
export namespace UpdateProjectContentHint10$ {
    export const inboundSchema: z.ZodType<UpdateProjectContentHint10, z.ZodTypeDef, unknown> =
        z.object({
            type: UpdateProjectContentHintProjectsResponse200ApplicationJSONResponseBodyEnv10Type$.inboundSchema,
            storeId: z.string(),
        });

    export type Outbound = {
        type: string;
        storeId: string;
    };

    export const outboundSchema: z.ZodType<Outbound, z.ZodTypeDef, UpdateProjectContentHint10> =
        z.object({
            type: UpdateProjectContentHintProjectsResponse200ApplicationJSONResponseBodyEnv10Type$.outboundSchema,
            storeId: z.string(),
        });
}

/** @internal */
export namespace UpdateProjectContentHintProjectsResponse200ApplicationJSONResponseBodyEnv9Type$ {
    export const inboundSchema = z.nativeEnum(
        UpdateProjectContentHintProjectsResponse200ApplicationJSONResponseBodyEnv9Type
    );
    export const outboundSchema = inboundSchema;
}

/** @internal */
export namespace UpdateProjectContentHint9$ {
    export const inboundSchema: z.ZodType<UpdateProjectContentHint9, z.ZodTypeDef, unknown> =
        z.object({
            type: UpdateProjectContentHintProjectsResponse200ApplicationJSONResponseBodyEnv9Type$.inboundSchema,
            storeId: z.string(),
        });

    export type Outbound = {
        type: string;
        storeId: string;
    };

    export const outboundSchema: z.ZodType<Outbound, z.ZodTypeDef, UpdateProjectContentHint9> =
        z.object({
            type: UpdateProjectContentHintProjectsResponse200ApplicationJSONResponseBodyEnv9Type$.outboundSchema,
            storeId: z.string(),
        });
}

/** @internal */
export namespace UpdateProjectContentHintProjectsResponse200ApplicationJSONResponseBodyEnv8Type$ {
    export const inboundSchema = z.nativeEnum(
        UpdateProjectContentHintProjectsResponse200ApplicationJSONResponseBodyEnv8Type
    );
    export const outboundSchema = inboundSchema;
}

/** @internal */
export namespace UpdateProjectContentHint8$ {
    export const inboundSchema: z.ZodType<UpdateProjectContentHint8, z.ZodTypeDef, unknown> =
        z.object({
            type: UpdateProjectContentHintProjectsResponse200ApplicationJSONResponseBodyEnv8Type$.inboundSchema,
            storeId: z.string(),
        });

    export type Outbound = {
        type: string;
        storeId: string;
    };

    export const outboundSchema: z.ZodType<Outbound, z.ZodTypeDef, UpdateProjectContentHint8> =
        z.object({
            type: UpdateProjectContentHintProjectsResponse200ApplicationJSONResponseBodyEnv8Type$.outboundSchema,
            storeId: z.string(),
        });
}

/** @internal */
export namespace UpdateProjectContentHintProjectsResponse200ApplicationJSONResponseBodyEnvType$ {
    export const inboundSchema = z.nativeEnum(
        UpdateProjectContentHintProjectsResponse200ApplicationJSONResponseBodyEnvType
    );
    export const outboundSchema = inboundSchema;
}

/** @internal */
export namespace UpdateProjectContentHint7$ {
    export const inboundSchema: z.ZodType<UpdateProjectContentHint7, z.ZodTypeDef, unknown> =
        z.object({
            type: UpdateProjectContentHintProjectsResponse200ApplicationJSONResponseBodyEnvType$.inboundSchema,
            storeId: z.string(),
        });

    export type Outbound = {
        type: string;
        storeId: string;
    };

    export const outboundSchema: z.ZodType<Outbound, z.ZodTypeDef, UpdateProjectContentHint7> =
        z.object({
            type: UpdateProjectContentHintProjectsResponse200ApplicationJSONResponseBodyEnvType$.outboundSchema,
            storeId: z.string(),
        });
}

/** @internal */
export namespace UpdateProjectContentHintProjectsResponse200ApplicationJSONResponseBodyType$ {
    export const inboundSchema = z.nativeEnum(
        UpdateProjectContentHintProjectsResponse200ApplicationJSONResponseBodyType
    );
    export const outboundSchema = inboundSchema;
}

/** @internal */
export namespace UpdateProjectContentHint6$ {
    export const inboundSchema: z.ZodType<UpdateProjectContentHint6, z.ZodTypeDef, unknown> =
        z.object({
            type: UpdateProjectContentHintProjectsResponse200ApplicationJSONResponseBodyType$.inboundSchema,
            storeId: z.string(),
        });

    export type Outbound = {
        type: string;
        storeId: string;
    };

    export const outboundSchema: z.ZodType<Outbound, z.ZodTypeDef, UpdateProjectContentHint6> =
        z.object({
            type: UpdateProjectContentHintProjectsResponse200ApplicationJSONResponseBodyType$.outboundSchema,
            storeId: z.string(),
        });
}

/** @internal */
export namespace UpdateProjectContentHintProjectsResponse200ApplicationJSONType$ {
    export const inboundSchema = z.nativeEnum(
        UpdateProjectContentHintProjectsResponse200ApplicationJSONType
    );
    export const outboundSchema = inboundSchema;
}

/** @internal */
export namespace UpdateProjectContentHint5$ {
    export const inboundSchema: z.ZodType<UpdateProjectContentHint5, z.ZodTypeDef, unknown> =
        z.object({
            type: UpdateProjectContentHintProjectsResponse200ApplicationJSONType$.inboundSchema,
            storeId: z.string(),
        });

    export type Outbound = {
        type: string;
        storeId: string;
    };

    export const outboundSchema: z.ZodType<Outbound, z.ZodTypeDef, UpdateProjectContentHint5> =
        z.object({
            type: UpdateProjectContentHintProjectsResponse200ApplicationJSONType$.outboundSchema,
            storeId: z.string(),
        });
}

/** @internal */
export namespace UpdateProjectContentHintProjectsResponse200Type$ {
    export const inboundSchema = z.nativeEnum(UpdateProjectContentHintProjectsResponse200Type);
    export const outboundSchema = inboundSchema;
}

/** @internal */
export namespace UpdateProjectContentHint4$ {
    export const inboundSchema: z.ZodType<UpdateProjectContentHint4, z.ZodTypeDef, unknown> =
        z.object({
            type: UpdateProjectContentHintProjectsResponse200Type$.inboundSchema,
            storeId: z.string(),
        });

    export type Outbound = {
        type: string;
        storeId: string;
    };

    export const outboundSchema: z.ZodType<Outbound, z.ZodTypeDef, UpdateProjectContentHint4> =
        z.object({
            type: UpdateProjectContentHintProjectsResponse200Type$.outboundSchema,
            storeId: z.string(),
        });
}

/** @internal */
export namespace UpdateProjectContentHintProjectsResponseType$ {
    export const inboundSchema = z.nativeEnum(UpdateProjectContentHintProjectsResponseType);
    export const outboundSchema = inboundSchema;
}

/** @internal */
export namespace UpdateProjectContentHint3$ {
    export const inboundSchema: z.ZodType<UpdateProjectContentHint3, z.ZodTypeDef, unknown> =
        z.object({
            type: UpdateProjectContentHintProjectsResponseType$.inboundSchema,
            storeId: z.string(),
        });

    export type Outbound = {
        type: string;
        storeId: string;
    };

    export const outboundSchema: z.ZodType<Outbound, z.ZodTypeDef, UpdateProjectContentHint3> =
        z.object({
            type: UpdateProjectContentHintProjectsResponseType$.outboundSchema,
            storeId: z.string(),
        });
}

/** @internal */
export namespace UpdateProjectContentHintProjectsType$ {
    export const inboundSchema = z.nativeEnum(UpdateProjectContentHintProjectsType);
    export const outboundSchema = inboundSchema;
}

/** @internal */
export namespace UpdateProjectContentHint2$ {
    export const inboundSchema: z.ZodType<UpdateProjectContentHint2, z.ZodTypeDef, unknown> =
        z.object({
            type: UpdateProjectContentHintProjectsType$.inboundSchema,
            storeId: z.string(),
        });

    export type Outbound = {
        type: string;
        storeId: string;
    };

    export const outboundSchema: z.ZodType<Outbound, z.ZodTypeDef, UpdateProjectContentHint2> =
        z.object({
            type: UpdateProjectContentHintProjectsType$.outboundSchema,
            storeId: z.string(),
        });
}

/** @internal */
export namespace UpdateProjectContentHintType$ {
    export const inboundSchema = z.nativeEnum(UpdateProjectContentHintType);
    export const outboundSchema = inboundSchema;
}

/** @internal */
export namespace UpdateProjectContentHint1$ {
    export const inboundSchema: z.ZodType<UpdateProjectContentHint1, z.ZodTypeDef, unknown> =
        z.object({
            type: UpdateProjectContentHintType$.inboundSchema,
            storeId: z.string(),
        });

    export type Outbound = {
        type: string;
        storeId: string;
    };

    export const outboundSchema: z.ZodType<Outbound, z.ZodTypeDef, UpdateProjectContentHint1> =
        z.object({
            type: UpdateProjectContentHintType$.outboundSchema,
            storeId: z.string(),
        });
}

/** @internal */
export namespace UpdateProjectContentHint$ {
    export const inboundSchema: z.ZodType<UpdateProjectContentHint, z.ZodTypeDef, unknown> =
        z.union([
            z.lazy(() => UpdateProjectContentHint1$.inboundSchema),
            z.lazy(() => UpdateProjectContentHint2$.inboundSchema),
            z.lazy(() => UpdateProjectContentHint3$.inboundSchema),
            z.lazy(() => UpdateProjectContentHint4$.inboundSchema),
            z.lazy(() => UpdateProjectContentHint5$.inboundSchema),
            z.lazy(() => UpdateProjectContentHint6$.inboundSchema),
            z.lazy(() => UpdateProjectContentHint7$.inboundSchema),
            z.lazy(() => UpdateProjectContentHint8$.inboundSchema),
            z.lazy(() => UpdateProjectContentHint9$.inboundSchema),
            z.lazy(() => UpdateProjectContentHint10$.inboundSchema),
            z.lazy(() => UpdateProjectContentHint11$.inboundSchema),
            z.lazy(() => UpdateProjectContentHint12$.inboundSchema),
            z.lazy(() => UpdateProjectContentHint13$.inboundSchema),
            z.lazy(() => UpdateProjectContentHint14$.inboundSchema),
        ]);

    export type Outbound =
        | UpdateProjectContentHint1$.Outbound
        | UpdateProjectContentHint2$.Outbound
        | UpdateProjectContentHint3$.Outbound
        | UpdateProjectContentHint4$.Outbound
        | UpdateProjectContentHint5$.Outbound
        | UpdateProjectContentHint6$.Outbound
        | UpdateProjectContentHint7$.Outbound
        | UpdateProjectContentHint8$.Outbound
        | UpdateProjectContentHint9$.Outbound
        | UpdateProjectContentHint10$.Outbound
        | UpdateProjectContentHint11$.Outbound
        | UpdateProjectContentHint12$.Outbound
        | UpdateProjectContentHint13$.Outbound
        | UpdateProjectContentHint14$.Outbound;
    export const outboundSchema: z.ZodType<Outbound, z.ZodTypeDef, UpdateProjectContentHint> =
        z.union([
            z.lazy(() => UpdateProjectContentHint1$.outboundSchema),
            z.lazy(() => UpdateProjectContentHint2$.outboundSchema),
            z.lazy(() => UpdateProjectContentHint3$.outboundSchema),
            z.lazy(() => UpdateProjectContentHint4$.outboundSchema),
            z.lazy(() => UpdateProjectContentHint5$.outboundSchema),
            z.lazy(() => UpdateProjectContentHint6$.outboundSchema),
            z.lazy(() => UpdateProjectContentHint7$.outboundSchema),
            z.lazy(() => UpdateProjectContentHint8$.outboundSchema),
            z.lazy(() => UpdateProjectContentHint9$.outboundSchema),
            z.lazy(() => UpdateProjectContentHint10$.outboundSchema),
            z.lazy(() => UpdateProjectContentHint11$.outboundSchema),
            z.lazy(() => UpdateProjectContentHint12$.outboundSchema),
            z.lazy(() => UpdateProjectContentHint13$.outboundSchema),
            z.lazy(() => UpdateProjectContentHint14$.outboundSchema),
        ]);
}

/** @internal */
export namespace UpdateProjectProjectsResponse200Type$ {
    export const inboundSchema = z.nativeEnum(UpdateProjectProjectsResponse200Type);
    export const outboundSchema = inboundSchema;
}

/** @internal */
export namespace UpdateProjectInternalContentHint$ {
    export const inboundSchema: z.ZodType<UpdateProjectInternalContentHint, z.ZodTypeDef, unknown> =
        z.object({
            type: UpdateProjectProjectsResponse200Type$.inboundSchema,
            encryptedValue: z.string(),
        });

    export type Outbound = {
        type: string;
        encryptedValue: string;
    };

    export const outboundSchema: z.ZodType<
        Outbound,
        z.ZodTypeDef,
        UpdateProjectInternalContentHint
    > = z.object({
        type: UpdateProjectProjectsResponse200Type$.outboundSchema,
        encryptedValue: z.string(),
    });
}

/** @internal */
export namespace UpdateProjectEnv$ {
    export const inboundSchema: z.ZodType<UpdateProjectEnv, z.ZodTypeDef, unknown> = z.object({
        target: z
            .union([
                z.array(UpdateProjectTarget1$.inboundSchema),
                UpdateProjectTarget2$.inboundSchema,
            ])
            .optional(),
        type: UpdateProjectType$.inboundSchema,
        id: z.string().optional(),
        key: z.string(),
        value: z.string(),
        configurationId: z.nullable(z.string()).optional(),
        createdAt: z.number().optional(),
        updatedAt: z.number().optional(),
        createdBy: z.nullable(z.string()).optional(),
        updatedBy: z.nullable(z.string()).optional(),
        gitBranch: z.string().optional(),
        edgeConfigId: z.nullable(z.string()).optional(),
        edgeConfigTokenId: z.nullable(z.string()).optional(),
        contentHint: z
            .nullable(
                z.union([
                    z.lazy(() => UpdateProjectContentHint1$.inboundSchema),
                    z.lazy(() => UpdateProjectContentHint2$.inboundSchema),
                    z.lazy(() => UpdateProjectContentHint3$.inboundSchema),
                    z.lazy(() => UpdateProjectContentHint4$.inboundSchema),
                    z.lazy(() => UpdateProjectContentHint5$.inboundSchema),
                    z.lazy(() => UpdateProjectContentHint6$.inboundSchema),
                    z.lazy(() => UpdateProjectContentHint7$.inboundSchema),
                    z.lazy(() => UpdateProjectContentHint8$.inboundSchema),
                    z.lazy(() => UpdateProjectContentHint9$.inboundSchema),
                    z.lazy(() => UpdateProjectContentHint10$.inboundSchema),
                    z.lazy(() => UpdateProjectContentHint11$.inboundSchema),
                    z.lazy(() => UpdateProjectContentHint12$.inboundSchema),
                    z.lazy(() => UpdateProjectContentHint13$.inboundSchema),
                    z.lazy(() => UpdateProjectContentHint14$.inboundSchema),
                ])
            )
            .optional(),
        internalContentHint: z
            .nullable(z.lazy(() => UpdateProjectInternalContentHint$.inboundSchema))
            .optional(),
        decrypted: z.boolean().optional(),
        comment: z.string().optional(),
        customEnvironmentId: z.string().optional(),
    });

    export type Outbound = {
        target?: Array<string> | string | undefined;
        type: string;
        id?: string | undefined;
        key: string;
        value: string;
        configurationId?: string | null | undefined;
        createdAt?: number | undefined;
        updatedAt?: number | undefined;
        createdBy?: string | null | undefined;
        updatedBy?: string | null | undefined;
        gitBranch?: string | undefined;
        edgeConfigId?: string | null | undefined;
        edgeConfigTokenId?: string | null | undefined;
        contentHint?:
            | UpdateProjectContentHint1$.Outbound
            | UpdateProjectContentHint2$.Outbound
            | UpdateProjectContentHint3$.Outbound
            | UpdateProjectContentHint4$.Outbound
            | UpdateProjectContentHint5$.Outbound
            | UpdateProjectContentHint6$.Outbound
            | UpdateProjectContentHint7$.Outbound
            | UpdateProjectContentHint8$.Outbound
            | UpdateProjectContentHint9$.Outbound
            | UpdateProjectContentHint10$.Outbound
            | UpdateProjectContentHint11$.Outbound
            | UpdateProjectContentHint12$.Outbound
            | UpdateProjectContentHint13$.Outbound
            | UpdateProjectContentHint14$.Outbound
            | null
            | undefined;
        internalContentHint?: UpdateProjectInternalContentHint$.Outbound | null | undefined;
        decrypted?: boolean | undefined;
        comment?: string | undefined;
        customEnvironmentId?: string | undefined;
    };

    export const outboundSchema: z.ZodType<Outbound, z.ZodTypeDef, UpdateProjectEnv> = z.object({
        target: z
            .union([
                z.array(UpdateProjectTarget1$.outboundSchema),
                UpdateProjectTarget2$.outboundSchema,
            ])
            .optional(),
        type: UpdateProjectType$.outboundSchema,
        id: z.string().optional(),
        key: z.string(),
        value: z.string(),
        configurationId: z.nullable(z.string()).optional(),
        createdAt: z.number().optional(),
        updatedAt: z.number().optional(),
        createdBy: z.nullable(z.string()).optional(),
        updatedBy: z.nullable(z.string()).optional(),
        gitBranch: z.string().optional(),
        edgeConfigId: z.nullable(z.string()).optional(),
        edgeConfigTokenId: z.nullable(z.string()).optional(),
        contentHint: z
            .nullable(
                z.union([
                    z.lazy(() => UpdateProjectContentHint1$.outboundSchema),
                    z.lazy(() => UpdateProjectContentHint2$.outboundSchema),
                    z.lazy(() => UpdateProjectContentHint3$.outboundSchema),
                    z.lazy(() => UpdateProjectContentHint4$.outboundSchema),
                    z.lazy(() => UpdateProjectContentHint5$.outboundSchema),
                    z.lazy(() => UpdateProjectContentHint6$.outboundSchema),
                    z.lazy(() => UpdateProjectContentHint7$.outboundSchema),
                    z.lazy(() => UpdateProjectContentHint8$.outboundSchema),
                    z.lazy(() => UpdateProjectContentHint9$.outboundSchema),
                    z.lazy(() => UpdateProjectContentHint10$.outboundSchema),
                    z.lazy(() => UpdateProjectContentHint11$.outboundSchema),
                    z.lazy(() => UpdateProjectContentHint12$.outboundSchema),
                    z.lazy(() => UpdateProjectContentHint13$.outboundSchema),
                    z.lazy(() => UpdateProjectContentHint14$.outboundSchema),
                ])
            )
            .optional(),
        internalContentHint: z
            .nullable(z.lazy(() => UpdateProjectInternalContentHint$.outboundSchema))
            .optional(),
        decrypted: z.boolean().optional(),
        comment: z.string().optional(),
        customEnvironmentId: z.string().optional(),
    });
}

/** @internal */
export namespace UpdateProjectProjectsFramework$ {
    export const inboundSchema = z.nativeEnum(UpdateProjectProjectsFramework);
    export const outboundSchema = inboundSchema;
}

/** @internal */
export namespace UpdateProjectAliasAssigned$ {
    export const inboundSchema: z.ZodType<UpdateProjectAliasAssigned, z.ZodTypeDef, unknown> =
        z.union([z.number(), z.boolean()]);

    export type Outbound = number | boolean;
    export const outboundSchema: z.ZodType<Outbound, z.ZodTypeDef, UpdateProjectAliasAssigned> =
        z.union([z.number(), z.boolean()]);
}

/** @internal */
export namespace UpdateProjectAliasError$ {
    export const inboundSchema: z.ZodType<UpdateProjectAliasError, z.ZodTypeDef, unknown> =
        z.object({
            code: z.string(),
            message: z.string(),
        });

    export type Outbound = {
        code: string;
        message: string;
    };

    export const outboundSchema: z.ZodType<Outbound, z.ZodTypeDef, UpdateProjectAliasError> =
        z.object({
            code: z.string(),
            message: z.string(),
        });
}

/** @internal */
export namespace UpdateProjectBuilds$ {
    export const inboundSchema: z.ZodType<UpdateProjectBuilds, z.ZodTypeDef, unknown> = z.object({
        use: z.string(),
        src: z.string().optional(),
        dest: z.string().optional(),
    });

    export type Outbound = {
        use: string;
        src?: string | undefined;
        dest?: string | undefined;
    };

    export const outboundSchema: z.ZodType<Outbound, z.ZodTypeDef, UpdateProjectBuilds> = z.object({
        use: z.string(),
        src: z.string().optional(),
        dest: z.string().optional(),
    });
}

/** @internal */
export namespace UpdateProjectCreator$ {
    export const inboundSchema: z.ZodType<UpdateProjectCreator, z.ZodTypeDef, unknown> = z.object({
        email: z.string(),
        githubLogin: z.string().optional(),
        gitlabLogin: z.string().optional(),
        uid: z.string(),
        username: z.string(),
    });

    export type Outbound = {
        email: string;
        githubLogin?: string | undefined;
        gitlabLogin?: string | undefined;
        uid: string;
        username: string;
    };

    export const outboundSchema: z.ZodType<Outbound, z.ZodTypeDef, UpdateProjectCreator> = z.object(
        {
            email: z.string(),
            githubLogin: z.string().optional(),
            gitlabLogin: z.string().optional(),
            uid: z.string(),
            username: z.string(),
        }
    );
}

/** @internal */
export namespace UpdateProjectPlan$ {
    export const inboundSchema = z.nativeEnum(UpdateProjectPlan);
    export const outboundSchema = inboundSchema;
}

/** @internal */
export namespace UpdateProjectReadyState$ {
    export const inboundSchema = z.nativeEnum(UpdateProjectReadyState);
    export const outboundSchema = inboundSchema;
}

/** @internal */
export namespace UpdateProjectReadySubstate$ {
    export const inboundSchema = z.nativeEnum(UpdateProjectReadySubstate);
    export const outboundSchema = inboundSchema;
}

/** @internal */
export namespace UpdateProjectProjectsType$ {
    export const inboundSchema = z.nativeEnum(UpdateProjectProjectsType);
    export const outboundSchema = inboundSchema;
}

/** @internal */
export namespace UpdateProjectChecksConclusion$ {
    export const inboundSchema = z.nativeEnum(UpdateProjectChecksConclusion);
    export const outboundSchema = inboundSchema;
}

/** @internal */
export namespace UpdateProjectChecksState$ {
    export const inboundSchema = z.nativeEnum(UpdateProjectChecksState);
    export const outboundSchema = inboundSchema;
}

/** @internal */
export namespace UpdateProjectOidcTokenClaims$ {
    export const inboundSchema: z.ZodType<UpdateProjectOidcTokenClaims, z.ZodTypeDef, unknown> =
        z.union([z.string(), z.array(z.string())]);

    export type Outbound = string | Array<string>;
    export const outboundSchema: z.ZodType<Outbound, z.ZodTypeDef, UpdateProjectOidcTokenClaims> =
        z.union([z.string(), z.array(z.string())]);
}

/** @internal */
export namespace UpdateProjectLatestDeployments$ {
    export const inboundSchema: z.ZodType<UpdateProjectLatestDeployments, z.ZodTypeDef, unknown> =
        z.object({
            alias: z.array(z.string()).optional(),
            aliasAssigned: z.nullable(z.union([z.number(), z.boolean()])).optional(),
            aliasError: z.nullable(z.lazy(() => UpdateProjectAliasError$.inboundSchema)).optional(),
            aliasFinal: z.nullable(z.string()).optional(),
            automaticAliases: z.array(z.string()).optional(),
            builds: z.array(z.lazy(() => UpdateProjectBuilds$.inboundSchema)).optional(),
            connectBuildsEnabled: z.boolean().optional(),
            connectConfigurationId: z.string().optional(),
            createdAt: z.number(),
            createdIn: z.string(),
            creator: z.nullable(z.lazy(() => UpdateProjectCreator$.inboundSchema)),
            deploymentHostname: z.string(),
            name: z.string(),
            forced: z.boolean().optional(),
            id: z.string(),
            meta: z.record(z.string()).optional(),
            monorepoManager: z.nullable(z.string()).optional(),
            plan: UpdateProjectPlan$.inboundSchema,
            private: z.boolean(),
            readyState: UpdateProjectReadyState$.inboundSchema,
            readySubstate: UpdateProjectReadySubstate$.inboundSchema.optional(),
            requestedAt: z.number().optional(),
            target: z.nullable(z.string()).optional(),
            teamId: z.nullable(z.string()).optional(),
            type: UpdateProjectProjectsType$.inboundSchema,
            url: z.string(),
            userId: z.string(),
            withCache: z.boolean().optional(),
            checksConclusion: UpdateProjectChecksConclusion$.inboundSchema.optional(),
            checksState: UpdateProjectChecksState$.inboundSchema.optional(),
            readyAt: z.number().optional(),
            buildingAt: z.number().optional(),
            previewCommentsEnabled: z.boolean().optional(),
            oidcTokenClaims: z.record(z.union([z.string(), z.array(z.string())])).optional(),
        });

    export type Outbound = {
        alias?: Array<string> | undefined;
        aliasAssigned?: number | boolean | null | undefined;
        aliasError?: UpdateProjectAliasError$.Outbound | null | undefined;
        aliasFinal?: string | null | undefined;
        automaticAliases?: Array<string> | undefined;
        builds?: Array<UpdateProjectBuilds$.Outbound> | undefined;
        connectBuildsEnabled?: boolean | undefined;
        connectConfigurationId?: string | undefined;
        createdAt: number;
        createdIn: string;
        creator: UpdateProjectCreator$.Outbound | null;
        deploymentHostname: string;
        name: string;
        forced?: boolean | undefined;
        id: string;
        meta?: { [k: string]: string } | undefined;
        monorepoManager?: string | null | undefined;
        plan: string;
        private: boolean;
        readyState: string;
        readySubstate?: string | undefined;
        requestedAt?: number | undefined;
        target?: string | null | undefined;
        teamId?: string | null | undefined;
        type: string;
        url: string;
        userId: string;
        withCache?: boolean | undefined;
        checksConclusion?: string | undefined;
        checksState?: string | undefined;
        readyAt?: number | undefined;
        buildingAt?: number | undefined;
        previewCommentsEnabled?: boolean | undefined;
        oidcTokenClaims?: { [k: string]: string | Array<string> } | undefined;
    };

    export const outboundSchema: z.ZodType<Outbound, z.ZodTypeDef, UpdateProjectLatestDeployments> =
        z.object({
            alias: z.array(z.string()).optional(),
            aliasAssigned: z.nullable(z.union([z.number(), z.boolean()])).optional(),
            aliasError: z
                .nullable(z.lazy(() => UpdateProjectAliasError$.outboundSchema))
                .optional(),
            aliasFinal: z.nullable(z.string()).optional(),
            automaticAliases: z.array(z.string()).optional(),
            builds: z.array(z.lazy(() => UpdateProjectBuilds$.outboundSchema)).optional(),
            connectBuildsEnabled: z.boolean().optional(),
            connectConfigurationId: z.string().optional(),
            createdAt: z.number(),
            createdIn: z.string(),
            creator: z.nullable(z.lazy(() => UpdateProjectCreator$.outboundSchema)),
            deploymentHostname: z.string(),
            name: z.string(),
            forced: z.boolean().optional(),
            id: z.string(),
            meta: z.record(z.string()).optional(),
            monorepoManager: z.nullable(z.string()).optional(),
            plan: UpdateProjectPlan$.outboundSchema,
            private: z.boolean(),
            readyState: UpdateProjectReadyState$.outboundSchema,
            readySubstate: UpdateProjectReadySubstate$.outboundSchema.optional(),
            requestedAt: z.number().optional(),
            target: z.nullable(z.string()).optional(),
            teamId: z.nullable(z.string()).optional(),
            type: UpdateProjectProjectsType$.outboundSchema,
            url: z.string(),
            userId: z.string(),
            withCache: z.boolean().optional(),
            checksConclusion: UpdateProjectChecksConclusion$.outboundSchema.optional(),
            checksState: UpdateProjectChecksState$.outboundSchema.optional(),
            readyAt: z.number().optional(),
            buildingAt: z.number().optional(),
            previewCommentsEnabled: z.boolean().optional(),
            oidcTokenClaims: z.record(z.union([z.string(), z.array(z.string())])).optional(),
        });
}

/** @internal */
export namespace UpdateProjectLinkProjectsResponseType$ {
    export const inboundSchema = z.nativeEnum(UpdateProjectLinkProjectsResponseType);
    export const outboundSchema = inboundSchema;
}

/** @internal */
export namespace UpdateProjectLinkProjectsResponseDeployHooks$ {
    export const inboundSchema: z.ZodType<
        UpdateProjectLinkProjectsResponseDeployHooks,
        z.ZodTypeDef,
        unknown
    > = z.object({
        createdAt: z.number().optional(),
        id: z.string(),
        name: z.string(),
        ref: z.string(),
        url: z.string(),
    });

    export type Outbound = {
        createdAt?: number | undefined;
        id: string;
        name: string;
        ref: string;
        url: string;
    };

    export const outboundSchema: z.ZodType<
        Outbound,
        z.ZodTypeDef,
        UpdateProjectLinkProjectsResponseDeployHooks
    > = z.object({
        createdAt: z.number().optional(),
        id: z.string(),
        name: z.string(),
        ref: z.string(),
        url: z.string(),
    });
}

/** @internal */
export namespace UpdateProjectLink3$ {
    export const inboundSchema: z.ZodType<UpdateProjectLink3, z.ZodTypeDef, unknown> = z.object({
        name: z.string().optional(),
        slug: z.string().optional(),
        owner: z.string().optional(),
        type: UpdateProjectLinkProjectsResponseType$.inboundSchema.optional(),
        uuid: z.string().optional(),
        workspaceUuid: z.string().optional(),
        createdAt: z.number().optional(),
        deployHooks: z.array(
            z.lazy(() => UpdateProjectLinkProjectsResponseDeployHooks$.inboundSchema)
        ),
        gitCredentialId: z.string().optional(),
        updatedAt: z.number().optional(),
        sourceless: z.boolean().optional(),
        productionBranch: z.string().optional(),
    });

    export type Outbound = {
        name?: string | undefined;
        slug?: string | undefined;
        owner?: string | undefined;
        type?: string | undefined;
        uuid?: string | undefined;
        workspaceUuid?: string | undefined;
        createdAt?: number | undefined;
        deployHooks: Array<UpdateProjectLinkProjectsResponseDeployHooks$.Outbound>;
        gitCredentialId?: string | undefined;
        updatedAt?: number | undefined;
        sourceless?: boolean | undefined;
        productionBranch?: string | undefined;
    };

    export const outboundSchema: z.ZodType<Outbound, z.ZodTypeDef, UpdateProjectLink3> = z.object({
        name: z.string().optional(),
        slug: z.string().optional(),
        owner: z.string().optional(),
        type: UpdateProjectLinkProjectsResponseType$.outboundSchema.optional(),
        uuid: z.string().optional(),
        workspaceUuid: z.string().optional(),
        createdAt: z.number().optional(),
        deployHooks: z.array(
            z.lazy(() => UpdateProjectLinkProjectsResponseDeployHooks$.outboundSchema)
        ),
        gitCredentialId: z.string().optional(),
        updatedAt: z.number().optional(),
        sourceless: z.boolean().optional(),
        productionBranch: z.string().optional(),
    });
}

/** @internal */
export namespace UpdateProjectLinkProjectsType$ {
    export const inboundSchema = z.nativeEnum(UpdateProjectLinkProjectsType);
    export const outboundSchema = inboundSchema;
}

/** @internal */
export namespace UpdateProjectLinkProjectsDeployHooks$ {
    export const inboundSchema: z.ZodType<
        UpdateProjectLinkProjectsDeployHooks,
        z.ZodTypeDef,
        unknown
    > = z.object({
        createdAt: z.number().optional(),
        id: z.string(),
        name: z.string(),
        ref: z.string(),
        url: z.string(),
    });

    export type Outbound = {
        createdAt?: number | undefined;
        id: string;
        name: string;
        ref: string;
        url: string;
    };

    export const outboundSchema: z.ZodType<
        Outbound,
        z.ZodTypeDef,
        UpdateProjectLinkProjectsDeployHooks
    > = z.object({
        createdAt: z.number().optional(),
        id: z.string(),
        name: z.string(),
        ref: z.string(),
        url: z.string(),
    });
}

/** @internal */
export namespace UpdateProjectLink2$ {
    export const inboundSchema: z.ZodType<UpdateProjectLink2, z.ZodTypeDef, unknown> = z.object({
        projectId: z.string().optional(),
        projectName: z.string().optional(),
        projectNameWithNamespace: z.string().optional(),
        projectNamespace: z.string().optional(),
        projectUrl: z.string().optional(),
        type: UpdateProjectLinkProjectsType$.inboundSchema.optional(),
        createdAt: z.number().optional(),
        deployHooks: z.array(z.lazy(() => UpdateProjectLinkProjectsDeployHooks$.inboundSchema)),
        gitCredentialId: z.string().optional(),
        updatedAt: z.number().optional(),
        sourceless: z.boolean().optional(),
        productionBranch: z.string().optional(),
    });

    export type Outbound = {
        projectId?: string | undefined;
        projectName?: string | undefined;
        projectNameWithNamespace?: string | undefined;
        projectNamespace?: string | undefined;
        projectUrl?: string | undefined;
        type?: string | undefined;
        createdAt?: number | undefined;
        deployHooks: Array<UpdateProjectLinkProjectsDeployHooks$.Outbound>;
        gitCredentialId?: string | undefined;
        updatedAt?: number | undefined;
        sourceless?: boolean | undefined;
        productionBranch?: string | undefined;
    };

    export const outboundSchema: z.ZodType<Outbound, z.ZodTypeDef, UpdateProjectLink2> = z.object({
        projectId: z.string().optional(),
        projectName: z.string().optional(),
        projectNameWithNamespace: z.string().optional(),
        projectNamespace: z.string().optional(),
        projectUrl: z.string().optional(),
        type: UpdateProjectLinkProjectsType$.outboundSchema.optional(),
        createdAt: z.number().optional(),
        deployHooks: z.array(z.lazy(() => UpdateProjectLinkProjectsDeployHooks$.outboundSchema)),
        gitCredentialId: z.string().optional(),
        updatedAt: z.number().optional(),
        sourceless: z.boolean().optional(),
        productionBranch: z.string().optional(),
    });
}

/** @internal */
export namespace UpdateProjectLinkType$ {
    export const inboundSchema = z.nativeEnum(UpdateProjectLinkType);
    export const outboundSchema = inboundSchema;
}

/** @internal */
export namespace UpdateProjectLinkDeployHooks$ {
    export const inboundSchema: z.ZodType<UpdateProjectLinkDeployHooks, z.ZodTypeDef, unknown> =
        z.object({
            createdAt: z.number().optional(),
            id: z.string(),
            name: z.string(),
            ref: z.string(),
            url: z.string(),
        });

    export type Outbound = {
        createdAt?: number | undefined;
        id: string;
        name: string;
        ref: string;
        url: string;
    };

    export const outboundSchema: z.ZodType<Outbound, z.ZodTypeDef, UpdateProjectLinkDeployHooks> =
        z.object({
            createdAt: z.number().optional(),
            id: z.string(),
            name: z.string(),
            ref: z.string(),
            url: z.string(),
        });
}

/** @internal */
export namespace UpdateProjectLink1$ {
    export const inboundSchema: z.ZodType<UpdateProjectLink1, z.ZodTypeDef, unknown> = z.object({
        org: z.string().optional(),
        repo: z.string().optional(),
        repoId: z.number().optional(),
        type: UpdateProjectLinkType$.inboundSchema.optional(),
        createdAt: z.number().optional(),
        deployHooks: z.array(z.lazy(() => UpdateProjectLinkDeployHooks$.inboundSchema)),
        gitCredentialId: z.string().optional(),
        updatedAt: z.number().optional(),
        sourceless: z.boolean().optional(),
        productionBranch: z.string().optional(),
    });

    export type Outbound = {
        org?: string | undefined;
        repo?: string | undefined;
        repoId?: number | undefined;
        type?: string | undefined;
        createdAt?: number | undefined;
        deployHooks: Array<UpdateProjectLinkDeployHooks$.Outbound>;
        gitCredentialId?: string | undefined;
        updatedAt?: number | undefined;
        sourceless?: boolean | undefined;
        productionBranch?: string | undefined;
    };

    export const outboundSchema: z.ZodType<Outbound, z.ZodTypeDef, UpdateProjectLink1> = z.object({
        org: z.string().optional(),
        repo: z.string().optional(),
        repoId: z.number().optional(),
        type: UpdateProjectLinkType$.outboundSchema.optional(),
        createdAt: z.number().optional(),
        deployHooks: z.array(z.lazy(() => UpdateProjectLinkDeployHooks$.outboundSchema)),
        gitCredentialId: z.string().optional(),
        updatedAt: z.number().optional(),
        sourceless: z.boolean().optional(),
        productionBranch: z.string().optional(),
    });
}

/** @internal */
export namespace UpdateProjectLink$ {
    export const inboundSchema: z.ZodType<UpdateProjectLink, z.ZodTypeDef, unknown> = z.union([
        z.lazy(() => UpdateProjectLink1$.inboundSchema),
        z.lazy(() => UpdateProjectLink2$.inboundSchema),
        z.lazy(() => UpdateProjectLink3$.inboundSchema),
    ]);

    export type Outbound =
        | UpdateProjectLink1$.Outbound
        | UpdateProjectLink2$.Outbound
        | UpdateProjectLink3$.Outbound;
    export const outboundSchema: z.ZodType<Outbound, z.ZodTypeDef, UpdateProjectLink> = z.union([
        z.lazy(() => UpdateProjectLink1$.outboundSchema),
        z.lazy(() => UpdateProjectLink2$.outboundSchema),
        z.lazy(() => UpdateProjectLink3$.outboundSchema),
    ]);
}

/** @internal */
export namespace UpdateProjectProjectsNodeVersion$ {
    export const inboundSchema = z.nativeEnum(UpdateProjectProjectsNodeVersion);
    export const outboundSchema = inboundSchema;
}

/** @internal */
export namespace UpdateProjectPaths$ {
    export const inboundSchema: z.ZodType<UpdateProjectPaths, z.ZodTypeDef, unknown> = z.object({
        value: z.string(),
    });

    export type Outbound = {
        value: string;
    };

    export const outboundSchema: z.ZodType<Outbound, z.ZodTypeDef, UpdateProjectPaths> = z.object({
        value: z.string(),
    });
}

/** @internal */
export namespace UpdateProjectOptionsAllowlist$ {
    export const inboundSchema: z.ZodType<UpdateProjectOptionsAllowlist, z.ZodTypeDef, unknown> =
        z.object({
            paths: z.array(z.lazy(() => UpdateProjectPaths$.inboundSchema)),
        });

    export type Outbound = {
        paths: Array<UpdateProjectPaths$.Outbound>;
    };

    export const outboundSchema: z.ZodType<Outbound, z.ZodTypeDef, UpdateProjectOptionsAllowlist> =
        z.object({
            paths: z.array(z.lazy(() => UpdateProjectPaths$.outboundSchema)),
        });
}

/** @internal */
export namespace UpdateProjectProjectsPasswordProtection$ {
    export const inboundSchema: z.ZodType<
        UpdateProjectProjectsPasswordProtection,
        z.ZodTypeDef,
        unknown
    > = z.object({});

    export type Outbound = {};

    export const outboundSchema: z.ZodType<
        Outbound,
        z.ZodTypeDef,
        UpdateProjectProjectsPasswordProtection
    > = z.object({});
}

/** @internal */
export namespace UpdateProjectProjectsResponseDeploymentType$ {
    export const inboundSchema = z.nativeEnum(UpdateProjectProjectsResponseDeploymentType);
    export const outboundSchema = inboundSchema;
}

/** @internal */
export namespace UpdateProjectSsoProtection$ {
    export const inboundSchema: z.ZodType<UpdateProjectSsoProtection, z.ZodTypeDef, unknown> =
        z.object({
            deploymentType: UpdateProjectProjectsResponseDeploymentType$.inboundSchema,
        });

    export type Outbound = {
        deploymentType: string;
    };

    export const outboundSchema: z.ZodType<Outbound, z.ZodTypeDef, UpdateProjectSsoProtection> =
        z.object({
            deploymentType: UpdateProjectProjectsResponseDeploymentType$.outboundSchema,
        });
}

/** @internal */
export namespace UpdateProjectTargets$ {
    export const inboundSchema: z.ZodType<UpdateProjectTargets, z.ZodTypeDef, unknown> = z.union([
        z.string(),
        z.array(z.string()),
    ]);

    export type Outbound = string | Array<string>;
    export const outboundSchema: z.ZodType<Outbound, z.ZodTypeDef, UpdateProjectTargets> = z.union([
        z.string(),
        z.array(z.string()),
    ]);
}

/** @internal */
export namespace UpdateProjectPermissions$ {
    export const inboundSchema: z.ZodType<UpdateProjectPermissions, z.ZodTypeDef, unknown> = z
        .object({
            accessGroup: z.array(ACLAction$.inboundSchema).optional(),
            aliasGlobal: z.array(ACLAction$.inboundSchema).optional(),
            analyticsSampling: z.array(ACLAction$.inboundSchema).optional(),
            analyticsUsage: z.array(ACLAction$.inboundSchema).optional(),
            auditLog: z.array(ACLAction$.inboundSchema).optional(),
            billingAddress: z.array(ACLAction$.inboundSchema).optional(),
            billingInformation: z.array(ACLAction$.inboundSchema).optional(),
            billingInvoice: z.array(ACLAction$.inboundSchema).optional(),
            billingInvoiceEmailRecipient: z.array(ACLAction$.inboundSchema).optional(),
            billingInvoiceLanguage: z.array(ACLAction$.inboundSchema).optional(),
            billingPlan: z.array(ACLAction$.inboundSchema).optional(),
            billingPurchaseOrder: z.array(ACLAction$.inboundSchema).optional(),
            billingTaxId: z.array(ACLAction$.inboundSchema).optional(),
            blob: z.array(ACLAction$.inboundSchema).optional(),
            budget: z.array(ACLAction$.inboundSchema).optional(),
            cacheArtifact: z.array(ACLAction$.inboundSchema).optional(),
            cacheArtifactUsageEvent: z.array(ACLAction$.inboundSchema).optional(),
            codeChecks: z.array(ACLAction$.inboundSchema).optional(),
            concurrentBuilds: z.array(ACLAction$.inboundSchema).optional(),
            connect: z.array(ACLAction$.inboundSchema).optional(),
            connectConfiguration: z.array(ACLAction$.inboundSchema).optional(),
            domain: z.array(ACLAction$.inboundSchema).optional(),
            domainAcceptDelegation: z.array(ACLAction$.inboundSchema).optional(),
            domainAuthCodes: z.array(ACLAction$.inboundSchema).optional(),
            domainCertificate: z.array(ACLAction$.inboundSchema).optional(),
            domainCheckConfig: z.array(ACLAction$.inboundSchema).optional(),
            domainMove: z.array(ACLAction$.inboundSchema).optional(),
            domainPurchase: z.array(ACLAction$.inboundSchema).optional(),
            domainRecord: z.array(ACLAction$.inboundSchema).optional(),
            domainTransferIn: z.array(ACLAction$.inboundSchema).optional(),
            event: z.array(ACLAction$.inboundSchema).optional(),
            ownEvent: z.array(ACLAction$.inboundSchema).optional(),
            sensitiveEnvironmentVariablePolicy: z.array(ACLAction$.inboundSchema).optional(),
            fileUpload: z.array(ACLAction$.inboundSchema).optional(),
            gitRepository: z.array(ACLAction$.inboundSchema).optional(),
            ipBlocking: z.array(ACLAction$.inboundSchema).optional(),
            integration: z.array(ACLAction$.inboundSchema).optional(),
            integrationConfiguration: z.array(ACLAction$.inboundSchema).optional(),
            integrationConfigurationTransfer: z.array(ACLAction$.inboundSchema).optional(),
            integrationConfigurationProjects: z.array(ACLAction$.inboundSchema).optional(),
            integrationVercelConfigurationOverride: z.array(ACLAction$.inboundSchema).optional(),
            integrationStore: z.array(ACLAction$.inboundSchema).optional(),
            integrationEvent: z.array(ACLAction$.inboundSchema).optional(),
            integrationResourceSecrets: z.array(ACLAction$.inboundSchema).optional(),
            marketplaceBillingData: z.array(ACLAction$.inboundSchema).optional(),
            jobGlobal: z.array(ACLAction$.inboundSchema).optional(),
            logDrain: z.array(ACLAction$.inboundSchema).optional(),
            Monitoring: z.array(ACLAction$.inboundSchema).optional(),
            monitoringSettings: z.array(ACLAction$.inboundSchema).optional(),
            monitoringQuery: z.array(ACLAction$.inboundSchema).optional(),
            monitoringChart: z.array(ACLAction$.inboundSchema).optional(),
            monitoringAlert: z.array(ACLAction$.inboundSchema).optional(),
            notificationDeploymentFailed: z.array(ACLAction$.inboundSchema).optional(),
            notificationDomainConfiguration: z.array(ACLAction$.inboundSchema).optional(),
            notificationDomainExpire: z.array(ACLAction$.inboundSchema).optional(),
            notificationDomainMoved: z.array(ACLAction$.inboundSchema).optional(),
            notificationDomainPurchase: z.array(ACLAction$.inboundSchema).optional(),
            notificationDomainRenewal: z.array(ACLAction$.inboundSchema).optional(),
            notificationDomainTransfer: z.array(ACLAction$.inboundSchema).optional(),
            notificationDomainUnverified: z.array(ACLAction$.inboundSchema).optional(),
            NotificationMonitoringAlert: z.array(ACLAction$.inboundSchema).optional(),
            notificationPaymentFailed: z.array(ACLAction$.inboundSchema).optional(),
            notificationUsageAlert: z.array(ACLAction$.inboundSchema).optional(),
            notificationCustomerBudget: z.array(ACLAction$.inboundSchema).optional(),
            notificationStatementOfReasons: z.array(ACLAction$.inboundSchema).optional(),
            oauth2Connection: z.array(ACLAction$.inboundSchema).optional(),
            openTelemetryEndpoint: z.array(ACLAction$.inboundSchema).optional(),
            paymentMethod: z.array(ACLAction$.inboundSchema).optional(),
            permissions: z.array(ACLAction$.inboundSchema).optional(),
            postgres: z.array(ACLAction$.inboundSchema).optional(),
            previewDeploymentSuffix: z.array(ACLAction$.inboundSchema).optional(),
            proTrialOnboarding: z.array(ACLAction$.inboundSchema).optional(),
            seawallConfig: z.array(ACLAction$.inboundSchema).optional(),
            sharedEnvVars: z.array(ACLAction$.inboundSchema).optional(),
            sharedEnvVarsProduction: z.array(ACLAction$.inboundSchema).optional(),
            space: z.array(ACLAction$.inboundSchema).optional(),
            spaceRun: z.array(ACLAction$.inboundSchema).optional(),
            passwordProtectionInvoiceItem: z.array(ACLAction$.inboundSchema).optional(),
            rateLimit: z.array(ACLAction$.inboundSchema).optional(),
            redis: z.array(ACLAction$.inboundSchema).optional(),
            repository: z.array(ACLAction$.inboundSchema).optional(),
            remoteCaching: z.array(ACLAction$.inboundSchema).optional(),
            samlConfig: z.array(ACLAction$.inboundSchema).optional(),
            secret: z.array(ACLAction$.inboundSchema).optional(),
            redisStoreTokenSet: z.array(ACLAction$.inboundSchema).optional(),
            blobStoreTokenSet: z.array(ACLAction$.inboundSchema).optional(),
            postgresStoreTokenSet: z.array(ACLAction$.inboundSchema).optional(),
            integrationStoreTokenSet: z.array(ACLAction$.inboundSchema).optional(),
            supportCase: z.array(ACLAction$.inboundSchema).optional(),
            supportCaseComment: z.array(ACLAction$.inboundSchema).optional(),
            dataCacheBillingSettings: z.array(ACLAction$.inboundSchema).optional(),
            team: z.array(ACLAction$.inboundSchema).optional(),
            teamAccessRequest: z.array(ACLAction$.inboundSchema).optional(),
            teamFellowMembership: z.array(ACLAction$.inboundSchema).optional(),
            teamInvite: z.array(ACLAction$.inboundSchema).optional(),
            teamInviteCode: z.array(ACLAction$.inboundSchema).optional(),
            teamJoin: z.array(ACLAction$.inboundSchema).optional(),
            teamOwnMembership: z.array(ACLAction$.inboundSchema).optional(),
            teamOwnMembershipDisconnectSAML: z.array(ACLAction$.inboundSchema).optional(),
            token: z.array(ACLAction$.inboundSchema).optional(),
            usage: z.array(ACLAction$.inboundSchema).optional(),
            usageCycle: z.array(ACLAction$.inboundSchema).optional(),
            user: z.array(ACLAction$.inboundSchema).optional(),
            userConnection: z.array(ACLAction$.inboundSchema).optional(),
            webAnalyticsPlan: z.array(ACLAction$.inboundSchema).optional(),
            webAuthn: z.array(ACLAction$.inboundSchema).optional(),
            edgeConfig: z.array(ACLAction$.inboundSchema).optional(),
            edgeConfigItem: z.array(ACLAction$.inboundSchema).optional(),
            edgeConfigSchema: z.array(ACLAction$.inboundSchema).optional(),
            edgeConfigToken: z.array(ACLAction$.inboundSchema).optional(),
            webhook: z.array(ACLAction$.inboundSchema).optional(),
            "webhook-event": z.array(ACLAction$.inboundSchema).optional(),
            endpointVerification: z.array(ACLAction$.inboundSchema).optional(),
            projectTransferIn: z.array(ACLAction$.inboundSchema).optional(),
            oauth2Application: z.array(ACLAction$.inboundSchema).optional(),
            aliasProject: z.array(ACLAction$.inboundSchema).optional(),
            aliasProtectionBypass: z.array(ACLAction$.inboundSchema).optional(),
            productionAliasProtectionBypass: z.array(ACLAction$.inboundSchema).optional(),
            connectConfigurationLink: z.array(ACLAction$.inboundSchema).optional(),
            dataCacheNamespace: z.array(ACLAction$.inboundSchema).optional(),
            deployment: z.array(ACLAction$.inboundSchema).optional(),
            deploymentCheck: z.array(ACLAction$.inboundSchema).optional(),
            deploymentCheckPreview: z.array(ACLAction$.inboundSchema).optional(),
            deploymentCheckReRunFromProductionBranch: z.array(ACLAction$.inboundSchema).optional(),
            deploymentProductionGit: z.array(ACLAction$.inboundSchema).optional(),
            deploymentPreview: z.array(ACLAction$.inboundSchema).optional(),
            deploymentPrivate: z.array(ACLAction$.inboundSchema).optional(),
            deploymentPromote: z.array(ACLAction$.inboundSchema).optional(),
            deploymentRollback: z.array(ACLAction$.inboundSchema).optional(),
            environments: z.array(ACLAction$.inboundSchema).optional(),
            logs: z.array(ACLAction$.inboundSchema).optional(),
            logsPreset: z.array(ACLAction$.inboundSchema).optional(),
            passwordProtection: z.array(ACLAction$.inboundSchema).optional(),
            optionsAllowlist: z.array(ACLAction$.inboundSchema).optional(),
            job: z.array(ACLAction$.inboundSchema).optional(),
            project: z.array(ACLAction$.inboundSchema).optional(),
            projectAccessGroup: z.array(ACLAction$.inboundSchema).optional(),
            projectAnalyticsSampling: z.array(ACLAction$.inboundSchema).optional(),
            projectDeploymentHook: z.array(ACLAction$.inboundSchema).optional(),
            projectDomain: z.array(ACLAction$.inboundSchema).optional(),
            projectDomainMove: z.array(ACLAction$.inboundSchema).optional(),
            projectDomainCheckConfig: z.array(ACLAction$.inboundSchema).optional(),
            projectEnvVars: z.array(ACLAction$.inboundSchema).optional(),
            projectEnvVarsProduction: z.array(ACLAction$.inboundSchema).optional(),
            projectEnvVarsUnownedByIntegration: z.array(ACLAction$.inboundSchema).optional(),
            projectId: z.array(ACLAction$.inboundSchema).optional(),
            projectIntegrationConfiguration: z.array(ACLAction$.inboundSchema).optional(),
            projectLink: z.array(ACLAction$.inboundSchema).optional(),
            projectMember: z.array(ACLAction$.inboundSchema).optional(),
            projectMonitoring: z.array(ACLAction$.inboundSchema).optional(),
            projectPermissions: z.array(ACLAction$.inboundSchema).optional(),
            projectProductionBranch: z.array(ACLAction$.inboundSchema).optional(),
            projectTransfer: z.array(ACLAction$.inboundSchema).optional(),
            projectTransferOut: z.array(ACLAction$.inboundSchema).optional(),
            projectProtectionBypass: z.array(ACLAction$.inboundSchema).optional(),
            projectUsage: z.array(ACLAction$.inboundSchema).optional(),
            projectAnalyticsUsage: z.array(ACLAction$.inboundSchema).optional(),
            projectSupportCase: z.array(ACLAction$.inboundSchema).optional(),
            projectSupportCaseComment: z.array(ACLAction$.inboundSchema).optional(),
            projectDeploymentExpiration: z.array(ACLAction$.inboundSchema).optional(),
            skewProtection: z.array(ACLAction$.inboundSchema).optional(),
            analytics: z.array(ACLAction$.inboundSchema).optional(),
            trustedIps: z.array(ACLAction$.inboundSchema).optional(),
            webAnalytics: z.array(ACLAction$.inboundSchema).optional(),
            sharedEnvVarConnection: z.array(ACLAction$.inboundSchema).optional(),
        })
        .transform((v) => {
            return remap$(v, {
                Monitoring: "monitoring",
                NotificationMonitoringAlert: "notificationMonitoringAlert",
                "webhook-event": "webhookEvent",
            });
        });

    export type Outbound = {
        accessGroup?: Array<string> | undefined;
        aliasGlobal?: Array<string> | undefined;
        analyticsSampling?: Array<string> | undefined;
        analyticsUsage?: Array<string> | undefined;
        auditLog?: Array<string> | undefined;
        billingAddress?: Array<string> | undefined;
        billingInformation?: Array<string> | undefined;
        billingInvoice?: Array<string> | undefined;
        billingInvoiceEmailRecipient?: Array<string> | undefined;
        billingInvoiceLanguage?: Array<string> | undefined;
        billingPlan?: Array<string> | undefined;
        billingPurchaseOrder?: Array<string> | undefined;
        billingTaxId?: Array<string> | undefined;
        blob?: Array<string> | undefined;
        budget?: Array<string> | undefined;
        cacheArtifact?: Array<string> | undefined;
        cacheArtifactUsageEvent?: Array<string> | undefined;
        codeChecks?: Array<string> | undefined;
        concurrentBuilds?: Array<string> | undefined;
        connect?: Array<string> | undefined;
        connectConfiguration?: Array<string> | undefined;
        domain?: Array<string> | undefined;
        domainAcceptDelegation?: Array<string> | undefined;
        domainAuthCodes?: Array<string> | undefined;
        domainCertificate?: Array<string> | undefined;
        domainCheckConfig?: Array<string> | undefined;
        domainMove?: Array<string> | undefined;
        domainPurchase?: Array<string> | undefined;
        domainRecord?: Array<string> | undefined;
        domainTransferIn?: Array<string> | undefined;
        event?: Array<string> | undefined;
        ownEvent?: Array<string> | undefined;
        sensitiveEnvironmentVariablePolicy?: Array<string> | undefined;
        fileUpload?: Array<string> | undefined;
        gitRepository?: Array<string> | undefined;
        ipBlocking?: Array<string> | undefined;
        integration?: Array<string> | undefined;
        integrationConfiguration?: Array<string> | undefined;
        integrationConfigurationTransfer?: Array<string> | undefined;
        integrationConfigurationProjects?: Array<string> | undefined;
        integrationVercelConfigurationOverride?: Array<string> | undefined;
        integrationStore?: Array<string> | undefined;
        integrationEvent?: Array<string> | undefined;
        integrationResourceSecrets?: Array<string> | undefined;
        marketplaceBillingData?: Array<string> | undefined;
        jobGlobal?: Array<string> | undefined;
        logDrain?: Array<string> | undefined;
        Monitoring?: Array<string> | undefined;
        monitoringSettings?: Array<string> | undefined;
        monitoringQuery?: Array<string> | undefined;
        monitoringChart?: Array<string> | undefined;
        monitoringAlert?: Array<string> | undefined;
        notificationDeploymentFailed?: Array<string> | undefined;
        notificationDomainConfiguration?: Array<string> | undefined;
        notificationDomainExpire?: Array<string> | undefined;
        notificationDomainMoved?: Array<string> | undefined;
        notificationDomainPurchase?: Array<string> | undefined;
        notificationDomainRenewal?: Array<string> | undefined;
        notificationDomainTransfer?: Array<string> | undefined;
        notificationDomainUnverified?: Array<string> | undefined;
        NotificationMonitoringAlert?: Array<string> | undefined;
        notificationPaymentFailed?: Array<string> | undefined;
        notificationUsageAlert?: Array<string> | undefined;
        notificationCustomerBudget?: Array<string> | undefined;
        notificationStatementOfReasons?: Array<string> | undefined;
        oauth2Connection?: Array<string> | undefined;
        openTelemetryEndpoint?: Array<string> | undefined;
        paymentMethod?: Array<string> | undefined;
        permissions?: Array<string> | undefined;
        postgres?: Array<string> | undefined;
        previewDeploymentSuffix?: Array<string> | undefined;
        proTrialOnboarding?: Array<string> | undefined;
        seawallConfig?: Array<string> | undefined;
        sharedEnvVars?: Array<string> | undefined;
        sharedEnvVarsProduction?: Array<string> | undefined;
        space?: Array<string> | undefined;
        spaceRun?: Array<string> | undefined;
        passwordProtectionInvoiceItem?: Array<string> | undefined;
        rateLimit?: Array<string> | undefined;
        redis?: Array<string> | undefined;
        repository?: Array<string> | undefined;
        remoteCaching?: Array<string> | undefined;
        samlConfig?: Array<string> | undefined;
        secret?: Array<string> | undefined;
        redisStoreTokenSet?: Array<string> | undefined;
        blobStoreTokenSet?: Array<string> | undefined;
        postgresStoreTokenSet?: Array<string> | undefined;
        integrationStoreTokenSet?: Array<string> | undefined;
        supportCase?: Array<string> | undefined;
        supportCaseComment?: Array<string> | undefined;
        dataCacheBillingSettings?: Array<string> | undefined;
        team?: Array<string> | undefined;
        teamAccessRequest?: Array<string> | undefined;
        teamFellowMembership?: Array<string> | undefined;
        teamInvite?: Array<string> | undefined;
        teamInviteCode?: Array<string> | undefined;
        teamJoin?: Array<string> | undefined;
        teamOwnMembership?: Array<string> | undefined;
        teamOwnMembershipDisconnectSAML?: Array<string> | undefined;
        token?: Array<string> | undefined;
        usage?: Array<string> | undefined;
        usageCycle?: Array<string> | undefined;
        user?: Array<string> | undefined;
        userConnection?: Array<string> | undefined;
        webAnalyticsPlan?: Array<string> | undefined;
        webAuthn?: Array<string> | undefined;
        edgeConfig?: Array<string> | undefined;
        edgeConfigItem?: Array<string> | undefined;
        edgeConfigSchema?: Array<string> | undefined;
        edgeConfigToken?: Array<string> | undefined;
        webhook?: Array<string> | undefined;
        "webhook-event"?: Array<string> | undefined;
        endpointVerification?: Array<string> | undefined;
        projectTransferIn?: Array<string> | undefined;
        oauth2Application?: Array<string> | undefined;
        aliasProject?: Array<string> | undefined;
        aliasProtectionBypass?: Array<string> | undefined;
        productionAliasProtectionBypass?: Array<string> | undefined;
        connectConfigurationLink?: Array<string> | undefined;
        dataCacheNamespace?: Array<string> | undefined;
        deployment?: Array<string> | undefined;
        deploymentCheck?: Array<string> | undefined;
        deploymentCheckPreview?: Array<string> | undefined;
        deploymentCheckReRunFromProductionBranch?: Array<string> | undefined;
        deploymentProductionGit?: Array<string> | undefined;
        deploymentPreview?: Array<string> | undefined;
        deploymentPrivate?: Array<string> | undefined;
        deploymentPromote?: Array<string> | undefined;
        deploymentRollback?: Array<string> | undefined;
        environments?: Array<string> | undefined;
        logs?: Array<string> | undefined;
        logsPreset?: Array<string> | undefined;
        passwordProtection?: Array<string> | undefined;
        optionsAllowlist?: Array<string> | undefined;
        job?: Array<string> | undefined;
        project?: Array<string> | undefined;
        projectAccessGroup?: Array<string> | undefined;
        projectAnalyticsSampling?: Array<string> | undefined;
        projectDeploymentHook?: Array<string> | undefined;
        projectDomain?: Array<string> | undefined;
        projectDomainMove?: Array<string> | undefined;
        projectDomainCheckConfig?: Array<string> | undefined;
        projectEnvVars?: Array<string> | undefined;
        projectEnvVarsProduction?: Array<string> | undefined;
        projectEnvVarsUnownedByIntegration?: Array<string> | undefined;
        projectId?: Array<string> | undefined;
        projectIntegrationConfiguration?: Array<string> | undefined;
        projectLink?: Array<string> | undefined;
        projectMember?: Array<string> | undefined;
        projectMonitoring?: Array<string> | undefined;
        projectPermissions?: Array<string> | undefined;
        projectProductionBranch?: Array<string> | undefined;
        projectTransfer?: Array<string> | undefined;
        projectTransferOut?: Array<string> | undefined;
        projectProtectionBypass?: Array<string> | undefined;
        projectUsage?: Array<string> | undefined;
        projectAnalyticsUsage?: Array<string> | undefined;
        projectSupportCase?: Array<string> | undefined;
        projectSupportCaseComment?: Array<string> | undefined;
        projectDeploymentExpiration?: Array<string> | undefined;
        skewProtection?: Array<string> | undefined;
        analytics?: Array<string> | undefined;
        trustedIps?: Array<string> | undefined;
        webAnalytics?: Array<string> | undefined;
        sharedEnvVarConnection?: Array<string> | undefined;
    };

    export const outboundSchema: z.ZodType<Outbound, z.ZodTypeDef, UpdateProjectPermissions> = z
        .object({
            accessGroup: z.array(ACLAction$.outboundSchema).optional(),
            aliasGlobal: z.array(ACLAction$.outboundSchema).optional(),
            analyticsSampling: z.array(ACLAction$.outboundSchema).optional(),
            analyticsUsage: z.array(ACLAction$.outboundSchema).optional(),
            auditLog: z.array(ACLAction$.outboundSchema).optional(),
            billingAddress: z.array(ACLAction$.outboundSchema).optional(),
            billingInformation: z.array(ACLAction$.outboundSchema).optional(),
            billingInvoice: z.array(ACLAction$.outboundSchema).optional(),
            billingInvoiceEmailRecipient: z.array(ACLAction$.outboundSchema).optional(),
            billingInvoiceLanguage: z.array(ACLAction$.outboundSchema).optional(),
            billingPlan: z.array(ACLAction$.outboundSchema).optional(),
            billingPurchaseOrder: z.array(ACLAction$.outboundSchema).optional(),
            billingTaxId: z.array(ACLAction$.outboundSchema).optional(),
            blob: z.array(ACLAction$.outboundSchema).optional(),
            budget: z.array(ACLAction$.outboundSchema).optional(),
            cacheArtifact: z.array(ACLAction$.outboundSchema).optional(),
            cacheArtifactUsageEvent: z.array(ACLAction$.outboundSchema).optional(),
            codeChecks: z.array(ACLAction$.outboundSchema).optional(),
            concurrentBuilds: z.array(ACLAction$.outboundSchema).optional(),
            connect: z.array(ACLAction$.outboundSchema).optional(),
            connectConfiguration: z.array(ACLAction$.outboundSchema).optional(),
            domain: z.array(ACLAction$.outboundSchema).optional(),
            domainAcceptDelegation: z.array(ACLAction$.outboundSchema).optional(),
            domainAuthCodes: z.array(ACLAction$.outboundSchema).optional(),
            domainCertificate: z.array(ACLAction$.outboundSchema).optional(),
            domainCheckConfig: z.array(ACLAction$.outboundSchema).optional(),
            domainMove: z.array(ACLAction$.outboundSchema).optional(),
            domainPurchase: z.array(ACLAction$.outboundSchema).optional(),
            domainRecord: z.array(ACLAction$.outboundSchema).optional(),
            domainTransferIn: z.array(ACLAction$.outboundSchema).optional(),
            event: z.array(ACLAction$.outboundSchema).optional(),
            ownEvent: z.array(ACLAction$.outboundSchema).optional(),
            sensitiveEnvironmentVariablePolicy: z.array(ACLAction$.outboundSchema).optional(),
            fileUpload: z.array(ACLAction$.outboundSchema).optional(),
            gitRepository: z.array(ACLAction$.outboundSchema).optional(),
            ipBlocking: z.array(ACLAction$.outboundSchema).optional(),
            integration: z.array(ACLAction$.outboundSchema).optional(),
            integrationConfiguration: z.array(ACLAction$.outboundSchema).optional(),
            integrationConfigurationTransfer: z.array(ACLAction$.outboundSchema).optional(),
            integrationConfigurationProjects: z.array(ACLAction$.outboundSchema).optional(),
            integrationVercelConfigurationOverride: z.array(ACLAction$.outboundSchema).optional(),
            integrationStore: z.array(ACLAction$.outboundSchema).optional(),
            integrationEvent: z.array(ACLAction$.outboundSchema).optional(),
            integrationResourceSecrets: z.array(ACLAction$.outboundSchema).optional(),
            marketplaceBillingData: z.array(ACLAction$.outboundSchema).optional(),
            jobGlobal: z.array(ACLAction$.outboundSchema).optional(),
            logDrain: z.array(ACLAction$.outboundSchema).optional(),
            monitoring: z.array(ACLAction$.outboundSchema).optional(),
            monitoringSettings: z.array(ACLAction$.outboundSchema).optional(),
            monitoringQuery: z.array(ACLAction$.outboundSchema).optional(),
            monitoringChart: z.array(ACLAction$.outboundSchema).optional(),
            monitoringAlert: z.array(ACLAction$.outboundSchema).optional(),
            notificationDeploymentFailed: z.array(ACLAction$.outboundSchema).optional(),
            notificationDomainConfiguration: z.array(ACLAction$.outboundSchema).optional(),
            notificationDomainExpire: z.array(ACLAction$.outboundSchema).optional(),
            notificationDomainMoved: z.array(ACLAction$.outboundSchema).optional(),
            notificationDomainPurchase: z.array(ACLAction$.outboundSchema).optional(),
            notificationDomainRenewal: z.array(ACLAction$.outboundSchema).optional(),
            notificationDomainTransfer: z.array(ACLAction$.outboundSchema).optional(),
            notificationDomainUnverified: z.array(ACLAction$.outboundSchema).optional(),
            notificationMonitoringAlert: z.array(ACLAction$.outboundSchema).optional(),
            notificationPaymentFailed: z.array(ACLAction$.outboundSchema).optional(),
            notificationUsageAlert: z.array(ACLAction$.outboundSchema).optional(),
            notificationCustomerBudget: z.array(ACLAction$.outboundSchema).optional(),
            notificationStatementOfReasons: z.array(ACLAction$.outboundSchema).optional(),
            oauth2Connection: z.array(ACLAction$.outboundSchema).optional(),
            openTelemetryEndpoint: z.array(ACLAction$.outboundSchema).optional(),
            paymentMethod: z.array(ACLAction$.outboundSchema).optional(),
            permissions: z.array(ACLAction$.outboundSchema).optional(),
            postgres: z.array(ACLAction$.outboundSchema).optional(),
            previewDeploymentSuffix: z.array(ACLAction$.outboundSchema).optional(),
            proTrialOnboarding: z.array(ACLAction$.outboundSchema).optional(),
            seawallConfig: z.array(ACLAction$.outboundSchema).optional(),
            sharedEnvVars: z.array(ACLAction$.outboundSchema).optional(),
            sharedEnvVarsProduction: z.array(ACLAction$.outboundSchema).optional(),
            space: z.array(ACLAction$.outboundSchema).optional(),
            spaceRun: z.array(ACLAction$.outboundSchema).optional(),
            passwordProtectionInvoiceItem: z.array(ACLAction$.outboundSchema).optional(),
            rateLimit: z.array(ACLAction$.outboundSchema).optional(),
            redis: z.array(ACLAction$.outboundSchema).optional(),
            repository: z.array(ACLAction$.outboundSchema).optional(),
            remoteCaching: z.array(ACLAction$.outboundSchema).optional(),
            samlConfig: z.array(ACLAction$.outboundSchema).optional(),
            secret: z.array(ACLAction$.outboundSchema).optional(),
            redisStoreTokenSet: z.array(ACLAction$.outboundSchema).optional(),
            blobStoreTokenSet: z.array(ACLAction$.outboundSchema).optional(),
            postgresStoreTokenSet: z.array(ACLAction$.outboundSchema).optional(),
            integrationStoreTokenSet: z.array(ACLAction$.outboundSchema).optional(),
            supportCase: z.array(ACLAction$.outboundSchema).optional(),
            supportCaseComment: z.array(ACLAction$.outboundSchema).optional(),
            dataCacheBillingSettings: z.array(ACLAction$.outboundSchema).optional(),
            team: z.array(ACLAction$.outboundSchema).optional(),
            teamAccessRequest: z.array(ACLAction$.outboundSchema).optional(),
            teamFellowMembership: z.array(ACLAction$.outboundSchema).optional(),
            teamInvite: z.array(ACLAction$.outboundSchema).optional(),
            teamInviteCode: z.array(ACLAction$.outboundSchema).optional(),
            teamJoin: z.array(ACLAction$.outboundSchema).optional(),
            teamOwnMembership: z.array(ACLAction$.outboundSchema).optional(),
            teamOwnMembershipDisconnectSAML: z.array(ACLAction$.outboundSchema).optional(),
            token: z.array(ACLAction$.outboundSchema).optional(),
            usage: z.array(ACLAction$.outboundSchema).optional(),
            usageCycle: z.array(ACLAction$.outboundSchema).optional(),
            user: z.array(ACLAction$.outboundSchema).optional(),
            userConnection: z.array(ACLAction$.outboundSchema).optional(),
            webAnalyticsPlan: z.array(ACLAction$.outboundSchema).optional(),
            webAuthn: z.array(ACLAction$.outboundSchema).optional(),
            edgeConfig: z.array(ACLAction$.outboundSchema).optional(),
            edgeConfigItem: z.array(ACLAction$.outboundSchema).optional(),
            edgeConfigSchema: z.array(ACLAction$.outboundSchema).optional(),
            edgeConfigToken: z.array(ACLAction$.outboundSchema).optional(),
            webhook: z.array(ACLAction$.outboundSchema).optional(),
            webhookEvent: z.array(ACLAction$.outboundSchema).optional(),
            endpointVerification: z.array(ACLAction$.outboundSchema).optional(),
            projectTransferIn: z.array(ACLAction$.outboundSchema).optional(),
            oauth2Application: z.array(ACLAction$.outboundSchema).optional(),
            aliasProject: z.array(ACLAction$.outboundSchema).optional(),
            aliasProtectionBypass: z.array(ACLAction$.outboundSchema).optional(),
            productionAliasProtectionBypass: z.array(ACLAction$.outboundSchema).optional(),
            connectConfigurationLink: z.array(ACLAction$.outboundSchema).optional(),
            dataCacheNamespace: z.array(ACLAction$.outboundSchema).optional(),
            deployment: z.array(ACLAction$.outboundSchema).optional(),
            deploymentCheck: z.array(ACLAction$.outboundSchema).optional(),
            deploymentCheckPreview: z.array(ACLAction$.outboundSchema).optional(),
            deploymentCheckReRunFromProductionBranch: z.array(ACLAction$.outboundSchema).optional(),
            deploymentProductionGit: z.array(ACLAction$.outboundSchema).optional(),
            deploymentPreview: z.array(ACLAction$.outboundSchema).optional(),
            deploymentPrivate: z.array(ACLAction$.outboundSchema).optional(),
            deploymentPromote: z.array(ACLAction$.outboundSchema).optional(),
            deploymentRollback: z.array(ACLAction$.outboundSchema).optional(),
            environments: z.array(ACLAction$.outboundSchema).optional(),
            logs: z.array(ACLAction$.outboundSchema).optional(),
            logsPreset: z.array(ACLAction$.outboundSchema).optional(),
            passwordProtection: z.array(ACLAction$.outboundSchema).optional(),
            optionsAllowlist: z.array(ACLAction$.outboundSchema).optional(),
            job: z.array(ACLAction$.outboundSchema).optional(),
            project: z.array(ACLAction$.outboundSchema).optional(),
            projectAccessGroup: z.array(ACLAction$.outboundSchema).optional(),
            projectAnalyticsSampling: z.array(ACLAction$.outboundSchema).optional(),
            projectDeploymentHook: z.array(ACLAction$.outboundSchema).optional(),
            projectDomain: z.array(ACLAction$.outboundSchema).optional(),
            projectDomainMove: z.array(ACLAction$.outboundSchema).optional(),
            projectDomainCheckConfig: z.array(ACLAction$.outboundSchema).optional(),
            projectEnvVars: z.array(ACLAction$.outboundSchema).optional(),
            projectEnvVarsProduction: z.array(ACLAction$.outboundSchema).optional(),
            projectEnvVarsUnownedByIntegration: z.array(ACLAction$.outboundSchema).optional(),
            projectId: z.array(ACLAction$.outboundSchema).optional(),
            projectIntegrationConfiguration: z.array(ACLAction$.outboundSchema).optional(),
            projectLink: z.array(ACLAction$.outboundSchema).optional(),
            projectMember: z.array(ACLAction$.outboundSchema).optional(),
            projectMonitoring: z.array(ACLAction$.outboundSchema).optional(),
            projectPermissions: z.array(ACLAction$.outboundSchema).optional(),
            projectProductionBranch: z.array(ACLAction$.outboundSchema).optional(),
            projectTransfer: z.array(ACLAction$.outboundSchema).optional(),
            projectTransferOut: z.array(ACLAction$.outboundSchema).optional(),
            projectProtectionBypass: z.array(ACLAction$.outboundSchema).optional(),
            projectUsage: z.array(ACLAction$.outboundSchema).optional(),
            projectAnalyticsUsage: z.array(ACLAction$.outboundSchema).optional(),
            projectSupportCase: z.array(ACLAction$.outboundSchema).optional(),
            projectSupportCaseComment: z.array(ACLAction$.outboundSchema).optional(),
            projectDeploymentExpiration: z.array(ACLAction$.outboundSchema).optional(),
            skewProtection: z.array(ACLAction$.outboundSchema).optional(),
            analytics: z.array(ACLAction$.outboundSchema).optional(),
            trustedIps: z.array(ACLAction$.outboundSchema).optional(),
            webAnalytics: z.array(ACLAction$.outboundSchema).optional(),
            sharedEnvVarConnection: z.array(ACLAction$.outboundSchema).optional(),
        })
        .transform((v) => {
            return remap$(v, {
                monitoring: "Monitoring",
                notificationMonitoringAlert: "NotificationMonitoringAlert",
                webhookEvent: "webhook-event",
            });
        });
}

/** @internal */
export namespace UpdateProjectLastRollbackTarget$ {
    export const inboundSchema: z.ZodType<UpdateProjectLastRollbackTarget, z.ZodTypeDef, unknown> =
        z.object({});

    export type Outbound = {};

    export const outboundSchema: z.ZodType<
        Outbound,
        z.ZodTypeDef,
        UpdateProjectLastRollbackTarget
    > = z.object({});
}

/** @internal */
export namespace UpdateProjectJobStatus$ {
    export const inboundSchema = z.nativeEnum(UpdateProjectJobStatus);
    export const outboundSchema = inboundSchema;
}

/** @internal */
export namespace UpdateProjectProjectsResponseType$ {
    export const inboundSchema = z.nativeEnum(UpdateProjectProjectsResponseType);
    export const outboundSchema = inboundSchema;
}

/** @internal */
export namespace UpdateProjectLastAliasRequest$ {
    export const inboundSchema: z.ZodType<UpdateProjectLastAliasRequest, z.ZodTypeDef, unknown> =
        z.object({
            fromDeploymentId: z.string(),
            toDeploymentId: z.string(),
            jobStatus: UpdateProjectJobStatus$.inboundSchema,
            requestedAt: z.number(),
            type: UpdateProjectProjectsResponseType$.inboundSchema,
        });

    export type Outbound = {
        fromDeploymentId: string;
        toDeploymentId: string;
        jobStatus: string;
        requestedAt: number;
        type: string;
    };

    export const outboundSchema: z.ZodType<Outbound, z.ZodTypeDef, UpdateProjectLastAliasRequest> =
        z.object({
            fromDeploymentId: z.string(),
            toDeploymentId: z.string(),
            jobStatus: UpdateProjectJobStatus$.outboundSchema,
            requestedAt: z.number(),
            type: UpdateProjectProjectsResponseType$.outboundSchema,
        });
}

/** @internal */
export namespace UpdateProjectScope$ {
    export const inboundSchema = z.nativeEnum(UpdateProjectScope);
    export const outboundSchema = inboundSchema;
}

/** @internal */
export namespace UpdateProjectProtectionBypass$ {
    export const inboundSchema: z.ZodType<UpdateProjectProtectionBypass, z.ZodTypeDef, unknown> =
        z.object({
            createdAt: z.number(),
            createdBy: z.string(),
            scope: UpdateProjectScope$.inboundSchema,
        });

    export type Outbound = {
        createdAt: number;
        createdBy: string;
        scope: string;
    };

    export const outboundSchema: z.ZodType<Outbound, z.ZodTypeDef, UpdateProjectProtectionBypass> =
        z.object({
            createdAt: z.number(),
            createdBy: z.string(),
            scope: UpdateProjectScope$.outboundSchema,
        });
}

/** @internal */
export namespace UpdateProjectTrustedIpsProjectsDeploymentType$ {
    export const inboundSchema = z.nativeEnum(UpdateProjectTrustedIpsProjectsDeploymentType);
    export const outboundSchema = inboundSchema;
}

/** @internal */
export namespace UpdateProjectTrustedIps2$ {
    export const inboundSchema: z.ZodType<UpdateProjectTrustedIps2, z.ZodTypeDef, unknown> =
        z.object({
            deploymentType: UpdateProjectTrustedIpsProjectsDeploymentType$.inboundSchema,
        });

    export type Outbound = {
        deploymentType: string;
    };

    export const outboundSchema: z.ZodType<Outbound, z.ZodTypeDef, UpdateProjectTrustedIps2> =
        z.object({
            deploymentType: UpdateProjectTrustedIpsProjectsDeploymentType$.outboundSchema,
        });
}

/** @internal */
export namespace UpdateProjectTrustedIpsDeploymentType$ {
    export const inboundSchema = z.nativeEnum(UpdateProjectTrustedIpsDeploymentType);
    export const outboundSchema = inboundSchema;
}

/** @internal */
export namespace UpdateProjectTrustedIpsAddresses$ {
    export const inboundSchema: z.ZodType<UpdateProjectTrustedIpsAddresses, z.ZodTypeDef, unknown> =
        z.object({
            value: z.string(),
            note: z.string().optional(),
        });

    export type Outbound = {
        value: string;
        note?: string | undefined;
    };

    export const outboundSchema: z.ZodType<
        Outbound,
        z.ZodTypeDef,
        UpdateProjectTrustedIpsAddresses
    > = z.object({
        value: z.string(),
        note: z.string().optional(),
    });
}

/** @internal */
export namespace UpdateProjectTrustedIpsProtectionMode$ {
    export const inboundSchema = z.nativeEnum(UpdateProjectTrustedIpsProtectionMode);
    export const outboundSchema = inboundSchema;
}

/** @internal */
export namespace UpdateProjectTrustedIps1$ {
    export const inboundSchema: z.ZodType<UpdateProjectTrustedIps1, z.ZodTypeDef, unknown> =
        z.object({
            deploymentType: UpdateProjectTrustedIpsDeploymentType$.inboundSchema,
            addresses: z.array(z.lazy(() => UpdateProjectTrustedIpsAddresses$.inboundSchema)),
            protectionMode: UpdateProjectTrustedIpsProtectionMode$.inboundSchema,
        });

    export type Outbound = {
        deploymentType: string;
        addresses: Array<UpdateProjectTrustedIpsAddresses$.Outbound>;
        protectionMode: string;
    };

    export const outboundSchema: z.ZodType<Outbound, z.ZodTypeDef, UpdateProjectTrustedIps1> =
        z.object({
            deploymentType: UpdateProjectTrustedIpsDeploymentType$.outboundSchema,
            addresses: z.array(z.lazy(() => UpdateProjectTrustedIpsAddresses$.outboundSchema)),
            protectionMode: UpdateProjectTrustedIpsProtectionMode$.outboundSchema,
        });
}

/** @internal */
export namespace UpdateProjectTrustedIps$ {
    export const inboundSchema: z.ZodType<UpdateProjectTrustedIps, z.ZodTypeDef, unknown> = z.union(
        [
            z.lazy(() => UpdateProjectTrustedIps2$.inboundSchema),
            z.lazy(() => UpdateProjectTrustedIps1$.inboundSchema),
        ]
    );

    export type Outbound = UpdateProjectTrustedIps2$.Outbound | UpdateProjectTrustedIps1$.Outbound;
    export const outboundSchema: z.ZodType<Outbound, z.ZodTypeDef, UpdateProjectTrustedIps> =
        z.union([
            z.lazy(() => UpdateProjectTrustedIps2$.outboundSchema),
            z.lazy(() => UpdateProjectTrustedIps1$.outboundSchema),
        ]);
}

/** @internal */
export namespace UpdateProjectGitComments$ {
    export const inboundSchema: z.ZodType<UpdateProjectGitComments, z.ZodTypeDef, unknown> =
        z.object({
            onPullRequest: z.boolean(),
            onCommit: z.boolean(),
        });

    export type Outbound = {
        onPullRequest: boolean;
        onCommit: boolean;
    };

    export const outboundSchema: z.ZodType<Outbound, z.ZodTypeDef, UpdateProjectGitComments> =
        z.object({
            onPullRequest: z.boolean(),
            onCommit: z.boolean(),
        });
}

/** @internal */
export namespace UpdateProjectWebAnalytics$ {
    export const inboundSchema: z.ZodType<UpdateProjectWebAnalytics, z.ZodTypeDef, unknown> =
        z.object({
            id: z.string(),
            disabledAt: z.number().optional(),
            canceledAt: z.number().optional(),
            enabledAt: z.number().optional(),
            hasData: z.boolean().optional(),
        });

    export type Outbound = {
        id: string;
        disabledAt?: number | undefined;
        canceledAt?: number | undefined;
        enabledAt?: number | undefined;
        hasData?: boolean | undefined;
    };

    export const outboundSchema: z.ZodType<Outbound, z.ZodTypeDef, UpdateProjectWebAnalytics> =
        z.object({
            id: z.string(),
            disabledAt: z.number().optional(),
            canceledAt: z.number().optional(),
            enabledAt: z.number().optional(),
            hasData: z.boolean().optional(),
        });
}

/** @internal */
export namespace UpdateProjectSrc2$ {
    export const inboundSchema: z.ZodType<UpdateProjectSrc2, z.ZodTypeDef, unknown> = z.object({
        re: z.string().optional(),
        eq: z.string().optional(),
        neq: z.string().optional(),
        inc: z.array(z.string()).optional(),
        ninc: z.array(z.string()).optional(),
        pre: z.string().optional(),
        suf: z.string().optional(),
        gt: z.number().optional(),
        gte: z.number().optional(),
        lt: z.number().optional(),
        lte: z.number().optional(),
    });

    export type Outbound = {
        re?: string | undefined;
        eq?: string | undefined;
        neq?: string | undefined;
        inc?: Array<string> | undefined;
        ninc?: Array<string> | undefined;
        pre?: string | undefined;
        suf?: string | undefined;
        gt?: number | undefined;
        gte?: number | undefined;
        lt?: number | undefined;
        lte?: number | undefined;
    };

    export const outboundSchema: z.ZodType<Outbound, z.ZodTypeDef, UpdateProjectSrc2> = z.object({
        re: z.string().optional(),
        eq: z.string().optional(),
        neq: z.string().optional(),
        inc: z.array(z.string()).optional(),
        ninc: z.array(z.string()).optional(),
        pre: z.string().optional(),
        suf: z.string().optional(),
        gt: z.number().optional(),
        gte: z.number().optional(),
        lt: z.number().optional(),
        lte: z.number().optional(),
    });
}

/** @internal */
export namespace UpdateProjectSrc$ {
    export const inboundSchema: z.ZodType<UpdateProjectSrc, z.ZodTypeDef, unknown> = z.union([
        z.lazy(() => UpdateProjectSrc2$.inboundSchema),
        z.string(),
    ]);

    export type Outbound = UpdateProjectSrc2$.Outbound | string;
    export const outboundSchema: z.ZodType<Outbound, z.ZodTypeDef, UpdateProjectSrc> = z.union([
        z.lazy(() => UpdateProjectSrc2$.outboundSchema),
        z.string(),
    ]);
}

/** @internal */
export namespace UpdateProjectProjectsResponse200ApplicationJSONType$ {
    export const inboundSchema = z.nativeEnum(UpdateProjectProjectsResponse200ApplicationJSONType);
    export const outboundSchema = inboundSchema;
}

/** @internal */
export namespace UpdateProjectValue2$ {
    export const inboundSchema: z.ZodType<UpdateProjectValue2, z.ZodTypeDef, unknown> = z.object({
        re: z.string().optional(),
        eq: z.string().optional(),
        neq: z.string().optional(),
        inc: z.array(z.string()).optional(),
        ninc: z.array(z.string()).optional(),
        pre: z.string().optional(),
        suf: z.string().optional(),
        gt: z.number().optional(),
        gte: z.number().optional(),
        lt: z.number().optional(),
        lte: z.number().optional(),
    });

    export type Outbound = {
        re?: string | undefined;
        eq?: string | undefined;
        neq?: string | undefined;
        inc?: Array<string> | undefined;
        ninc?: Array<string> | undefined;
        pre?: string | undefined;
        suf?: string | undefined;
        gt?: number | undefined;
        gte?: number | undefined;
        lt?: number | undefined;
        lte?: number | undefined;
    };

    export const outboundSchema: z.ZodType<Outbound, z.ZodTypeDef, UpdateProjectValue2> = z.object({
        re: z.string().optional(),
        eq: z.string().optional(),
        neq: z.string().optional(),
        inc: z.array(z.string()).optional(),
        ninc: z.array(z.string()).optional(),
        pre: z.string().optional(),
        suf: z.string().optional(),
        gt: z.number().optional(),
        gte: z.number().optional(),
        lt: z.number().optional(),
        lte: z.number().optional(),
    });
}

/** @internal */
export namespace UpdateProjectValue$ {
    export const inboundSchema: z.ZodType<UpdateProjectValue, z.ZodTypeDef, unknown> = z.union([
        z.lazy(() => UpdateProjectValue2$.inboundSchema),
        z.string(),
    ]);

    export type Outbound = UpdateProjectValue2$.Outbound | string;
    export const outboundSchema: z.ZodType<Outbound, z.ZodTypeDef, UpdateProjectValue> = z.union([
        z.lazy(() => UpdateProjectValue2$.outboundSchema),
        z.string(),
    ]);
}

/** @internal */
export namespace UpdateProjectHas$ {
    export const inboundSchema: z.ZodType<UpdateProjectHas, z.ZodTypeDef, unknown> = z.object({
        type: UpdateProjectProjectsResponse200ApplicationJSONType$.inboundSchema,
        key: z.string().optional(),
        value: z.union([z.lazy(() => UpdateProjectValue2$.inboundSchema), z.string()]).optional(),
    });

    export type Outbound = {
        type: string;
        key?: string | undefined;
        value?: UpdateProjectValue2$.Outbound | string | undefined;
    };

    export const outboundSchema: z.ZodType<Outbound, z.ZodTypeDef, UpdateProjectHas> = z.object({
        type: UpdateProjectProjectsResponse200ApplicationJSONType$.outboundSchema,
        key: z.string().optional(),
        value: z.union([z.lazy(() => UpdateProjectValue2$.outboundSchema), z.string()]).optional(),
    });
}

/** @internal */
export namespace UpdateProjectProjectsResponse200ApplicationJSONResponseBodyType$ {
    export const inboundSchema = z.nativeEnum(
        UpdateProjectProjectsResponse200ApplicationJSONResponseBodyType
    );
    export const outboundSchema = inboundSchema;
}

/** @internal */
export namespace UpdateProjectValueProjects2$ {
    export const inboundSchema: z.ZodType<UpdateProjectValueProjects2, z.ZodTypeDef, unknown> =
        z.object({
            re: z.string().optional(),
            eq: z.string().optional(),
            neq: z.string().optional(),
            inc: z.array(z.string()).optional(),
            ninc: z.array(z.string()).optional(),
            pre: z.string().optional(),
            suf: z.string().optional(),
            gt: z.number().optional(),
            gte: z.number().optional(),
            lt: z.number().optional(),
            lte: z.number().optional(),
        });

    export type Outbound = {
        re?: string | undefined;
        eq?: string | undefined;
        neq?: string | undefined;
        inc?: Array<string> | undefined;
        ninc?: Array<string> | undefined;
        pre?: string | undefined;
        suf?: string | undefined;
        gt?: number | undefined;
        gte?: number | undefined;
        lt?: number | undefined;
        lte?: number | undefined;
    };

    export const outboundSchema: z.ZodType<Outbound, z.ZodTypeDef, UpdateProjectValueProjects2> =
        z.object({
            re: z.string().optional(),
            eq: z.string().optional(),
            neq: z.string().optional(),
            inc: z.array(z.string()).optional(),
            ninc: z.array(z.string()).optional(),
            pre: z.string().optional(),
            suf: z.string().optional(),
            gt: z.number().optional(),
            gte: z.number().optional(),
            lt: z.number().optional(),
            lte: z.number().optional(),
        });
}

/** @internal */
export namespace UpdateProjectProjectsValue$ {
    export const inboundSchema: z.ZodType<UpdateProjectProjectsValue, z.ZodTypeDef, unknown> =
        z.union([z.lazy(() => UpdateProjectValueProjects2$.inboundSchema), z.string()]);

    export type Outbound = UpdateProjectValueProjects2$.Outbound | string;
    export const outboundSchema: z.ZodType<Outbound, z.ZodTypeDef, UpdateProjectProjectsValue> =
        z.union([z.lazy(() => UpdateProjectValueProjects2$.outboundSchema), z.string()]);
}

/** @internal */
export namespace UpdateProjectMissing$ {
    export const inboundSchema: z.ZodType<UpdateProjectMissing, z.ZodTypeDef, unknown> = z.object({
        type: UpdateProjectProjectsResponse200ApplicationJSONResponseBodyType$.inboundSchema,
        key: z.string().optional(),
        value: z
            .union([z.lazy(() => UpdateProjectValueProjects2$.inboundSchema), z.string()])
            .optional(),
    });

    export type Outbound = {
        type: string;
        key?: string | undefined;
        value?: UpdateProjectValueProjects2$.Outbound | string | undefined;
    };

    export const outboundSchema: z.ZodType<Outbound, z.ZodTypeDef, UpdateProjectMissing> = z.object(
        {
            type: UpdateProjectProjectsResponse200ApplicationJSONResponseBodyType$.outboundSchema,
            key: z.string().optional(),
            value: z
                .union([z.lazy(() => UpdateProjectValueProjects2$.outboundSchema), z.string()])
                .optional(),
        }
    );
}

/** @internal */
export namespace UpdateProjectHandle$ {
    export const inboundSchema = z.nativeEnum(UpdateProjectHandle);
    export const outboundSchema = inboundSchema;
}

/** @internal */
export namespace UpdateProjectAction$ {
    export const inboundSchema = z.nativeEnum(UpdateProjectAction);
    export const outboundSchema = inboundSchema;
}

/** @internal */
export namespace UpdateProjectAlgo$ {
    export const inboundSchema = z.nativeEnum(UpdateProjectAlgo);
    export const outboundSchema = inboundSchema;
}

/** @internal */
export namespace UpdateProjectErl$ {
    export const inboundSchema: z.ZodType<UpdateProjectErl, z.ZodTypeDef, unknown> = z.object({
        algo: UpdateProjectAlgo$.inboundSchema,
        window: z.number(),
        limit: z.number(),
        keys: z.array(z.string()),
    });

    export type Outbound = {
        algo: string;
        window: number;
        limit: number;
        keys: Array<string>;
    };

    export const outboundSchema: z.ZodType<Outbound, z.ZodTypeDef, UpdateProjectErl> = z.object({
        algo: UpdateProjectAlgo$.outboundSchema,
        window: z.number(),
        limit: z.number(),
        keys: z.array(z.string()),
    });
}

/** @internal */
export namespace UpdateProjectMitigate$ {
    export const inboundSchema: z.ZodType<UpdateProjectMitigate, z.ZodTypeDef, unknown> = z
        .object({
            action: UpdateProjectAction$.inboundSchema,
            rule_id: z.string(),
            erl: z.lazy(() => UpdateProjectErl$.inboundSchema).optional(),
        })
        .transform((v) => {
            return remap$(v, {
                rule_id: "ruleId",
            });
        });

    export type Outbound = {
        action: string;
        rule_id: string;
        erl?: UpdateProjectErl$.Outbound | undefined;
    };

    export const outboundSchema: z.ZodType<Outbound, z.ZodTypeDef, UpdateProjectMitigate> = z
        .object({
            action: UpdateProjectAction$.outboundSchema,
            ruleId: z.string(),
            erl: z.lazy(() => UpdateProjectErl$.outboundSchema).optional(),
        })
        .transform((v) => {
            return remap$(v, {
                ruleId: "rule_id",
            });
        });
}

/** @internal */
export namespace UpdateProjectFirewallRoutes$ {
    export const inboundSchema: z.ZodType<UpdateProjectFirewallRoutes, z.ZodTypeDef, unknown> =
        z.object({
            src: z.union([z.lazy(() => UpdateProjectSrc2$.inboundSchema), z.string()]).optional(),
            has: z.array(z.lazy(() => UpdateProjectHas$.inboundSchema)).optional(),
            missing: z.array(z.lazy(() => UpdateProjectMissing$.inboundSchema)).optional(),
            dest: z.string().optional(),
            status: z.number().optional(),
            handle: UpdateProjectHandle$.inboundSchema.optional(),
            mitigate: z.lazy(() => UpdateProjectMitigate$.inboundSchema).optional(),
        });

    export type Outbound = {
        src?: UpdateProjectSrc2$.Outbound | string | undefined;
        has?: Array<UpdateProjectHas$.Outbound> | undefined;
        missing?: Array<UpdateProjectMissing$.Outbound> | undefined;
        dest?: string | undefined;
        status?: number | undefined;
        handle?: string | undefined;
        mitigate?: UpdateProjectMitigate$.Outbound | undefined;
    };

    export const outboundSchema: z.ZodType<Outbound, z.ZodTypeDef, UpdateProjectFirewallRoutes> =
        z.object({
            src: z.union([z.lazy(() => UpdateProjectSrc2$.outboundSchema), z.string()]).optional(),
            has: z.array(z.lazy(() => UpdateProjectHas$.outboundSchema)).optional(),
            missing: z.array(z.lazy(() => UpdateProjectMissing$.outboundSchema)).optional(),
            dest: z.string().optional(),
            status: z.number().optional(),
            handle: UpdateProjectHandle$.outboundSchema.optional(),
            mitigate: z.lazy(() => UpdateProjectMitigate$.outboundSchema).optional(),
        });
}

/** @internal */
export namespace UpdateProjectSecurity$ {
    export const inboundSchema: z.ZodType<UpdateProjectSecurity, z.ZodTypeDef, unknown> = z.object({
        attackModeEnabled: z.boolean().optional(),
        attackModeUpdatedAt: z.number().optional(),
        firewallEnabled: z.boolean().optional(),
        firewallUpdatedAt: z.number().optional(),
        attackModeActiveUntil: z.nullable(z.number()).optional(),
        firewallConfigVersion: z.number().optional(),
        firewallRoutes: z
            .array(z.lazy(() => UpdateProjectFirewallRoutes$.inboundSchema))
            .optional(),
        firewallSeawallEnabled: z.boolean().optional(),
        ja3Enabled: z.boolean().optional(),
        ja4Enabled: z.boolean().optional(),
    });

    export type Outbound = {
        attackModeEnabled?: boolean | undefined;
        attackModeUpdatedAt?: number | undefined;
        firewallEnabled?: boolean | undefined;
        firewallUpdatedAt?: number | undefined;
        attackModeActiveUntil?: number | null | undefined;
        firewallConfigVersion?: number | undefined;
        firewallRoutes?: Array<UpdateProjectFirewallRoutes$.Outbound> | undefined;
        firewallSeawallEnabled?: boolean | undefined;
        ja3Enabled?: boolean | undefined;
        ja4Enabled?: boolean | undefined;
    };

    export const outboundSchema: z.ZodType<Outbound, z.ZodTypeDef, UpdateProjectSecurity> =
        z.object({
            attackModeEnabled: z.boolean().optional(),
            attackModeUpdatedAt: z.number().optional(),
            firewallEnabled: z.boolean().optional(),
            firewallUpdatedAt: z.number().optional(),
            attackModeActiveUntil: z.nullable(z.number()).optional(),
            firewallConfigVersion: z.number().optional(),
            firewallRoutes: z
                .array(z.lazy(() => UpdateProjectFirewallRoutes$.outboundSchema))
                .optional(),
            firewallSeawallEnabled: z.boolean().optional(),
            ja3Enabled: z.boolean().optional(),
            ja4Enabled: z.boolean().optional(),
        });
}

/** @internal */
export namespace UpdateProjectOidcTokenConfig$ {
    export const inboundSchema: z.ZodType<UpdateProjectOidcTokenConfig, z.ZodTypeDef, unknown> =
        z.object({
            enabled: z.boolean(),
        });

    export type Outbound = {
        enabled: boolean;
    };

    export const outboundSchema: z.ZodType<Outbound, z.ZodTypeDef, UpdateProjectOidcTokenConfig> =
        z.object({
            enabled: z.boolean(),
        });
}

/** @internal */
export namespace UpdateProjectResponseBody$ {
    export const inboundSchema: z.ZodType<UpdateProjectResponseBody, z.ZodTypeDef, unknown> =
        z.object({
            accountId: z.string(),
            analytics: z.lazy(() => UpdateProjectAnalytics$.inboundSchema).optional(),
            speedInsights: z.lazy(() => UpdateProjectSpeedInsights$.inboundSchema).optional(),
            autoExposeSystemEnvs: z.boolean().optional(),
            autoAssignCustomDomains: z.boolean().optional(),
            autoAssignCustomDomainsUpdatedBy: z.string().optional(),
            buildCommand: z.nullable(z.string()).optional(),
            commandForIgnoringBuildStep: z.nullable(z.string()).optional(),
            connectConfigurationId: z.nullable(z.string()).optional(),
            connectBuildsEnabled: z.boolean().optional(),
            createdAt: z.number().optional(),
            customerSupportCodeVisibility: z.boolean().optional(),
            crons: z.lazy(() => UpdateProjectCrons$.inboundSchema).optional(),
            dataCache: z.lazy(() => UpdateProjectDataCache$.inboundSchema).optional(),
            devCommand: z.nullable(z.string()).optional(),
            directoryListing: z.boolean(),
            installCommand: z.nullable(z.string()).optional(),
            env: z.array(z.lazy(() => UpdateProjectEnv$.inboundSchema)).optional(),
            framework: z.nullable(UpdateProjectProjectsFramework$.inboundSchema).optional(),
            gitForkProtection: z.boolean().optional(),
            gitLFS: z.boolean().optional(),
            id: z.string(),
            latestDeployments: z
                .array(z.lazy(() => UpdateProjectLatestDeployments$.inboundSchema))
                .optional(),
            link: z
                .union([
                    z.lazy(() => UpdateProjectLink1$.inboundSchema),
                    z.lazy(() => UpdateProjectLink2$.inboundSchema),
                    z.lazy(() => UpdateProjectLink3$.inboundSchema),
                ])
                .optional(),
            name: z.string(),
            nodeVersion: UpdateProjectProjectsNodeVersion$.inboundSchema,
            optionsAllowlist: z
                .nullable(z.lazy(() => UpdateProjectOptionsAllowlist$.inboundSchema))
                .optional(),
            outputDirectory: z.nullable(z.string()).optional(),
            passiveConnectConfigurationId: z.nullable(z.string()).optional(),
            passwordProtection: z
                .nullable(z.lazy(() => UpdateProjectProjectsPasswordProtection$.inboundSchema))
                .optional(),
            productionDeploymentsFastLane: z.boolean().optional(),
            publicSource: z.nullable(z.boolean()).optional(),
            rootDirectory: z.nullable(z.string()).optional(),
            serverlessFunctionRegion: z.nullable(z.string()).optional(),
            serverlessFunctionZeroConfigFailover: z.boolean().optional(),
            skewProtectionBoundaryAt: z.number().optional(),
            skewProtectionMaxAge: z.number().optional(),
            skipGitConnectDuringLink: z.boolean().optional(),
            sourceFilesOutsideRootDirectory: z.boolean().optional(),
            ssoProtection: z
                .nullable(z.lazy(() => UpdateProjectSsoProtection$.inboundSchema))
                .optional(),
            targets: z.record(z.union([z.string(), z.array(z.string())])).optional(),
            transferCompletedAt: z.number().optional(),
            transferStartedAt: z.number().optional(),
            transferToAccountId: z.string().optional(),
            transferredFromAccountId: z.string().optional(),
            updatedAt: z.number().optional(),
            live: z.boolean().optional(),
            enablePreviewFeedback: z.nullable(z.boolean()).optional(),
            permissions: z.lazy(() => UpdateProjectPermissions$.inboundSchema).optional(),
            lastRollbackTarget: z
                .nullable(z.lazy(() => UpdateProjectLastRollbackTarget$.inboundSchema))
                .optional(),
            lastAliasRequest: z
                .nullable(z.lazy(() => UpdateProjectLastAliasRequest$.inboundSchema))
                .optional(),
            hasFloatingAliases: z.boolean().optional(),
            protectionBypass: z
                .record(z.lazy(() => UpdateProjectProtectionBypass$.inboundSchema))
                .optional(),
            hasActiveBranches: z.boolean().optional(),
            trustedIps: z
                .nullable(
                    z.union([
                        z.lazy(() => UpdateProjectTrustedIps2$.inboundSchema),
                        z.lazy(() => UpdateProjectTrustedIps1$.inboundSchema),
                    ])
                )
                .optional(),
            gitComments: z.lazy(() => UpdateProjectGitComments$.inboundSchema).optional(),
            paused: z.boolean().optional(),
            concurrencyBucketName: z.string().optional(),
            webAnalytics: z.lazy(() => UpdateProjectWebAnalytics$.inboundSchema).optional(),
            security: z.lazy(() => UpdateProjectSecurity$.inboundSchema).optional(),
            oidcTokenConfig: z.lazy(() => UpdateProjectOidcTokenConfig$.inboundSchema).optional(),
        });

    export type Outbound = {
        accountId: string;
        analytics?: UpdateProjectAnalytics$.Outbound | undefined;
        speedInsights?: UpdateProjectSpeedInsights$.Outbound | undefined;
        autoExposeSystemEnvs?: boolean | undefined;
        autoAssignCustomDomains?: boolean | undefined;
        autoAssignCustomDomainsUpdatedBy?: string | undefined;
        buildCommand?: string | null | undefined;
        commandForIgnoringBuildStep?: string | null | undefined;
        connectConfigurationId?: string | null | undefined;
        connectBuildsEnabled?: boolean | undefined;
        createdAt?: number | undefined;
        customerSupportCodeVisibility?: boolean | undefined;
        crons?: UpdateProjectCrons$.Outbound | undefined;
        dataCache?: UpdateProjectDataCache$.Outbound | undefined;
        devCommand?: string | null | undefined;
        directoryListing: boolean;
        installCommand?: string | null | undefined;
        env?: Array<UpdateProjectEnv$.Outbound> | undefined;
        framework?: string | null | undefined;
        gitForkProtection?: boolean | undefined;
        gitLFS?: boolean | undefined;
        id: string;
        latestDeployments?: Array<UpdateProjectLatestDeployments$.Outbound> | undefined;
        link?:
            | UpdateProjectLink1$.Outbound
            | UpdateProjectLink2$.Outbound
            | UpdateProjectLink3$.Outbound
            | undefined;
        name: string;
        nodeVersion: string;
        optionsAllowlist?: UpdateProjectOptionsAllowlist$.Outbound | null | undefined;
        outputDirectory?: string | null | undefined;
        passiveConnectConfigurationId?: string | null | undefined;
        passwordProtection?: UpdateProjectProjectsPasswordProtection$.Outbound | null | undefined;
        productionDeploymentsFastLane?: boolean | undefined;
        publicSource?: boolean | null | undefined;
        rootDirectory?: string | null | undefined;
        serverlessFunctionRegion?: string | null | undefined;
        serverlessFunctionZeroConfigFailover?: boolean | undefined;
        skewProtectionBoundaryAt?: number | undefined;
        skewProtectionMaxAge?: number | undefined;
        skipGitConnectDuringLink?: boolean | undefined;
        sourceFilesOutsideRootDirectory?: boolean | undefined;
        ssoProtection?: UpdateProjectSsoProtection$.Outbound | null | undefined;
        targets?: { [k: string]: string | Array<string> } | undefined;
        transferCompletedAt?: number | undefined;
        transferStartedAt?: number | undefined;
        transferToAccountId?: string | undefined;
        transferredFromAccountId?: string | undefined;
        updatedAt?: number | undefined;
        live?: boolean | undefined;
        enablePreviewFeedback?: boolean | null | undefined;
        permissions?: UpdateProjectPermissions$.Outbound | undefined;
        lastRollbackTarget?: UpdateProjectLastRollbackTarget$.Outbound | null | undefined;
        lastAliasRequest?: UpdateProjectLastAliasRequest$.Outbound | null | undefined;
        hasFloatingAliases?: boolean | undefined;
        protectionBypass?: { [k: string]: UpdateProjectProtectionBypass$.Outbound } | undefined;
        hasActiveBranches?: boolean | undefined;
        trustedIps?:
            | UpdateProjectTrustedIps2$.Outbound
            | UpdateProjectTrustedIps1$.Outbound
            | null
            | undefined;
        gitComments?: UpdateProjectGitComments$.Outbound | undefined;
        paused?: boolean | undefined;
        concurrencyBucketName?: string | undefined;
        webAnalytics?: UpdateProjectWebAnalytics$.Outbound | undefined;
        security?: UpdateProjectSecurity$.Outbound | undefined;
        oidcTokenConfig?: UpdateProjectOidcTokenConfig$.Outbound | undefined;
    };

    export const outboundSchema: z.ZodType<Outbound, z.ZodTypeDef, UpdateProjectResponseBody> =
        z.object({
            accountId: z.string(),
            analytics: z.lazy(() => UpdateProjectAnalytics$.outboundSchema).optional(),
            speedInsights: z.lazy(() => UpdateProjectSpeedInsights$.outboundSchema).optional(),
            autoExposeSystemEnvs: z.boolean().optional(),
            autoAssignCustomDomains: z.boolean().optional(),
            autoAssignCustomDomainsUpdatedBy: z.string().optional(),
            buildCommand: z.nullable(z.string()).optional(),
            commandForIgnoringBuildStep: z.nullable(z.string()).optional(),
            connectConfigurationId: z.nullable(z.string()).optional(),
            connectBuildsEnabled: z.boolean().optional(),
            createdAt: z.number().optional(),
            customerSupportCodeVisibility: z.boolean().optional(),
            crons: z.lazy(() => UpdateProjectCrons$.outboundSchema).optional(),
            dataCache: z.lazy(() => UpdateProjectDataCache$.outboundSchema).optional(),
            devCommand: z.nullable(z.string()).optional(),
            directoryListing: z.boolean(),
            installCommand: z.nullable(z.string()).optional(),
            env: z.array(z.lazy(() => UpdateProjectEnv$.outboundSchema)).optional(),
            framework: z.nullable(UpdateProjectProjectsFramework$.outboundSchema).optional(),
            gitForkProtection: z.boolean().optional(),
            gitLFS: z.boolean().optional(),
            id: z.string(),
            latestDeployments: z
                .array(z.lazy(() => UpdateProjectLatestDeployments$.outboundSchema))
                .optional(),
            link: z
                .union([
                    z.lazy(() => UpdateProjectLink1$.outboundSchema),
                    z.lazy(() => UpdateProjectLink2$.outboundSchema),
                    z.lazy(() => UpdateProjectLink3$.outboundSchema),
                ])
                .optional(),
            name: z.string(),
            nodeVersion: UpdateProjectProjectsNodeVersion$.outboundSchema,
            optionsAllowlist: z
                .nullable(z.lazy(() => UpdateProjectOptionsAllowlist$.outboundSchema))
                .optional(),
            outputDirectory: z.nullable(z.string()).optional(),
            passiveConnectConfigurationId: z.nullable(z.string()).optional(),
            passwordProtection: z
                .nullable(z.lazy(() => UpdateProjectProjectsPasswordProtection$.outboundSchema))
                .optional(),
            productionDeploymentsFastLane: z.boolean().optional(),
            publicSource: z.nullable(z.boolean()).optional(),
            rootDirectory: z.nullable(z.string()).optional(),
            serverlessFunctionRegion: z.nullable(z.string()).optional(),
            serverlessFunctionZeroConfigFailover: z.boolean().optional(),
            skewProtectionBoundaryAt: z.number().optional(),
            skewProtectionMaxAge: z.number().optional(),
            skipGitConnectDuringLink: z.boolean().optional(),
            sourceFilesOutsideRootDirectory: z.boolean().optional(),
            ssoProtection: z
                .nullable(z.lazy(() => UpdateProjectSsoProtection$.outboundSchema))
                .optional(),
            targets: z.record(z.union([z.string(), z.array(z.string())])).optional(),
            transferCompletedAt: z.number().optional(),
            transferStartedAt: z.number().optional(),
            transferToAccountId: z.string().optional(),
            transferredFromAccountId: z.string().optional(),
            updatedAt: z.number().optional(),
            live: z.boolean().optional(),
            enablePreviewFeedback: z.nullable(z.boolean()).optional(),
            permissions: z.lazy(() => UpdateProjectPermissions$.outboundSchema).optional(),
            lastRollbackTarget: z
                .nullable(z.lazy(() => UpdateProjectLastRollbackTarget$.outboundSchema))
                .optional(),
            lastAliasRequest: z
                .nullable(z.lazy(() => UpdateProjectLastAliasRequest$.outboundSchema))
                .optional(),
            hasFloatingAliases: z.boolean().optional(),
            protectionBypass: z
                .record(z.lazy(() => UpdateProjectProtectionBypass$.outboundSchema))
                .optional(),
            hasActiveBranches: z.boolean().optional(),
            trustedIps: z
                .nullable(
                    z.union([
                        z.lazy(() => UpdateProjectTrustedIps2$.outboundSchema),
                        z.lazy(() => UpdateProjectTrustedIps1$.outboundSchema),
                    ])
                )
                .optional(),
            gitComments: z.lazy(() => UpdateProjectGitComments$.outboundSchema).optional(),
            paused: z.boolean().optional(),
            concurrencyBucketName: z.string().optional(),
            webAnalytics: z.lazy(() => UpdateProjectWebAnalytics$.outboundSchema).optional(),
            security: z.lazy(() => UpdateProjectSecurity$.outboundSchema).optional(),
            oidcTokenConfig: z.lazy(() => UpdateProjectOidcTokenConfig$.outboundSchema).optional(),
        });
}
