/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import { ClosedEnum } from "../types/enums.js";
import * as z from "zod";

/**
 * Order of the returned events based on the timestamp.
 */
export const Direction = {
    Backward: "backward",
    Forward: "forward",
} as const;
/**
 * Order of the returned events based on the timestamp.
 */
export type Direction = ClosedEnum<typeof Direction>;

/**
 * HTTP status code range to filter events by.
 */
export type StatusCode = number | string;

export type GetDeploymentEventsRequest = {
    /**
     * The unique identifier or hostname of the deployment.
     */
    idOrUrl: string;
    /**
     * Order of the returned events based on the timestamp.
     */
    direction?: Direction | undefined;
    /**
     * When enabled, this endpoint will return live events as they happen.
     */
    follow?: number | undefined;
    /**
     * Maximum number of events to return. Provide `-1` to return all available logs.
     */
    limit?: number | undefined;
    /**
     * Deployment build ID.
     */
    name?: string | undefined;
    /**
     * Timestamp for when build logs should be pulled from.
     */
    since?: number | undefined;
    /**
     * Timestamp for when the build logs should be pulled up until.
     */
    until?: number | undefined;
    /**
     * HTTP status code range to filter events by.
     */
    statusCode?: number | string | undefined;
    delimiter?: number | undefined;
    builds?: number | undefined;
    /**
     * The Team identifier to perform the request on behalf of.
     */
    teamId?: string | undefined;
    /**
     * The Team slug to perform the request on behalf of.
     */
    slug?: string | undefined;
};

export const GetDeploymentEventsResponseBodyDeploymentsResponseType = {
    Command: "command",
    Stdout: "stdout",
    Stderr: "stderr",
    Exit: "exit",
    DeploymentState: "deployment-state",
    Delimiter: "delimiter",
    Middleware: "middleware",
    MiddlewareInvocation: "middleware-invocation",
    EdgeFunctionInvocation: "edge-function-invocation",
    Fatal: "fatal",
} as const;
export type GetDeploymentEventsResponseBodyDeploymentsResponseType = ClosedEnum<
    typeof GetDeploymentEventsResponseBodyDeploymentsResponseType
>;

export type GetDeploymentEventsResponseBodyDeploymentsInfo = {
    type: string;
    name: string;
    entrypoint?: string | undefined;
    path?: string | undefined;
    step?: string | undefined;
    readyState?: string | undefined;
};

export const GetDeploymentEventsResponseBodyDeploymentsVercelCache = {
    Miss: "MISS",
    Hit: "HIT",
    Stale: "STALE",
    Bypass: "BYPASS",
    Prerender: "PRERENDER",
    Revalidated: "REVALIDATED",
} as const;
export type GetDeploymentEventsResponseBodyDeploymentsVercelCache = ClosedEnum<
    typeof GetDeploymentEventsResponseBodyDeploymentsVercelCache
>;

export const GetDeploymentEventsResponseBodyDeploymentsWafAction = {
    Log: "log",
    Challenge: "challenge",
    Deny: "deny",
    Bypass: "bypass",
    RateLimit: "rate_limit",
} as const;
export type GetDeploymentEventsResponseBodyDeploymentsWafAction = ClosedEnum<
    typeof GetDeploymentEventsResponseBodyDeploymentsWafAction
>;

export type GetDeploymentEventsResponseBodyDeploymentsProxy = {
    timestamp: number;
    method: string;
    host: string;
    path: string;
    statusCode?: number | undefined;
    userAgent: Array<string>;
    referer: string;
    clientIp: string;
    region: string;
    scheme?: string | undefined;
    responseByteSize?: number | undefined;
    cacheId?: string | undefined;
    pathType?: string | undefined;
    vercelId?: string | undefined;
    vercelCache?: GetDeploymentEventsResponseBodyDeploymentsVercelCache | undefined;
    lambdaRegion?: string | undefined;
    wafAction?: GetDeploymentEventsResponseBodyDeploymentsWafAction | undefined;
    wafRuleId?: string | undefined;
};

export type ResponseBodyPayload = {
    deploymentId: string;
    info?: GetDeploymentEventsResponseBodyDeploymentsInfo | undefined;
    text?: string | undefined;
    id: string;
    date: number;
    serial: string;
    created?: number | undefined;
    statusCode?: number | undefined;
    requestId?: string | undefined;
    proxy?: GetDeploymentEventsResponseBodyDeploymentsProxy | undefined;
};

export type GetDeploymentEventsResponseBodyDeployments2 = {
    type: GetDeploymentEventsResponseBodyDeploymentsResponseType;
    created: number;
    payload: ResponseBodyPayload;
};

export type ResponseBodyInfo = {
    type: string;
    name: string;
    entrypoint?: string | undefined;
    path?: string | undefined;
    step?: string | undefined;
    readyState?: string | undefined;
};

export const ResponseBodyVercelCache = {
    Miss: "MISS",
    Hit: "HIT",
    Stale: "STALE",
    Bypass: "BYPASS",
    Prerender: "PRERENDER",
    Revalidated: "REVALIDATED",
} as const;
export type ResponseBodyVercelCache = ClosedEnum<typeof ResponseBodyVercelCache>;

export const ResponseBodyWafAction = {
    Log: "log",
    Challenge: "challenge",
    Deny: "deny",
    Bypass: "bypass",
    RateLimit: "rate_limit",
} as const;
export type ResponseBodyWafAction = ClosedEnum<typeof ResponseBodyWafAction>;

export type ResponseBodyProxy = {
    timestamp: number;
    method: string;
    host: string;
    path: string;
    statusCode?: number | undefined;
    userAgent: Array<string>;
    referer: string;
    clientIp: string;
    region: string;
    scheme?: string | undefined;
    responseByteSize?: number | undefined;
    cacheId?: string | undefined;
    pathType?: string | undefined;
    vercelId?: string | undefined;
    vercelCache?: ResponseBodyVercelCache | undefined;
    lambdaRegion?: string | undefined;
    wafAction?: ResponseBodyWafAction | undefined;
    wafRuleId?: string | undefined;
};

export const GetDeploymentEventsResponseBodyDeploymentsType = {
    Command: "command",
    Stdout: "stdout",
    Stderr: "stderr",
    Exit: "exit",
    DeploymentState: "deployment-state",
    Delimiter: "delimiter",
    Middleware: "middleware",
    MiddlewareInvocation: "middleware-invocation",
    EdgeFunctionInvocation: "edge-function-invocation",
    Fatal: "fatal",
} as const;
export type GetDeploymentEventsResponseBodyDeploymentsType = ClosedEnum<
    typeof GetDeploymentEventsResponseBodyDeploymentsType
>;

export type GetDeploymentEventsResponseBodyDeployments1 = {
    created: number;
    date: number;
    deploymentId: string;
    id: string;
    info: ResponseBodyInfo;
    proxy?: ResponseBodyProxy | undefined;
    requestId?: string | undefined;
    serial: string;
    statusCode?: number | undefined;
    text?: string | undefined;
    type: GetDeploymentEventsResponseBodyDeploymentsType;
};

/**
 * A stream of jsonlines where each line is a deployment log item.
 *
 * @remarks
 * Array of deployment logs for the provided query.
 */
export type GetDeploymentEventsResponseBody =
    | GetDeploymentEventsResponseBodyDeployments2
    | GetDeploymentEventsResponseBodyDeployments1;

export const GetDeploymentEventsResponseBodyType = {
    Command: "command",
    Stdout: "stdout",
    Stderr: "stderr",
    Exit: "exit",
    DeploymentState: "deployment-state",
    Delimiter: "delimiter",
    Middleware: "middleware",
    MiddlewareInvocation: "middleware-invocation",
    EdgeFunctionInvocation: "edge-function-invocation",
    Fatal: "fatal",
} as const;
export type GetDeploymentEventsResponseBodyType = ClosedEnum<
    typeof GetDeploymentEventsResponseBodyType
>;

export type GetDeploymentEventsResponseBodyInfo = {
    type: string;
    name: string;
    entrypoint?: string | undefined;
    path?: string | undefined;
    step?: string | undefined;
    readyState?: string | undefined;
};

export const GetDeploymentEventsResponseBodyVercelCache = {
    Miss: "MISS",
    Hit: "HIT",
    Stale: "STALE",
    Bypass: "BYPASS",
    Prerender: "PRERENDER",
    Revalidated: "REVALIDATED",
} as const;
export type GetDeploymentEventsResponseBodyVercelCache = ClosedEnum<
    typeof GetDeploymentEventsResponseBodyVercelCache
>;

export const GetDeploymentEventsResponseBodyWafAction = {
    Log: "log",
    Challenge: "challenge",
    Deny: "deny",
    Bypass: "bypass",
    RateLimit: "rate_limit",
} as const;
export type GetDeploymentEventsResponseBodyWafAction = ClosedEnum<
    typeof GetDeploymentEventsResponseBodyWafAction
>;

export type GetDeploymentEventsResponseBodyProxy = {
    timestamp: number;
    method: string;
    host: string;
    path: string;
    statusCode?: number | undefined;
    userAgent: Array<string>;
    referer: string;
    clientIp: string;
    region: string;
    scheme?: string | undefined;
    responseByteSize?: number | undefined;
    cacheId?: string | undefined;
    pathType?: string | undefined;
    vercelId?: string | undefined;
    vercelCache?: GetDeploymentEventsResponseBodyVercelCache | undefined;
    lambdaRegion?: string | undefined;
    wafAction?: GetDeploymentEventsResponseBodyWafAction | undefined;
    wafRuleId?: string | undefined;
};

export type Payload = {
    deploymentId: string;
    info?: GetDeploymentEventsResponseBodyInfo | undefined;
    text?: string | undefined;
    id: string;
    date: number;
    serial: string;
    created?: number | undefined;
    statusCode?: number | undefined;
    requestId?: string | undefined;
    proxy?: GetDeploymentEventsResponseBodyProxy | undefined;
};

export type GetDeploymentEventsResponseBody2 = {
    type: GetDeploymentEventsResponseBodyType;
    created: number;
    payload: Payload;
};

export type Info = {
    type: string;
    name: string;
    entrypoint?: string | undefined;
    path?: string | undefined;
    step?: string | undefined;
    readyState?: string | undefined;
};

export const VercelCache = {
    Miss: "MISS",
    Hit: "HIT",
    Stale: "STALE",
    Bypass: "BYPASS",
    Prerender: "PRERENDER",
    Revalidated: "REVALIDATED",
} as const;
export type VercelCache = ClosedEnum<typeof VercelCache>;

export const WafAction = {
    Log: "log",
    Challenge: "challenge",
    Deny: "deny",
    Bypass: "bypass",
    RateLimit: "rate_limit",
} as const;
export type WafAction = ClosedEnum<typeof WafAction>;

export type Proxy = {
    timestamp: number;
    method: string;
    host: string;
    path: string;
    statusCode?: number | undefined;
    userAgent: Array<string>;
    referer: string;
    clientIp: string;
    region: string;
    scheme?: string | undefined;
    responseByteSize?: number | undefined;
    cacheId?: string | undefined;
    pathType?: string | undefined;
    vercelId?: string | undefined;
    vercelCache?: VercelCache | undefined;
    lambdaRegion?: string | undefined;
    wafAction?: WafAction | undefined;
    wafRuleId?: string | undefined;
};

export const GetDeploymentEventsResponseBodyDeploymentsResponse200Type = {
    Command: "command",
    Stdout: "stdout",
    Stderr: "stderr",
    Exit: "exit",
    DeploymentState: "deployment-state",
    Delimiter: "delimiter",
    Middleware: "middleware",
    MiddlewareInvocation: "middleware-invocation",
    EdgeFunctionInvocation: "edge-function-invocation",
    Fatal: "fatal",
} as const;
export type GetDeploymentEventsResponseBodyDeploymentsResponse200Type = ClosedEnum<
    typeof GetDeploymentEventsResponseBodyDeploymentsResponse200Type
>;

export type GetDeploymentEventsResponseBody1 = {
    created: number;
    date: number;
    deploymentId: string;
    id: string;
    info: Info;
    proxy?: Proxy | undefined;
    requestId?: string | undefined;
    serial: string;
    statusCode?: number | undefined;
    text?: string | undefined;
    type: GetDeploymentEventsResponseBodyDeploymentsResponse200Type;
};

export type GetDeploymentEventsDeploymentsResponseBody =
    | GetDeploymentEventsResponseBody2
    | GetDeploymentEventsResponseBody1;

export type GetDeploymentEventsResponse =
    | Array<GetDeploymentEventsResponseBody2 | GetDeploymentEventsResponseBody1>
    | GetDeploymentEventsResponseBodyDeployments2
    | GetDeploymentEventsResponseBodyDeployments1;

/** @internal */
export const Direction$inboundSchema: z.ZodNativeEnum<typeof Direction> = z.nativeEnum(Direction);

/** @internal */
export const Direction$outboundSchema: z.ZodNativeEnum<typeof Direction> = Direction$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace Direction$ {
    /** @deprecated use `Direction$inboundSchema` instead. */
    export const inboundSchema = Direction$inboundSchema;
    /** @deprecated use `Direction$outboundSchema` instead. */
    export const outboundSchema = Direction$outboundSchema;
}

/** @internal */
export const StatusCode$inboundSchema: z.ZodType<StatusCode, z.ZodTypeDef, unknown> = z.union([
    z.number(),
    z.string(),
]);

/** @internal */
export type StatusCode$Outbound = number | string;

/** @internal */
export const StatusCode$outboundSchema: z.ZodType<StatusCode$Outbound, z.ZodTypeDef, StatusCode> =
    z.union([z.number(), z.string()]);

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace StatusCode$ {
    /** @deprecated use `StatusCode$inboundSchema` instead. */
    export const inboundSchema = StatusCode$inboundSchema;
    /** @deprecated use `StatusCode$outboundSchema` instead. */
    export const outboundSchema = StatusCode$outboundSchema;
    /** @deprecated use `StatusCode$Outbound` instead. */
    export type Outbound = StatusCode$Outbound;
}

/** @internal */
export const GetDeploymentEventsRequest$inboundSchema: z.ZodType<
    GetDeploymentEventsRequest,
    z.ZodTypeDef,
    unknown
> = z.object({
    idOrUrl: z.string(),
    direction: Direction$inboundSchema.default("forward"),
    follow: z.number().optional(),
    limit: z.number().optional(),
    name: z.string().optional(),
    since: z.number().optional(),
    until: z.number().optional(),
    statusCode: z.union([z.number(), z.string()]).optional(),
    delimiter: z.number().optional(),
    builds: z.number().optional(),
    teamId: z.string().optional(),
    slug: z.string().optional(),
});

/** @internal */
export type GetDeploymentEventsRequest$Outbound = {
    idOrUrl: string;
    direction: string;
    follow?: number | undefined;
    limit?: number | undefined;
    name?: string | undefined;
    since?: number | undefined;
    until?: number | undefined;
    statusCode?: number | string | undefined;
    delimiter?: number | undefined;
    builds?: number | undefined;
    teamId?: string | undefined;
    slug?: string | undefined;
};

/** @internal */
export const GetDeploymentEventsRequest$outboundSchema: z.ZodType<
    GetDeploymentEventsRequest$Outbound,
    z.ZodTypeDef,
    GetDeploymentEventsRequest
> = z.object({
    idOrUrl: z.string(),
    direction: Direction$outboundSchema.default("forward"),
    follow: z.number().optional(),
    limit: z.number().optional(),
    name: z.string().optional(),
    since: z.number().optional(),
    until: z.number().optional(),
    statusCode: z.union([z.number(), z.string()]).optional(),
    delimiter: z.number().optional(),
    builds: z.number().optional(),
    teamId: z.string().optional(),
    slug: z.string().optional(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace GetDeploymentEventsRequest$ {
    /** @deprecated use `GetDeploymentEventsRequest$inboundSchema` instead. */
    export const inboundSchema = GetDeploymentEventsRequest$inboundSchema;
    /** @deprecated use `GetDeploymentEventsRequest$outboundSchema` instead. */
    export const outboundSchema = GetDeploymentEventsRequest$outboundSchema;
    /** @deprecated use `GetDeploymentEventsRequest$Outbound` instead. */
    export type Outbound = GetDeploymentEventsRequest$Outbound;
}

/** @internal */
export const GetDeploymentEventsResponseBodyDeploymentsResponseType$inboundSchema: z.ZodNativeEnum<
    typeof GetDeploymentEventsResponseBodyDeploymentsResponseType
> = z.nativeEnum(GetDeploymentEventsResponseBodyDeploymentsResponseType);

/** @internal */
export const GetDeploymentEventsResponseBodyDeploymentsResponseType$outboundSchema: z.ZodNativeEnum<
    typeof GetDeploymentEventsResponseBodyDeploymentsResponseType
> = GetDeploymentEventsResponseBodyDeploymentsResponseType$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace GetDeploymentEventsResponseBodyDeploymentsResponseType$ {
    /** @deprecated use `GetDeploymentEventsResponseBodyDeploymentsResponseType$inboundSchema` instead. */
    export const inboundSchema =
        GetDeploymentEventsResponseBodyDeploymentsResponseType$inboundSchema;
    /** @deprecated use `GetDeploymentEventsResponseBodyDeploymentsResponseType$outboundSchema` instead. */
    export const outboundSchema =
        GetDeploymentEventsResponseBodyDeploymentsResponseType$outboundSchema;
}

/** @internal */
export const GetDeploymentEventsResponseBodyDeploymentsInfo$inboundSchema: z.ZodType<
    GetDeploymentEventsResponseBodyDeploymentsInfo,
    z.ZodTypeDef,
    unknown
> = z.object({
    type: z.string(),
    name: z.string(),
    entrypoint: z.string().optional(),
    path: z.string().optional(),
    step: z.string().optional(),
    readyState: z.string().optional(),
});

/** @internal */
export type GetDeploymentEventsResponseBodyDeploymentsInfo$Outbound = {
    type: string;
    name: string;
    entrypoint?: string | undefined;
    path?: string | undefined;
    step?: string | undefined;
    readyState?: string | undefined;
};

/** @internal */
export const GetDeploymentEventsResponseBodyDeploymentsInfo$outboundSchema: z.ZodType<
    GetDeploymentEventsResponseBodyDeploymentsInfo$Outbound,
    z.ZodTypeDef,
    GetDeploymentEventsResponseBodyDeploymentsInfo
> = z.object({
    type: z.string(),
    name: z.string(),
    entrypoint: z.string().optional(),
    path: z.string().optional(),
    step: z.string().optional(),
    readyState: z.string().optional(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace GetDeploymentEventsResponseBodyDeploymentsInfo$ {
    /** @deprecated use `GetDeploymentEventsResponseBodyDeploymentsInfo$inboundSchema` instead. */
    export const inboundSchema = GetDeploymentEventsResponseBodyDeploymentsInfo$inboundSchema;
    /** @deprecated use `GetDeploymentEventsResponseBodyDeploymentsInfo$outboundSchema` instead. */
    export const outboundSchema = GetDeploymentEventsResponseBodyDeploymentsInfo$outboundSchema;
    /** @deprecated use `GetDeploymentEventsResponseBodyDeploymentsInfo$Outbound` instead. */
    export type Outbound = GetDeploymentEventsResponseBodyDeploymentsInfo$Outbound;
}

/** @internal */
export const GetDeploymentEventsResponseBodyDeploymentsVercelCache$inboundSchema: z.ZodNativeEnum<
    typeof GetDeploymentEventsResponseBodyDeploymentsVercelCache
> = z.nativeEnum(GetDeploymentEventsResponseBodyDeploymentsVercelCache);

/** @internal */
export const GetDeploymentEventsResponseBodyDeploymentsVercelCache$outboundSchema: z.ZodNativeEnum<
    typeof GetDeploymentEventsResponseBodyDeploymentsVercelCache
> = GetDeploymentEventsResponseBodyDeploymentsVercelCache$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace GetDeploymentEventsResponseBodyDeploymentsVercelCache$ {
    /** @deprecated use `GetDeploymentEventsResponseBodyDeploymentsVercelCache$inboundSchema` instead. */
    export const inboundSchema =
        GetDeploymentEventsResponseBodyDeploymentsVercelCache$inboundSchema;
    /** @deprecated use `GetDeploymentEventsResponseBodyDeploymentsVercelCache$outboundSchema` instead. */
    export const outboundSchema =
        GetDeploymentEventsResponseBodyDeploymentsVercelCache$outboundSchema;
}

/** @internal */
export const GetDeploymentEventsResponseBodyDeploymentsWafAction$inboundSchema: z.ZodNativeEnum<
    typeof GetDeploymentEventsResponseBodyDeploymentsWafAction
> = z.nativeEnum(GetDeploymentEventsResponseBodyDeploymentsWafAction);

/** @internal */
export const GetDeploymentEventsResponseBodyDeploymentsWafAction$outboundSchema: z.ZodNativeEnum<
    typeof GetDeploymentEventsResponseBodyDeploymentsWafAction
> = GetDeploymentEventsResponseBodyDeploymentsWafAction$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace GetDeploymentEventsResponseBodyDeploymentsWafAction$ {
    /** @deprecated use `GetDeploymentEventsResponseBodyDeploymentsWafAction$inboundSchema` instead. */
    export const inboundSchema = GetDeploymentEventsResponseBodyDeploymentsWafAction$inboundSchema;
    /** @deprecated use `GetDeploymentEventsResponseBodyDeploymentsWafAction$outboundSchema` instead. */
    export const outboundSchema =
        GetDeploymentEventsResponseBodyDeploymentsWafAction$outboundSchema;
}

/** @internal */
export const GetDeploymentEventsResponseBodyDeploymentsProxy$inboundSchema: z.ZodType<
    GetDeploymentEventsResponseBodyDeploymentsProxy,
    z.ZodTypeDef,
    unknown
> = z.object({
    timestamp: z.number(),
    method: z.string(),
    host: z.string(),
    path: z.string(),
    statusCode: z.number().optional(),
    userAgent: z.array(z.string()),
    referer: z.string(),
    clientIp: z.string(),
    region: z.string(),
    scheme: z.string().optional(),
    responseByteSize: z.number().optional(),
    cacheId: z.string().optional(),
    pathType: z.string().optional(),
    vercelId: z.string().optional(),
    vercelCache: GetDeploymentEventsResponseBodyDeploymentsVercelCache$inboundSchema.optional(),
    lambdaRegion: z.string().optional(),
    wafAction: GetDeploymentEventsResponseBodyDeploymentsWafAction$inboundSchema.optional(),
    wafRuleId: z.string().optional(),
});

/** @internal */
export type GetDeploymentEventsResponseBodyDeploymentsProxy$Outbound = {
    timestamp: number;
    method: string;
    host: string;
    path: string;
    statusCode?: number | undefined;
    userAgent: Array<string>;
    referer: string;
    clientIp: string;
    region: string;
    scheme?: string | undefined;
    responseByteSize?: number | undefined;
    cacheId?: string | undefined;
    pathType?: string | undefined;
    vercelId?: string | undefined;
    vercelCache?: string | undefined;
    lambdaRegion?: string | undefined;
    wafAction?: string | undefined;
    wafRuleId?: string | undefined;
};

/** @internal */
export const GetDeploymentEventsResponseBodyDeploymentsProxy$outboundSchema: z.ZodType<
    GetDeploymentEventsResponseBodyDeploymentsProxy$Outbound,
    z.ZodTypeDef,
    GetDeploymentEventsResponseBodyDeploymentsProxy
> = z.object({
    timestamp: z.number(),
    method: z.string(),
    host: z.string(),
    path: z.string(),
    statusCode: z.number().optional(),
    userAgent: z.array(z.string()),
    referer: z.string(),
    clientIp: z.string(),
    region: z.string(),
    scheme: z.string().optional(),
    responseByteSize: z.number().optional(),
    cacheId: z.string().optional(),
    pathType: z.string().optional(),
    vercelId: z.string().optional(),
    vercelCache: GetDeploymentEventsResponseBodyDeploymentsVercelCache$outboundSchema.optional(),
    lambdaRegion: z.string().optional(),
    wafAction: GetDeploymentEventsResponseBodyDeploymentsWafAction$outboundSchema.optional(),
    wafRuleId: z.string().optional(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace GetDeploymentEventsResponseBodyDeploymentsProxy$ {
    /** @deprecated use `GetDeploymentEventsResponseBodyDeploymentsProxy$inboundSchema` instead. */
    export const inboundSchema = GetDeploymentEventsResponseBodyDeploymentsProxy$inboundSchema;
    /** @deprecated use `GetDeploymentEventsResponseBodyDeploymentsProxy$outboundSchema` instead. */
    export const outboundSchema = GetDeploymentEventsResponseBodyDeploymentsProxy$outboundSchema;
    /** @deprecated use `GetDeploymentEventsResponseBodyDeploymentsProxy$Outbound` instead. */
    export type Outbound = GetDeploymentEventsResponseBodyDeploymentsProxy$Outbound;
}

/** @internal */
export const ResponseBodyPayload$inboundSchema: z.ZodType<
    ResponseBodyPayload,
    z.ZodTypeDef,
    unknown
> = z.object({
    deploymentId: z.string(),
    info: z.lazy(() => GetDeploymentEventsResponseBodyDeploymentsInfo$inboundSchema).optional(),
    text: z.string().optional(),
    id: z.string(),
    date: z.number(),
    serial: z.string(),
    created: z.number().optional(),
    statusCode: z.number().optional(),
    requestId: z.string().optional(),
    proxy: z.lazy(() => GetDeploymentEventsResponseBodyDeploymentsProxy$inboundSchema).optional(),
});

/** @internal */
export type ResponseBodyPayload$Outbound = {
    deploymentId: string;
    info?: GetDeploymentEventsResponseBodyDeploymentsInfo$Outbound | undefined;
    text?: string | undefined;
    id: string;
    date: number;
    serial: string;
    created?: number | undefined;
    statusCode?: number | undefined;
    requestId?: string | undefined;
    proxy?: GetDeploymentEventsResponseBodyDeploymentsProxy$Outbound | undefined;
};

/** @internal */
export const ResponseBodyPayload$outboundSchema: z.ZodType<
    ResponseBodyPayload$Outbound,
    z.ZodTypeDef,
    ResponseBodyPayload
> = z.object({
    deploymentId: z.string(),
    info: z.lazy(() => GetDeploymentEventsResponseBodyDeploymentsInfo$outboundSchema).optional(),
    text: z.string().optional(),
    id: z.string(),
    date: z.number(),
    serial: z.string(),
    created: z.number().optional(),
    statusCode: z.number().optional(),
    requestId: z.string().optional(),
    proxy: z.lazy(() => GetDeploymentEventsResponseBodyDeploymentsProxy$outboundSchema).optional(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace ResponseBodyPayload$ {
    /** @deprecated use `ResponseBodyPayload$inboundSchema` instead. */
    export const inboundSchema = ResponseBodyPayload$inboundSchema;
    /** @deprecated use `ResponseBodyPayload$outboundSchema` instead. */
    export const outboundSchema = ResponseBodyPayload$outboundSchema;
    /** @deprecated use `ResponseBodyPayload$Outbound` instead. */
    export type Outbound = ResponseBodyPayload$Outbound;
}

/** @internal */
export const GetDeploymentEventsResponseBodyDeployments2$inboundSchema: z.ZodType<
    GetDeploymentEventsResponseBodyDeployments2,
    z.ZodTypeDef,
    unknown
> = z.object({
    type: GetDeploymentEventsResponseBodyDeploymentsResponseType$inboundSchema,
    created: z.number(),
    payload: z.lazy(() => ResponseBodyPayload$inboundSchema),
});

/** @internal */
export type GetDeploymentEventsResponseBodyDeployments2$Outbound = {
    type: string;
    created: number;
    payload: ResponseBodyPayload$Outbound;
};

/** @internal */
export const GetDeploymentEventsResponseBodyDeployments2$outboundSchema: z.ZodType<
    GetDeploymentEventsResponseBodyDeployments2$Outbound,
    z.ZodTypeDef,
    GetDeploymentEventsResponseBodyDeployments2
> = z.object({
    type: GetDeploymentEventsResponseBodyDeploymentsResponseType$outboundSchema,
    created: z.number(),
    payload: z.lazy(() => ResponseBodyPayload$outboundSchema),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace GetDeploymentEventsResponseBodyDeployments2$ {
    /** @deprecated use `GetDeploymentEventsResponseBodyDeployments2$inboundSchema` instead. */
    export const inboundSchema = GetDeploymentEventsResponseBodyDeployments2$inboundSchema;
    /** @deprecated use `GetDeploymentEventsResponseBodyDeployments2$outboundSchema` instead. */
    export const outboundSchema = GetDeploymentEventsResponseBodyDeployments2$outboundSchema;
    /** @deprecated use `GetDeploymentEventsResponseBodyDeployments2$Outbound` instead. */
    export type Outbound = GetDeploymentEventsResponseBodyDeployments2$Outbound;
}

/** @internal */
export const ResponseBodyInfo$inboundSchema: z.ZodType<ResponseBodyInfo, z.ZodTypeDef, unknown> =
    z.object({
        type: z.string(),
        name: z.string(),
        entrypoint: z.string().optional(),
        path: z.string().optional(),
        step: z.string().optional(),
        readyState: z.string().optional(),
    });

/** @internal */
export type ResponseBodyInfo$Outbound = {
    type: string;
    name: string;
    entrypoint?: string | undefined;
    path?: string | undefined;
    step?: string | undefined;
    readyState?: string | undefined;
};

/** @internal */
export const ResponseBodyInfo$outboundSchema: z.ZodType<
    ResponseBodyInfo$Outbound,
    z.ZodTypeDef,
    ResponseBodyInfo
> = z.object({
    type: z.string(),
    name: z.string(),
    entrypoint: z.string().optional(),
    path: z.string().optional(),
    step: z.string().optional(),
    readyState: z.string().optional(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace ResponseBodyInfo$ {
    /** @deprecated use `ResponseBodyInfo$inboundSchema` instead. */
    export const inboundSchema = ResponseBodyInfo$inboundSchema;
    /** @deprecated use `ResponseBodyInfo$outboundSchema` instead. */
    export const outboundSchema = ResponseBodyInfo$outboundSchema;
    /** @deprecated use `ResponseBodyInfo$Outbound` instead. */
    export type Outbound = ResponseBodyInfo$Outbound;
}

/** @internal */
export const ResponseBodyVercelCache$inboundSchema: z.ZodNativeEnum<
    typeof ResponseBodyVercelCache
> = z.nativeEnum(ResponseBodyVercelCache);

/** @internal */
export const ResponseBodyVercelCache$outboundSchema: z.ZodNativeEnum<
    typeof ResponseBodyVercelCache
> = ResponseBodyVercelCache$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace ResponseBodyVercelCache$ {
    /** @deprecated use `ResponseBodyVercelCache$inboundSchema` instead. */
    export const inboundSchema = ResponseBodyVercelCache$inboundSchema;
    /** @deprecated use `ResponseBodyVercelCache$outboundSchema` instead. */
    export const outboundSchema = ResponseBodyVercelCache$outboundSchema;
}

/** @internal */
export const ResponseBodyWafAction$inboundSchema: z.ZodNativeEnum<typeof ResponseBodyWafAction> =
    z.nativeEnum(ResponseBodyWafAction);

/** @internal */
export const ResponseBodyWafAction$outboundSchema: z.ZodNativeEnum<typeof ResponseBodyWafAction> =
    ResponseBodyWafAction$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace ResponseBodyWafAction$ {
    /** @deprecated use `ResponseBodyWafAction$inboundSchema` instead. */
    export const inboundSchema = ResponseBodyWafAction$inboundSchema;
    /** @deprecated use `ResponseBodyWafAction$outboundSchema` instead. */
    export const outboundSchema = ResponseBodyWafAction$outboundSchema;
}

/** @internal */
export const ResponseBodyProxy$inboundSchema: z.ZodType<ResponseBodyProxy, z.ZodTypeDef, unknown> =
    z.object({
        timestamp: z.number(),
        method: z.string(),
        host: z.string(),
        path: z.string(),
        statusCode: z.number().optional(),
        userAgent: z.array(z.string()),
        referer: z.string(),
        clientIp: z.string(),
        region: z.string(),
        scheme: z.string().optional(),
        responseByteSize: z.number().optional(),
        cacheId: z.string().optional(),
        pathType: z.string().optional(),
        vercelId: z.string().optional(),
        vercelCache: ResponseBodyVercelCache$inboundSchema.optional(),
        lambdaRegion: z.string().optional(),
        wafAction: ResponseBodyWafAction$inboundSchema.optional(),
        wafRuleId: z.string().optional(),
    });

/** @internal */
export type ResponseBodyProxy$Outbound = {
    timestamp: number;
    method: string;
    host: string;
    path: string;
    statusCode?: number | undefined;
    userAgent: Array<string>;
    referer: string;
    clientIp: string;
    region: string;
    scheme?: string | undefined;
    responseByteSize?: number | undefined;
    cacheId?: string | undefined;
    pathType?: string | undefined;
    vercelId?: string | undefined;
    vercelCache?: string | undefined;
    lambdaRegion?: string | undefined;
    wafAction?: string | undefined;
    wafRuleId?: string | undefined;
};

/** @internal */
export const ResponseBodyProxy$outboundSchema: z.ZodType<
    ResponseBodyProxy$Outbound,
    z.ZodTypeDef,
    ResponseBodyProxy
> = z.object({
    timestamp: z.number(),
    method: z.string(),
    host: z.string(),
    path: z.string(),
    statusCode: z.number().optional(),
    userAgent: z.array(z.string()),
    referer: z.string(),
    clientIp: z.string(),
    region: z.string(),
    scheme: z.string().optional(),
    responseByteSize: z.number().optional(),
    cacheId: z.string().optional(),
    pathType: z.string().optional(),
    vercelId: z.string().optional(),
    vercelCache: ResponseBodyVercelCache$outboundSchema.optional(),
    lambdaRegion: z.string().optional(),
    wafAction: ResponseBodyWafAction$outboundSchema.optional(),
    wafRuleId: z.string().optional(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace ResponseBodyProxy$ {
    /** @deprecated use `ResponseBodyProxy$inboundSchema` instead. */
    export const inboundSchema = ResponseBodyProxy$inboundSchema;
    /** @deprecated use `ResponseBodyProxy$outboundSchema` instead. */
    export const outboundSchema = ResponseBodyProxy$outboundSchema;
    /** @deprecated use `ResponseBodyProxy$Outbound` instead. */
    export type Outbound = ResponseBodyProxy$Outbound;
}

/** @internal */
export const GetDeploymentEventsResponseBodyDeploymentsType$inboundSchema: z.ZodNativeEnum<
    typeof GetDeploymentEventsResponseBodyDeploymentsType
> = z.nativeEnum(GetDeploymentEventsResponseBodyDeploymentsType);

/** @internal */
export const GetDeploymentEventsResponseBodyDeploymentsType$outboundSchema: z.ZodNativeEnum<
    typeof GetDeploymentEventsResponseBodyDeploymentsType
> = GetDeploymentEventsResponseBodyDeploymentsType$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace GetDeploymentEventsResponseBodyDeploymentsType$ {
    /** @deprecated use `GetDeploymentEventsResponseBodyDeploymentsType$inboundSchema` instead. */
    export const inboundSchema = GetDeploymentEventsResponseBodyDeploymentsType$inboundSchema;
    /** @deprecated use `GetDeploymentEventsResponseBodyDeploymentsType$outboundSchema` instead. */
    export const outboundSchema = GetDeploymentEventsResponseBodyDeploymentsType$outboundSchema;
}

/** @internal */
export const GetDeploymentEventsResponseBodyDeployments1$inboundSchema: z.ZodType<
    GetDeploymentEventsResponseBodyDeployments1,
    z.ZodTypeDef,
    unknown
> = z.object({
    created: z.number(),
    date: z.number(),
    deploymentId: z.string(),
    id: z.string(),
    info: z.lazy(() => ResponseBodyInfo$inboundSchema),
    proxy: z.lazy(() => ResponseBodyProxy$inboundSchema).optional(),
    requestId: z.string().optional(),
    serial: z.string(),
    statusCode: z.number().optional(),
    text: z.string().optional(),
    type: GetDeploymentEventsResponseBodyDeploymentsType$inboundSchema,
});

/** @internal */
export type GetDeploymentEventsResponseBodyDeployments1$Outbound = {
    created: number;
    date: number;
    deploymentId: string;
    id: string;
    info: ResponseBodyInfo$Outbound;
    proxy?: ResponseBodyProxy$Outbound | undefined;
    requestId?: string | undefined;
    serial: string;
    statusCode?: number | undefined;
    text?: string | undefined;
    type: string;
};

/** @internal */
export const GetDeploymentEventsResponseBodyDeployments1$outboundSchema: z.ZodType<
    GetDeploymentEventsResponseBodyDeployments1$Outbound,
    z.ZodTypeDef,
    GetDeploymentEventsResponseBodyDeployments1
> = z.object({
    created: z.number(),
    date: z.number(),
    deploymentId: z.string(),
    id: z.string(),
    info: z.lazy(() => ResponseBodyInfo$outboundSchema),
    proxy: z.lazy(() => ResponseBodyProxy$outboundSchema).optional(),
    requestId: z.string().optional(),
    serial: z.string(),
    statusCode: z.number().optional(),
    text: z.string().optional(),
    type: GetDeploymentEventsResponseBodyDeploymentsType$outboundSchema,
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace GetDeploymentEventsResponseBodyDeployments1$ {
    /** @deprecated use `GetDeploymentEventsResponseBodyDeployments1$inboundSchema` instead. */
    export const inboundSchema = GetDeploymentEventsResponseBodyDeployments1$inboundSchema;
    /** @deprecated use `GetDeploymentEventsResponseBodyDeployments1$outboundSchema` instead. */
    export const outboundSchema = GetDeploymentEventsResponseBodyDeployments1$outboundSchema;
    /** @deprecated use `GetDeploymentEventsResponseBodyDeployments1$Outbound` instead. */
    export type Outbound = GetDeploymentEventsResponseBodyDeployments1$Outbound;
}

/** @internal */
export const GetDeploymentEventsResponseBody$inboundSchema: z.ZodType<
    GetDeploymentEventsResponseBody,
    z.ZodTypeDef,
    unknown
> = z.union([
    z.lazy(() => GetDeploymentEventsResponseBodyDeployments2$inboundSchema),
    z.lazy(() => GetDeploymentEventsResponseBodyDeployments1$inboundSchema),
]);

/** @internal */
export type GetDeploymentEventsResponseBody$Outbound =
    | GetDeploymentEventsResponseBodyDeployments2$Outbound
    | GetDeploymentEventsResponseBodyDeployments1$Outbound;

/** @internal */
export const GetDeploymentEventsResponseBody$outboundSchema: z.ZodType<
    GetDeploymentEventsResponseBody$Outbound,
    z.ZodTypeDef,
    GetDeploymentEventsResponseBody
> = z.union([
    z.lazy(() => GetDeploymentEventsResponseBodyDeployments2$outboundSchema),
    z.lazy(() => GetDeploymentEventsResponseBodyDeployments1$outboundSchema),
]);

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace GetDeploymentEventsResponseBody$ {
    /** @deprecated use `GetDeploymentEventsResponseBody$inboundSchema` instead. */
    export const inboundSchema = GetDeploymentEventsResponseBody$inboundSchema;
    /** @deprecated use `GetDeploymentEventsResponseBody$outboundSchema` instead. */
    export const outboundSchema = GetDeploymentEventsResponseBody$outboundSchema;
    /** @deprecated use `GetDeploymentEventsResponseBody$Outbound` instead. */
    export type Outbound = GetDeploymentEventsResponseBody$Outbound;
}

/** @internal */
export const GetDeploymentEventsResponseBodyType$inboundSchema: z.ZodNativeEnum<
    typeof GetDeploymentEventsResponseBodyType
> = z.nativeEnum(GetDeploymentEventsResponseBodyType);

/** @internal */
export const GetDeploymentEventsResponseBodyType$outboundSchema: z.ZodNativeEnum<
    typeof GetDeploymentEventsResponseBodyType
> = GetDeploymentEventsResponseBodyType$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace GetDeploymentEventsResponseBodyType$ {
    /** @deprecated use `GetDeploymentEventsResponseBodyType$inboundSchema` instead. */
    export const inboundSchema = GetDeploymentEventsResponseBodyType$inboundSchema;
    /** @deprecated use `GetDeploymentEventsResponseBodyType$outboundSchema` instead. */
    export const outboundSchema = GetDeploymentEventsResponseBodyType$outboundSchema;
}

/** @internal */
export const GetDeploymentEventsResponseBodyInfo$inboundSchema: z.ZodType<
    GetDeploymentEventsResponseBodyInfo,
    z.ZodTypeDef,
    unknown
> = z.object({
    type: z.string(),
    name: z.string(),
    entrypoint: z.string().optional(),
    path: z.string().optional(),
    step: z.string().optional(),
    readyState: z.string().optional(),
});

/** @internal */
export type GetDeploymentEventsResponseBodyInfo$Outbound = {
    type: string;
    name: string;
    entrypoint?: string | undefined;
    path?: string | undefined;
    step?: string | undefined;
    readyState?: string | undefined;
};

/** @internal */
export const GetDeploymentEventsResponseBodyInfo$outboundSchema: z.ZodType<
    GetDeploymentEventsResponseBodyInfo$Outbound,
    z.ZodTypeDef,
    GetDeploymentEventsResponseBodyInfo
> = z.object({
    type: z.string(),
    name: z.string(),
    entrypoint: z.string().optional(),
    path: z.string().optional(),
    step: z.string().optional(),
    readyState: z.string().optional(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace GetDeploymentEventsResponseBodyInfo$ {
    /** @deprecated use `GetDeploymentEventsResponseBodyInfo$inboundSchema` instead. */
    export const inboundSchema = GetDeploymentEventsResponseBodyInfo$inboundSchema;
    /** @deprecated use `GetDeploymentEventsResponseBodyInfo$outboundSchema` instead. */
    export const outboundSchema = GetDeploymentEventsResponseBodyInfo$outboundSchema;
    /** @deprecated use `GetDeploymentEventsResponseBodyInfo$Outbound` instead. */
    export type Outbound = GetDeploymentEventsResponseBodyInfo$Outbound;
}

/** @internal */
export const GetDeploymentEventsResponseBodyVercelCache$inboundSchema: z.ZodNativeEnum<
    typeof GetDeploymentEventsResponseBodyVercelCache
> = z.nativeEnum(GetDeploymentEventsResponseBodyVercelCache);

/** @internal */
export const GetDeploymentEventsResponseBodyVercelCache$outboundSchema: z.ZodNativeEnum<
    typeof GetDeploymentEventsResponseBodyVercelCache
> = GetDeploymentEventsResponseBodyVercelCache$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace GetDeploymentEventsResponseBodyVercelCache$ {
    /** @deprecated use `GetDeploymentEventsResponseBodyVercelCache$inboundSchema` instead. */
    export const inboundSchema = GetDeploymentEventsResponseBodyVercelCache$inboundSchema;
    /** @deprecated use `GetDeploymentEventsResponseBodyVercelCache$outboundSchema` instead. */
    export const outboundSchema = GetDeploymentEventsResponseBodyVercelCache$outboundSchema;
}

/** @internal */
export const GetDeploymentEventsResponseBodyWafAction$inboundSchema: z.ZodNativeEnum<
    typeof GetDeploymentEventsResponseBodyWafAction
> = z.nativeEnum(GetDeploymentEventsResponseBodyWafAction);

/** @internal */
export const GetDeploymentEventsResponseBodyWafAction$outboundSchema: z.ZodNativeEnum<
    typeof GetDeploymentEventsResponseBodyWafAction
> = GetDeploymentEventsResponseBodyWafAction$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace GetDeploymentEventsResponseBodyWafAction$ {
    /** @deprecated use `GetDeploymentEventsResponseBodyWafAction$inboundSchema` instead. */
    export const inboundSchema = GetDeploymentEventsResponseBodyWafAction$inboundSchema;
    /** @deprecated use `GetDeploymentEventsResponseBodyWafAction$outboundSchema` instead. */
    export const outboundSchema = GetDeploymentEventsResponseBodyWafAction$outboundSchema;
}

/** @internal */
export const GetDeploymentEventsResponseBodyProxy$inboundSchema: z.ZodType<
    GetDeploymentEventsResponseBodyProxy,
    z.ZodTypeDef,
    unknown
> = z.object({
    timestamp: z.number(),
    method: z.string(),
    host: z.string(),
    path: z.string(),
    statusCode: z.number().optional(),
    userAgent: z.array(z.string()),
    referer: z.string(),
    clientIp: z.string(),
    region: z.string(),
    scheme: z.string().optional(),
    responseByteSize: z.number().optional(),
    cacheId: z.string().optional(),
    pathType: z.string().optional(),
    vercelId: z.string().optional(),
    vercelCache: GetDeploymentEventsResponseBodyVercelCache$inboundSchema.optional(),
    lambdaRegion: z.string().optional(),
    wafAction: GetDeploymentEventsResponseBodyWafAction$inboundSchema.optional(),
    wafRuleId: z.string().optional(),
});

/** @internal */
export type GetDeploymentEventsResponseBodyProxy$Outbound = {
    timestamp: number;
    method: string;
    host: string;
    path: string;
    statusCode?: number | undefined;
    userAgent: Array<string>;
    referer: string;
    clientIp: string;
    region: string;
    scheme?: string | undefined;
    responseByteSize?: number | undefined;
    cacheId?: string | undefined;
    pathType?: string | undefined;
    vercelId?: string | undefined;
    vercelCache?: string | undefined;
    lambdaRegion?: string | undefined;
    wafAction?: string | undefined;
    wafRuleId?: string | undefined;
};

/** @internal */
export const GetDeploymentEventsResponseBodyProxy$outboundSchema: z.ZodType<
    GetDeploymentEventsResponseBodyProxy$Outbound,
    z.ZodTypeDef,
    GetDeploymentEventsResponseBodyProxy
> = z.object({
    timestamp: z.number(),
    method: z.string(),
    host: z.string(),
    path: z.string(),
    statusCode: z.number().optional(),
    userAgent: z.array(z.string()),
    referer: z.string(),
    clientIp: z.string(),
    region: z.string(),
    scheme: z.string().optional(),
    responseByteSize: z.number().optional(),
    cacheId: z.string().optional(),
    pathType: z.string().optional(),
    vercelId: z.string().optional(),
    vercelCache: GetDeploymentEventsResponseBodyVercelCache$outboundSchema.optional(),
    lambdaRegion: z.string().optional(),
    wafAction: GetDeploymentEventsResponseBodyWafAction$outboundSchema.optional(),
    wafRuleId: z.string().optional(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace GetDeploymentEventsResponseBodyProxy$ {
    /** @deprecated use `GetDeploymentEventsResponseBodyProxy$inboundSchema` instead. */
    export const inboundSchema = GetDeploymentEventsResponseBodyProxy$inboundSchema;
    /** @deprecated use `GetDeploymentEventsResponseBodyProxy$outboundSchema` instead. */
    export const outboundSchema = GetDeploymentEventsResponseBodyProxy$outboundSchema;
    /** @deprecated use `GetDeploymentEventsResponseBodyProxy$Outbound` instead. */
    export type Outbound = GetDeploymentEventsResponseBodyProxy$Outbound;
}

/** @internal */
export const Payload$inboundSchema: z.ZodType<Payload, z.ZodTypeDef, unknown> = z.object({
    deploymentId: z.string(),
    info: z.lazy(() => GetDeploymentEventsResponseBodyInfo$inboundSchema).optional(),
    text: z.string().optional(),
    id: z.string(),
    date: z.number(),
    serial: z.string(),
    created: z.number().optional(),
    statusCode: z.number().optional(),
    requestId: z.string().optional(),
    proxy: z.lazy(() => GetDeploymentEventsResponseBodyProxy$inboundSchema).optional(),
});

/** @internal */
export type Payload$Outbound = {
    deploymentId: string;
    info?: GetDeploymentEventsResponseBodyInfo$Outbound | undefined;
    text?: string | undefined;
    id: string;
    date: number;
    serial: string;
    created?: number | undefined;
    statusCode?: number | undefined;
    requestId?: string | undefined;
    proxy?: GetDeploymentEventsResponseBodyProxy$Outbound | undefined;
};

/** @internal */
export const Payload$outboundSchema: z.ZodType<Payload$Outbound, z.ZodTypeDef, Payload> = z.object({
    deploymentId: z.string(),
    info: z.lazy(() => GetDeploymentEventsResponseBodyInfo$outboundSchema).optional(),
    text: z.string().optional(),
    id: z.string(),
    date: z.number(),
    serial: z.string(),
    created: z.number().optional(),
    statusCode: z.number().optional(),
    requestId: z.string().optional(),
    proxy: z.lazy(() => GetDeploymentEventsResponseBodyProxy$outboundSchema).optional(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace Payload$ {
    /** @deprecated use `Payload$inboundSchema` instead. */
    export const inboundSchema = Payload$inboundSchema;
    /** @deprecated use `Payload$outboundSchema` instead. */
    export const outboundSchema = Payload$outboundSchema;
    /** @deprecated use `Payload$Outbound` instead. */
    export type Outbound = Payload$Outbound;
}

/** @internal */
export const GetDeploymentEventsResponseBody2$inboundSchema: z.ZodType<
    GetDeploymentEventsResponseBody2,
    z.ZodTypeDef,
    unknown
> = z.object({
    type: GetDeploymentEventsResponseBodyType$inboundSchema,
    created: z.number(),
    payload: z.lazy(() => Payload$inboundSchema),
});

/** @internal */
export type GetDeploymentEventsResponseBody2$Outbound = {
    type: string;
    created: number;
    payload: Payload$Outbound;
};

/** @internal */
export const GetDeploymentEventsResponseBody2$outboundSchema: z.ZodType<
    GetDeploymentEventsResponseBody2$Outbound,
    z.ZodTypeDef,
    GetDeploymentEventsResponseBody2
> = z.object({
    type: GetDeploymentEventsResponseBodyType$outboundSchema,
    created: z.number(),
    payload: z.lazy(() => Payload$outboundSchema),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace GetDeploymentEventsResponseBody2$ {
    /** @deprecated use `GetDeploymentEventsResponseBody2$inboundSchema` instead. */
    export const inboundSchema = GetDeploymentEventsResponseBody2$inboundSchema;
    /** @deprecated use `GetDeploymentEventsResponseBody2$outboundSchema` instead. */
    export const outboundSchema = GetDeploymentEventsResponseBody2$outboundSchema;
    /** @deprecated use `GetDeploymentEventsResponseBody2$Outbound` instead. */
    export type Outbound = GetDeploymentEventsResponseBody2$Outbound;
}

/** @internal */
export const Info$inboundSchema: z.ZodType<Info, z.ZodTypeDef, unknown> = z.object({
    type: z.string(),
    name: z.string(),
    entrypoint: z.string().optional(),
    path: z.string().optional(),
    step: z.string().optional(),
    readyState: z.string().optional(),
});

/** @internal */
export type Info$Outbound = {
    type: string;
    name: string;
    entrypoint?: string | undefined;
    path?: string | undefined;
    step?: string | undefined;
    readyState?: string | undefined;
};

/** @internal */
export const Info$outboundSchema: z.ZodType<Info$Outbound, z.ZodTypeDef, Info> = z.object({
    type: z.string(),
    name: z.string(),
    entrypoint: z.string().optional(),
    path: z.string().optional(),
    step: z.string().optional(),
    readyState: z.string().optional(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace Info$ {
    /** @deprecated use `Info$inboundSchema` instead. */
    export const inboundSchema = Info$inboundSchema;
    /** @deprecated use `Info$outboundSchema` instead. */
    export const outboundSchema = Info$outboundSchema;
    /** @deprecated use `Info$Outbound` instead. */
    export type Outbound = Info$Outbound;
}

/** @internal */
export const VercelCache$inboundSchema: z.ZodNativeEnum<typeof VercelCache> =
    z.nativeEnum(VercelCache);

/** @internal */
export const VercelCache$outboundSchema: z.ZodNativeEnum<typeof VercelCache> =
    VercelCache$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace VercelCache$ {
    /** @deprecated use `VercelCache$inboundSchema` instead. */
    export const inboundSchema = VercelCache$inboundSchema;
    /** @deprecated use `VercelCache$outboundSchema` instead. */
    export const outboundSchema = VercelCache$outboundSchema;
}

/** @internal */
export const WafAction$inboundSchema: z.ZodNativeEnum<typeof WafAction> = z.nativeEnum(WafAction);

/** @internal */
export const WafAction$outboundSchema: z.ZodNativeEnum<typeof WafAction> = WafAction$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace WafAction$ {
    /** @deprecated use `WafAction$inboundSchema` instead. */
    export const inboundSchema = WafAction$inboundSchema;
    /** @deprecated use `WafAction$outboundSchema` instead. */
    export const outboundSchema = WafAction$outboundSchema;
}

/** @internal */
export const Proxy$inboundSchema: z.ZodType<Proxy, z.ZodTypeDef, unknown> = z.object({
    timestamp: z.number(),
    method: z.string(),
    host: z.string(),
    path: z.string(),
    statusCode: z.number().optional(),
    userAgent: z.array(z.string()),
    referer: z.string(),
    clientIp: z.string(),
    region: z.string(),
    scheme: z.string().optional(),
    responseByteSize: z.number().optional(),
    cacheId: z.string().optional(),
    pathType: z.string().optional(),
    vercelId: z.string().optional(),
    vercelCache: VercelCache$inboundSchema.optional(),
    lambdaRegion: z.string().optional(),
    wafAction: WafAction$inboundSchema.optional(),
    wafRuleId: z.string().optional(),
});

/** @internal */
export type Proxy$Outbound = {
    timestamp: number;
    method: string;
    host: string;
    path: string;
    statusCode?: number | undefined;
    userAgent: Array<string>;
    referer: string;
    clientIp: string;
    region: string;
    scheme?: string | undefined;
    responseByteSize?: number | undefined;
    cacheId?: string | undefined;
    pathType?: string | undefined;
    vercelId?: string | undefined;
    vercelCache?: string | undefined;
    lambdaRegion?: string | undefined;
    wafAction?: string | undefined;
    wafRuleId?: string | undefined;
};

/** @internal */
export const Proxy$outboundSchema: z.ZodType<Proxy$Outbound, z.ZodTypeDef, Proxy> = z.object({
    timestamp: z.number(),
    method: z.string(),
    host: z.string(),
    path: z.string(),
    statusCode: z.number().optional(),
    userAgent: z.array(z.string()),
    referer: z.string(),
    clientIp: z.string(),
    region: z.string(),
    scheme: z.string().optional(),
    responseByteSize: z.number().optional(),
    cacheId: z.string().optional(),
    pathType: z.string().optional(),
    vercelId: z.string().optional(),
    vercelCache: VercelCache$outboundSchema.optional(),
    lambdaRegion: z.string().optional(),
    wafAction: WafAction$outboundSchema.optional(),
    wafRuleId: z.string().optional(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace Proxy$ {
    /** @deprecated use `Proxy$inboundSchema` instead. */
    export const inboundSchema = Proxy$inboundSchema;
    /** @deprecated use `Proxy$outboundSchema` instead. */
    export const outboundSchema = Proxy$outboundSchema;
    /** @deprecated use `Proxy$Outbound` instead. */
    export type Outbound = Proxy$Outbound;
}

/** @internal */
export const GetDeploymentEventsResponseBodyDeploymentsResponse200Type$inboundSchema: z.ZodNativeEnum<
    typeof GetDeploymentEventsResponseBodyDeploymentsResponse200Type
> = z.nativeEnum(GetDeploymentEventsResponseBodyDeploymentsResponse200Type);

/** @internal */
export const GetDeploymentEventsResponseBodyDeploymentsResponse200Type$outboundSchema: z.ZodNativeEnum<
    typeof GetDeploymentEventsResponseBodyDeploymentsResponse200Type
> = GetDeploymentEventsResponseBodyDeploymentsResponse200Type$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace GetDeploymentEventsResponseBodyDeploymentsResponse200Type$ {
    /** @deprecated use `GetDeploymentEventsResponseBodyDeploymentsResponse200Type$inboundSchema` instead. */
    export const inboundSchema =
        GetDeploymentEventsResponseBodyDeploymentsResponse200Type$inboundSchema;
    /** @deprecated use `GetDeploymentEventsResponseBodyDeploymentsResponse200Type$outboundSchema` instead. */
    export const outboundSchema =
        GetDeploymentEventsResponseBodyDeploymentsResponse200Type$outboundSchema;
}

/** @internal */
export const GetDeploymentEventsResponseBody1$inboundSchema: z.ZodType<
    GetDeploymentEventsResponseBody1,
    z.ZodTypeDef,
    unknown
> = z.object({
    created: z.number(),
    date: z.number(),
    deploymentId: z.string(),
    id: z.string(),
    info: z.lazy(() => Info$inboundSchema),
    proxy: z.lazy(() => Proxy$inboundSchema).optional(),
    requestId: z.string().optional(),
    serial: z.string(),
    statusCode: z.number().optional(),
    text: z.string().optional(),
    type: GetDeploymentEventsResponseBodyDeploymentsResponse200Type$inboundSchema,
});

/** @internal */
export type GetDeploymentEventsResponseBody1$Outbound = {
    created: number;
    date: number;
    deploymentId: string;
    id: string;
    info: Info$Outbound;
    proxy?: Proxy$Outbound | undefined;
    requestId?: string | undefined;
    serial: string;
    statusCode?: number | undefined;
    text?: string | undefined;
    type: string;
};

/** @internal */
export const GetDeploymentEventsResponseBody1$outboundSchema: z.ZodType<
    GetDeploymentEventsResponseBody1$Outbound,
    z.ZodTypeDef,
    GetDeploymentEventsResponseBody1
> = z.object({
    created: z.number(),
    date: z.number(),
    deploymentId: z.string(),
    id: z.string(),
    info: z.lazy(() => Info$outboundSchema),
    proxy: z.lazy(() => Proxy$outboundSchema).optional(),
    requestId: z.string().optional(),
    serial: z.string(),
    statusCode: z.number().optional(),
    text: z.string().optional(),
    type: GetDeploymentEventsResponseBodyDeploymentsResponse200Type$outboundSchema,
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace GetDeploymentEventsResponseBody1$ {
    /** @deprecated use `GetDeploymentEventsResponseBody1$inboundSchema` instead. */
    export const inboundSchema = GetDeploymentEventsResponseBody1$inboundSchema;
    /** @deprecated use `GetDeploymentEventsResponseBody1$outboundSchema` instead. */
    export const outboundSchema = GetDeploymentEventsResponseBody1$outboundSchema;
    /** @deprecated use `GetDeploymentEventsResponseBody1$Outbound` instead. */
    export type Outbound = GetDeploymentEventsResponseBody1$Outbound;
}

/** @internal */
export const GetDeploymentEventsDeploymentsResponseBody$inboundSchema: z.ZodType<
    GetDeploymentEventsDeploymentsResponseBody,
    z.ZodTypeDef,
    unknown
> = z.union([
    z.lazy(() => GetDeploymentEventsResponseBody2$inboundSchema),
    z.lazy(() => GetDeploymentEventsResponseBody1$inboundSchema),
]);

/** @internal */
export type GetDeploymentEventsDeploymentsResponseBody$Outbound =
    | GetDeploymentEventsResponseBody2$Outbound
    | GetDeploymentEventsResponseBody1$Outbound;

/** @internal */
export const GetDeploymentEventsDeploymentsResponseBody$outboundSchema: z.ZodType<
    GetDeploymentEventsDeploymentsResponseBody$Outbound,
    z.ZodTypeDef,
    GetDeploymentEventsDeploymentsResponseBody
> = z.union([
    z.lazy(() => GetDeploymentEventsResponseBody2$outboundSchema),
    z.lazy(() => GetDeploymentEventsResponseBody1$outboundSchema),
]);

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace GetDeploymentEventsDeploymentsResponseBody$ {
    /** @deprecated use `GetDeploymentEventsDeploymentsResponseBody$inboundSchema` instead. */
    export const inboundSchema = GetDeploymentEventsDeploymentsResponseBody$inboundSchema;
    /** @deprecated use `GetDeploymentEventsDeploymentsResponseBody$outboundSchema` instead. */
    export const outboundSchema = GetDeploymentEventsDeploymentsResponseBody$outboundSchema;
    /** @deprecated use `GetDeploymentEventsDeploymentsResponseBody$Outbound` instead. */
    export type Outbound = GetDeploymentEventsDeploymentsResponseBody$Outbound;
}

/** @internal */
export const GetDeploymentEventsResponse$inboundSchema: z.ZodType<
    GetDeploymentEventsResponse,
    z.ZodTypeDef,
    unknown
> = z.union([
    z.array(
        z.union([
            z.lazy(() => GetDeploymentEventsResponseBody2$inboundSchema),
            z.lazy(() => GetDeploymentEventsResponseBody1$inboundSchema),
        ])
    ),
    z.union([
        z.lazy(() => GetDeploymentEventsResponseBodyDeployments2$inboundSchema),
        z.lazy(() => GetDeploymentEventsResponseBodyDeployments1$inboundSchema),
    ]),
]);

/** @internal */
export type GetDeploymentEventsResponse$Outbound =
    | Array<GetDeploymentEventsResponseBody2$Outbound | GetDeploymentEventsResponseBody1$Outbound>
    | GetDeploymentEventsResponseBodyDeployments2$Outbound
    | GetDeploymentEventsResponseBodyDeployments1$Outbound;

/** @internal */
export const GetDeploymentEventsResponse$outboundSchema: z.ZodType<
    GetDeploymentEventsResponse$Outbound,
    z.ZodTypeDef,
    GetDeploymentEventsResponse
> = z.union([
    z.array(
        z.union([
            z.lazy(() => GetDeploymentEventsResponseBody2$outboundSchema),
            z.lazy(() => GetDeploymentEventsResponseBody1$outboundSchema),
        ])
    ),
    z.union([
        z.lazy(() => GetDeploymentEventsResponseBodyDeployments2$outboundSchema),
        z.lazy(() => GetDeploymentEventsResponseBodyDeployments1$outboundSchema),
    ]),
]);

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace GetDeploymentEventsResponse$ {
    /** @deprecated use `GetDeploymentEventsResponse$inboundSchema` instead. */
    export const inboundSchema = GetDeploymentEventsResponse$inboundSchema;
    /** @deprecated use `GetDeploymentEventsResponse$outboundSchema` instead. */
    export const outboundSchema = GetDeploymentEventsResponse$outboundSchema;
    /** @deprecated use `GetDeploymentEventsResponse$Outbound` instead. */
    export type Outbound = GetDeploymentEventsResponse$Outbound;
}
