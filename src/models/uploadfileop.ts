/*
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

import { remap as remap$ } from "../lib/primitives.js";
import * as z from "zod";

export type UploadFileRequest = {
    /**
     * The file size in bytes
     */
    contentLength?: number | undefined;
    /**
     * The file SHA1 used to check the integrity
     */
    xVercelDigest?: string | undefined;
    /**
     * The file SHA1 used to check the integrity
     */
    xNowDigest?: string | undefined;
    /**
     * The file size as an alternative to `Content-Length`
     */
    xNowSize?: number | undefined;
    /**
     * The Team identifier to perform the request on behalf of.
     */
    teamId?: string | undefined;
    /**
     * The Team slug to perform the request on behalf of.
     */
    slug?: string | undefined;
};

export type UploadFileResponseBody2 = {};

export type UploadFileResponseBody1 = {
    /**
     * Array of URLs where the file was updated
     */
    urls: Array<string>;
};

/**
 * File already uploaded
 *
 * @remarks
 * File successfully uploaded
 */
export type UploadFileResponseBody = UploadFileResponseBody2 | UploadFileResponseBody1;

/** @internal */
export namespace UploadFileRequest$ {
    export const inboundSchema: z.ZodType<UploadFileRequest, z.ZodTypeDef, unknown> = z
        .object({
            "Content-Length": z.number().optional(),
            "x-vercel-digest": z.string().optional(),
            "x-now-digest": z.string().optional(),
            "x-now-size": z.number().optional(),
            teamId: z.string().optional(),
            slug: z.string().optional(),
        })
        .transform((v) => {
            return remap$(v, {
                "Content-Length": "contentLength",
                "x-vercel-digest": "xVercelDigest",
                "x-now-digest": "xNowDigest",
                "x-now-size": "xNowSize",
            });
        });

    export type Outbound = {
        "Content-Length"?: number | undefined;
        "x-vercel-digest"?: string | undefined;
        "x-now-digest"?: string | undefined;
        "x-now-size"?: number | undefined;
        teamId?: string | undefined;
        slug?: string | undefined;
    };

    export const outboundSchema: z.ZodType<Outbound, z.ZodTypeDef, UploadFileRequest> = z
        .object({
            contentLength: z.number().optional(),
            xVercelDigest: z.string().optional(),
            xNowDigest: z.string().optional(),
            xNowSize: z.number().optional(),
            teamId: z.string().optional(),
            slug: z.string().optional(),
        })
        .transform((v) => {
            return remap$(v, {
                contentLength: "Content-Length",
                xVercelDigest: "x-vercel-digest",
                xNowDigest: "x-now-digest",
                xNowSize: "x-now-size",
            });
        });
}

/** @internal */
export namespace UploadFileResponseBody2$ {
    export const inboundSchema: z.ZodType<UploadFileResponseBody2, z.ZodTypeDef, unknown> =
        z.object({});

    export type Outbound = {};

    export const outboundSchema: z.ZodType<Outbound, z.ZodTypeDef, UploadFileResponseBody2> =
        z.object({});
}

/** @internal */
export namespace UploadFileResponseBody1$ {
    export const inboundSchema: z.ZodType<UploadFileResponseBody1, z.ZodTypeDef, unknown> =
        z.object({
            urls: z.array(z.string()),
        });

    export type Outbound = {
        urls: Array<string>;
    };

    export const outboundSchema: z.ZodType<Outbound, z.ZodTypeDef, UploadFileResponseBody1> =
        z.object({
            urls: z.array(z.string()),
        });
}

/** @internal */
export namespace UploadFileResponseBody$ {
    export const inboundSchema: z.ZodType<UploadFileResponseBody, z.ZodTypeDef, unknown> = z.union([
        z.lazy(() => UploadFileResponseBody2$.inboundSchema),
        z.lazy(() => UploadFileResponseBody1$.inboundSchema),
    ]);

    export type Outbound = UploadFileResponseBody2$.Outbound | UploadFileResponseBody1$.Outbound;
    export const outboundSchema: z.ZodType<Outbound, z.ZodTypeDef, UploadFileResponseBody> =
        z.union([
            z.lazy(() => UploadFileResponseBody2$.outboundSchema),
            z.lazy(() => UploadFileResponseBody1$.outboundSchema),
        ]);
}
