/*
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

import { HTTPMetadata, HTTPMetadata$ } from "./httpmetadata";
import * as z from "zod";

/**
 * The project role of the member that will be added. \"null\" will remove this project level role.
 */
export enum UpdateTeamMemberRole {
    Admin = "ADMIN",
    ProjectViewer = "PROJECT_VIEWER",
    ProjectDeveloper = "PROJECT_DEVELOPER",
}

export type UpdateTeamMemberProjects = {
    /**
     * The ID of the project.
     */
    projectId: string;
    /**
     * The project role of the member that will be added. \"null\" will remove this project level role.
     */
    role: UpdateTeamMemberRole | null;
};

export type UpdateTeamMemberJoinedFrom = {
    ssoUserId?: any | null | undefined;
};

export type UpdateTeamMemberRequestBody = {
    /**
     * Accept a user who requested access to the team.
     */
    confirmed?: boolean | undefined;
    /**
     * The role in the team of the member.
     */
    role?: string | undefined;
    projects?: Array<UpdateTeamMemberProjects> | undefined;
    joinedFrom?: UpdateTeamMemberJoinedFrom | undefined;
};

export type UpdateTeamMemberRequest = {
    teamId: string;
    /**
     * The ID of the member.
     */
    uid: string;
    requestBody?: UpdateTeamMemberRequestBody | undefined;
};

/**
 * Successfully updated the membership.
 */
export type UpdateTeamMemberResponseBody = {
    /**
     * ID of the team.
     */
    id: string;
};

export type UpdateTeamMemberResponse = {
    httpMeta: HTTPMetadata;
    /**
     * Successfully updated the membership.
     */
    object?: UpdateTeamMemberResponseBody | undefined;
};

/** @internal */
export namespace UpdateTeamMemberRole$ {
    export const inboundSchema = z.nativeEnum(UpdateTeamMemberRole);
    export const outboundSchema = inboundSchema;
}

/** @internal */
export namespace UpdateTeamMemberProjects$ {
    export const inboundSchema: z.ZodType<UpdateTeamMemberProjects, z.ZodTypeDef, unknown> = z
        .object({
            projectId: z.string(),
            role: z.nullable(UpdateTeamMemberRole$.inboundSchema),
        })
        .transform((v) => {
            return {
                projectId: v.projectId,
                role: v.role,
            };
        });

    export type Outbound = {
        projectId: string;
        role: string | null;
    };

    export const outboundSchema: z.ZodType<Outbound, z.ZodTypeDef, UpdateTeamMemberProjects> = z
        .object({
            projectId: z.string(),
            role: z.nullable(UpdateTeamMemberRole$.outboundSchema),
        })
        .transform((v) => {
            return {
                projectId: v.projectId,
                role: v.role,
            };
        });
}

/** @internal */
export namespace UpdateTeamMemberJoinedFrom$ {
    export const inboundSchema: z.ZodType<UpdateTeamMemberJoinedFrom, z.ZodTypeDef, unknown> = z
        .object({
            ssoUserId: z.nullable(z.any()).optional(),
        })
        .transform((v) => {
            return {
                ...(v.ssoUserId === undefined ? null : { ssoUserId: v.ssoUserId }),
            };
        });

    export type Outbound = {
        ssoUserId?: any | null | undefined;
    };

    export const outboundSchema: z.ZodType<Outbound, z.ZodTypeDef, UpdateTeamMemberJoinedFrom> = z
        .object({
            ssoUserId: z.nullable(z.any()).optional(),
        })
        .transform((v) => {
            return {
                ...(v.ssoUserId === undefined ? null : { ssoUserId: v.ssoUserId }),
            };
        });
}

/** @internal */
export namespace UpdateTeamMemberRequestBody$ {
    export const inboundSchema: z.ZodType<UpdateTeamMemberRequestBody, z.ZodTypeDef, unknown> = z
        .object({
            confirmed: z.boolean().optional(),
            role: z.string().default("[MEMBER VIEWER]"),
            projects: z.array(z.lazy(() => UpdateTeamMemberProjects$.inboundSchema)).optional(),
            joinedFrom: z.lazy(() => UpdateTeamMemberJoinedFrom$.inboundSchema).optional(),
        })
        .transform((v) => {
            return {
                ...(v.confirmed === undefined ? null : { confirmed: v.confirmed }),
                role: v.role,
                ...(v.projects === undefined ? null : { projects: v.projects }),
                ...(v.joinedFrom === undefined ? null : { joinedFrom: v.joinedFrom }),
            };
        });

    export type Outbound = {
        confirmed?: boolean | undefined;
        role: string;
        projects?: Array<UpdateTeamMemberProjects$.Outbound> | undefined;
        joinedFrom?: UpdateTeamMemberJoinedFrom$.Outbound | undefined;
    };

    export const outboundSchema: z.ZodType<Outbound, z.ZodTypeDef, UpdateTeamMemberRequestBody> = z
        .object({
            confirmed: z.boolean().optional(),
            role: z.string().default("[MEMBER VIEWER]"),
            projects: z.array(z.lazy(() => UpdateTeamMemberProjects$.outboundSchema)).optional(),
            joinedFrom: z.lazy(() => UpdateTeamMemberJoinedFrom$.outboundSchema).optional(),
        })
        .transform((v) => {
            return {
                ...(v.confirmed === undefined ? null : { confirmed: v.confirmed }),
                role: v.role,
                ...(v.projects === undefined ? null : { projects: v.projects }),
                ...(v.joinedFrom === undefined ? null : { joinedFrom: v.joinedFrom }),
            };
        });
}

/** @internal */
export namespace UpdateTeamMemberRequest$ {
    export const inboundSchema: z.ZodType<UpdateTeamMemberRequest, z.ZodTypeDef, unknown> = z
        .object({
            teamId: z.string(),
            uid: z.string(),
            RequestBody: z.lazy(() => UpdateTeamMemberRequestBody$.inboundSchema).optional(),
        })
        .transform((v) => {
            return {
                teamId: v.teamId,
                uid: v.uid,
                ...(v.RequestBody === undefined ? null : { requestBody: v.RequestBody }),
            };
        });

    export type Outbound = {
        teamId: string;
        uid: string;
        RequestBody?: UpdateTeamMemberRequestBody$.Outbound | undefined;
    };

    export const outboundSchema: z.ZodType<Outbound, z.ZodTypeDef, UpdateTeamMemberRequest> = z
        .object({
            teamId: z.string(),
            uid: z.string(),
            requestBody: z.lazy(() => UpdateTeamMemberRequestBody$.outboundSchema).optional(),
        })
        .transform((v) => {
            return {
                teamId: v.teamId,
                uid: v.uid,
                ...(v.requestBody === undefined ? null : { RequestBody: v.requestBody }),
            };
        });
}

/** @internal */
export namespace UpdateTeamMemberResponseBody$ {
    export const inboundSchema: z.ZodType<UpdateTeamMemberResponseBody, z.ZodTypeDef, unknown> = z
        .object({
            id: z.string(),
        })
        .transform((v) => {
            return {
                id: v.id,
            };
        });

    export type Outbound = {
        id: string;
    };

    export const outboundSchema: z.ZodType<Outbound, z.ZodTypeDef, UpdateTeamMemberResponseBody> = z
        .object({
            id: z.string(),
        })
        .transform((v) => {
            return {
                id: v.id,
            };
        });
}

/** @internal */
export namespace UpdateTeamMemberResponse$ {
    export const inboundSchema: z.ZodType<UpdateTeamMemberResponse, z.ZodTypeDef, unknown> = z
        .object({
            HttpMeta: HTTPMetadata$.inboundSchema,
            object: z.lazy(() => UpdateTeamMemberResponseBody$.inboundSchema).optional(),
        })
        .transform((v) => {
            return {
                httpMeta: v.HttpMeta,
                ...(v.object === undefined ? null : { object: v.object }),
            };
        });

    export type Outbound = {
        HttpMeta: HTTPMetadata$.Outbound;
        object?: UpdateTeamMemberResponseBody$.Outbound | undefined;
    };

    export const outboundSchema: z.ZodType<Outbound, z.ZodTypeDef, UpdateTeamMemberResponse> = z
        .object({
            httpMeta: HTTPMetadata$.outboundSchema,
            object: z.lazy(() => UpdateTeamMemberResponseBody$.outboundSchema).optional(),
        })
        .transform((v) => {
            return {
                HttpMeta: v.httpMeta,
                ...(v.object === undefined ? null : { object: v.object }),
            };
        });
}
