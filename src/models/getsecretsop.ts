/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import {
  Pagination,
  Pagination$inboundSchema,
  Pagination$Outbound,
  Pagination$outboundSchema,
} from "./pagination.js";

export type GetSecretsRequest = {
  /**
   * Filter out secrets based on comma separated secret ids.
   */
  id?: string | undefined;
  /**
   * Filter out secrets that belong to a project.
   */
  projectId?: string | undefined;
  /**
   * The Team identifier to perform the request on behalf of.
   */
  teamId?: string | undefined;
  /**
   * The Team slug to perform the request on behalf of.
   */
  slug?: string | undefined;
};

/**
 * Data representing a secret.
 */
export type GetSecretsSecrets = {
  /**
   * The date when the secret was created.
   */
  created: Date;
  /**
   * The name of the secret.
   */
  name: string;
  /**
   * The unique identifier of the team the secret was created for.
   */
  teamId?: string | null | undefined;
  /**
   * The unique identifier of the secret.
   */
  uid: string;
  /**
   * The unique identifier of the user who created the secret.
   */
  userId?: string | undefined;
  /**
   * The value of the secret.
   */
  value?: string | undefined;
  /**
   * Timestamp for when the secret was created.
   */
  createdAt?: number | undefined;
  /**
   * The unique identifier of the project which the secret belongs to.
   */
  projectId?: string | undefined;
  /**
   * Indicates whether the secret value can be decrypted after it has been created.
   */
  decryptable?: boolean | undefined;
};

/**
 * Successful response retrieving a list of secrets.
 */
export type GetSecretsResponseBody = {
  secrets: Array<GetSecretsSecrets>;
  /**
   * This object contains information related to the pagination of the current request, including the necessary parameters to get the next or previous page of data.
   */
  pagination: Pagination;
};

/** @internal */
export const GetSecretsRequest$inboundSchema: z.ZodType<
  GetSecretsRequest,
  z.ZodTypeDef,
  unknown
> = z.object({
  id: z.string().optional(),
  projectId: z.string().optional(),
  teamId: z.string().optional(),
  slug: z.string().optional(),
});

/** @internal */
export type GetSecretsRequest$Outbound = {
  id?: string | undefined;
  projectId?: string | undefined;
  teamId?: string | undefined;
  slug?: string | undefined;
};

/** @internal */
export const GetSecretsRequest$outboundSchema: z.ZodType<
  GetSecretsRequest$Outbound,
  z.ZodTypeDef,
  GetSecretsRequest
> = z.object({
  id: z.string().optional(),
  projectId: z.string().optional(),
  teamId: z.string().optional(),
  slug: z.string().optional(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace GetSecretsRequest$ {
  /** @deprecated use `GetSecretsRequest$inboundSchema` instead. */
  export const inboundSchema = GetSecretsRequest$inboundSchema;
  /** @deprecated use `GetSecretsRequest$outboundSchema` instead. */
  export const outboundSchema = GetSecretsRequest$outboundSchema;
  /** @deprecated use `GetSecretsRequest$Outbound` instead. */
  export type Outbound = GetSecretsRequest$Outbound;
}

/** @internal */
export const GetSecretsSecrets$inboundSchema: z.ZodType<
  GetSecretsSecrets,
  z.ZodTypeDef,
  unknown
> = z.object({
  created: z.string().datetime({ offset: true }).transform(v => new Date(v)),
  name: z.string(),
  teamId: z.nullable(z.string()).optional(),
  uid: z.string(),
  userId: z.string().optional(),
  value: z.string().optional(),
  createdAt: z.number().optional(),
  projectId: z.string().optional(),
  decryptable: z.boolean().optional(),
});

/** @internal */
export type GetSecretsSecrets$Outbound = {
  created: string;
  name: string;
  teamId?: string | null | undefined;
  uid: string;
  userId?: string | undefined;
  value?: string | undefined;
  createdAt?: number | undefined;
  projectId?: string | undefined;
  decryptable?: boolean | undefined;
};

/** @internal */
export const GetSecretsSecrets$outboundSchema: z.ZodType<
  GetSecretsSecrets$Outbound,
  z.ZodTypeDef,
  GetSecretsSecrets
> = z.object({
  created: z.date().transform(v => v.toISOString()),
  name: z.string(),
  teamId: z.nullable(z.string()).optional(),
  uid: z.string(),
  userId: z.string().optional(),
  value: z.string().optional(),
  createdAt: z.number().optional(),
  projectId: z.string().optional(),
  decryptable: z.boolean().optional(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace GetSecretsSecrets$ {
  /** @deprecated use `GetSecretsSecrets$inboundSchema` instead. */
  export const inboundSchema = GetSecretsSecrets$inboundSchema;
  /** @deprecated use `GetSecretsSecrets$outboundSchema` instead. */
  export const outboundSchema = GetSecretsSecrets$outboundSchema;
  /** @deprecated use `GetSecretsSecrets$Outbound` instead. */
  export type Outbound = GetSecretsSecrets$Outbound;
}

/** @internal */
export const GetSecretsResponseBody$inboundSchema: z.ZodType<
  GetSecretsResponseBody,
  z.ZodTypeDef,
  unknown
> = z.object({
  secrets: z.array(z.lazy(() => GetSecretsSecrets$inboundSchema)),
  pagination: Pagination$inboundSchema,
});

/** @internal */
export type GetSecretsResponseBody$Outbound = {
  secrets: Array<GetSecretsSecrets$Outbound>;
  pagination: Pagination$Outbound;
};

/** @internal */
export const GetSecretsResponseBody$outboundSchema: z.ZodType<
  GetSecretsResponseBody$Outbound,
  z.ZodTypeDef,
  GetSecretsResponseBody
> = z.object({
  secrets: z.array(z.lazy(() => GetSecretsSecrets$outboundSchema)),
  pagination: Pagination$outboundSchema,
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace GetSecretsResponseBody$ {
  /** @deprecated use `GetSecretsResponseBody$inboundSchema` instead. */
  export const inboundSchema = GetSecretsResponseBody$inboundSchema;
  /** @deprecated use `GetSecretsResponseBody$outboundSchema` instead. */
  export const outboundSchema = GetSecretsResponseBody$outboundSchema;
  /** @deprecated use `GetSecretsResponseBody$Outbound` instead. */
  export type Outbound = GetSecretsResponseBody$Outbound;
}
