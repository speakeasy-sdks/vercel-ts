/*
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

import { Pagination, Pagination$ } from "./pagination";
import * as z from "zod";

export type GetSecretsRequest = {
    /**
     * Filter out secrets based on comma separated secret ids.
     */
    id?: string | undefined;
    /**
     * Filter out secrets that belong to a project.
     */
    projectId?: string | undefined;
    /**
     * The Team identifier to perform the request on behalf of.
     */
    teamId?: string | undefined;
    /**
     * The Team slug to perform the request on behalf of.
     */
    slug?: string | undefined;
};

/**
 * Data representing a secret.
 */
export type GetSecretsSecrets = {
    /**
     * The date when the secret was created.
     */
    created: Date;
    /**
     * The name of the secret.
     */
    name: string;
    /**
     * The unique identifier of the team the secret was created for.
     */
    teamId?: string | null | undefined;
    /**
     * The unique identifier of the secret.
     */
    uid: string;
    /**
     * The unique identifier of the user who created the secret.
     */
    userId?: string | undefined;
    /**
     * The value of the secret.
     */
    value?: string | undefined;
    /**
     * Timestamp for when the secret was created.
     */
    createdAt?: number | undefined;
    /**
     * The unique identifier of the project which the secret belongs to.
     */
    projectId?: string | undefined;
    /**
     * Indicates whether the secret value can be decrypted after it has been created.
     */
    decryptable?: boolean | undefined;
};

/**
 * Successful response retrieving a list of secrets.
 */
export type GetSecretsResponseBody = {
    secrets: Array<GetSecretsSecrets>;
    /**
     * This object contains information related to the pagination of the current request, including the necessary parameters to get the next or previous page of data.
     */
    pagination: Pagination;
};

/** @internal */
export namespace GetSecretsRequest$ {
    export const inboundSchema: z.ZodType<GetSecretsRequest, z.ZodTypeDef, unknown> = z
        .object({
            id: z.string().optional(),
            projectId: z.string().optional(),
            teamId: z.string().optional(),
            slug: z.string().optional(),
        })
        .transform((v) => {
            return {
                ...(v.id === undefined ? null : { id: v.id }),
                ...(v.projectId === undefined ? null : { projectId: v.projectId }),
                ...(v.teamId === undefined ? null : { teamId: v.teamId }),
                ...(v.slug === undefined ? null : { slug: v.slug }),
            };
        });

    export type Outbound = {
        id?: string | undefined;
        projectId?: string | undefined;
        teamId?: string | undefined;
        slug?: string | undefined;
    };

    export const outboundSchema: z.ZodType<Outbound, z.ZodTypeDef, GetSecretsRequest> = z
        .object({
            id: z.string().optional(),
            projectId: z.string().optional(),
            teamId: z.string().optional(),
            slug: z.string().optional(),
        })
        .transform((v) => {
            return {
                ...(v.id === undefined ? null : { id: v.id }),
                ...(v.projectId === undefined ? null : { projectId: v.projectId }),
                ...(v.teamId === undefined ? null : { teamId: v.teamId }),
                ...(v.slug === undefined ? null : { slug: v.slug }),
            };
        });
}

/** @internal */
export namespace GetSecretsSecrets$ {
    export const inboundSchema: z.ZodType<GetSecretsSecrets, z.ZodTypeDef, unknown> = z
        .object({
            created: z
                .string()
                .datetime({ offset: true })
                .transform((v) => new Date(v)),
            name: z.string(),
            teamId: z.nullable(z.string()).optional(),
            uid: z.string(),
            userId: z.string().optional(),
            value: z.string().optional(),
            createdAt: z.number().optional(),
            projectId: z.string().optional(),
            decryptable: z.boolean().optional(),
        })
        .transform((v) => {
            return {
                created: v.created,
                name: v.name,
                ...(v.teamId === undefined ? null : { teamId: v.teamId }),
                uid: v.uid,
                ...(v.userId === undefined ? null : { userId: v.userId }),
                ...(v.value === undefined ? null : { value: v.value }),
                ...(v.createdAt === undefined ? null : { createdAt: v.createdAt }),
                ...(v.projectId === undefined ? null : { projectId: v.projectId }),
                ...(v.decryptable === undefined ? null : { decryptable: v.decryptable }),
            };
        });

    export type Outbound = {
        created: string;
        name: string;
        teamId?: string | null | undefined;
        uid: string;
        userId?: string | undefined;
        value?: string | undefined;
        createdAt?: number | undefined;
        projectId?: string | undefined;
        decryptable?: boolean | undefined;
    };

    export const outboundSchema: z.ZodType<Outbound, z.ZodTypeDef, GetSecretsSecrets> = z
        .object({
            created: z.date().transform((v) => v.toISOString()),
            name: z.string(),
            teamId: z.nullable(z.string()).optional(),
            uid: z.string(),
            userId: z.string().optional(),
            value: z.string().optional(),
            createdAt: z.number().optional(),
            projectId: z.string().optional(),
            decryptable: z.boolean().optional(),
        })
        .transform((v) => {
            return {
                created: v.created,
                name: v.name,
                ...(v.teamId === undefined ? null : { teamId: v.teamId }),
                uid: v.uid,
                ...(v.userId === undefined ? null : { userId: v.userId }),
                ...(v.value === undefined ? null : { value: v.value }),
                ...(v.createdAt === undefined ? null : { createdAt: v.createdAt }),
                ...(v.projectId === undefined ? null : { projectId: v.projectId }),
                ...(v.decryptable === undefined ? null : { decryptable: v.decryptable }),
            };
        });
}

/** @internal */
export namespace GetSecretsResponseBody$ {
    export const inboundSchema: z.ZodType<GetSecretsResponseBody, z.ZodTypeDef, unknown> = z
        .object({
            secrets: z.array(z.lazy(() => GetSecretsSecrets$.inboundSchema)),
            pagination: Pagination$.inboundSchema,
        })
        .transform((v) => {
            return {
                secrets: v.secrets,
                pagination: v.pagination,
            };
        });

    export type Outbound = {
        secrets: Array<GetSecretsSecrets$.Outbound>;
        pagination: Pagination$.Outbound;
    };

    export const outboundSchema: z.ZodType<Outbound, z.ZodTypeDef, GetSecretsResponseBody> = z
        .object({
            secrets: z.array(z.lazy(() => GetSecretsSecrets$.outboundSchema)),
            pagination: Pagination$.outboundSchema,
        })
        .transform((v) => {
            return {
                secrets: v.secrets,
                pagination: v.pagination,
            };
        });
}
