/*
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

import * as z from "zod";

/**
 * String indicating the type of file tree entry.
 */
export enum Type {
    Directory = "directory",
    File = "file",
    Symlink = "symlink",
    Lambda = "lambda",
    Middleware = "middleware",
    Invalid = "invalid",
}

/**
 * A deployment file tree entry
 */
export type FileTree = {
    /**
     * The name of the file tree entry
     */
    name: string;
    /**
     * String indicating the type of file tree entry.
     */
    type: Type;
    /**
     * The unique identifier of the file (only valid for the `file` type)
     */
    uid?: string | undefined;
    /**
     * The list of children files of the directory (only valid for the `directory` type)
     */
    children?: Array<FileTree> | undefined;
    /**
     * The content-type of the file (only valid for the `file` type)
     */
    contentType?: string | undefined;
    /**
     * The file "mode" indicating file type and permissions.
     */
    mode: number;
    /**
     * Not currently used. See `file-list-to-tree.ts`.
     */
    symlink?: string | undefined;
};

/** @internal */
export namespace Type$ {
    export const inboundSchema = z.nativeEnum(Type);
    export const outboundSchema = inboundSchema;
}

/** @internal */
export namespace FileTree$ {
    export const inboundSchema: z.ZodType<FileTree, z.ZodTypeDef, unknown> = z
        .object({
            name: z.string(),
            type: Type$.inboundSchema,
            uid: z.string().optional(),
            children: z.array(z.lazy(() => FileTree$.inboundSchema)).optional(),
            contentType: z.string().optional(),
            mode: z.number(),
            symlink: z.string().optional(),
        })
        .transform((v) => {
            return {
                name: v.name,
                type: v.type,
                ...(v.uid === undefined ? null : { uid: v.uid }),
                ...(v.children === undefined ? null : { children: v.children }),
                ...(v.contentType === undefined ? null : { contentType: v.contentType }),
                mode: v.mode,
                ...(v.symlink === undefined ? null : { symlink: v.symlink }),
            };
        });

    export type Outbound = {
        name: string;
        type: string;
        uid?: string | undefined;
        children?: Array<FileTree$.Outbound> | undefined;
        contentType?: string | undefined;
        mode: number;
        symlink?: string | undefined;
    };

    export const outboundSchema: z.ZodType<Outbound, z.ZodTypeDef, FileTree> = z
        .object({
            name: z.string(),
            type: Type$.outboundSchema,
            uid: z.string().optional(),
            children: z.array(z.lazy(() => FileTree$.outboundSchema)).optional(),
            contentType: z.string().optional(),
            mode: z.number(),
            symlink: z.string().optional(),
        })
        .transform((v) => {
            return {
                name: v.name,
                type: v.type,
                ...(v.uid === undefined ? null : { uid: v.uid }),
                ...(v.children === undefined ? null : { children: v.children }),
                ...(v.contentType === undefined ? null : { contentType: v.contentType }),
                mode: v.mode,
                ...(v.symlink === undefined ? null : { symlink: v.symlink }),
            };
        });
}
