/*
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

import { remap as remap$ } from "../lib/primitives";
import * as z from "zod";

export type RenameSecretRequestBody = {
    /**
     * The name of the new secret.
     */
    name: string;
};

export type RenameSecretRequest = {
    /**
     * The name of the secret.
     */
    name: string;
    /**
     * The Team identifier to perform the request on behalf of.
     */
    teamId?: string | undefined;
    /**
     * The Team slug to perform the request on behalf of.
     */
    slug?: string | undefined;
    requestBody?: RenameSecretRequestBody | undefined;
};

export type RenameSecretResponseBody = {
    uid: string;
    name: string;
    created: Date;
    oldName: string;
};

/** @internal */
export namespace RenameSecretRequestBody$ {
    export const inboundSchema: z.ZodType<RenameSecretRequestBody, z.ZodTypeDef, unknown> =
        z.object({
            name: z.string(),
        });

    export type Outbound = {
        name: string;
    };

    export const outboundSchema: z.ZodType<Outbound, z.ZodTypeDef, RenameSecretRequestBody> =
        z.object({
            name: z.string(),
        });
}

/** @internal */
export namespace RenameSecretRequest$ {
    export const inboundSchema: z.ZodType<RenameSecretRequest, z.ZodTypeDef, unknown> = z
        .object({
            name: z.string(),
            teamId: z.string().optional(),
            slug: z.string().optional(),
            RequestBody: z.lazy(() => RenameSecretRequestBody$.inboundSchema).optional(),
        })
        .transform((v) => {
            return remap$(v, {
                RequestBody: "requestBody",
            });
        });

    export type Outbound = {
        name: string;
        teamId?: string | undefined;
        slug?: string | undefined;
        RequestBody?: RenameSecretRequestBody$.Outbound | undefined;
    };

    export const outboundSchema: z.ZodType<Outbound, z.ZodTypeDef, RenameSecretRequest> = z
        .object({
            name: z.string(),
            teamId: z.string().optional(),
            slug: z.string().optional(),
            requestBody: z.lazy(() => RenameSecretRequestBody$.outboundSchema).optional(),
        })
        .transform((v) => {
            return remap$(v, {
                requestBody: "RequestBody",
            });
        });
}

/** @internal */
export namespace RenameSecretResponseBody$ {
    export const inboundSchema: z.ZodType<RenameSecretResponseBody, z.ZodTypeDef, unknown> =
        z.object({
            uid: z.string(),
            name: z.string(),
            created: z
                .string()
                .datetime({ offset: true })
                .transform((v) => new Date(v)),
            oldName: z.string(),
        });

    export type Outbound = {
        uid: string;
        name: string;
        created: string;
        oldName: string;
    };

    export const outboundSchema: z.ZodType<Outbound, z.ZodTypeDef, RenameSecretResponseBody> =
        z.object({
            uid: z.string(),
            name: z.string(),
            created: z.date().transform((v) => v.toISOString()),
            oldName: z.string(),
        });
}
