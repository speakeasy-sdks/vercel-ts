/*
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

import { HTTPMetadata, HTTPMetadata$ } from "./httpmetadata";
import * as z from "zod";

export type CreateEdgeConfigRequestBody = {
    slug: string;
    items?: any | undefined;
};

export type CreateEdgeConfigRequest = {
    /**
     * The Team identifier to perform the request on behalf of.
     */
    teamId?: string | undefined;
    /**
     * The Team slug to perform the request on behalf of.
     */
    slug?: string | undefined;
    requestBody?: CreateEdgeConfigRequestBody | undefined;
};

/**
 * Keeps track of the current state of the Edge Config while it gets transferred.
 */
export type CreateEdgeConfigTransfer = {
    fromAccountId: string;
    startedAt: number;
    doneAt: number | null;
};

export type CreateEdgeConfigSchema = {};

/**
 * An Edge Config
 */
export type CreateEdgeConfigResponseBody = {
    createdAt?: number | undefined;
    updatedAt?: number | undefined;
    id?: string | undefined;
    /**
     * Name for the Edge Config Names are not unique. Must start with an alphabetic character and can contain only alphanumeric characters and underscores).
     */
    slug?: string | undefined;
    ownerId?: string | undefined;
    digest?: string | undefined;
    /**
     * Keeps track of the current state of the Edge Config while it gets transferred.
     */
    transfer?: CreateEdgeConfigTransfer | undefined;
    schema?: CreateEdgeConfigSchema | undefined;
    sizeInBytes: number;
    itemCount: number;
};

export type CreateEdgeConfigResponse = {
    httpMeta: HTTPMetadata;
    object?: CreateEdgeConfigResponseBody | undefined;
};

/** @internal */
export namespace CreateEdgeConfigRequestBody$ {
    export const inboundSchema: z.ZodType<CreateEdgeConfigRequestBody, z.ZodTypeDef, unknown> = z
        .object({
            slug: z.string(),
            items: z.any().optional(),
        })
        .transform((v) => {
            return {
                slug: v.slug,
                ...(v.items === undefined ? null : { items: v.items }),
            };
        });

    export type Outbound = {
        slug: string;
        items?: any | undefined;
    };

    export const outboundSchema: z.ZodType<Outbound, z.ZodTypeDef, CreateEdgeConfigRequestBody> = z
        .object({
            slug: z.string(),
            items: z.any().optional(),
        })
        .transform((v) => {
            return {
                slug: v.slug,
                ...(v.items === undefined ? null : { items: v.items }),
            };
        });
}

/** @internal */
export namespace CreateEdgeConfigRequest$ {
    export const inboundSchema: z.ZodType<CreateEdgeConfigRequest, z.ZodTypeDef, unknown> = z
        .object({
            teamId: z.string().optional(),
            slug: z.string().optional(),
            RequestBody: z.lazy(() => CreateEdgeConfigRequestBody$.inboundSchema).optional(),
        })
        .transform((v) => {
            return {
                ...(v.teamId === undefined ? null : { teamId: v.teamId }),
                ...(v.slug === undefined ? null : { slug: v.slug }),
                ...(v.RequestBody === undefined ? null : { requestBody: v.RequestBody }),
            };
        });

    export type Outbound = {
        teamId?: string | undefined;
        slug?: string | undefined;
        RequestBody?: CreateEdgeConfigRequestBody$.Outbound | undefined;
    };

    export const outboundSchema: z.ZodType<Outbound, z.ZodTypeDef, CreateEdgeConfigRequest> = z
        .object({
            teamId: z.string().optional(),
            slug: z.string().optional(),
            requestBody: z.lazy(() => CreateEdgeConfigRequestBody$.outboundSchema).optional(),
        })
        .transform((v) => {
            return {
                ...(v.teamId === undefined ? null : { teamId: v.teamId }),
                ...(v.slug === undefined ? null : { slug: v.slug }),
                ...(v.requestBody === undefined ? null : { RequestBody: v.requestBody }),
            };
        });
}

/** @internal */
export namespace CreateEdgeConfigTransfer$ {
    export const inboundSchema: z.ZodType<CreateEdgeConfigTransfer, z.ZodTypeDef, unknown> = z
        .object({
            fromAccountId: z.string(),
            startedAt: z.number(),
            doneAt: z.nullable(z.number()),
        })
        .transform((v) => {
            return {
                fromAccountId: v.fromAccountId,
                startedAt: v.startedAt,
                doneAt: v.doneAt,
            };
        });

    export type Outbound = {
        fromAccountId: string;
        startedAt: number;
        doneAt: number | null;
    };

    export const outboundSchema: z.ZodType<Outbound, z.ZodTypeDef, CreateEdgeConfigTransfer> = z
        .object({
            fromAccountId: z.string(),
            startedAt: z.number(),
            doneAt: z.nullable(z.number()),
        })
        .transform((v) => {
            return {
                fromAccountId: v.fromAccountId,
                startedAt: v.startedAt,
                doneAt: v.doneAt,
            };
        });
}

/** @internal */
export namespace CreateEdgeConfigSchema$ {
    export const inboundSchema: z.ZodType<CreateEdgeConfigSchema, z.ZodTypeDef, unknown> = z.object(
        {}
    );

    export type Outbound = {};

    export const outboundSchema: z.ZodType<Outbound, z.ZodTypeDef, CreateEdgeConfigSchema> =
        z.object({});
}

/** @internal */
export namespace CreateEdgeConfigResponseBody$ {
    export const inboundSchema: z.ZodType<CreateEdgeConfigResponseBody, z.ZodTypeDef, unknown> = z
        .object({
            createdAt: z.number().optional(),
            updatedAt: z.number().optional(),
            id: z.string().optional(),
            slug: z.string().optional(),
            ownerId: z.string().optional(),
            digest: z.string().optional(),
            transfer: z.lazy(() => CreateEdgeConfigTransfer$.inboundSchema).optional(),
            schema: z.lazy(() => CreateEdgeConfigSchema$.inboundSchema).optional(),
            sizeInBytes: z.number(),
            itemCount: z.number(),
        })
        .transform((v) => {
            return {
                ...(v.createdAt === undefined ? null : { createdAt: v.createdAt }),
                ...(v.updatedAt === undefined ? null : { updatedAt: v.updatedAt }),
                ...(v.id === undefined ? null : { id: v.id }),
                ...(v.slug === undefined ? null : { slug: v.slug }),
                ...(v.ownerId === undefined ? null : { ownerId: v.ownerId }),
                ...(v.digest === undefined ? null : { digest: v.digest }),
                ...(v.transfer === undefined ? null : { transfer: v.transfer }),
                ...(v.schema === undefined ? null : { schema: v.schema }),
                sizeInBytes: v.sizeInBytes,
                itemCount: v.itemCount,
            };
        });

    export type Outbound = {
        createdAt?: number | undefined;
        updatedAt?: number | undefined;
        id?: string | undefined;
        slug?: string | undefined;
        ownerId?: string | undefined;
        digest?: string | undefined;
        transfer?: CreateEdgeConfigTransfer$.Outbound | undefined;
        schema?: CreateEdgeConfigSchema$.Outbound | undefined;
        sizeInBytes: number;
        itemCount: number;
    };

    export const outboundSchema: z.ZodType<Outbound, z.ZodTypeDef, CreateEdgeConfigResponseBody> = z
        .object({
            createdAt: z.number().optional(),
            updatedAt: z.number().optional(),
            id: z.string().optional(),
            slug: z.string().optional(),
            ownerId: z.string().optional(),
            digest: z.string().optional(),
            transfer: z.lazy(() => CreateEdgeConfigTransfer$.outboundSchema).optional(),
            schema: z.lazy(() => CreateEdgeConfigSchema$.outboundSchema).optional(),
            sizeInBytes: z.number(),
            itemCount: z.number(),
        })
        .transform((v) => {
            return {
                ...(v.createdAt === undefined ? null : { createdAt: v.createdAt }),
                ...(v.updatedAt === undefined ? null : { updatedAt: v.updatedAt }),
                ...(v.id === undefined ? null : { id: v.id }),
                ...(v.slug === undefined ? null : { slug: v.slug }),
                ...(v.ownerId === undefined ? null : { ownerId: v.ownerId }),
                ...(v.digest === undefined ? null : { digest: v.digest }),
                ...(v.transfer === undefined ? null : { transfer: v.transfer }),
                ...(v.schema === undefined ? null : { schema: v.schema }),
                sizeInBytes: v.sizeInBytes,
                itemCount: v.itemCount,
            };
        });
}

/** @internal */
export namespace CreateEdgeConfigResponse$ {
    export const inboundSchema: z.ZodType<CreateEdgeConfigResponse, z.ZodTypeDef, unknown> = z
        .object({
            HttpMeta: HTTPMetadata$.inboundSchema,
            object: z.lazy(() => CreateEdgeConfigResponseBody$.inboundSchema).optional(),
        })
        .transform((v) => {
            return {
                httpMeta: v.HttpMeta,
                ...(v.object === undefined ? null : { object: v.object }),
            };
        });

    export type Outbound = {
        HttpMeta: HTTPMetadata$.Outbound;
        object?: CreateEdgeConfigResponseBody$.Outbound | undefined;
    };

    export const outboundSchema: z.ZodType<Outbound, z.ZodTypeDef, CreateEdgeConfigResponse> = z
        .object({
            httpMeta: HTTPMetadata$.outboundSchema,
            object: z.lazy(() => CreateEdgeConfigResponseBody$.outboundSchema).optional(),
        })
        .transform((v) => {
            return {
                HttpMeta: v.httpMeta,
                ...(v.object === undefined ? null : { object: v.object }),
            };
        });
}
