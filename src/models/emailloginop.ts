/*
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

import * as z from "zod";

export type EmailLoginRequestBody = {
    /**
     * The user email.
     */
    email: string;
    /**
     * The desired name for the token. It will be displayed on the user account details.
     */
    tokenName?: string | undefined;
};

export type EmailLoginResponseBody2 = {
    /**
     * The token used to verify the user accepted the login request
     */
    token: string;
    /**
     * The code the user is going to receive on the email. **Must** be displayed to the user so they can verify the request is the correct.
     */
    securityCode: string;
};

export type EmailLoginResponseBody1 = {
    token: string;
    securityCode: string;
};

/**
 * The request was successful and an email was sent
 */
export type EmailLoginResponseBody = EmailLoginResponseBody1 | EmailLoginResponseBody2;

/** @internal */
export namespace EmailLoginRequestBody$ {
    export const inboundSchema: z.ZodType<EmailLoginRequestBody, z.ZodTypeDef, unknown> = z.object({
        email: z.string(),
        tokenName: z.string().optional(),
    });

    export type Outbound = {
        email: string;
        tokenName?: string | undefined;
    };

    export const outboundSchema: z.ZodType<Outbound, z.ZodTypeDef, EmailLoginRequestBody> =
        z.object({
            email: z.string(),
            tokenName: z.string().optional(),
        });
}

/** @internal */
export namespace EmailLoginResponseBody2$ {
    export const inboundSchema: z.ZodType<EmailLoginResponseBody2, z.ZodTypeDef, unknown> =
        z.object({
            token: z.string(),
            securityCode: z.string(),
        });

    export type Outbound = {
        token: string;
        securityCode: string;
    };

    export const outboundSchema: z.ZodType<Outbound, z.ZodTypeDef, EmailLoginResponseBody2> =
        z.object({
            token: z.string(),
            securityCode: z.string(),
        });
}

/** @internal */
export namespace EmailLoginResponseBody1$ {
    export const inboundSchema: z.ZodType<EmailLoginResponseBody1, z.ZodTypeDef, unknown> =
        z.object({
            token: z.string(),
            securityCode: z.string(),
        });

    export type Outbound = {
        token: string;
        securityCode: string;
    };

    export const outboundSchema: z.ZodType<Outbound, z.ZodTypeDef, EmailLoginResponseBody1> =
        z.object({
            token: z.string(),
            securityCode: z.string(),
        });
}

/** @internal */
export namespace EmailLoginResponseBody$ {
    export const inboundSchema: z.ZodType<EmailLoginResponseBody, z.ZodTypeDef, unknown> = z.union([
        z.lazy(() => EmailLoginResponseBody1$.inboundSchema),
        z.lazy(() => EmailLoginResponseBody2$.inboundSchema),
    ]);

    export type Outbound = EmailLoginResponseBody1$.Outbound | EmailLoginResponseBody2$.Outbound;
    export const outboundSchema: z.ZodType<Outbound, z.ZodTypeDef, EmailLoginResponseBody> =
        z.union([
            z.lazy(() => EmailLoginResponseBody1$.outboundSchema),
            z.lazy(() => EmailLoginResponseBody2$.outboundSchema),
        ]);
}
