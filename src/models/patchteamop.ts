/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { remap as remap$ } from "../lib/primitives.js";
import { ClosedEnum } from "../types/enums.js";

export type Roles2 = {
  accessGroupId: string;
};

export const Roles1 = {
  Owner: "OWNER",
  Member: "MEMBER",
  Developer: "DEVELOPER",
  Billing: "BILLING",
  Viewer: "VIEWER",
  Contributor: "CONTRIBUTOR",
} as const;
export type Roles1 = ClosedEnum<typeof Roles1>;

export type Roles = Roles2 | Roles1;

export type PatchTeamSaml = {
  /**
   * Require that members of the team use SAML Single Sign-On.
   */
  enforced?: boolean | undefined;
  /**
   * Directory groups to role or access group mappings.
   */
  roles?: { [k: string]: Roles2 | Roles1 } | undefined;
};

/**
 * Whether or not remote caching is enabled for the team
 */
export type PatchTeamRemoteCaching = {
  /**
   * Enable or disable remote caching for the team.
   */
  enabled?: boolean | undefined;
};

export type PatchTeamRequestBody = {
  /**
   * The hash value of an uploaded image.
   */
  avatar?: string | undefined;
  /**
   * A short text that describes the team.
   */
  description?: string | undefined;
  emailDomain?: string | null | undefined;
  /**
   * The name of the team.
   */
  name?: string | undefined;
  /**
   * Suffix that will be used for all preview deployments.
   */
  previewDeploymentSuffix?: string | null | undefined;
  /**
   * Create a new invite code and replace the current one.
   */
  regenerateInviteCode?: boolean | undefined;
  saml?: PatchTeamSaml | undefined;
  /**
   * A new slug for the team.
   */
  slug?: string | undefined;
  /**
   * Enable preview toolbar: one of on, off or default.
   */
  enablePreviewFeedback?: string | undefined;
  /**
   * Enable production toolbar: one of on, off or default.
   */
  enableProductionFeedback?: string | undefined;
  /**
   * Sensitive environment variable policy: one of on, off or default.
   */
  sensitiveEnvironmentVariablePolicy?: string | undefined;
  /**
   * Whether or not remote caching is enabled for the team
   */
  remoteCaching?: PatchTeamRemoteCaching | undefined;
  /**
   * Display or hide IP addresses in Monitoring queries.
   */
  hideIpAddresses?: boolean | undefined;
};

export type PatchTeamRequest = {
  /**
   * The Team identifier to perform the request on behalf of.
   */
  teamId: string;
  /**
   * The Team slug to perform the request on behalf of.
   */
  slug?: string | undefined;
  requestBody?: PatchTeamRequestBody | undefined;
};

/** @internal */
export const Roles2$inboundSchema: z.ZodType<Roles2, z.ZodTypeDef, unknown> = z
  .object({
    accessGroupId: z.string(),
  });

/** @internal */
export type Roles2$Outbound = {
  accessGroupId: string;
};

/** @internal */
export const Roles2$outboundSchema: z.ZodType<
  Roles2$Outbound,
  z.ZodTypeDef,
  Roles2
> = z.object({
  accessGroupId: z.string(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace Roles2$ {
  /** @deprecated use `Roles2$inboundSchema` instead. */
  export const inboundSchema = Roles2$inboundSchema;
  /** @deprecated use `Roles2$outboundSchema` instead. */
  export const outboundSchema = Roles2$outboundSchema;
  /** @deprecated use `Roles2$Outbound` instead. */
  export type Outbound = Roles2$Outbound;
}

/** @internal */
export const Roles1$inboundSchema: z.ZodNativeEnum<typeof Roles1> = z
  .nativeEnum(Roles1);

/** @internal */
export const Roles1$outboundSchema: z.ZodNativeEnum<typeof Roles1> =
  Roles1$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace Roles1$ {
  /** @deprecated use `Roles1$inboundSchema` instead. */
  export const inboundSchema = Roles1$inboundSchema;
  /** @deprecated use `Roles1$outboundSchema` instead. */
  export const outboundSchema = Roles1$outboundSchema;
}

/** @internal */
export const Roles$inboundSchema: z.ZodType<Roles, z.ZodTypeDef, unknown> = z
  .union([z.lazy(() => Roles2$inboundSchema), Roles1$inboundSchema]);

/** @internal */
export type Roles$Outbound = Roles2$Outbound | string;

/** @internal */
export const Roles$outboundSchema: z.ZodType<
  Roles$Outbound,
  z.ZodTypeDef,
  Roles
> = z.union([z.lazy(() => Roles2$outboundSchema), Roles1$outboundSchema]);

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace Roles$ {
  /** @deprecated use `Roles$inboundSchema` instead. */
  export const inboundSchema = Roles$inboundSchema;
  /** @deprecated use `Roles$outboundSchema` instead. */
  export const outboundSchema = Roles$outboundSchema;
  /** @deprecated use `Roles$Outbound` instead. */
  export type Outbound = Roles$Outbound;
}

/** @internal */
export const PatchTeamSaml$inboundSchema: z.ZodType<
  PatchTeamSaml,
  z.ZodTypeDef,
  unknown
> = z.object({
  enforced: z.boolean().optional(),
  roles: z.record(
    z.union([z.lazy(() => Roles2$inboundSchema), Roles1$inboundSchema]),
  ).optional(),
});

/** @internal */
export type PatchTeamSaml$Outbound = {
  enforced?: boolean | undefined;
  roles?: { [k: string]: Roles2$Outbound | string } | undefined;
};

/** @internal */
export const PatchTeamSaml$outboundSchema: z.ZodType<
  PatchTeamSaml$Outbound,
  z.ZodTypeDef,
  PatchTeamSaml
> = z.object({
  enforced: z.boolean().optional(),
  roles: z.record(
    z.union([z.lazy(() => Roles2$outboundSchema), Roles1$outboundSchema]),
  ).optional(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace PatchTeamSaml$ {
  /** @deprecated use `PatchTeamSaml$inboundSchema` instead. */
  export const inboundSchema = PatchTeamSaml$inboundSchema;
  /** @deprecated use `PatchTeamSaml$outboundSchema` instead. */
  export const outboundSchema = PatchTeamSaml$outboundSchema;
  /** @deprecated use `PatchTeamSaml$Outbound` instead. */
  export type Outbound = PatchTeamSaml$Outbound;
}

/** @internal */
export const PatchTeamRemoteCaching$inboundSchema: z.ZodType<
  PatchTeamRemoteCaching,
  z.ZodTypeDef,
  unknown
> = z.object({
  enabled: z.boolean().optional(),
});

/** @internal */
export type PatchTeamRemoteCaching$Outbound = {
  enabled?: boolean | undefined;
};

/** @internal */
export const PatchTeamRemoteCaching$outboundSchema: z.ZodType<
  PatchTeamRemoteCaching$Outbound,
  z.ZodTypeDef,
  PatchTeamRemoteCaching
> = z.object({
  enabled: z.boolean().optional(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace PatchTeamRemoteCaching$ {
  /** @deprecated use `PatchTeamRemoteCaching$inboundSchema` instead. */
  export const inboundSchema = PatchTeamRemoteCaching$inboundSchema;
  /** @deprecated use `PatchTeamRemoteCaching$outboundSchema` instead. */
  export const outboundSchema = PatchTeamRemoteCaching$outboundSchema;
  /** @deprecated use `PatchTeamRemoteCaching$Outbound` instead. */
  export type Outbound = PatchTeamRemoteCaching$Outbound;
}

/** @internal */
export const PatchTeamRequestBody$inboundSchema: z.ZodType<
  PatchTeamRequestBody,
  z.ZodTypeDef,
  unknown
> = z.object({
  avatar: z.string().optional(),
  description: z.string().optional(),
  emailDomain: z.nullable(z.string()).optional(),
  name: z.string().optional(),
  previewDeploymentSuffix: z.nullable(z.string()).optional(),
  regenerateInviteCode: z.boolean().optional(),
  saml: z.lazy(() => PatchTeamSaml$inboundSchema).optional(),
  slug: z.string().optional(),
  enablePreviewFeedback: z.string().optional(),
  enableProductionFeedback: z.string().optional(),
  sensitiveEnvironmentVariablePolicy: z.string().optional(),
  remoteCaching: z.lazy(() => PatchTeamRemoteCaching$inboundSchema).optional(),
  hideIpAddresses: z.boolean().optional(),
});

/** @internal */
export type PatchTeamRequestBody$Outbound = {
  avatar?: string | undefined;
  description?: string | undefined;
  emailDomain?: string | null | undefined;
  name?: string | undefined;
  previewDeploymentSuffix?: string | null | undefined;
  regenerateInviteCode?: boolean | undefined;
  saml?: PatchTeamSaml$Outbound | undefined;
  slug?: string | undefined;
  enablePreviewFeedback?: string | undefined;
  enableProductionFeedback?: string | undefined;
  sensitiveEnvironmentVariablePolicy?: string | undefined;
  remoteCaching?: PatchTeamRemoteCaching$Outbound | undefined;
  hideIpAddresses?: boolean | undefined;
};

/** @internal */
export const PatchTeamRequestBody$outboundSchema: z.ZodType<
  PatchTeamRequestBody$Outbound,
  z.ZodTypeDef,
  PatchTeamRequestBody
> = z.object({
  avatar: z.string().optional(),
  description: z.string().optional(),
  emailDomain: z.nullable(z.string()).optional(),
  name: z.string().optional(),
  previewDeploymentSuffix: z.nullable(z.string()).optional(),
  regenerateInviteCode: z.boolean().optional(),
  saml: z.lazy(() => PatchTeamSaml$outboundSchema).optional(),
  slug: z.string().optional(),
  enablePreviewFeedback: z.string().optional(),
  enableProductionFeedback: z.string().optional(),
  sensitiveEnvironmentVariablePolicy: z.string().optional(),
  remoteCaching: z.lazy(() => PatchTeamRemoteCaching$outboundSchema).optional(),
  hideIpAddresses: z.boolean().optional(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace PatchTeamRequestBody$ {
  /** @deprecated use `PatchTeamRequestBody$inboundSchema` instead. */
  export const inboundSchema = PatchTeamRequestBody$inboundSchema;
  /** @deprecated use `PatchTeamRequestBody$outboundSchema` instead. */
  export const outboundSchema = PatchTeamRequestBody$outboundSchema;
  /** @deprecated use `PatchTeamRequestBody$Outbound` instead. */
  export type Outbound = PatchTeamRequestBody$Outbound;
}

/** @internal */
export const PatchTeamRequest$inboundSchema: z.ZodType<
  PatchTeamRequest,
  z.ZodTypeDef,
  unknown
> = z.object({
  teamId: z.string(),
  slug: z.string().optional(),
  RequestBody: z.lazy(() => PatchTeamRequestBody$inboundSchema).optional(),
}).transform((v) => {
  return remap$(v, {
    "RequestBody": "requestBody",
  });
});

/** @internal */
export type PatchTeamRequest$Outbound = {
  teamId: string;
  slug?: string | undefined;
  RequestBody?: PatchTeamRequestBody$Outbound | undefined;
};

/** @internal */
export const PatchTeamRequest$outboundSchema: z.ZodType<
  PatchTeamRequest$Outbound,
  z.ZodTypeDef,
  PatchTeamRequest
> = z.object({
  teamId: z.string(),
  slug: z.string().optional(),
  requestBody: z.lazy(() => PatchTeamRequestBody$outboundSchema).optional(),
}).transform((v) => {
  return remap$(v, {
    requestBody: "RequestBody",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace PatchTeamRequest$ {
  /** @deprecated use `PatchTeamRequest$inboundSchema` instead. */
  export const inboundSchema = PatchTeamRequest$inboundSchema;
  /** @deprecated use `PatchTeamRequest$outboundSchema` instead. */
  export const outboundSchema = PatchTeamRequest$outboundSchema;
  /** @deprecated use `PatchTeamRequest$Outbound` instead. */
  export type Outbound = PatchTeamRequest$Outbound;
}
