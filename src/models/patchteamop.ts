/*
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

import { remap as remap$ } from "../lib/primitives.js";
import * as z from "zod";

export enum Roles {
    Owner = "OWNER",
    Member = "MEMBER",
    Developer = "DEVELOPER",
    Billing = "BILLING",
    Viewer = "VIEWER",
    Contributor = "CONTRIBUTOR",
}

export type PatchTeamSaml = {
    /**
     * Require that members of the team use SAML Single Sign-On.
     */
    enforced?: boolean | undefined;
    roles?: { [k: string]: Roles } | undefined;
};

/**
 * Whether or not remote caching is enabled for the team
 */
export type PatchTeamRemoteCaching = {
    /**
     * Enable or disable remote caching for the team.
     */
    enabled?: boolean | undefined;
};

export type PatchTeamRequestBody = {
    /**
     * The hash value of an uploaded image.
     */
    avatar?: string | undefined;
    /**
     * A short text that describes the team.
     */
    description?: string | undefined;
    emailDomain?: string | null | undefined;
    /**
     * The name of the team.
     */
    name?: string | undefined;
    /**
     * Suffix that will be used for all preview deployments.
     */
    previewDeploymentSuffix?: string | null | undefined;
    /**
     * Create a new invite code and replace the current one.
     */
    regenerateInviteCode?: boolean | undefined;
    saml?: PatchTeamSaml | undefined;
    /**
     * A new slug for the team.
     */
    slug?: string | undefined;
    /**
     * Enable preview comments: one of on, off or default.
     */
    enablePreviewFeedback?: string | undefined;
    /**
     * Sensitive environment variable policy: one of on, off or default.
     */
    sensitiveEnvironmentVariablePolicy?: string | undefined;
    /**
     * Whether or not remote caching is enabled for the team
     */
    remoteCaching?: PatchTeamRemoteCaching | undefined;
    /**
     * Display or hide IP addresses in Monitoring queries.
     */
    hideIpAddresses?: boolean | undefined;
};

export type PatchTeamRequest = {
    /**
     * The Team identifier to perform the request on behalf of.
     */
    teamId: string;
    /**
     * The Team slug to perform the request on behalf of.
     */
    slug?: string | undefined;
    requestBody?: PatchTeamRequestBody | undefined;
};

/** @internal */
export namespace Roles$ {
    export const inboundSchema: z.ZodNativeEnum<typeof Roles> = z.nativeEnum(Roles);
    export const outboundSchema: z.ZodNativeEnum<typeof Roles> = inboundSchema;
}

/** @internal */
export namespace PatchTeamSaml$ {
    export const inboundSchema: z.ZodType<PatchTeamSaml, z.ZodTypeDef, unknown> = z.object({
        enforced: z.boolean().optional(),
        roles: z.record(Roles$.inboundSchema).optional(),
    });

    export type Outbound = {
        enforced?: boolean | undefined;
        roles?: { [k: string]: string } | undefined;
    };

    export const outboundSchema: z.ZodType<Outbound, z.ZodTypeDef, PatchTeamSaml> = z.object({
        enforced: z.boolean().optional(),
        roles: z.record(Roles$.outboundSchema).optional(),
    });
}

/** @internal */
export namespace PatchTeamRemoteCaching$ {
    export const inboundSchema: z.ZodType<PatchTeamRemoteCaching, z.ZodTypeDef, unknown> = z.object(
        {
            enabled: z.boolean().optional(),
        }
    );

    export type Outbound = {
        enabled?: boolean | undefined;
    };

    export const outboundSchema: z.ZodType<Outbound, z.ZodTypeDef, PatchTeamRemoteCaching> =
        z.object({
            enabled: z.boolean().optional(),
        });
}

/** @internal */
export namespace PatchTeamRequestBody$ {
    export const inboundSchema: z.ZodType<PatchTeamRequestBody, z.ZodTypeDef, unknown> = z.object({
        avatar: z.string().optional(),
        description: z.string().optional(),
        emailDomain: z.nullable(z.string()).optional(),
        name: z.string().optional(),
        previewDeploymentSuffix: z.nullable(z.string()).optional(),
        regenerateInviteCode: z.boolean().optional(),
        saml: z.lazy(() => PatchTeamSaml$.inboundSchema).optional(),
        slug: z.string().optional(),
        enablePreviewFeedback: z.string().optional(),
        sensitiveEnvironmentVariablePolicy: z.string().optional(),
        remoteCaching: z.lazy(() => PatchTeamRemoteCaching$.inboundSchema).optional(),
        hideIpAddresses: z.boolean().optional(),
    });

    export type Outbound = {
        avatar?: string | undefined;
        description?: string | undefined;
        emailDomain?: string | null | undefined;
        name?: string | undefined;
        previewDeploymentSuffix?: string | null | undefined;
        regenerateInviteCode?: boolean | undefined;
        saml?: PatchTeamSaml$.Outbound | undefined;
        slug?: string | undefined;
        enablePreviewFeedback?: string | undefined;
        sensitiveEnvironmentVariablePolicy?: string | undefined;
        remoteCaching?: PatchTeamRemoteCaching$.Outbound | undefined;
        hideIpAddresses?: boolean | undefined;
    };

    export const outboundSchema: z.ZodType<Outbound, z.ZodTypeDef, PatchTeamRequestBody> = z.object(
        {
            avatar: z.string().optional(),
            description: z.string().optional(),
            emailDomain: z.nullable(z.string()).optional(),
            name: z.string().optional(),
            previewDeploymentSuffix: z.nullable(z.string()).optional(),
            regenerateInviteCode: z.boolean().optional(),
            saml: z.lazy(() => PatchTeamSaml$.outboundSchema).optional(),
            slug: z.string().optional(),
            enablePreviewFeedback: z.string().optional(),
            sensitiveEnvironmentVariablePolicy: z.string().optional(),
            remoteCaching: z.lazy(() => PatchTeamRemoteCaching$.outboundSchema).optional(),
            hideIpAddresses: z.boolean().optional(),
        }
    );
}

/** @internal */
export namespace PatchTeamRequest$ {
    export const inboundSchema: z.ZodType<PatchTeamRequest, z.ZodTypeDef, unknown> = z
        .object({
            teamId: z.string(),
            slug: z.string().optional(),
            RequestBody: z.lazy(() => PatchTeamRequestBody$.inboundSchema).optional(),
        })
        .transform((v) => {
            return remap$(v, {
                RequestBody: "requestBody",
            });
        });

    export type Outbound = {
        teamId: string;
        slug?: string | undefined;
        RequestBody?: PatchTeamRequestBody$.Outbound | undefined;
    };

    export const outboundSchema: z.ZodType<Outbound, z.ZodTypeDef, PatchTeamRequest> = z
        .object({
            teamId: z.string(),
            slug: z.string().optional(),
            requestBody: z.lazy(() => PatchTeamRequestBody$.outboundSchema).optional(),
        })
        .transform((v) => {
            return remap$(v, {
                requestBody: "RequestBody",
            });
        });
}
