/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { remap as remap$ } from "../lib/primitives.js";
import { ClosedEnum } from "../types/enums.js";
import {
  Pagination,
  Pagination$inboundSchema,
  Pagination$Outbound,
  Pagination$outboundSchema,
} from "./pagination.js";

/**
 * Filters only production domains when set to `true`.
 */
export const Production = {
  True: "true",
  False: "false",
} as const;
/**
 * Filters only production domains when set to `true`.
 */
export type Production = ClosedEnum<typeof Production>;

/**
 * Excludes redirect project domains when \"false\". Includes redirect project domains when \"true\" (default).
 */
export const Redirects = {
  True: "true",
  False: "false",
} as const;
/**
 * Excludes redirect project domains when \"false\". Includes redirect project domains when \"true\" (default).
 */
export type Redirects = ClosedEnum<typeof Redirects>;

/**
 * Filters domains based on their verification status.
 */
export const Verified = {
  True: "true",
  False: "false",
} as const;
/**
 * Filters domains based on their verification status.
 */
export type Verified = ClosedEnum<typeof Verified>;

/**
 * Domains sort order by createdAt
 */
export const Order = {
  Asc: "ASC",
  Desc: "DESC",
} as const;
/**
 * Domains sort order by createdAt
 */
export type Order = ClosedEnum<typeof Order>;

export type GetProjectDomainsRequest = {
  /**
   * The unique project identifier or the project name
   */
  idOrName: string;
  /**
   * Filters only production domains when set to `true`.
   */
  production?: Production | undefined;
  /**
   * Filters domains based on specific branch.
   */
  gitBranch?: string | undefined;
  /**
   * Excludes redirect project domains when \"false\". Includes redirect project domains when \"true\" (default).
   */
  redirects?: Redirects | undefined;
  /**
   * Filters domains based on their redirect target.
   */
  redirect?: string | undefined;
  /**
   * Filters domains based on their verification status.
   */
  verified?: Verified | undefined;
  /**
   * Maximum number of domains to list from a request (max 100).
   */
  limit?: number | undefined;
  /**
   * Get domains created after this JavaScript timestamp.
   */
  since?: number | undefined;
  /**
   * Get domains created before this JavaScript timestamp.
   */
  until?: number | undefined;
  /**
   * Domains sort order by createdAt
   */
  order?: Order | undefined;
  /**
   * The Team identifier to perform the request on behalf of.
   */
  teamId?: string | undefined;
  /**
   * The Team slug to perform the request on behalf of.
   */
  slug?: string | undefined;
};

/**
 * A list of verification challenges, one of which must be completed to verify the domain for use on the project. After the challenge is complete `POST /projects/:idOrName/domains/:domain/verify` to verify the domain. Possible challenges: - If `verification.type = TXT` the `verification.domain` will be checked for a TXT record matching `verification.value`.
 */
export type GetProjectDomainsVerification = {
  type: string;
  domain: string;
  value: string;
  reason: string;
};

export type GetProjectDomainsDomains = {
  name: string;
  apexName: string;
  projectId: string;
  redirect?: string | null | undefined;
  redirectStatusCode?: number | null | undefined;
  gitBranch?: string | null | undefined;
  customEnvironmentId?: string | null | undefined;
  updatedAt?: number | undefined;
  createdAt?: number | undefined;
  /**
   * `true` if the domain is verified for use with the project. If `false` it will not be used as an alias on this project until the challenge in `verification` is completed.
   */
  verified: boolean;
  /**
   * A list of verification challenges, one of which must be completed to verify the domain for use on the project. After the challenge is complete `POST /projects/:idOrName/domains/:domain/verify` to verify the domain. Possible challenges: - If `verification.type = TXT` the `verification.domain` will be checked for a TXT record matching `verification.value`.
   */
  verification?: Array<GetProjectDomainsVerification> | undefined;
};

/**
 * Successful response retrieving a list of domains
 */
export type GetProjectDomainsResponseBody = {
  domains: Array<GetProjectDomainsDomains>;
  /**
   * This object contains information related to the pagination of the current request, including the necessary parameters to get the next or previous page of data.
   */
  pagination: Pagination;
};

export type GetProjectDomainsResponse = {
  result: GetProjectDomainsResponseBody;
};

/** @internal */
export const Production$inboundSchema: z.ZodNativeEnum<typeof Production> = z
  .nativeEnum(Production);

/** @internal */
export const Production$outboundSchema: z.ZodNativeEnum<typeof Production> =
  Production$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace Production$ {
  /** @deprecated use `Production$inboundSchema` instead. */
  export const inboundSchema = Production$inboundSchema;
  /** @deprecated use `Production$outboundSchema` instead. */
  export const outboundSchema = Production$outboundSchema;
}

/** @internal */
export const Redirects$inboundSchema: z.ZodNativeEnum<typeof Redirects> = z
  .nativeEnum(Redirects);

/** @internal */
export const Redirects$outboundSchema: z.ZodNativeEnum<typeof Redirects> =
  Redirects$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace Redirects$ {
  /** @deprecated use `Redirects$inboundSchema` instead. */
  export const inboundSchema = Redirects$inboundSchema;
  /** @deprecated use `Redirects$outboundSchema` instead. */
  export const outboundSchema = Redirects$outboundSchema;
}

/** @internal */
export const Verified$inboundSchema: z.ZodNativeEnum<typeof Verified> = z
  .nativeEnum(Verified);

/** @internal */
export const Verified$outboundSchema: z.ZodNativeEnum<typeof Verified> =
  Verified$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace Verified$ {
  /** @deprecated use `Verified$inboundSchema` instead. */
  export const inboundSchema = Verified$inboundSchema;
  /** @deprecated use `Verified$outboundSchema` instead. */
  export const outboundSchema = Verified$outboundSchema;
}

/** @internal */
export const Order$inboundSchema: z.ZodNativeEnum<typeof Order> = z.nativeEnum(
  Order,
);

/** @internal */
export const Order$outboundSchema: z.ZodNativeEnum<typeof Order> =
  Order$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace Order$ {
  /** @deprecated use `Order$inboundSchema` instead. */
  export const inboundSchema = Order$inboundSchema;
  /** @deprecated use `Order$outboundSchema` instead. */
  export const outboundSchema = Order$outboundSchema;
}

/** @internal */
export const GetProjectDomainsRequest$inboundSchema: z.ZodType<
  GetProjectDomainsRequest,
  z.ZodTypeDef,
  unknown
> = z.object({
  idOrName: z.string(),
  production: Production$inboundSchema.default("false"),
  gitBranch: z.string().optional(),
  redirects: Redirects$inboundSchema.default("true"),
  redirect: z.string().optional(),
  verified: Verified$inboundSchema.optional(),
  limit: z.number().optional(),
  since: z.number().optional(),
  until: z.number().optional(),
  order: Order$inboundSchema.default("DESC"),
  teamId: z.string().optional(),
  slug: z.string().optional(),
});

/** @internal */
export type GetProjectDomainsRequest$Outbound = {
  idOrName: string;
  production: string;
  gitBranch?: string | undefined;
  redirects: string;
  redirect?: string | undefined;
  verified?: string | undefined;
  limit?: number | undefined;
  since?: number | undefined;
  until?: number | undefined;
  order: string;
  teamId?: string | undefined;
  slug?: string | undefined;
};

/** @internal */
export const GetProjectDomainsRequest$outboundSchema: z.ZodType<
  GetProjectDomainsRequest$Outbound,
  z.ZodTypeDef,
  GetProjectDomainsRequest
> = z.object({
  idOrName: z.string(),
  production: Production$outboundSchema.default("false"),
  gitBranch: z.string().optional(),
  redirects: Redirects$outboundSchema.default("true"),
  redirect: z.string().optional(),
  verified: Verified$outboundSchema.optional(),
  limit: z.number().optional(),
  since: z.number().optional(),
  until: z.number().optional(),
  order: Order$outboundSchema.default("DESC"),
  teamId: z.string().optional(),
  slug: z.string().optional(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace GetProjectDomainsRequest$ {
  /** @deprecated use `GetProjectDomainsRequest$inboundSchema` instead. */
  export const inboundSchema = GetProjectDomainsRequest$inboundSchema;
  /** @deprecated use `GetProjectDomainsRequest$outboundSchema` instead. */
  export const outboundSchema = GetProjectDomainsRequest$outboundSchema;
  /** @deprecated use `GetProjectDomainsRequest$Outbound` instead. */
  export type Outbound = GetProjectDomainsRequest$Outbound;
}

/** @internal */
export const GetProjectDomainsVerification$inboundSchema: z.ZodType<
  GetProjectDomainsVerification,
  z.ZodTypeDef,
  unknown
> = z.object({
  type: z.string(),
  domain: z.string(),
  value: z.string(),
  reason: z.string(),
});

/** @internal */
export type GetProjectDomainsVerification$Outbound = {
  type: string;
  domain: string;
  value: string;
  reason: string;
};

/** @internal */
export const GetProjectDomainsVerification$outboundSchema: z.ZodType<
  GetProjectDomainsVerification$Outbound,
  z.ZodTypeDef,
  GetProjectDomainsVerification
> = z.object({
  type: z.string(),
  domain: z.string(),
  value: z.string(),
  reason: z.string(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace GetProjectDomainsVerification$ {
  /** @deprecated use `GetProjectDomainsVerification$inboundSchema` instead. */
  export const inboundSchema = GetProjectDomainsVerification$inboundSchema;
  /** @deprecated use `GetProjectDomainsVerification$outboundSchema` instead. */
  export const outboundSchema = GetProjectDomainsVerification$outboundSchema;
  /** @deprecated use `GetProjectDomainsVerification$Outbound` instead. */
  export type Outbound = GetProjectDomainsVerification$Outbound;
}

/** @internal */
export const GetProjectDomainsDomains$inboundSchema: z.ZodType<
  GetProjectDomainsDomains,
  z.ZodTypeDef,
  unknown
> = z.object({
  name: z.string(),
  apexName: z.string(),
  projectId: z.string(),
  redirect: z.nullable(z.string()).optional(),
  redirectStatusCode: z.nullable(z.number()).optional(),
  gitBranch: z.nullable(z.string()).optional(),
  customEnvironmentId: z.nullable(z.string()).optional(),
  updatedAt: z.number().optional(),
  createdAt: z.number().optional(),
  verified: z.boolean(),
  verification: z.array(
    z.lazy(() => GetProjectDomainsVerification$inboundSchema),
  ).optional(),
});

/** @internal */
export type GetProjectDomainsDomains$Outbound = {
  name: string;
  apexName: string;
  projectId: string;
  redirect?: string | null | undefined;
  redirectStatusCode?: number | null | undefined;
  gitBranch?: string | null | undefined;
  customEnvironmentId?: string | null | undefined;
  updatedAt?: number | undefined;
  createdAt?: number | undefined;
  verified: boolean;
  verification?: Array<GetProjectDomainsVerification$Outbound> | undefined;
};

/** @internal */
export const GetProjectDomainsDomains$outboundSchema: z.ZodType<
  GetProjectDomainsDomains$Outbound,
  z.ZodTypeDef,
  GetProjectDomainsDomains
> = z.object({
  name: z.string(),
  apexName: z.string(),
  projectId: z.string(),
  redirect: z.nullable(z.string()).optional(),
  redirectStatusCode: z.nullable(z.number()).optional(),
  gitBranch: z.nullable(z.string()).optional(),
  customEnvironmentId: z.nullable(z.string()).optional(),
  updatedAt: z.number().optional(),
  createdAt: z.number().optional(),
  verified: z.boolean(),
  verification: z.array(
    z.lazy(() => GetProjectDomainsVerification$outboundSchema),
  ).optional(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace GetProjectDomainsDomains$ {
  /** @deprecated use `GetProjectDomainsDomains$inboundSchema` instead. */
  export const inboundSchema = GetProjectDomainsDomains$inboundSchema;
  /** @deprecated use `GetProjectDomainsDomains$outboundSchema` instead. */
  export const outboundSchema = GetProjectDomainsDomains$outboundSchema;
  /** @deprecated use `GetProjectDomainsDomains$Outbound` instead. */
  export type Outbound = GetProjectDomainsDomains$Outbound;
}

/** @internal */
export const GetProjectDomainsResponseBody$inboundSchema: z.ZodType<
  GetProjectDomainsResponseBody,
  z.ZodTypeDef,
  unknown
> = z.object({
  domains: z.array(z.lazy(() => GetProjectDomainsDomains$inboundSchema)),
  pagination: Pagination$inboundSchema,
});

/** @internal */
export type GetProjectDomainsResponseBody$Outbound = {
  domains: Array<GetProjectDomainsDomains$Outbound>;
  pagination: Pagination$Outbound;
};

/** @internal */
export const GetProjectDomainsResponseBody$outboundSchema: z.ZodType<
  GetProjectDomainsResponseBody$Outbound,
  z.ZodTypeDef,
  GetProjectDomainsResponseBody
> = z.object({
  domains: z.array(z.lazy(() => GetProjectDomainsDomains$outboundSchema)),
  pagination: Pagination$outboundSchema,
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace GetProjectDomainsResponseBody$ {
  /** @deprecated use `GetProjectDomainsResponseBody$inboundSchema` instead. */
  export const inboundSchema = GetProjectDomainsResponseBody$inboundSchema;
  /** @deprecated use `GetProjectDomainsResponseBody$outboundSchema` instead. */
  export const outboundSchema = GetProjectDomainsResponseBody$outboundSchema;
  /** @deprecated use `GetProjectDomainsResponseBody$Outbound` instead. */
  export type Outbound = GetProjectDomainsResponseBody$Outbound;
}

/** @internal */
export const GetProjectDomainsResponse$inboundSchema: z.ZodType<
  GetProjectDomainsResponse,
  z.ZodTypeDef,
  unknown
> = z.object({
  Result: z.lazy(() => GetProjectDomainsResponseBody$inboundSchema),
}).transform((v) => {
  return remap$(v, {
    "Result": "result",
  });
});

/** @internal */
export type GetProjectDomainsResponse$Outbound = {
  Result: GetProjectDomainsResponseBody$Outbound;
};

/** @internal */
export const GetProjectDomainsResponse$outboundSchema: z.ZodType<
  GetProjectDomainsResponse$Outbound,
  z.ZodTypeDef,
  GetProjectDomainsResponse
> = z.object({
  result: z.lazy(() => GetProjectDomainsResponseBody$outboundSchema),
}).transform((v) => {
  return remap$(v, {
    result: "Result",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace GetProjectDomainsResponse$ {
  /** @deprecated use `GetProjectDomainsResponse$inboundSchema` instead. */
  export const inboundSchema = GetProjectDomainsResponse$inboundSchema;
  /** @deprecated use `GetProjectDomainsResponse$outboundSchema` instead. */
  export const outboundSchema = GetProjectDomainsResponse$outboundSchema;
  /** @deprecated use `GetProjectDomainsResponse$Outbound` instead. */
  export type Outbound = GetProjectDomainsResponse$Outbound;
}
