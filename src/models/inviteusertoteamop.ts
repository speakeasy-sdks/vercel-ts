/*
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

import { remap as remap$ } from "../lib/primitives";
import * as z from "zod";

/**
 * The role of the user to invite
 */
export enum InviteUserToTeamTeamsRole {
    Owner = "OWNER",
    Member = "MEMBER",
    Developer = "DEVELOPER",
    Billing = "BILLING",
    Viewer = "VIEWER",
    Contributor = "CONTRIBUTOR",
}

/**
 * Sets the project roles for the invited user
 */
export enum InviteUserToTeamRole {
    Admin = "ADMIN",
    ProjectViewer = "PROJECT_VIEWER",
    ProjectDeveloper = "PROJECT_DEVELOPER",
}

export type InviteUserToTeamProjects = {
    /**
     * The ID of the project.
     */
    projectId: string;
    /**
     * Sets the project roles for the invited user
     */
    role: InviteUserToTeamRole;
};

export type InviteUserToTeamRequestBody = {
    /**
     * The id of the user to invite
     */
    uid?: string | undefined;
    /**
     * The email address of the user to invite
     */
    email?: string | undefined;
    /**
     * The role of the user to invite
     */
    role?: InviteUserToTeamTeamsRole | undefined;
    projects?: Array<InviteUserToTeamProjects> | undefined;
};

export type InviteUserToTeamRequest = {
    teamId: string;
    requestBody?: InviteUserToTeamRequestBody | undefined;
};

export enum InviteUserToTeamResponseBodyRole {
    Owner = "OWNER",
    Member = "MEMBER",
    Developer = "DEVELOPER",
    Billing = "BILLING",
    Viewer = "VIEWER",
    Contributor = "CONTRIBUTOR",
}

export type InviteUserToTeamResponseBody2 = {
    uid: string;
    username: string;
    role: InviteUserToTeamResponseBodyRole;
};

/**
 * The role used for the invitation
 */
export enum ResponseBodyRole {
    Owner = "OWNER",
    Member = "MEMBER",
    Developer = "DEVELOPER",
    Billing = "BILLING",
    Viewer = "VIEWER",
    Contributor = "CONTRIBUTOR",
}

/**
 * The member was successfully added to the team
 */
export type InviteUserToTeamResponseBody1 = {
    /**
     * The ID of the invited user
     */
    uid: string;
    /**
     * The username of the invited user
     */
    username: string;
    /**
     * The email of the invited user. Not included if the user was invited via their UID.
     */
    email?: string | undefined;
    /**
     * The role used for the invitation
     */
    role: ResponseBodyRole;
};

/**
 * The member was successfully added to the team
 */
export type InviteUserToTeamResponseBody =
    | InviteUserToTeamResponseBody2
    | InviteUserToTeamResponseBody1;

/** @internal */
export namespace InviteUserToTeamTeamsRole$ {
    export const inboundSchema = z.nativeEnum(InviteUserToTeamTeamsRole);
    export const outboundSchema = inboundSchema;
}

/** @internal */
export namespace InviteUserToTeamRole$ {
    export const inboundSchema = z.nativeEnum(InviteUserToTeamRole);
    export const outboundSchema = inboundSchema;
}

/** @internal */
export namespace InviteUserToTeamProjects$ {
    export const inboundSchema: z.ZodType<InviteUserToTeamProjects, z.ZodTypeDef, unknown> =
        z.object({
            projectId: z.string(),
            role: InviteUserToTeamRole$.inboundSchema,
        });

    export type Outbound = {
        projectId: string;
        role: string;
    };

    export const outboundSchema: z.ZodType<Outbound, z.ZodTypeDef, InviteUserToTeamProjects> =
        z.object({
            projectId: z.string(),
            role: InviteUserToTeamRole$.outboundSchema,
        });
}

/** @internal */
export namespace InviteUserToTeamRequestBody$ {
    export const inboundSchema: z.ZodType<InviteUserToTeamRequestBody, z.ZodTypeDef, unknown> =
        z.object({
            uid: z.string().optional(),
            email: z.string().optional(),
            role: InviteUserToTeamTeamsRole$.inboundSchema.default(
                InviteUserToTeamTeamsRole.Member
            ),
            projects: z.array(z.lazy(() => InviteUserToTeamProjects$.inboundSchema)).optional(),
        });

    export type Outbound = {
        uid?: string | undefined;
        email?: string | undefined;
        role: string;
        projects?: Array<InviteUserToTeamProjects$.Outbound> | undefined;
    };

    export const outboundSchema: z.ZodType<Outbound, z.ZodTypeDef, InviteUserToTeamRequestBody> =
        z.object({
            uid: z.string().optional(),
            email: z.string().optional(),
            role: InviteUserToTeamTeamsRole$.outboundSchema.default(
                InviteUserToTeamTeamsRole.Member
            ),
            projects: z.array(z.lazy(() => InviteUserToTeamProjects$.outboundSchema)).optional(),
        });
}

/** @internal */
export namespace InviteUserToTeamRequest$ {
    export const inboundSchema: z.ZodType<InviteUserToTeamRequest, z.ZodTypeDef, unknown> = z
        .object({
            teamId: z.string(),
            RequestBody: z.lazy(() => InviteUserToTeamRequestBody$.inboundSchema).optional(),
        })
        .transform((v) => {
            return remap$(v, {
                RequestBody: "requestBody",
            });
        });

    export type Outbound = {
        teamId: string;
        RequestBody?: InviteUserToTeamRequestBody$.Outbound | undefined;
    };

    export const outboundSchema: z.ZodType<Outbound, z.ZodTypeDef, InviteUserToTeamRequest> = z
        .object({
            teamId: z.string(),
            requestBody: z.lazy(() => InviteUserToTeamRequestBody$.outboundSchema).optional(),
        })
        .transform((v) => {
            return remap$(v, {
                requestBody: "RequestBody",
            });
        });
}

/** @internal */
export namespace InviteUserToTeamResponseBodyRole$ {
    export const inboundSchema = z.nativeEnum(InviteUserToTeamResponseBodyRole);
    export const outboundSchema = inboundSchema;
}

/** @internal */
export namespace InviteUserToTeamResponseBody2$ {
    export const inboundSchema: z.ZodType<InviteUserToTeamResponseBody2, z.ZodTypeDef, unknown> =
        z.object({
            uid: z.string(),
            username: z.string(),
            role: InviteUserToTeamResponseBodyRole$.inboundSchema,
        });

    export type Outbound = {
        uid: string;
        username: string;
        role: string;
    };

    export const outboundSchema: z.ZodType<Outbound, z.ZodTypeDef, InviteUserToTeamResponseBody2> =
        z.object({
            uid: z.string(),
            username: z.string(),
            role: InviteUserToTeamResponseBodyRole$.outboundSchema,
        });
}

/** @internal */
export namespace ResponseBodyRole$ {
    export const inboundSchema = z.nativeEnum(ResponseBodyRole);
    export const outboundSchema = inboundSchema;
}

/** @internal */
export namespace InviteUserToTeamResponseBody1$ {
    export const inboundSchema: z.ZodType<InviteUserToTeamResponseBody1, z.ZodTypeDef, unknown> =
        z.object({
            uid: z.string(),
            username: z.string(),
            email: z.string().optional(),
            role: ResponseBodyRole$.inboundSchema,
        });

    export type Outbound = {
        uid: string;
        username: string;
        email?: string | undefined;
        role: string;
    };

    export const outboundSchema: z.ZodType<Outbound, z.ZodTypeDef, InviteUserToTeamResponseBody1> =
        z.object({
            uid: z.string(),
            username: z.string(),
            email: z.string().optional(),
            role: ResponseBodyRole$.outboundSchema,
        });
}

/** @internal */
export namespace InviteUserToTeamResponseBody$ {
    export const inboundSchema: z.ZodType<InviteUserToTeamResponseBody, z.ZodTypeDef, unknown> =
        z.union([
            z.lazy(() => InviteUserToTeamResponseBody2$.inboundSchema),
            z.lazy(() => InviteUserToTeamResponseBody1$.inboundSchema),
        ]);

    export type Outbound =
        | InviteUserToTeamResponseBody2$.Outbound
        | InviteUserToTeamResponseBody1$.Outbound;
    export const outboundSchema: z.ZodType<Outbound, z.ZodTypeDef, InviteUserToTeamResponseBody> =
        z.union([
            z.lazy(() => InviteUserToTeamResponseBody2$.outboundSchema),
            z.lazy(() => InviteUserToTeamResponseBody1$.outboundSchema),
        ]);
}
