/*
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

import { remap as remap$ } from "../lib/primitives.js";
import * as z from "zod";

export type UploadCertRequestBody = {
    /**
     * The certificate authority
     */
    ca: string;
    /**
     * The certificate key
     */
    key: string;
    /**
     * The certificate
     */
    cert: string;
    /**
     * Skip validation of the certificate
     */
    skipValidation?: boolean | undefined;
};

export type UploadCertRequest = {
    /**
     * The Team identifier to perform the request on behalf of.
     */
    teamId?: string | undefined;
    /**
     * The Team slug to perform the request on behalf of.
     */
    slug?: string | undefined;
    requestBody?: UploadCertRequestBody | undefined;
};

export type UploadCertResponseBody = {
    id: string;
    createdAt: number;
    expiresAt: number;
    autoRenew: boolean;
    cns: Array<string>;
};

/** @internal */
export namespace UploadCertRequestBody$ {
    export const inboundSchema: z.ZodType<UploadCertRequestBody, z.ZodTypeDef, unknown> = z.object({
        ca: z.string(),
        key: z.string(),
        cert: z.string(),
        skipValidation: z.boolean().optional(),
    });

    export type Outbound = {
        ca: string;
        key: string;
        cert: string;
        skipValidation?: boolean | undefined;
    };

    export const outboundSchema: z.ZodType<Outbound, z.ZodTypeDef, UploadCertRequestBody> =
        z.object({
            ca: z.string(),
            key: z.string(),
            cert: z.string(),
            skipValidation: z.boolean().optional(),
        });
}

/** @internal */
export namespace UploadCertRequest$ {
    export const inboundSchema: z.ZodType<UploadCertRequest, z.ZodTypeDef, unknown> = z
        .object({
            teamId: z.string().optional(),
            slug: z.string().optional(),
            RequestBody: z.lazy(() => UploadCertRequestBody$.inboundSchema).optional(),
        })
        .transform((v) => {
            return remap$(v, {
                RequestBody: "requestBody",
            });
        });

    export type Outbound = {
        teamId?: string | undefined;
        slug?: string | undefined;
        RequestBody?: UploadCertRequestBody$.Outbound | undefined;
    };

    export const outboundSchema: z.ZodType<Outbound, z.ZodTypeDef, UploadCertRequest> = z
        .object({
            teamId: z.string().optional(),
            slug: z.string().optional(),
            requestBody: z.lazy(() => UploadCertRequestBody$.outboundSchema).optional(),
        })
        .transform((v) => {
            return remap$(v, {
                requestBody: "RequestBody",
            });
        });
}

/** @internal */
export namespace UploadCertResponseBody$ {
    export const inboundSchema: z.ZodType<UploadCertResponseBody, z.ZodTypeDef, unknown> = z.object(
        {
            id: z.string(),
            createdAt: z.number(),
            expiresAt: z.number(),
            autoRenew: z.boolean(),
            cns: z.array(z.string()),
        }
    );

    export type Outbound = {
        id: string;
        createdAt: number;
        expiresAt: number;
        autoRenew: boolean;
        cns: Array<string>;
    };

    export const outboundSchema: z.ZodType<Outbound, z.ZodTypeDef, UploadCertResponseBody> =
        z.object({
            id: z.string(),
            createdAt: z.number(),
            expiresAt: z.number(),
            autoRenew: z.boolean(),
            cns: z.array(z.string()),
        });
}
