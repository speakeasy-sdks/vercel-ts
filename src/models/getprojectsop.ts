/*
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

import { remap as remap$ } from "../lib/primitives";
import { ACLAction, ACLAction$ } from "./aclaction";
import { Pagination, Pagination$ } from "./pagination";
import * as z from "zod";

/**
 * Specifies whether PRs from Git forks should require a team member's authorization before it can be deployed
 */
export enum GitForkProtection {
    One = "1",
    Zero = "0",
}

export type GetProjectsRequest = {
    /**
     * Query only projects updated after the given timestamp
     */
    from?: string | undefined;
    /**
     * Specifies whether PRs from Git forks should require a team member's authorization before it can be deployed
     */
    gitForkProtection?: GitForkProtection | undefined;
    /**
     * Limit the number of projects returned
     */
    limit?: string | undefined;
    /**
     * Search projects by the name field
     */
    search?: string | undefined;
    /**
     * Filter results by repo. Also used for project count
     */
    repo?: string | undefined;
    /**
     * Filter results by Repository ID.
     */
    repoId?: string | undefined;
    /**
     * Filter results by Repository URL.
     */
    repoUrl?: string | undefined;
    /**
     * Filter results by excluding those projects that belong to a repo
     */
    excludeRepos?: string | undefined;
    /**
     * Filter results by connected Edge Config ID
     */
    edgeConfigId?: string | undefined;
    /**
     * Filter results by connected Edge Config Token ID
     */
    edgeConfigTokenId?: string | undefined;
    deprecated?: boolean | undefined;
    /**
     * The Team identifier to perform the request on behalf of.
     */
    teamId?: string | undefined;
    /**
     * The Team slug to perform the request on behalf of.
     */
    slug?: string | undefined;
};

export type GetProjectsAnalytics = {
    id: string;
    canceledAt?: number | null | undefined;
    disabledAt: number;
    enabledAt: number;
    paidAt?: number | undefined;
    sampleRatePercent?: number | null | undefined;
    spendLimitInDollars?: number | null | undefined;
};

export type GetProjectsSpeedInsights = {
    id: string;
    enabledAt?: number | undefined;
    disabledAt?: number | undefined;
    canceledAt?: number | undefined;
    hasData?: boolean | undefined;
    paidAt?: number | undefined;
};

export type GetProjectsDefinitions = {
    /**
     * The hostname that should be used.
     */
    host: string;
    /**
     * The path that should be called for the cronjob.
     */
    path: string;
    /**
     * The cron expression.
     */
    schedule: string;
};

export type GetProjectsCrons = {
    /**
     * The time the feature was enabled for this project. Note: It enables automatically with the first Deployment that outputs cronjobs.
     */
    enabledAt: number;
    /**
     * The time the feature was disabled for this project.
     */
    disabledAt: number | null;
    updatedAt: number;
    /**
     * The ID of the Deployment from which the definitions originated.
     */
    deploymentId: string | null;
    definitions: Array<GetProjectsDefinitions>;
};

export type GetProjectsDataCache = {
    userDisabled: boolean;
    storageSizeBytes?: number | null | undefined;
    unlimited?: boolean | undefined;
};

export enum GetProjectsTarget2 {
    Production = "production",
    Preview = "preview",
    Development = "development",
}

export enum GetProjectsTarget1 {
    Production = "production",
    Preview = "preview",
    Development = "development",
}

export type GetProjectsTarget = Array<GetProjectsTarget1> | GetProjectsTarget2;

export enum GetProjectsType {
    Secret = "secret",
    System = "system",
    Encrypted = "encrypted",
    Plain = "plain",
    Sensitive = "sensitive",
}

export enum GetProjectsContentHintProjectsResponse200ApplicationJSONResponseBodyProjectsEnv14Type {
    IntegrationStoreSecret = "integration-store-secret",
}

export type GetProjectsContentHint14 = {
    type: GetProjectsContentHintProjectsResponse200ApplicationJSONResponseBodyProjectsEnv14Type;
    storeId: string;
};

export enum GetProjectsContentHintProjectsResponse200ApplicationJSONResponseBodyProjectsEnv13Type {
    PostgresUrlNoSsl = "postgres-url-no-ssl",
}

export type GetProjectsContentHint13 = {
    type: GetProjectsContentHintProjectsResponse200ApplicationJSONResponseBodyProjectsEnv13Type;
    storeId: string;
};

export enum GetProjectsContentHintProjectsResponse200ApplicationJSONResponseBodyProjectsEnv12Type {
    PostgresDatabase = "postgres-database",
}

export type GetProjectsContentHint12 = {
    type: GetProjectsContentHintProjectsResponse200ApplicationJSONResponseBodyProjectsEnv12Type;
    storeId: string;
};

export enum GetProjectsContentHintProjectsResponse200ApplicationJSONResponseBodyProjectsEnv11Type {
    PostgresPassword = "postgres-password",
}

export type GetProjectsContentHint11 = {
    type: GetProjectsContentHintProjectsResponse200ApplicationJSONResponseBodyProjectsEnv11Type;
    storeId: string;
};

export enum GetProjectsContentHintProjectsResponse200ApplicationJSONResponseBodyProjectsEnv10Type {
    PostgresHost = "postgres-host",
}

export type GetProjectsContentHint10 = {
    type: GetProjectsContentHintProjectsResponse200ApplicationJSONResponseBodyProjectsEnv10Type;
    storeId: string;
};

export enum GetProjectsContentHintProjectsResponse200ApplicationJSONResponseBodyProjectsEnv9Type {
    PostgresUser = "postgres-user",
}

export type GetProjectsContentHint9 = {
    type: GetProjectsContentHintProjectsResponse200ApplicationJSONResponseBodyProjectsEnv9Type;
    storeId: string;
};

export enum GetProjectsContentHintProjectsResponse200ApplicationJSONResponseBodyProjectsEnvType {
    PostgresPrismaUrl = "postgres-prisma-url",
}

export type GetProjectsContentHint8 = {
    type: GetProjectsContentHintProjectsResponse200ApplicationJSONResponseBodyProjectsEnvType;
    storeId: string;
};

export enum GetProjectsContentHintProjectsResponse200ApplicationJSONResponseBodyProjectsType {
    PostgresUrlNonPooling = "postgres-url-non-pooling",
}

export type GetProjectsContentHint7 = {
    type: GetProjectsContentHintProjectsResponse200ApplicationJSONResponseBodyProjectsType;
    storeId: string;
};

export enum GetProjectsContentHintProjectsResponse200ApplicationJSONResponseBodyType {
    PostgresUrl = "postgres-url",
}

export type GetProjectsContentHint6 = {
    type: GetProjectsContentHintProjectsResponse200ApplicationJSONResponseBodyType;
    storeId: string;
};

export enum GetProjectsContentHintProjectsResponse200ApplicationJSONType {
    BlobReadWriteToken = "blob-read-write-token",
}

export type GetProjectsContentHint5 = {
    type: GetProjectsContentHintProjectsResponse200ApplicationJSONType;
    storeId: string;
};

export enum GetProjectsContentHintProjectsResponse200Type {
    RedisRestApiReadOnlyToken = "redis-rest-api-read-only-token",
}

export type GetProjectsContentHint4 = {
    type: GetProjectsContentHintProjectsResponse200Type;
    storeId: string;
};

export enum GetProjectsContentHintProjectsResponseType {
    RedisRestApiToken = "redis-rest-api-token",
}

export type GetProjectsContentHint3 = {
    type: GetProjectsContentHintProjectsResponseType;
    storeId: string;
};

export enum GetProjectsContentHintProjectsType {
    RedisRestApiUrl = "redis-rest-api-url",
}

export type GetProjectsContentHint2 = {
    type: GetProjectsContentHintProjectsType;
    storeId: string;
};

export enum GetProjectsContentHintType {
    RedisUrl = "redis-url",
}

export type GetProjectsContentHint1 = {
    type: GetProjectsContentHintType;
    storeId: string;
};

export type GetProjectsContentHint =
    | GetProjectsContentHint1
    | GetProjectsContentHint2
    | GetProjectsContentHint3
    | GetProjectsContentHint4
    | GetProjectsContentHint5
    | GetProjectsContentHint6
    | GetProjectsContentHint7
    | GetProjectsContentHint8
    | GetProjectsContentHint9
    | GetProjectsContentHint10
    | GetProjectsContentHint11
    | GetProjectsContentHint12
    | GetProjectsContentHint13
    | GetProjectsContentHint14;

export enum GetProjectsProjectsResponse200Type {
    FlagsSecret = "flags-secret",
}

/**
 * Similar to `contentHints`, but should not be exposed to the user.
 */
export type GetProjectsInternalContentHint = {
    type: GetProjectsProjectsResponse200Type;
    /**
     * Contains the `value` of the env variable, encrypted with a special key to make decryption possible in the subscriber Lambda.
     */
    encryptedValue: string;
};

export type GetProjectsEnv = {
    target?: Array<GetProjectsTarget1> | GetProjectsTarget2 | undefined;
    type: GetProjectsType;
    id?: string | undefined;
    key: string;
    value: string;
    configurationId?: string | null | undefined;
    createdAt?: number | undefined;
    updatedAt?: number | undefined;
    createdBy?: string | null | undefined;
    updatedBy?: string | null | undefined;
    gitBranch?: string | undefined;
    edgeConfigId?: string | null | undefined;
    edgeConfigTokenId?: string | null | undefined;
    contentHint?:
        | GetProjectsContentHint1
        | GetProjectsContentHint2
        | GetProjectsContentHint3
        | GetProjectsContentHint4
        | GetProjectsContentHint5
        | GetProjectsContentHint6
        | GetProjectsContentHint7
        | GetProjectsContentHint8
        | GetProjectsContentHint9
        | GetProjectsContentHint10
        | GetProjectsContentHint11
        | GetProjectsContentHint12
        | GetProjectsContentHint13
        | GetProjectsContentHint14
        | null
        | undefined;
    /**
     * Similar to `contentHints`, but should not be exposed to the user.
     */
    internalContentHint?: GetProjectsInternalContentHint | null | undefined;
    /**
     * Whether `value` is decrypted.
     */
    decrypted?: boolean | undefined;
    comment?: string | undefined;
    customEnvironmentId?: string | undefined;
};

export enum GetProjectsFramework {
    Blitzjs = "blitzjs",
    Nextjs = "nextjs",
    Gatsby = "gatsby",
    Remix = "remix",
    Astro = "astro",
    Hexo = "hexo",
    Eleventy = "eleventy",
    Docusaurus2 = "docusaurus-2",
    Docusaurus = "docusaurus",
    Preact = "preact",
    Solidstart1 = "solidstart-1",
    Solidstart = "solidstart",
    Dojo = "dojo",
    Ember = "ember",
    Vue = "vue",
    Scully = "scully",
    IonicAngular = "ionic-angular",
    Angular = "angular",
    Polymer = "polymer",
    Svelte = "svelte",
    Sveltekit = "sveltekit",
    Sveltekit1 = "sveltekit-1",
    IonicReact = "ionic-react",
    CreateReactApp = "create-react-app",
    Gridsome = "gridsome",
    Umijs = "umijs",
    Sapper = "sapper",
    Saber = "saber",
    Stencil = "stencil",
    Nuxtjs = "nuxtjs",
    Redwoodjs = "redwoodjs",
    Hugo = "hugo",
    Jekyll = "jekyll",
    Brunch = "brunch",
    Middleman = "middleman",
    Zola = "zola",
    Hydrogen = "hydrogen",
    Vite = "vite",
    Vitepress = "vitepress",
    Vuepress = "vuepress",
    Parcel = "parcel",
    Sanity = "sanity",
    Storybook = "storybook",
}

export type GetProjectsAliasAssigned = number | boolean;

export type GetProjectsAliasError = {
    code: string;
    message: string;
};

export type GetProjectsBuilds = {
    use: string;
    src?: string | undefined;
    dest?: string | undefined;
};

export type GetProjectsCreator = {
    email: string;
    githubLogin?: string | undefined;
    gitlabLogin?: string | undefined;
    uid: string;
    username: string;
};

export enum GetProjectsPlan {
    Pro = "pro",
    Enterprise = "enterprise",
    Hobby = "hobby",
}

export enum GetProjectsReadyState {
    Building = "BUILDING",
    Error = "ERROR",
    Initializing = "INITIALIZING",
    Queued = "QUEUED",
    Ready = "READY",
    Canceled = "CANCELED",
}

export enum GetProjectsReadySubstate {
    Staged = "STAGED",
    Promoted = "PROMOTED",
}

export enum GetProjectsProjectsType {
    Lambdas = "LAMBDAS",
}

export enum GetProjectsChecksConclusion {
    Succeeded = "succeeded",
    Failed = "failed",
    Skipped = "skipped",
    Canceled = "canceled",
}

export enum GetProjectsChecksState {
    Registered = "registered",
    Running = "running",
    Completed = "completed",
}

export type GetProjectsOidcTokenClaims = string | Array<string>;

export type GetProjectsLatestDeployments = {
    alias?: Array<string> | undefined;
    aliasAssigned?: number | boolean | null | undefined;
    aliasError?: GetProjectsAliasError | null | undefined;
    aliasFinal?: string | null | undefined;
    automaticAliases?: Array<string> | undefined;
    builds?: Array<GetProjectsBuilds> | undefined;
    connectBuildsEnabled?: boolean | undefined;
    connectConfigurationId?: string | undefined;
    createdAt: number;
    createdIn: string;
    creator: GetProjectsCreator | null;
    deploymentHostname: string;
    name: string;
    forced?: boolean | undefined;
    id: string;
    meta?: { [k: string]: string } | undefined;
    monorepoManager?: string | null | undefined;
    plan: GetProjectsPlan;
    private: boolean;
    readyState: GetProjectsReadyState;
    readySubstate?: GetProjectsReadySubstate | undefined;
    requestedAt?: number | undefined;
    target?: string | null | undefined;
    teamId?: string | null | undefined;
    type: GetProjectsProjectsType;
    url: string;
    userId: string;
    withCache?: boolean | undefined;
    checksConclusion?: GetProjectsChecksConclusion | undefined;
    checksState?: GetProjectsChecksState | undefined;
    readyAt?: number | undefined;
    buildingAt?: number | undefined;
    /**
     * Whether or not preview comments are enabled for the deployment
     */
    previewCommentsEnabled?: boolean | undefined;
    oidcTokenClaims?: { [k: string]: string | Array<string> } | undefined;
};

export enum GetProjectsLinkProjectsResponseType {
    Bitbucket = "bitbucket",
}

export type GetProjectsLinkProjectsResponseDeployHooks = {
    createdAt?: number | undefined;
    id: string;
    name: string;
    ref: string;
    url: string;
};

export type GetProjectsLink3 = {
    name?: string | undefined;
    slug?: string | undefined;
    owner?: string | undefined;
    type?: GetProjectsLinkProjectsResponseType | undefined;
    uuid?: string | undefined;
    workspaceUuid?: string | undefined;
    createdAt?: number | undefined;
    deployHooks: Array<GetProjectsLinkProjectsResponseDeployHooks>;
    gitCredentialId?: string | undefined;
    updatedAt?: number | undefined;
    sourceless?: boolean | undefined;
    productionBranch?: string | undefined;
};

export enum GetProjectsLinkProjectsType {
    Gitlab = "gitlab",
}

export type GetProjectsLinkProjectsDeployHooks = {
    createdAt?: number | undefined;
    id: string;
    name: string;
    ref: string;
    url: string;
};

export type GetProjectsLink2 = {
    projectId?: string | undefined;
    projectName?: string | undefined;
    projectNameWithNamespace?: string | undefined;
    projectNamespace?: string | undefined;
    projectUrl?: string | undefined;
    type?: GetProjectsLinkProjectsType | undefined;
    createdAt?: number | undefined;
    deployHooks: Array<GetProjectsLinkProjectsDeployHooks>;
    gitCredentialId?: string | undefined;
    updatedAt?: number | undefined;
    sourceless?: boolean | undefined;
    productionBranch?: string | undefined;
};

export enum GetProjectsLinkType {
    Github = "github",
}

export type GetProjectsLinkDeployHooks = {
    createdAt?: number | undefined;
    id: string;
    name: string;
    ref: string;
    url: string;
};

export type GetProjectsLink1 = {
    org?: string | undefined;
    repo?: string | undefined;
    repoId?: number | undefined;
    type?: GetProjectsLinkType | undefined;
    createdAt?: number | undefined;
    deployHooks: Array<GetProjectsLinkDeployHooks>;
    gitCredentialId?: string | undefined;
    updatedAt?: number | undefined;
    sourceless?: boolean | undefined;
    productionBranch?: string | undefined;
};

export type GetProjectsLink = GetProjectsLink1 | GetProjectsLink2 | GetProjectsLink3;

export enum GetProjectsNodeVersion {
    TwentyX = "20.x",
    EighteenX = "18.x",
    SixteenX = "16.x",
    FourteenX = "14.x",
    TwelveX = "12.x",
    TenX = "10.x",
    Eight10X = "8.10.x",
}

export type GetProjectsPaths = {
    value: string;
};

export type GetProjectsOptionsAllowlist = {
    paths: Array<GetProjectsPaths>;
};

export type GetProjectsPasswordProtection = {};

export enum GetProjectsDeploymentType {
    All = "all",
    Preview = "preview",
    ProdDeploymentUrlsAndAllPreviews = "prod_deployment_urls_and_all_previews",
}

export type GetProjectsSsoProtection = {
    deploymentType: GetProjectsDeploymentType;
};

export type GetProjectsTargets = string | Array<string>;

export type GetProjectsPermissions = {
    accessGroup?: Array<ACLAction> | undefined;
    aliasGlobal?: Array<ACLAction> | undefined;
    analyticsSampling?: Array<ACLAction> | undefined;
    analyticsUsage?: Array<ACLAction> | undefined;
    auditLog?: Array<ACLAction> | undefined;
    billingAddress?: Array<ACLAction> | undefined;
    billingInformation?: Array<ACLAction> | undefined;
    billingInvoice?: Array<ACLAction> | undefined;
    billingInvoiceEmailRecipient?: Array<ACLAction> | undefined;
    billingInvoiceLanguage?: Array<ACLAction> | undefined;
    billingPlan?: Array<ACLAction> | undefined;
    billingPurchaseOrder?: Array<ACLAction> | undefined;
    billingTaxId?: Array<ACLAction> | undefined;
    blob?: Array<ACLAction> | undefined;
    budget?: Array<ACLAction> | undefined;
    cacheArtifact?: Array<ACLAction> | undefined;
    cacheArtifactUsageEvent?: Array<ACLAction> | undefined;
    codeChecks?: Array<ACLAction> | undefined;
    concurrentBuilds?: Array<ACLAction> | undefined;
    connect?: Array<ACLAction> | undefined;
    connectConfiguration?: Array<ACLAction> | undefined;
    domain?: Array<ACLAction> | undefined;
    domainAcceptDelegation?: Array<ACLAction> | undefined;
    domainAuthCodes?: Array<ACLAction> | undefined;
    domainCertificate?: Array<ACLAction> | undefined;
    domainCheckConfig?: Array<ACLAction> | undefined;
    domainMove?: Array<ACLAction> | undefined;
    domainPurchase?: Array<ACLAction> | undefined;
    domainRecord?: Array<ACLAction> | undefined;
    domainTransferIn?: Array<ACLAction> | undefined;
    event?: Array<ACLAction> | undefined;
    ownEvent?: Array<ACLAction> | undefined;
    sensitiveEnvironmentVariablePolicy?: Array<ACLAction> | undefined;
    fileUpload?: Array<ACLAction> | undefined;
    gitRepository?: Array<ACLAction> | undefined;
    ipBlocking?: Array<ACLAction> | undefined;
    integration?: Array<ACLAction> | undefined;
    integrationConfiguration?: Array<ACLAction> | undefined;
    integrationConfigurationTransfer?: Array<ACLAction> | undefined;
    integrationConfigurationProjects?: Array<ACLAction> | undefined;
    integrationVercelConfigurationOverride?: Array<ACLAction> | undefined;
    integrationStore?: Array<ACLAction> | undefined;
    integrationEvent?: Array<ACLAction> | undefined;
    integrationResourceSecrets?: Array<ACLAction> | undefined;
    marketplaceBillingData?: Array<ACLAction> | undefined;
    jobGlobal?: Array<ACLAction> | undefined;
    logDrain?: Array<ACLAction> | undefined;
    monitoring?: Array<ACLAction> | undefined;
    monitoringSettings?: Array<ACLAction> | undefined;
    monitoringQuery?: Array<ACLAction> | undefined;
    monitoringChart?: Array<ACLAction> | undefined;
    monitoringAlert?: Array<ACLAction> | undefined;
    notificationDeploymentFailed?: Array<ACLAction> | undefined;
    notificationDomainConfiguration?: Array<ACLAction> | undefined;
    notificationDomainExpire?: Array<ACLAction> | undefined;
    notificationDomainMoved?: Array<ACLAction> | undefined;
    notificationDomainPurchase?: Array<ACLAction> | undefined;
    notificationDomainRenewal?: Array<ACLAction> | undefined;
    notificationDomainTransfer?: Array<ACLAction> | undefined;
    notificationDomainUnverified?: Array<ACLAction> | undefined;
    notificationMonitoringAlert?: Array<ACLAction> | undefined;
    notificationPaymentFailed?: Array<ACLAction> | undefined;
    notificationUsageAlert?: Array<ACLAction> | undefined;
    notificationCustomerBudget?: Array<ACLAction> | undefined;
    notificationStatementOfReasons?: Array<ACLAction> | undefined;
    oauth2Connection?: Array<ACLAction> | undefined;
    openTelemetryEndpoint?: Array<ACLAction> | undefined;
    paymentMethod?: Array<ACLAction> | undefined;
    permissions?: Array<ACLAction> | undefined;
    postgres?: Array<ACLAction> | undefined;
    previewDeploymentSuffix?: Array<ACLAction> | undefined;
    proTrialOnboarding?: Array<ACLAction> | undefined;
    seawallConfig?: Array<ACLAction> | undefined;
    sharedEnvVars?: Array<ACLAction> | undefined;
    sharedEnvVarsProduction?: Array<ACLAction> | undefined;
    space?: Array<ACLAction> | undefined;
    spaceRun?: Array<ACLAction> | undefined;
    passwordProtectionInvoiceItem?: Array<ACLAction> | undefined;
    rateLimit?: Array<ACLAction> | undefined;
    redis?: Array<ACLAction> | undefined;
    repository?: Array<ACLAction> | undefined;
    remoteCaching?: Array<ACLAction> | undefined;
    samlConfig?: Array<ACLAction> | undefined;
    secret?: Array<ACLAction> | undefined;
    redisStoreTokenSet?: Array<ACLAction> | undefined;
    blobStoreTokenSet?: Array<ACLAction> | undefined;
    postgresStoreTokenSet?: Array<ACLAction> | undefined;
    integrationStoreTokenSet?: Array<ACLAction> | undefined;
    supportCase?: Array<ACLAction> | undefined;
    supportCaseComment?: Array<ACLAction> | undefined;
    dataCacheBillingSettings?: Array<ACLAction> | undefined;
    team?: Array<ACLAction> | undefined;
    teamAccessRequest?: Array<ACLAction> | undefined;
    teamFellowMembership?: Array<ACLAction> | undefined;
    teamInvite?: Array<ACLAction> | undefined;
    teamInviteCode?: Array<ACLAction> | undefined;
    teamJoin?: Array<ACLAction> | undefined;
    teamOwnMembership?: Array<ACLAction> | undefined;
    teamOwnMembershipDisconnectSAML?: Array<ACLAction> | undefined;
    token?: Array<ACLAction> | undefined;
    usage?: Array<ACLAction> | undefined;
    usageCycle?: Array<ACLAction> | undefined;
    user?: Array<ACLAction> | undefined;
    userConnection?: Array<ACLAction> | undefined;
    webAnalyticsPlan?: Array<ACLAction> | undefined;
    webAuthn?: Array<ACLAction> | undefined;
    edgeConfig?: Array<ACLAction> | undefined;
    edgeConfigItem?: Array<ACLAction> | undefined;
    edgeConfigSchema?: Array<ACLAction> | undefined;
    edgeConfigToken?: Array<ACLAction> | undefined;
    webhook?: Array<ACLAction> | undefined;
    webhookEvent?: Array<ACLAction> | undefined;
    endpointVerification?: Array<ACLAction> | undefined;
    projectTransferIn?: Array<ACLAction> | undefined;
    oauth2Application?: Array<ACLAction> | undefined;
    aliasProject?: Array<ACLAction> | undefined;
    aliasProtectionBypass?: Array<ACLAction> | undefined;
    productionAliasProtectionBypass?: Array<ACLAction> | undefined;
    connectConfigurationLink?: Array<ACLAction> | undefined;
    dataCacheNamespace?: Array<ACLAction> | undefined;
    deployment?: Array<ACLAction> | undefined;
    deploymentCheck?: Array<ACLAction> | undefined;
    deploymentCheckPreview?: Array<ACLAction> | undefined;
    deploymentCheckReRunFromProductionBranch?: Array<ACLAction> | undefined;
    deploymentProductionGit?: Array<ACLAction> | undefined;
    deploymentPreview?: Array<ACLAction> | undefined;
    deploymentPrivate?: Array<ACLAction> | undefined;
    deploymentPromote?: Array<ACLAction> | undefined;
    deploymentRollback?: Array<ACLAction> | undefined;
    environments?: Array<ACLAction> | undefined;
    logs?: Array<ACLAction> | undefined;
    logsPreset?: Array<ACLAction> | undefined;
    passwordProtection?: Array<ACLAction> | undefined;
    optionsAllowlist?: Array<ACLAction> | undefined;
    job?: Array<ACLAction> | undefined;
    project?: Array<ACLAction> | undefined;
    projectAccessGroup?: Array<ACLAction> | undefined;
    projectAnalyticsSampling?: Array<ACLAction> | undefined;
    projectDeploymentHook?: Array<ACLAction> | undefined;
    projectDomain?: Array<ACLAction> | undefined;
    projectDomainMove?: Array<ACLAction> | undefined;
    projectDomainCheckConfig?: Array<ACLAction> | undefined;
    projectEnvVars?: Array<ACLAction> | undefined;
    projectEnvVarsProduction?: Array<ACLAction> | undefined;
    projectEnvVarsUnownedByIntegration?: Array<ACLAction> | undefined;
    projectId?: Array<ACLAction> | undefined;
    projectIntegrationConfiguration?: Array<ACLAction> | undefined;
    projectLink?: Array<ACLAction> | undefined;
    projectMember?: Array<ACLAction> | undefined;
    projectMonitoring?: Array<ACLAction> | undefined;
    projectPermissions?: Array<ACLAction> | undefined;
    projectProductionBranch?: Array<ACLAction> | undefined;
    projectTransfer?: Array<ACLAction> | undefined;
    projectTransferOut?: Array<ACLAction> | undefined;
    projectProtectionBypass?: Array<ACLAction> | undefined;
    projectUsage?: Array<ACLAction> | undefined;
    projectAnalyticsUsage?: Array<ACLAction> | undefined;
    projectSupportCase?: Array<ACLAction> | undefined;
    projectSupportCaseComment?: Array<ACLAction> | undefined;
    projectDeploymentExpiration?: Array<ACLAction> | undefined;
    skewProtection?: Array<ACLAction> | undefined;
    analytics?: Array<ACLAction> | undefined;
    trustedIps?: Array<ACLAction> | undefined;
    webAnalytics?: Array<ACLAction> | undefined;
    sharedEnvVarConnection?: Array<ACLAction> | undefined;
};

export type GetProjectsLastRollbackTarget = {};

export enum GetProjectsJobStatus {
    Succeeded = "succeeded",
    Failed = "failed",
    Skipped = "skipped",
    Pending = "pending",
    InProgress = "in-progress",
}

export enum GetProjectsProjectsResponseType {
    Promote = "promote",
    Rollback = "rollback",
}

export type GetProjectsLastAliasRequest = {
    fromDeploymentId: string;
    toDeploymentId: string;
    jobStatus: GetProjectsJobStatus;
    requestedAt: number;
    type: GetProjectsProjectsResponseType;
};

export enum GetProjectsScope {
    AutomationBypass = "automation-bypass",
}

export type GetProjectsProtectionBypass = {
    createdAt: number;
    createdBy: string;
    scope: GetProjectsScope;
};

export enum GetProjectsTrustedIpsProjectsDeploymentType {
    All = "all",
    Preview = "preview",
    ProdDeploymentUrlsAndAllPreviews = "prod_deployment_urls_and_all_previews",
    Production = "production",
}

export type GetProjectsTrustedIps2 = {
    deploymentType: GetProjectsTrustedIpsProjectsDeploymentType;
};

export enum GetProjectsTrustedIpsDeploymentType {
    All = "all",
    Preview = "preview",
    ProdDeploymentUrlsAndAllPreviews = "prod_deployment_urls_and_all_previews",
    Production = "production",
}

export type GetProjectsTrustedIpsAddresses = {
    value: string;
    note?: string | undefined;
};

export enum GetProjectsTrustedIpsProtectionMode {
    Additional = "additional",
    Exclusive = "exclusive",
}

export type GetProjectsTrustedIps1 = {
    deploymentType: GetProjectsTrustedIpsDeploymentType;
    addresses: Array<GetProjectsTrustedIpsAddresses>;
    protectionMode: GetProjectsTrustedIpsProtectionMode;
};

export type GetProjectsTrustedIps = GetProjectsTrustedIps2 | GetProjectsTrustedIps1;

export type GetProjectsGitComments = {
    /**
     * Whether the Vercel bot should comment on PRs
     */
    onPullRequest: boolean;
    /**
     * Whether the Vercel bot should comment on commits
     */
    onCommit: boolean;
};

export type GetProjectsWebAnalytics = {
    id: string;
    disabledAt?: number | undefined;
    canceledAt?: number | undefined;
    enabledAt?: number | undefined;
    hasData?: boolean | undefined;
};

export type GetProjectsSrc2 = {
    re?: string | undefined;
    eq?: string | undefined;
    neq?: string | undefined;
    inc?: Array<string> | undefined;
    ninc?: Array<string> | undefined;
    pre?: string | undefined;
    suf?: string | undefined;
    gt?: number | undefined;
    gte?: number | undefined;
    lt?: number | undefined;
    lte?: number | undefined;
};

export type GetProjectsSrc = GetProjectsSrc2 | string;

export enum GetProjectsProjectsResponse200ApplicationJSONType {
    Host = "host",
    Method = "method",
    Path = "path",
    Header = "header",
    Cookie = "cookie",
    Query = "query",
    IpAddress = "ip_address",
    Protocol = "protocol",
    Scheme = "scheme",
    Region = "region",
}

export type GetProjectsValue2 = {
    re?: string | undefined;
    eq?: string | undefined;
    neq?: string | undefined;
    inc?: Array<string> | undefined;
    ninc?: Array<string> | undefined;
    pre?: string | undefined;
    suf?: string | undefined;
    gt?: number | undefined;
    gte?: number | undefined;
    lt?: number | undefined;
    lte?: number | undefined;
};

export type GetProjectsValue = GetProjectsValue2 | string;

export type GetProjectsHas = {
    type: GetProjectsProjectsResponse200ApplicationJSONType;
    key?: string | undefined;
    value?: GetProjectsValue2 | string | undefined;
};

export enum GetProjectsProjectsResponse200ApplicationJSONResponseBodyType {
    Host = "host",
    Method = "method",
    Path = "path",
    Header = "header",
    Cookie = "cookie",
    Query = "query",
    IpAddress = "ip_address",
    Protocol = "protocol",
    Scheme = "scheme",
    Region = "region",
}

export type GetProjectsValueProjects2 = {
    re?: string | undefined;
    eq?: string | undefined;
    neq?: string | undefined;
    inc?: Array<string> | undefined;
    ninc?: Array<string> | undefined;
    pre?: string | undefined;
    suf?: string | undefined;
    gt?: number | undefined;
    gte?: number | undefined;
    lt?: number | undefined;
    lte?: number | undefined;
};

export type GetProjectsProjectsValue = GetProjectsValueProjects2 | string;

export type GetProjectsMissing = {
    type: GetProjectsProjectsResponse200ApplicationJSONResponseBodyType;
    key?: string | undefined;
    value?: GetProjectsValueProjects2 | string | undefined;
};

export enum GetProjectsHandle {
    Init = "init",
    Finalize = "finalize",
}

export enum GetProjectsAction {
    Deny = "deny",
    Challenge = "challenge",
    Log = "log",
    Bypass = "bypass",
    RateLimit = "rate_limit",
}

export enum GetProjectsAlgo {
    FixedWindow = "fixed_window",
    TokenBucket = "token_bucket",
}

export type GetProjectsErl = {
    algo: GetProjectsAlgo;
    window: number;
    limit: number;
    keys: Array<string>;
};

export type GetProjectsMitigate = {
    action: GetProjectsAction;
    ruleId: string;
    erl?: GetProjectsErl | undefined;
};

export type GetProjectsFirewallRoutes = {
    src?: GetProjectsSrc2 | string | undefined;
    has?: Array<GetProjectsHas> | undefined;
    missing?: Array<GetProjectsMissing> | undefined;
    dest?: string | undefined;
    status?: number | undefined;
    handle?: GetProjectsHandle | undefined;
    mitigate?: GetProjectsMitigate | undefined;
};

export type GetProjectsSecurity = {
    attackModeEnabled?: boolean | undefined;
    attackModeUpdatedAt?: number | undefined;
    firewallEnabled?: boolean | undefined;
    firewallUpdatedAt?: number | undefined;
    attackModeActiveUntil?: number | null | undefined;
    firewallConfigVersion?: number | undefined;
    firewallRoutes?: Array<GetProjectsFirewallRoutes> | undefined;
    firewallSeawallEnabled?: boolean | undefined;
    ja3Enabled?: boolean | undefined;
    ja4Enabled?: boolean | undefined;
};

export type GetProjectsOidcTokenConfig = {
    enabled: boolean;
};

export type GetProjectsProjects = {
    accountId: string;
    analytics?: GetProjectsAnalytics | undefined;
    speedInsights?: GetProjectsSpeedInsights | undefined;
    autoExposeSystemEnvs?: boolean | undefined;
    autoAssignCustomDomains?: boolean | undefined;
    autoAssignCustomDomainsUpdatedBy?: string | undefined;
    buildCommand?: string | null | undefined;
    commandForIgnoringBuildStep?: string | null | undefined;
    connectConfigurationId?: string | null | undefined;
    connectBuildsEnabled?: boolean | undefined;
    createdAt?: number | undefined;
    customerSupportCodeVisibility?: boolean | undefined;
    crons?: GetProjectsCrons | undefined;
    dataCache?: GetProjectsDataCache | undefined;
    devCommand?: string | null | undefined;
    directoryListing: boolean;
    installCommand?: string | null | undefined;
    env?: Array<GetProjectsEnv> | undefined;
    framework?: GetProjectsFramework | null | undefined;
    gitForkProtection?: boolean | undefined;
    gitLFS?: boolean | undefined;
    id: string;
    latestDeployments?: Array<GetProjectsLatestDeployments> | undefined;
    link?: GetProjectsLink1 | GetProjectsLink2 | GetProjectsLink3 | undefined;
    name: string;
    nodeVersion: GetProjectsNodeVersion;
    optionsAllowlist?: GetProjectsOptionsAllowlist | null | undefined;
    outputDirectory?: string | null | undefined;
    passiveConnectConfigurationId?: string | null | undefined;
    passwordProtection?: GetProjectsPasswordProtection | null | undefined;
    productionDeploymentsFastLane?: boolean | undefined;
    publicSource?: boolean | null | undefined;
    rootDirectory?: string | null | undefined;
    serverlessFunctionRegion?: string | null | undefined;
    serverlessFunctionZeroConfigFailover?: boolean | undefined;
    skewProtectionBoundaryAt?: number | undefined;
    skewProtectionMaxAge?: number | undefined;
    skipGitConnectDuringLink?: boolean | undefined;
    sourceFilesOutsideRootDirectory?: boolean | undefined;
    ssoProtection?: GetProjectsSsoProtection | null | undefined;
    targets?: { [k: string]: string | Array<string> } | undefined;
    transferCompletedAt?: number | undefined;
    transferStartedAt?: number | undefined;
    transferToAccountId?: string | undefined;
    transferredFromAccountId?: string | undefined;
    updatedAt?: number | undefined;
    live?: boolean | undefined;
    enablePreviewFeedback?: boolean | null | undefined;
    permissions?: GetProjectsPermissions | undefined;
    lastRollbackTarget?: GetProjectsLastRollbackTarget | null | undefined;
    lastAliasRequest?: GetProjectsLastAliasRequest | null | undefined;
    hasFloatingAliases?: boolean | undefined;
    protectionBypass?: { [k: string]: GetProjectsProtectionBypass } | undefined;
    hasActiveBranches?: boolean | undefined;
    trustedIps?: GetProjectsTrustedIps2 | GetProjectsTrustedIps1 | null | undefined;
    gitComments?: GetProjectsGitComments | undefined;
    paused?: boolean | undefined;
    concurrencyBucketName?: string | undefined;
    webAnalytics?: GetProjectsWebAnalytics | undefined;
    security?: GetProjectsSecurity | undefined;
    oidcTokenConfig?: GetProjectsOidcTokenConfig | undefined;
};

/**
 * The paginated list of projects
 */
export type GetProjectsResponseBody = {
    projects: Array<GetProjectsProjects>;
    /**
     * This object contains information related to the pagination of the current request, including the necessary parameters to get the next or previous page of data.
     */
    pagination: Pagination;
};

/** @internal */
export namespace GitForkProtection$ {
    export const inboundSchema = z.nativeEnum(GitForkProtection);
    export const outboundSchema = inboundSchema;
}

/** @internal */
export namespace GetProjectsRequest$ {
    export const inboundSchema: z.ZodType<GetProjectsRequest, z.ZodTypeDef, unknown> = z.object({
        from: z.string().optional(),
        gitForkProtection: GitForkProtection$.inboundSchema.optional(),
        limit: z.string().optional(),
        search: z.string().optional(),
        repo: z.string().optional(),
        repoId: z.string().optional(),
        repoUrl: z.string().optional(),
        excludeRepos: z.string().optional(),
        edgeConfigId: z.string().optional(),
        edgeConfigTokenId: z.string().optional(),
        deprecated: z.boolean().optional(),
        teamId: z.string().optional(),
        slug: z.string().optional(),
    });

    export type Outbound = {
        from?: string | undefined;
        gitForkProtection?: string | undefined;
        limit?: string | undefined;
        search?: string | undefined;
        repo?: string | undefined;
        repoId?: string | undefined;
        repoUrl?: string | undefined;
        excludeRepos?: string | undefined;
        edgeConfigId?: string | undefined;
        edgeConfigTokenId?: string | undefined;
        deprecated?: boolean | undefined;
        teamId?: string | undefined;
        slug?: string | undefined;
    };

    export const outboundSchema: z.ZodType<Outbound, z.ZodTypeDef, GetProjectsRequest> = z.object({
        from: z.string().optional(),
        gitForkProtection: GitForkProtection$.outboundSchema.optional(),
        limit: z.string().optional(),
        search: z.string().optional(),
        repo: z.string().optional(),
        repoId: z.string().optional(),
        repoUrl: z.string().optional(),
        excludeRepos: z.string().optional(),
        edgeConfigId: z.string().optional(),
        edgeConfigTokenId: z.string().optional(),
        deprecated: z.boolean().optional(),
        teamId: z.string().optional(),
        slug: z.string().optional(),
    });
}

/** @internal */
export namespace GetProjectsAnalytics$ {
    export const inboundSchema: z.ZodType<GetProjectsAnalytics, z.ZodTypeDef, unknown> = z.object({
        id: z.string(),
        canceledAt: z.nullable(z.number()).optional(),
        disabledAt: z.number(),
        enabledAt: z.number(),
        paidAt: z.number().optional(),
        sampleRatePercent: z.nullable(z.number()).optional(),
        spendLimitInDollars: z.nullable(z.number()).optional(),
    });

    export type Outbound = {
        id: string;
        canceledAt?: number | null | undefined;
        disabledAt: number;
        enabledAt: number;
        paidAt?: number | undefined;
        sampleRatePercent?: number | null | undefined;
        spendLimitInDollars?: number | null | undefined;
    };

    export const outboundSchema: z.ZodType<Outbound, z.ZodTypeDef, GetProjectsAnalytics> = z.object(
        {
            id: z.string(),
            canceledAt: z.nullable(z.number()).optional(),
            disabledAt: z.number(),
            enabledAt: z.number(),
            paidAt: z.number().optional(),
            sampleRatePercent: z.nullable(z.number()).optional(),
            spendLimitInDollars: z.nullable(z.number()).optional(),
        }
    );
}

/** @internal */
export namespace GetProjectsSpeedInsights$ {
    export const inboundSchema: z.ZodType<GetProjectsSpeedInsights, z.ZodTypeDef, unknown> =
        z.object({
            id: z.string(),
            enabledAt: z.number().optional(),
            disabledAt: z.number().optional(),
            canceledAt: z.number().optional(),
            hasData: z.boolean().optional(),
            paidAt: z.number().optional(),
        });

    export type Outbound = {
        id: string;
        enabledAt?: number | undefined;
        disabledAt?: number | undefined;
        canceledAt?: number | undefined;
        hasData?: boolean | undefined;
        paidAt?: number | undefined;
    };

    export const outboundSchema: z.ZodType<Outbound, z.ZodTypeDef, GetProjectsSpeedInsights> =
        z.object({
            id: z.string(),
            enabledAt: z.number().optional(),
            disabledAt: z.number().optional(),
            canceledAt: z.number().optional(),
            hasData: z.boolean().optional(),
            paidAt: z.number().optional(),
        });
}

/** @internal */
export namespace GetProjectsDefinitions$ {
    export const inboundSchema: z.ZodType<GetProjectsDefinitions, z.ZodTypeDef, unknown> = z.object(
        {
            host: z.string(),
            path: z.string(),
            schedule: z.string(),
        }
    );

    export type Outbound = {
        host: string;
        path: string;
        schedule: string;
    };

    export const outboundSchema: z.ZodType<Outbound, z.ZodTypeDef, GetProjectsDefinitions> =
        z.object({
            host: z.string(),
            path: z.string(),
            schedule: z.string(),
        });
}

/** @internal */
export namespace GetProjectsCrons$ {
    export const inboundSchema: z.ZodType<GetProjectsCrons, z.ZodTypeDef, unknown> = z.object({
        enabledAt: z.number(),
        disabledAt: z.nullable(z.number()),
        updatedAt: z.number(),
        deploymentId: z.nullable(z.string()),
        definitions: z.array(z.lazy(() => GetProjectsDefinitions$.inboundSchema)),
    });

    export type Outbound = {
        enabledAt: number;
        disabledAt: number | null;
        updatedAt: number;
        deploymentId: string | null;
        definitions: Array<GetProjectsDefinitions$.Outbound>;
    };

    export const outboundSchema: z.ZodType<Outbound, z.ZodTypeDef, GetProjectsCrons> = z.object({
        enabledAt: z.number(),
        disabledAt: z.nullable(z.number()),
        updatedAt: z.number(),
        deploymentId: z.nullable(z.string()),
        definitions: z.array(z.lazy(() => GetProjectsDefinitions$.outboundSchema)),
    });
}

/** @internal */
export namespace GetProjectsDataCache$ {
    export const inboundSchema: z.ZodType<GetProjectsDataCache, z.ZodTypeDef, unknown> = z.object({
        userDisabled: z.boolean(),
        storageSizeBytes: z.nullable(z.number()).optional(),
        unlimited: z.boolean().optional(),
    });

    export type Outbound = {
        userDisabled: boolean;
        storageSizeBytes?: number | null | undefined;
        unlimited?: boolean | undefined;
    };

    export const outboundSchema: z.ZodType<Outbound, z.ZodTypeDef, GetProjectsDataCache> = z.object(
        {
            userDisabled: z.boolean(),
            storageSizeBytes: z.nullable(z.number()).optional(),
            unlimited: z.boolean().optional(),
        }
    );
}

/** @internal */
export namespace GetProjectsTarget2$ {
    export const inboundSchema = z.nativeEnum(GetProjectsTarget2);
    export const outboundSchema = inboundSchema;
}

/** @internal */
export namespace GetProjectsTarget1$ {
    export const inboundSchema = z.nativeEnum(GetProjectsTarget1);
    export const outboundSchema = inboundSchema;
}

/** @internal */
export namespace GetProjectsTarget$ {
    export const inboundSchema: z.ZodType<GetProjectsTarget, z.ZodTypeDef, unknown> = z.union([
        z.array(GetProjectsTarget1$.inboundSchema),
        GetProjectsTarget2$.inboundSchema,
    ]);

    export type Outbound = Array<string> | string;
    export const outboundSchema: z.ZodType<Outbound, z.ZodTypeDef, GetProjectsTarget> = z.union([
        z.array(GetProjectsTarget1$.outboundSchema),
        GetProjectsTarget2$.outboundSchema,
    ]);
}

/** @internal */
export namespace GetProjectsType$ {
    export const inboundSchema = z.nativeEnum(GetProjectsType);
    export const outboundSchema = inboundSchema;
}

/** @internal */
export namespace GetProjectsContentHintProjectsResponse200ApplicationJSONResponseBodyProjectsEnv14Type$ {
    export const inboundSchema = z.nativeEnum(
        GetProjectsContentHintProjectsResponse200ApplicationJSONResponseBodyProjectsEnv14Type
    );
    export const outboundSchema = inboundSchema;
}

/** @internal */
export namespace GetProjectsContentHint14$ {
    export const inboundSchema: z.ZodType<GetProjectsContentHint14, z.ZodTypeDef, unknown> =
        z.object({
            type: GetProjectsContentHintProjectsResponse200ApplicationJSONResponseBodyProjectsEnv14Type$.inboundSchema,
            storeId: z.string(),
        });

    export type Outbound = {
        type: string;
        storeId: string;
    };

    export const outboundSchema: z.ZodType<Outbound, z.ZodTypeDef, GetProjectsContentHint14> =
        z.object({
            type: GetProjectsContentHintProjectsResponse200ApplicationJSONResponseBodyProjectsEnv14Type$.outboundSchema,
            storeId: z.string(),
        });
}

/** @internal */
export namespace GetProjectsContentHintProjectsResponse200ApplicationJSONResponseBodyProjectsEnv13Type$ {
    export const inboundSchema = z.nativeEnum(
        GetProjectsContentHintProjectsResponse200ApplicationJSONResponseBodyProjectsEnv13Type
    );
    export const outboundSchema = inboundSchema;
}

/** @internal */
export namespace GetProjectsContentHint13$ {
    export const inboundSchema: z.ZodType<GetProjectsContentHint13, z.ZodTypeDef, unknown> =
        z.object({
            type: GetProjectsContentHintProjectsResponse200ApplicationJSONResponseBodyProjectsEnv13Type$.inboundSchema,
            storeId: z.string(),
        });

    export type Outbound = {
        type: string;
        storeId: string;
    };

    export const outboundSchema: z.ZodType<Outbound, z.ZodTypeDef, GetProjectsContentHint13> =
        z.object({
            type: GetProjectsContentHintProjectsResponse200ApplicationJSONResponseBodyProjectsEnv13Type$.outboundSchema,
            storeId: z.string(),
        });
}

/** @internal */
export namespace GetProjectsContentHintProjectsResponse200ApplicationJSONResponseBodyProjectsEnv12Type$ {
    export const inboundSchema = z.nativeEnum(
        GetProjectsContentHintProjectsResponse200ApplicationJSONResponseBodyProjectsEnv12Type
    );
    export const outboundSchema = inboundSchema;
}

/** @internal */
export namespace GetProjectsContentHint12$ {
    export const inboundSchema: z.ZodType<GetProjectsContentHint12, z.ZodTypeDef, unknown> =
        z.object({
            type: GetProjectsContentHintProjectsResponse200ApplicationJSONResponseBodyProjectsEnv12Type$.inboundSchema,
            storeId: z.string(),
        });

    export type Outbound = {
        type: string;
        storeId: string;
    };

    export const outboundSchema: z.ZodType<Outbound, z.ZodTypeDef, GetProjectsContentHint12> =
        z.object({
            type: GetProjectsContentHintProjectsResponse200ApplicationJSONResponseBodyProjectsEnv12Type$.outboundSchema,
            storeId: z.string(),
        });
}

/** @internal */
export namespace GetProjectsContentHintProjectsResponse200ApplicationJSONResponseBodyProjectsEnv11Type$ {
    export const inboundSchema = z.nativeEnum(
        GetProjectsContentHintProjectsResponse200ApplicationJSONResponseBodyProjectsEnv11Type
    );
    export const outboundSchema = inboundSchema;
}

/** @internal */
export namespace GetProjectsContentHint11$ {
    export const inboundSchema: z.ZodType<GetProjectsContentHint11, z.ZodTypeDef, unknown> =
        z.object({
            type: GetProjectsContentHintProjectsResponse200ApplicationJSONResponseBodyProjectsEnv11Type$.inboundSchema,
            storeId: z.string(),
        });

    export type Outbound = {
        type: string;
        storeId: string;
    };

    export const outboundSchema: z.ZodType<Outbound, z.ZodTypeDef, GetProjectsContentHint11> =
        z.object({
            type: GetProjectsContentHintProjectsResponse200ApplicationJSONResponseBodyProjectsEnv11Type$.outboundSchema,
            storeId: z.string(),
        });
}

/** @internal */
export namespace GetProjectsContentHintProjectsResponse200ApplicationJSONResponseBodyProjectsEnv10Type$ {
    export const inboundSchema = z.nativeEnum(
        GetProjectsContentHintProjectsResponse200ApplicationJSONResponseBodyProjectsEnv10Type
    );
    export const outboundSchema = inboundSchema;
}

/** @internal */
export namespace GetProjectsContentHint10$ {
    export const inboundSchema: z.ZodType<GetProjectsContentHint10, z.ZodTypeDef, unknown> =
        z.object({
            type: GetProjectsContentHintProjectsResponse200ApplicationJSONResponseBodyProjectsEnv10Type$.inboundSchema,
            storeId: z.string(),
        });

    export type Outbound = {
        type: string;
        storeId: string;
    };

    export const outboundSchema: z.ZodType<Outbound, z.ZodTypeDef, GetProjectsContentHint10> =
        z.object({
            type: GetProjectsContentHintProjectsResponse200ApplicationJSONResponseBodyProjectsEnv10Type$.outboundSchema,
            storeId: z.string(),
        });
}

/** @internal */
export namespace GetProjectsContentHintProjectsResponse200ApplicationJSONResponseBodyProjectsEnv9Type$ {
    export const inboundSchema = z.nativeEnum(
        GetProjectsContentHintProjectsResponse200ApplicationJSONResponseBodyProjectsEnv9Type
    );
    export const outboundSchema = inboundSchema;
}

/** @internal */
export namespace GetProjectsContentHint9$ {
    export const inboundSchema: z.ZodType<GetProjectsContentHint9, z.ZodTypeDef, unknown> =
        z.object({
            type: GetProjectsContentHintProjectsResponse200ApplicationJSONResponseBodyProjectsEnv9Type$.inboundSchema,
            storeId: z.string(),
        });

    export type Outbound = {
        type: string;
        storeId: string;
    };

    export const outboundSchema: z.ZodType<Outbound, z.ZodTypeDef, GetProjectsContentHint9> =
        z.object({
            type: GetProjectsContentHintProjectsResponse200ApplicationJSONResponseBodyProjectsEnv9Type$.outboundSchema,
            storeId: z.string(),
        });
}

/** @internal */
export namespace GetProjectsContentHintProjectsResponse200ApplicationJSONResponseBodyProjectsEnvType$ {
    export const inboundSchema = z.nativeEnum(
        GetProjectsContentHintProjectsResponse200ApplicationJSONResponseBodyProjectsEnvType
    );
    export const outboundSchema = inboundSchema;
}

/** @internal */
export namespace GetProjectsContentHint8$ {
    export const inboundSchema: z.ZodType<GetProjectsContentHint8, z.ZodTypeDef, unknown> =
        z.object({
            type: GetProjectsContentHintProjectsResponse200ApplicationJSONResponseBodyProjectsEnvType$.inboundSchema,
            storeId: z.string(),
        });

    export type Outbound = {
        type: string;
        storeId: string;
    };

    export const outboundSchema: z.ZodType<Outbound, z.ZodTypeDef, GetProjectsContentHint8> =
        z.object({
            type: GetProjectsContentHintProjectsResponse200ApplicationJSONResponseBodyProjectsEnvType$.outboundSchema,
            storeId: z.string(),
        });
}

/** @internal */
export namespace GetProjectsContentHintProjectsResponse200ApplicationJSONResponseBodyProjectsType$ {
    export const inboundSchema = z.nativeEnum(
        GetProjectsContentHintProjectsResponse200ApplicationJSONResponseBodyProjectsType
    );
    export const outboundSchema = inboundSchema;
}

/** @internal */
export namespace GetProjectsContentHint7$ {
    export const inboundSchema: z.ZodType<GetProjectsContentHint7, z.ZodTypeDef, unknown> =
        z.object({
            type: GetProjectsContentHintProjectsResponse200ApplicationJSONResponseBodyProjectsType$.inboundSchema,
            storeId: z.string(),
        });

    export type Outbound = {
        type: string;
        storeId: string;
    };

    export const outboundSchema: z.ZodType<Outbound, z.ZodTypeDef, GetProjectsContentHint7> =
        z.object({
            type: GetProjectsContentHintProjectsResponse200ApplicationJSONResponseBodyProjectsType$.outboundSchema,
            storeId: z.string(),
        });
}

/** @internal */
export namespace GetProjectsContentHintProjectsResponse200ApplicationJSONResponseBodyType$ {
    export const inboundSchema = z.nativeEnum(
        GetProjectsContentHintProjectsResponse200ApplicationJSONResponseBodyType
    );
    export const outboundSchema = inboundSchema;
}

/** @internal */
export namespace GetProjectsContentHint6$ {
    export const inboundSchema: z.ZodType<GetProjectsContentHint6, z.ZodTypeDef, unknown> =
        z.object({
            type: GetProjectsContentHintProjectsResponse200ApplicationJSONResponseBodyType$.inboundSchema,
            storeId: z.string(),
        });

    export type Outbound = {
        type: string;
        storeId: string;
    };

    export const outboundSchema: z.ZodType<Outbound, z.ZodTypeDef, GetProjectsContentHint6> =
        z.object({
            type: GetProjectsContentHintProjectsResponse200ApplicationJSONResponseBodyType$.outboundSchema,
            storeId: z.string(),
        });
}

/** @internal */
export namespace GetProjectsContentHintProjectsResponse200ApplicationJSONType$ {
    export const inboundSchema = z.nativeEnum(
        GetProjectsContentHintProjectsResponse200ApplicationJSONType
    );
    export const outboundSchema = inboundSchema;
}

/** @internal */
export namespace GetProjectsContentHint5$ {
    export const inboundSchema: z.ZodType<GetProjectsContentHint5, z.ZodTypeDef, unknown> =
        z.object({
            type: GetProjectsContentHintProjectsResponse200ApplicationJSONType$.inboundSchema,
            storeId: z.string(),
        });

    export type Outbound = {
        type: string;
        storeId: string;
    };

    export const outboundSchema: z.ZodType<Outbound, z.ZodTypeDef, GetProjectsContentHint5> =
        z.object({
            type: GetProjectsContentHintProjectsResponse200ApplicationJSONType$.outboundSchema,
            storeId: z.string(),
        });
}

/** @internal */
export namespace GetProjectsContentHintProjectsResponse200Type$ {
    export const inboundSchema = z.nativeEnum(GetProjectsContentHintProjectsResponse200Type);
    export const outboundSchema = inboundSchema;
}

/** @internal */
export namespace GetProjectsContentHint4$ {
    export const inboundSchema: z.ZodType<GetProjectsContentHint4, z.ZodTypeDef, unknown> =
        z.object({
            type: GetProjectsContentHintProjectsResponse200Type$.inboundSchema,
            storeId: z.string(),
        });

    export type Outbound = {
        type: string;
        storeId: string;
    };

    export const outboundSchema: z.ZodType<Outbound, z.ZodTypeDef, GetProjectsContentHint4> =
        z.object({
            type: GetProjectsContentHintProjectsResponse200Type$.outboundSchema,
            storeId: z.string(),
        });
}

/** @internal */
export namespace GetProjectsContentHintProjectsResponseType$ {
    export const inboundSchema = z.nativeEnum(GetProjectsContentHintProjectsResponseType);
    export const outboundSchema = inboundSchema;
}

/** @internal */
export namespace GetProjectsContentHint3$ {
    export const inboundSchema: z.ZodType<GetProjectsContentHint3, z.ZodTypeDef, unknown> =
        z.object({
            type: GetProjectsContentHintProjectsResponseType$.inboundSchema,
            storeId: z.string(),
        });

    export type Outbound = {
        type: string;
        storeId: string;
    };

    export const outboundSchema: z.ZodType<Outbound, z.ZodTypeDef, GetProjectsContentHint3> =
        z.object({
            type: GetProjectsContentHintProjectsResponseType$.outboundSchema,
            storeId: z.string(),
        });
}

/** @internal */
export namespace GetProjectsContentHintProjectsType$ {
    export const inboundSchema = z.nativeEnum(GetProjectsContentHintProjectsType);
    export const outboundSchema = inboundSchema;
}

/** @internal */
export namespace GetProjectsContentHint2$ {
    export const inboundSchema: z.ZodType<GetProjectsContentHint2, z.ZodTypeDef, unknown> =
        z.object({
            type: GetProjectsContentHintProjectsType$.inboundSchema,
            storeId: z.string(),
        });

    export type Outbound = {
        type: string;
        storeId: string;
    };

    export const outboundSchema: z.ZodType<Outbound, z.ZodTypeDef, GetProjectsContentHint2> =
        z.object({
            type: GetProjectsContentHintProjectsType$.outboundSchema,
            storeId: z.string(),
        });
}

/** @internal */
export namespace GetProjectsContentHintType$ {
    export const inboundSchema = z.nativeEnum(GetProjectsContentHintType);
    export const outboundSchema = inboundSchema;
}

/** @internal */
export namespace GetProjectsContentHint1$ {
    export const inboundSchema: z.ZodType<GetProjectsContentHint1, z.ZodTypeDef, unknown> =
        z.object({
            type: GetProjectsContentHintType$.inboundSchema,
            storeId: z.string(),
        });

    export type Outbound = {
        type: string;
        storeId: string;
    };

    export const outboundSchema: z.ZodType<Outbound, z.ZodTypeDef, GetProjectsContentHint1> =
        z.object({
            type: GetProjectsContentHintType$.outboundSchema,
            storeId: z.string(),
        });
}

/** @internal */
export namespace GetProjectsContentHint$ {
    export const inboundSchema: z.ZodType<GetProjectsContentHint, z.ZodTypeDef, unknown> = z.union([
        z.lazy(() => GetProjectsContentHint1$.inboundSchema),
        z.lazy(() => GetProjectsContentHint2$.inboundSchema),
        z.lazy(() => GetProjectsContentHint3$.inboundSchema),
        z.lazy(() => GetProjectsContentHint4$.inboundSchema),
        z.lazy(() => GetProjectsContentHint5$.inboundSchema),
        z.lazy(() => GetProjectsContentHint6$.inboundSchema),
        z.lazy(() => GetProjectsContentHint7$.inboundSchema),
        z.lazy(() => GetProjectsContentHint8$.inboundSchema),
        z.lazy(() => GetProjectsContentHint9$.inboundSchema),
        z.lazy(() => GetProjectsContentHint10$.inboundSchema),
        z.lazy(() => GetProjectsContentHint11$.inboundSchema),
        z.lazy(() => GetProjectsContentHint12$.inboundSchema),
        z.lazy(() => GetProjectsContentHint13$.inboundSchema),
        z.lazy(() => GetProjectsContentHint14$.inboundSchema),
    ]);

    export type Outbound =
        | GetProjectsContentHint1$.Outbound
        | GetProjectsContentHint2$.Outbound
        | GetProjectsContentHint3$.Outbound
        | GetProjectsContentHint4$.Outbound
        | GetProjectsContentHint5$.Outbound
        | GetProjectsContentHint6$.Outbound
        | GetProjectsContentHint7$.Outbound
        | GetProjectsContentHint8$.Outbound
        | GetProjectsContentHint9$.Outbound
        | GetProjectsContentHint10$.Outbound
        | GetProjectsContentHint11$.Outbound
        | GetProjectsContentHint12$.Outbound
        | GetProjectsContentHint13$.Outbound
        | GetProjectsContentHint14$.Outbound;
    export const outboundSchema: z.ZodType<Outbound, z.ZodTypeDef, GetProjectsContentHint> =
        z.union([
            z.lazy(() => GetProjectsContentHint1$.outboundSchema),
            z.lazy(() => GetProjectsContentHint2$.outboundSchema),
            z.lazy(() => GetProjectsContentHint3$.outboundSchema),
            z.lazy(() => GetProjectsContentHint4$.outboundSchema),
            z.lazy(() => GetProjectsContentHint5$.outboundSchema),
            z.lazy(() => GetProjectsContentHint6$.outboundSchema),
            z.lazy(() => GetProjectsContentHint7$.outboundSchema),
            z.lazy(() => GetProjectsContentHint8$.outboundSchema),
            z.lazy(() => GetProjectsContentHint9$.outboundSchema),
            z.lazy(() => GetProjectsContentHint10$.outboundSchema),
            z.lazy(() => GetProjectsContentHint11$.outboundSchema),
            z.lazy(() => GetProjectsContentHint12$.outboundSchema),
            z.lazy(() => GetProjectsContentHint13$.outboundSchema),
            z.lazy(() => GetProjectsContentHint14$.outboundSchema),
        ]);
}

/** @internal */
export namespace GetProjectsProjectsResponse200Type$ {
    export const inboundSchema = z.nativeEnum(GetProjectsProjectsResponse200Type);
    export const outboundSchema = inboundSchema;
}

/** @internal */
export namespace GetProjectsInternalContentHint$ {
    export const inboundSchema: z.ZodType<GetProjectsInternalContentHint, z.ZodTypeDef, unknown> =
        z.object({
            type: GetProjectsProjectsResponse200Type$.inboundSchema,
            encryptedValue: z.string(),
        });

    export type Outbound = {
        type: string;
        encryptedValue: string;
    };

    export const outboundSchema: z.ZodType<Outbound, z.ZodTypeDef, GetProjectsInternalContentHint> =
        z.object({
            type: GetProjectsProjectsResponse200Type$.outboundSchema,
            encryptedValue: z.string(),
        });
}

/** @internal */
export namespace GetProjectsEnv$ {
    export const inboundSchema: z.ZodType<GetProjectsEnv, z.ZodTypeDef, unknown> = z.object({
        target: z
            .union([z.array(GetProjectsTarget1$.inboundSchema), GetProjectsTarget2$.inboundSchema])
            .optional(),
        type: GetProjectsType$.inboundSchema,
        id: z.string().optional(),
        key: z.string(),
        value: z.string(),
        configurationId: z.nullable(z.string()).optional(),
        createdAt: z.number().optional(),
        updatedAt: z.number().optional(),
        createdBy: z.nullable(z.string()).optional(),
        updatedBy: z.nullable(z.string()).optional(),
        gitBranch: z.string().optional(),
        edgeConfigId: z.nullable(z.string()).optional(),
        edgeConfigTokenId: z.nullable(z.string()).optional(),
        contentHint: z
            .nullable(
                z.union([
                    z.lazy(() => GetProjectsContentHint1$.inboundSchema),
                    z.lazy(() => GetProjectsContentHint2$.inboundSchema),
                    z.lazy(() => GetProjectsContentHint3$.inboundSchema),
                    z.lazy(() => GetProjectsContentHint4$.inboundSchema),
                    z.lazy(() => GetProjectsContentHint5$.inboundSchema),
                    z.lazy(() => GetProjectsContentHint6$.inboundSchema),
                    z.lazy(() => GetProjectsContentHint7$.inboundSchema),
                    z.lazy(() => GetProjectsContentHint8$.inboundSchema),
                    z.lazy(() => GetProjectsContentHint9$.inboundSchema),
                    z.lazy(() => GetProjectsContentHint10$.inboundSchema),
                    z.lazy(() => GetProjectsContentHint11$.inboundSchema),
                    z.lazy(() => GetProjectsContentHint12$.inboundSchema),
                    z.lazy(() => GetProjectsContentHint13$.inboundSchema),
                    z.lazy(() => GetProjectsContentHint14$.inboundSchema),
                ])
            )
            .optional(),
        internalContentHint: z
            .nullable(z.lazy(() => GetProjectsInternalContentHint$.inboundSchema))
            .optional(),
        decrypted: z.boolean().optional(),
        comment: z.string().optional(),
        customEnvironmentId: z.string().optional(),
    });

    export type Outbound = {
        target?: Array<string> | string | undefined;
        type: string;
        id?: string | undefined;
        key: string;
        value: string;
        configurationId?: string | null | undefined;
        createdAt?: number | undefined;
        updatedAt?: number | undefined;
        createdBy?: string | null | undefined;
        updatedBy?: string | null | undefined;
        gitBranch?: string | undefined;
        edgeConfigId?: string | null | undefined;
        edgeConfigTokenId?: string | null | undefined;
        contentHint?:
            | GetProjectsContentHint1$.Outbound
            | GetProjectsContentHint2$.Outbound
            | GetProjectsContentHint3$.Outbound
            | GetProjectsContentHint4$.Outbound
            | GetProjectsContentHint5$.Outbound
            | GetProjectsContentHint6$.Outbound
            | GetProjectsContentHint7$.Outbound
            | GetProjectsContentHint8$.Outbound
            | GetProjectsContentHint9$.Outbound
            | GetProjectsContentHint10$.Outbound
            | GetProjectsContentHint11$.Outbound
            | GetProjectsContentHint12$.Outbound
            | GetProjectsContentHint13$.Outbound
            | GetProjectsContentHint14$.Outbound
            | null
            | undefined;
        internalContentHint?: GetProjectsInternalContentHint$.Outbound | null | undefined;
        decrypted?: boolean | undefined;
        comment?: string | undefined;
        customEnvironmentId?: string | undefined;
    };

    export const outboundSchema: z.ZodType<Outbound, z.ZodTypeDef, GetProjectsEnv> = z.object({
        target: z
            .union([
                z.array(GetProjectsTarget1$.outboundSchema),
                GetProjectsTarget2$.outboundSchema,
            ])
            .optional(),
        type: GetProjectsType$.outboundSchema,
        id: z.string().optional(),
        key: z.string(),
        value: z.string(),
        configurationId: z.nullable(z.string()).optional(),
        createdAt: z.number().optional(),
        updatedAt: z.number().optional(),
        createdBy: z.nullable(z.string()).optional(),
        updatedBy: z.nullable(z.string()).optional(),
        gitBranch: z.string().optional(),
        edgeConfigId: z.nullable(z.string()).optional(),
        edgeConfigTokenId: z.nullable(z.string()).optional(),
        contentHint: z
            .nullable(
                z.union([
                    z.lazy(() => GetProjectsContentHint1$.outboundSchema),
                    z.lazy(() => GetProjectsContentHint2$.outboundSchema),
                    z.lazy(() => GetProjectsContentHint3$.outboundSchema),
                    z.lazy(() => GetProjectsContentHint4$.outboundSchema),
                    z.lazy(() => GetProjectsContentHint5$.outboundSchema),
                    z.lazy(() => GetProjectsContentHint6$.outboundSchema),
                    z.lazy(() => GetProjectsContentHint7$.outboundSchema),
                    z.lazy(() => GetProjectsContentHint8$.outboundSchema),
                    z.lazy(() => GetProjectsContentHint9$.outboundSchema),
                    z.lazy(() => GetProjectsContentHint10$.outboundSchema),
                    z.lazy(() => GetProjectsContentHint11$.outboundSchema),
                    z.lazy(() => GetProjectsContentHint12$.outboundSchema),
                    z.lazy(() => GetProjectsContentHint13$.outboundSchema),
                    z.lazy(() => GetProjectsContentHint14$.outboundSchema),
                ])
            )
            .optional(),
        internalContentHint: z
            .nullable(z.lazy(() => GetProjectsInternalContentHint$.outboundSchema))
            .optional(),
        decrypted: z.boolean().optional(),
        comment: z.string().optional(),
        customEnvironmentId: z.string().optional(),
    });
}

/** @internal */
export namespace GetProjectsFramework$ {
    export const inboundSchema = z.nativeEnum(GetProjectsFramework);
    export const outboundSchema = inboundSchema;
}

/** @internal */
export namespace GetProjectsAliasAssigned$ {
    export const inboundSchema: z.ZodType<GetProjectsAliasAssigned, z.ZodTypeDef, unknown> =
        z.union([z.number(), z.boolean()]);

    export type Outbound = number | boolean;
    export const outboundSchema: z.ZodType<Outbound, z.ZodTypeDef, GetProjectsAliasAssigned> =
        z.union([z.number(), z.boolean()]);
}

/** @internal */
export namespace GetProjectsAliasError$ {
    export const inboundSchema: z.ZodType<GetProjectsAliasError, z.ZodTypeDef, unknown> = z.object({
        code: z.string(),
        message: z.string(),
    });

    export type Outbound = {
        code: string;
        message: string;
    };

    export const outboundSchema: z.ZodType<Outbound, z.ZodTypeDef, GetProjectsAliasError> =
        z.object({
            code: z.string(),
            message: z.string(),
        });
}

/** @internal */
export namespace GetProjectsBuilds$ {
    export const inboundSchema: z.ZodType<GetProjectsBuilds, z.ZodTypeDef, unknown> = z.object({
        use: z.string(),
        src: z.string().optional(),
        dest: z.string().optional(),
    });

    export type Outbound = {
        use: string;
        src?: string | undefined;
        dest?: string | undefined;
    };

    export const outboundSchema: z.ZodType<Outbound, z.ZodTypeDef, GetProjectsBuilds> = z.object({
        use: z.string(),
        src: z.string().optional(),
        dest: z.string().optional(),
    });
}

/** @internal */
export namespace GetProjectsCreator$ {
    export const inboundSchema: z.ZodType<GetProjectsCreator, z.ZodTypeDef, unknown> = z.object({
        email: z.string(),
        githubLogin: z.string().optional(),
        gitlabLogin: z.string().optional(),
        uid: z.string(),
        username: z.string(),
    });

    export type Outbound = {
        email: string;
        githubLogin?: string | undefined;
        gitlabLogin?: string | undefined;
        uid: string;
        username: string;
    };

    export const outboundSchema: z.ZodType<Outbound, z.ZodTypeDef, GetProjectsCreator> = z.object({
        email: z.string(),
        githubLogin: z.string().optional(),
        gitlabLogin: z.string().optional(),
        uid: z.string(),
        username: z.string(),
    });
}

/** @internal */
export namespace GetProjectsPlan$ {
    export const inboundSchema = z.nativeEnum(GetProjectsPlan);
    export const outboundSchema = inboundSchema;
}

/** @internal */
export namespace GetProjectsReadyState$ {
    export const inboundSchema = z.nativeEnum(GetProjectsReadyState);
    export const outboundSchema = inboundSchema;
}

/** @internal */
export namespace GetProjectsReadySubstate$ {
    export const inboundSchema = z.nativeEnum(GetProjectsReadySubstate);
    export const outboundSchema = inboundSchema;
}

/** @internal */
export namespace GetProjectsProjectsType$ {
    export const inboundSchema = z.nativeEnum(GetProjectsProjectsType);
    export const outboundSchema = inboundSchema;
}

/** @internal */
export namespace GetProjectsChecksConclusion$ {
    export const inboundSchema = z.nativeEnum(GetProjectsChecksConclusion);
    export const outboundSchema = inboundSchema;
}

/** @internal */
export namespace GetProjectsChecksState$ {
    export const inboundSchema = z.nativeEnum(GetProjectsChecksState);
    export const outboundSchema = inboundSchema;
}

/** @internal */
export namespace GetProjectsOidcTokenClaims$ {
    export const inboundSchema: z.ZodType<GetProjectsOidcTokenClaims, z.ZodTypeDef, unknown> =
        z.union([z.string(), z.array(z.string())]);

    export type Outbound = string | Array<string>;
    export const outboundSchema: z.ZodType<Outbound, z.ZodTypeDef, GetProjectsOidcTokenClaims> =
        z.union([z.string(), z.array(z.string())]);
}

/** @internal */
export namespace GetProjectsLatestDeployments$ {
    export const inboundSchema: z.ZodType<GetProjectsLatestDeployments, z.ZodTypeDef, unknown> =
        z.object({
            alias: z.array(z.string()).optional(),
            aliasAssigned: z.nullable(z.union([z.number(), z.boolean()])).optional(),
            aliasError: z.nullable(z.lazy(() => GetProjectsAliasError$.inboundSchema)).optional(),
            aliasFinal: z.nullable(z.string()).optional(),
            automaticAliases: z.array(z.string()).optional(),
            builds: z.array(z.lazy(() => GetProjectsBuilds$.inboundSchema)).optional(),
            connectBuildsEnabled: z.boolean().optional(),
            connectConfigurationId: z.string().optional(),
            createdAt: z.number(),
            createdIn: z.string(),
            creator: z.nullable(z.lazy(() => GetProjectsCreator$.inboundSchema)),
            deploymentHostname: z.string(),
            name: z.string(),
            forced: z.boolean().optional(),
            id: z.string(),
            meta: z.record(z.string()).optional(),
            monorepoManager: z.nullable(z.string()).optional(),
            plan: GetProjectsPlan$.inboundSchema,
            private: z.boolean(),
            readyState: GetProjectsReadyState$.inboundSchema,
            readySubstate: GetProjectsReadySubstate$.inboundSchema.optional(),
            requestedAt: z.number().optional(),
            target: z.nullable(z.string()).optional(),
            teamId: z.nullable(z.string()).optional(),
            type: GetProjectsProjectsType$.inboundSchema,
            url: z.string(),
            userId: z.string(),
            withCache: z.boolean().optional(),
            checksConclusion: GetProjectsChecksConclusion$.inboundSchema.optional(),
            checksState: GetProjectsChecksState$.inboundSchema.optional(),
            readyAt: z.number().optional(),
            buildingAt: z.number().optional(),
            previewCommentsEnabled: z.boolean().optional(),
            oidcTokenClaims: z.record(z.union([z.string(), z.array(z.string())])).optional(),
        });

    export type Outbound = {
        alias?: Array<string> | undefined;
        aliasAssigned?: number | boolean | null | undefined;
        aliasError?: GetProjectsAliasError$.Outbound | null | undefined;
        aliasFinal?: string | null | undefined;
        automaticAliases?: Array<string> | undefined;
        builds?: Array<GetProjectsBuilds$.Outbound> | undefined;
        connectBuildsEnabled?: boolean | undefined;
        connectConfigurationId?: string | undefined;
        createdAt: number;
        createdIn: string;
        creator: GetProjectsCreator$.Outbound | null;
        deploymentHostname: string;
        name: string;
        forced?: boolean | undefined;
        id: string;
        meta?: { [k: string]: string } | undefined;
        monorepoManager?: string | null | undefined;
        plan: string;
        private: boolean;
        readyState: string;
        readySubstate?: string | undefined;
        requestedAt?: number | undefined;
        target?: string | null | undefined;
        teamId?: string | null | undefined;
        type: string;
        url: string;
        userId: string;
        withCache?: boolean | undefined;
        checksConclusion?: string | undefined;
        checksState?: string | undefined;
        readyAt?: number | undefined;
        buildingAt?: number | undefined;
        previewCommentsEnabled?: boolean | undefined;
        oidcTokenClaims?: { [k: string]: string | Array<string> } | undefined;
    };

    export const outboundSchema: z.ZodType<Outbound, z.ZodTypeDef, GetProjectsLatestDeployments> =
        z.object({
            alias: z.array(z.string()).optional(),
            aliasAssigned: z.nullable(z.union([z.number(), z.boolean()])).optional(),
            aliasError: z.nullable(z.lazy(() => GetProjectsAliasError$.outboundSchema)).optional(),
            aliasFinal: z.nullable(z.string()).optional(),
            automaticAliases: z.array(z.string()).optional(),
            builds: z.array(z.lazy(() => GetProjectsBuilds$.outboundSchema)).optional(),
            connectBuildsEnabled: z.boolean().optional(),
            connectConfigurationId: z.string().optional(),
            createdAt: z.number(),
            createdIn: z.string(),
            creator: z.nullable(z.lazy(() => GetProjectsCreator$.outboundSchema)),
            deploymentHostname: z.string(),
            name: z.string(),
            forced: z.boolean().optional(),
            id: z.string(),
            meta: z.record(z.string()).optional(),
            monorepoManager: z.nullable(z.string()).optional(),
            plan: GetProjectsPlan$.outboundSchema,
            private: z.boolean(),
            readyState: GetProjectsReadyState$.outboundSchema,
            readySubstate: GetProjectsReadySubstate$.outboundSchema.optional(),
            requestedAt: z.number().optional(),
            target: z.nullable(z.string()).optional(),
            teamId: z.nullable(z.string()).optional(),
            type: GetProjectsProjectsType$.outboundSchema,
            url: z.string(),
            userId: z.string(),
            withCache: z.boolean().optional(),
            checksConclusion: GetProjectsChecksConclusion$.outboundSchema.optional(),
            checksState: GetProjectsChecksState$.outboundSchema.optional(),
            readyAt: z.number().optional(),
            buildingAt: z.number().optional(),
            previewCommentsEnabled: z.boolean().optional(),
            oidcTokenClaims: z.record(z.union([z.string(), z.array(z.string())])).optional(),
        });
}

/** @internal */
export namespace GetProjectsLinkProjectsResponseType$ {
    export const inboundSchema = z.nativeEnum(GetProjectsLinkProjectsResponseType);
    export const outboundSchema = inboundSchema;
}

/** @internal */
export namespace GetProjectsLinkProjectsResponseDeployHooks$ {
    export const inboundSchema: z.ZodType<
        GetProjectsLinkProjectsResponseDeployHooks,
        z.ZodTypeDef,
        unknown
    > = z.object({
        createdAt: z.number().optional(),
        id: z.string(),
        name: z.string(),
        ref: z.string(),
        url: z.string(),
    });

    export type Outbound = {
        createdAt?: number | undefined;
        id: string;
        name: string;
        ref: string;
        url: string;
    };

    export const outboundSchema: z.ZodType<
        Outbound,
        z.ZodTypeDef,
        GetProjectsLinkProjectsResponseDeployHooks
    > = z.object({
        createdAt: z.number().optional(),
        id: z.string(),
        name: z.string(),
        ref: z.string(),
        url: z.string(),
    });
}

/** @internal */
export namespace GetProjectsLink3$ {
    export const inboundSchema: z.ZodType<GetProjectsLink3, z.ZodTypeDef, unknown> = z.object({
        name: z.string().optional(),
        slug: z.string().optional(),
        owner: z.string().optional(),
        type: GetProjectsLinkProjectsResponseType$.inboundSchema.optional(),
        uuid: z.string().optional(),
        workspaceUuid: z.string().optional(),
        createdAt: z.number().optional(),
        deployHooks: z.array(
            z.lazy(() => GetProjectsLinkProjectsResponseDeployHooks$.inboundSchema)
        ),
        gitCredentialId: z.string().optional(),
        updatedAt: z.number().optional(),
        sourceless: z.boolean().optional(),
        productionBranch: z.string().optional(),
    });

    export type Outbound = {
        name?: string | undefined;
        slug?: string | undefined;
        owner?: string | undefined;
        type?: string | undefined;
        uuid?: string | undefined;
        workspaceUuid?: string | undefined;
        createdAt?: number | undefined;
        deployHooks: Array<GetProjectsLinkProjectsResponseDeployHooks$.Outbound>;
        gitCredentialId?: string | undefined;
        updatedAt?: number | undefined;
        sourceless?: boolean | undefined;
        productionBranch?: string | undefined;
    };

    export const outboundSchema: z.ZodType<Outbound, z.ZodTypeDef, GetProjectsLink3> = z.object({
        name: z.string().optional(),
        slug: z.string().optional(),
        owner: z.string().optional(),
        type: GetProjectsLinkProjectsResponseType$.outboundSchema.optional(),
        uuid: z.string().optional(),
        workspaceUuid: z.string().optional(),
        createdAt: z.number().optional(),
        deployHooks: z.array(
            z.lazy(() => GetProjectsLinkProjectsResponseDeployHooks$.outboundSchema)
        ),
        gitCredentialId: z.string().optional(),
        updatedAt: z.number().optional(),
        sourceless: z.boolean().optional(),
        productionBranch: z.string().optional(),
    });
}

/** @internal */
export namespace GetProjectsLinkProjectsType$ {
    export const inboundSchema = z.nativeEnum(GetProjectsLinkProjectsType);
    export const outboundSchema = inboundSchema;
}

/** @internal */
export namespace GetProjectsLinkProjectsDeployHooks$ {
    export const inboundSchema: z.ZodType<
        GetProjectsLinkProjectsDeployHooks,
        z.ZodTypeDef,
        unknown
    > = z.object({
        createdAt: z.number().optional(),
        id: z.string(),
        name: z.string(),
        ref: z.string(),
        url: z.string(),
    });

    export type Outbound = {
        createdAt?: number | undefined;
        id: string;
        name: string;
        ref: string;
        url: string;
    };

    export const outboundSchema: z.ZodType<
        Outbound,
        z.ZodTypeDef,
        GetProjectsLinkProjectsDeployHooks
    > = z.object({
        createdAt: z.number().optional(),
        id: z.string(),
        name: z.string(),
        ref: z.string(),
        url: z.string(),
    });
}

/** @internal */
export namespace GetProjectsLink2$ {
    export const inboundSchema: z.ZodType<GetProjectsLink2, z.ZodTypeDef, unknown> = z.object({
        projectId: z.string().optional(),
        projectName: z.string().optional(),
        projectNameWithNamespace: z.string().optional(),
        projectNamespace: z.string().optional(),
        projectUrl: z.string().optional(),
        type: GetProjectsLinkProjectsType$.inboundSchema.optional(),
        createdAt: z.number().optional(),
        deployHooks: z.array(z.lazy(() => GetProjectsLinkProjectsDeployHooks$.inboundSchema)),
        gitCredentialId: z.string().optional(),
        updatedAt: z.number().optional(),
        sourceless: z.boolean().optional(),
        productionBranch: z.string().optional(),
    });

    export type Outbound = {
        projectId?: string | undefined;
        projectName?: string | undefined;
        projectNameWithNamespace?: string | undefined;
        projectNamespace?: string | undefined;
        projectUrl?: string | undefined;
        type?: string | undefined;
        createdAt?: number | undefined;
        deployHooks: Array<GetProjectsLinkProjectsDeployHooks$.Outbound>;
        gitCredentialId?: string | undefined;
        updatedAt?: number | undefined;
        sourceless?: boolean | undefined;
        productionBranch?: string | undefined;
    };

    export const outboundSchema: z.ZodType<Outbound, z.ZodTypeDef, GetProjectsLink2> = z.object({
        projectId: z.string().optional(),
        projectName: z.string().optional(),
        projectNameWithNamespace: z.string().optional(),
        projectNamespace: z.string().optional(),
        projectUrl: z.string().optional(),
        type: GetProjectsLinkProjectsType$.outboundSchema.optional(),
        createdAt: z.number().optional(),
        deployHooks: z.array(z.lazy(() => GetProjectsLinkProjectsDeployHooks$.outboundSchema)),
        gitCredentialId: z.string().optional(),
        updatedAt: z.number().optional(),
        sourceless: z.boolean().optional(),
        productionBranch: z.string().optional(),
    });
}

/** @internal */
export namespace GetProjectsLinkType$ {
    export const inboundSchema = z.nativeEnum(GetProjectsLinkType);
    export const outboundSchema = inboundSchema;
}

/** @internal */
export namespace GetProjectsLinkDeployHooks$ {
    export const inboundSchema: z.ZodType<GetProjectsLinkDeployHooks, z.ZodTypeDef, unknown> =
        z.object({
            createdAt: z.number().optional(),
            id: z.string(),
            name: z.string(),
            ref: z.string(),
            url: z.string(),
        });

    export type Outbound = {
        createdAt?: number | undefined;
        id: string;
        name: string;
        ref: string;
        url: string;
    };

    export const outboundSchema: z.ZodType<Outbound, z.ZodTypeDef, GetProjectsLinkDeployHooks> =
        z.object({
            createdAt: z.number().optional(),
            id: z.string(),
            name: z.string(),
            ref: z.string(),
            url: z.string(),
        });
}

/** @internal */
export namespace GetProjectsLink1$ {
    export const inboundSchema: z.ZodType<GetProjectsLink1, z.ZodTypeDef, unknown> = z.object({
        org: z.string().optional(),
        repo: z.string().optional(),
        repoId: z.number().optional(),
        type: GetProjectsLinkType$.inboundSchema.optional(),
        createdAt: z.number().optional(),
        deployHooks: z.array(z.lazy(() => GetProjectsLinkDeployHooks$.inboundSchema)),
        gitCredentialId: z.string().optional(),
        updatedAt: z.number().optional(),
        sourceless: z.boolean().optional(),
        productionBranch: z.string().optional(),
    });

    export type Outbound = {
        org?: string | undefined;
        repo?: string | undefined;
        repoId?: number | undefined;
        type?: string | undefined;
        createdAt?: number | undefined;
        deployHooks: Array<GetProjectsLinkDeployHooks$.Outbound>;
        gitCredentialId?: string | undefined;
        updatedAt?: number | undefined;
        sourceless?: boolean | undefined;
        productionBranch?: string | undefined;
    };

    export const outboundSchema: z.ZodType<Outbound, z.ZodTypeDef, GetProjectsLink1> = z.object({
        org: z.string().optional(),
        repo: z.string().optional(),
        repoId: z.number().optional(),
        type: GetProjectsLinkType$.outboundSchema.optional(),
        createdAt: z.number().optional(),
        deployHooks: z.array(z.lazy(() => GetProjectsLinkDeployHooks$.outboundSchema)),
        gitCredentialId: z.string().optional(),
        updatedAt: z.number().optional(),
        sourceless: z.boolean().optional(),
        productionBranch: z.string().optional(),
    });
}

/** @internal */
export namespace GetProjectsLink$ {
    export const inboundSchema: z.ZodType<GetProjectsLink, z.ZodTypeDef, unknown> = z.union([
        z.lazy(() => GetProjectsLink1$.inboundSchema),
        z.lazy(() => GetProjectsLink2$.inboundSchema),
        z.lazy(() => GetProjectsLink3$.inboundSchema),
    ]);

    export type Outbound =
        | GetProjectsLink1$.Outbound
        | GetProjectsLink2$.Outbound
        | GetProjectsLink3$.Outbound;
    export const outboundSchema: z.ZodType<Outbound, z.ZodTypeDef, GetProjectsLink> = z.union([
        z.lazy(() => GetProjectsLink1$.outboundSchema),
        z.lazy(() => GetProjectsLink2$.outboundSchema),
        z.lazy(() => GetProjectsLink3$.outboundSchema),
    ]);
}

/** @internal */
export namespace GetProjectsNodeVersion$ {
    export const inboundSchema = z.nativeEnum(GetProjectsNodeVersion);
    export const outboundSchema = inboundSchema;
}

/** @internal */
export namespace GetProjectsPaths$ {
    export const inboundSchema: z.ZodType<GetProjectsPaths, z.ZodTypeDef, unknown> = z.object({
        value: z.string(),
    });

    export type Outbound = {
        value: string;
    };

    export const outboundSchema: z.ZodType<Outbound, z.ZodTypeDef, GetProjectsPaths> = z.object({
        value: z.string(),
    });
}

/** @internal */
export namespace GetProjectsOptionsAllowlist$ {
    export const inboundSchema: z.ZodType<GetProjectsOptionsAllowlist, z.ZodTypeDef, unknown> =
        z.object({
            paths: z.array(z.lazy(() => GetProjectsPaths$.inboundSchema)),
        });

    export type Outbound = {
        paths: Array<GetProjectsPaths$.Outbound>;
    };

    export const outboundSchema: z.ZodType<Outbound, z.ZodTypeDef, GetProjectsOptionsAllowlist> =
        z.object({
            paths: z.array(z.lazy(() => GetProjectsPaths$.outboundSchema)),
        });
}

/** @internal */
export namespace GetProjectsPasswordProtection$ {
    export const inboundSchema: z.ZodType<GetProjectsPasswordProtection, z.ZodTypeDef, unknown> =
        z.object({});

    export type Outbound = {};

    export const outboundSchema: z.ZodType<Outbound, z.ZodTypeDef, GetProjectsPasswordProtection> =
        z.object({});
}

/** @internal */
export namespace GetProjectsDeploymentType$ {
    export const inboundSchema = z.nativeEnum(GetProjectsDeploymentType);
    export const outboundSchema = inboundSchema;
}

/** @internal */
export namespace GetProjectsSsoProtection$ {
    export const inboundSchema: z.ZodType<GetProjectsSsoProtection, z.ZodTypeDef, unknown> =
        z.object({
            deploymentType: GetProjectsDeploymentType$.inboundSchema,
        });

    export type Outbound = {
        deploymentType: string;
    };

    export const outboundSchema: z.ZodType<Outbound, z.ZodTypeDef, GetProjectsSsoProtection> =
        z.object({
            deploymentType: GetProjectsDeploymentType$.outboundSchema,
        });
}

/** @internal */
export namespace GetProjectsTargets$ {
    export const inboundSchema: z.ZodType<GetProjectsTargets, z.ZodTypeDef, unknown> = z.union([
        z.string(),
        z.array(z.string()),
    ]);

    export type Outbound = string | Array<string>;
    export const outboundSchema: z.ZodType<Outbound, z.ZodTypeDef, GetProjectsTargets> = z.union([
        z.string(),
        z.array(z.string()),
    ]);
}

/** @internal */
export namespace GetProjectsPermissions$ {
    export const inboundSchema: z.ZodType<GetProjectsPermissions, z.ZodTypeDef, unknown> = z
        .object({
            accessGroup: z.array(ACLAction$.inboundSchema).optional(),
            aliasGlobal: z.array(ACLAction$.inboundSchema).optional(),
            analyticsSampling: z.array(ACLAction$.inboundSchema).optional(),
            analyticsUsage: z.array(ACLAction$.inboundSchema).optional(),
            auditLog: z.array(ACLAction$.inboundSchema).optional(),
            billingAddress: z.array(ACLAction$.inboundSchema).optional(),
            billingInformation: z.array(ACLAction$.inboundSchema).optional(),
            billingInvoice: z.array(ACLAction$.inboundSchema).optional(),
            billingInvoiceEmailRecipient: z.array(ACLAction$.inboundSchema).optional(),
            billingInvoiceLanguage: z.array(ACLAction$.inboundSchema).optional(),
            billingPlan: z.array(ACLAction$.inboundSchema).optional(),
            billingPurchaseOrder: z.array(ACLAction$.inboundSchema).optional(),
            billingTaxId: z.array(ACLAction$.inboundSchema).optional(),
            blob: z.array(ACLAction$.inboundSchema).optional(),
            budget: z.array(ACLAction$.inboundSchema).optional(),
            cacheArtifact: z.array(ACLAction$.inboundSchema).optional(),
            cacheArtifactUsageEvent: z.array(ACLAction$.inboundSchema).optional(),
            codeChecks: z.array(ACLAction$.inboundSchema).optional(),
            concurrentBuilds: z.array(ACLAction$.inboundSchema).optional(),
            connect: z.array(ACLAction$.inboundSchema).optional(),
            connectConfiguration: z.array(ACLAction$.inboundSchema).optional(),
            domain: z.array(ACLAction$.inboundSchema).optional(),
            domainAcceptDelegation: z.array(ACLAction$.inboundSchema).optional(),
            domainAuthCodes: z.array(ACLAction$.inboundSchema).optional(),
            domainCertificate: z.array(ACLAction$.inboundSchema).optional(),
            domainCheckConfig: z.array(ACLAction$.inboundSchema).optional(),
            domainMove: z.array(ACLAction$.inboundSchema).optional(),
            domainPurchase: z.array(ACLAction$.inboundSchema).optional(),
            domainRecord: z.array(ACLAction$.inboundSchema).optional(),
            domainTransferIn: z.array(ACLAction$.inboundSchema).optional(),
            event: z.array(ACLAction$.inboundSchema).optional(),
            ownEvent: z.array(ACLAction$.inboundSchema).optional(),
            sensitiveEnvironmentVariablePolicy: z.array(ACLAction$.inboundSchema).optional(),
            fileUpload: z.array(ACLAction$.inboundSchema).optional(),
            gitRepository: z.array(ACLAction$.inboundSchema).optional(),
            ipBlocking: z.array(ACLAction$.inboundSchema).optional(),
            integration: z.array(ACLAction$.inboundSchema).optional(),
            integrationConfiguration: z.array(ACLAction$.inboundSchema).optional(),
            integrationConfigurationTransfer: z.array(ACLAction$.inboundSchema).optional(),
            integrationConfigurationProjects: z.array(ACLAction$.inboundSchema).optional(),
            integrationVercelConfigurationOverride: z.array(ACLAction$.inboundSchema).optional(),
            integrationStore: z.array(ACLAction$.inboundSchema).optional(),
            integrationEvent: z.array(ACLAction$.inboundSchema).optional(),
            integrationResourceSecrets: z.array(ACLAction$.inboundSchema).optional(),
            marketplaceBillingData: z.array(ACLAction$.inboundSchema).optional(),
            jobGlobal: z.array(ACLAction$.inboundSchema).optional(),
            logDrain: z.array(ACLAction$.inboundSchema).optional(),
            Monitoring: z.array(ACLAction$.inboundSchema).optional(),
            monitoringSettings: z.array(ACLAction$.inboundSchema).optional(),
            monitoringQuery: z.array(ACLAction$.inboundSchema).optional(),
            monitoringChart: z.array(ACLAction$.inboundSchema).optional(),
            monitoringAlert: z.array(ACLAction$.inboundSchema).optional(),
            notificationDeploymentFailed: z.array(ACLAction$.inboundSchema).optional(),
            notificationDomainConfiguration: z.array(ACLAction$.inboundSchema).optional(),
            notificationDomainExpire: z.array(ACLAction$.inboundSchema).optional(),
            notificationDomainMoved: z.array(ACLAction$.inboundSchema).optional(),
            notificationDomainPurchase: z.array(ACLAction$.inboundSchema).optional(),
            notificationDomainRenewal: z.array(ACLAction$.inboundSchema).optional(),
            notificationDomainTransfer: z.array(ACLAction$.inboundSchema).optional(),
            notificationDomainUnverified: z.array(ACLAction$.inboundSchema).optional(),
            NotificationMonitoringAlert: z.array(ACLAction$.inboundSchema).optional(),
            notificationPaymentFailed: z.array(ACLAction$.inboundSchema).optional(),
            notificationUsageAlert: z.array(ACLAction$.inboundSchema).optional(),
            notificationCustomerBudget: z.array(ACLAction$.inboundSchema).optional(),
            notificationStatementOfReasons: z.array(ACLAction$.inboundSchema).optional(),
            oauth2Connection: z.array(ACLAction$.inboundSchema).optional(),
            openTelemetryEndpoint: z.array(ACLAction$.inboundSchema).optional(),
            paymentMethod: z.array(ACLAction$.inboundSchema).optional(),
            permissions: z.array(ACLAction$.inboundSchema).optional(),
            postgres: z.array(ACLAction$.inboundSchema).optional(),
            previewDeploymentSuffix: z.array(ACLAction$.inboundSchema).optional(),
            proTrialOnboarding: z.array(ACLAction$.inboundSchema).optional(),
            seawallConfig: z.array(ACLAction$.inboundSchema).optional(),
            sharedEnvVars: z.array(ACLAction$.inboundSchema).optional(),
            sharedEnvVarsProduction: z.array(ACLAction$.inboundSchema).optional(),
            space: z.array(ACLAction$.inboundSchema).optional(),
            spaceRun: z.array(ACLAction$.inboundSchema).optional(),
            passwordProtectionInvoiceItem: z.array(ACLAction$.inboundSchema).optional(),
            rateLimit: z.array(ACLAction$.inboundSchema).optional(),
            redis: z.array(ACLAction$.inboundSchema).optional(),
            repository: z.array(ACLAction$.inboundSchema).optional(),
            remoteCaching: z.array(ACLAction$.inboundSchema).optional(),
            samlConfig: z.array(ACLAction$.inboundSchema).optional(),
            secret: z.array(ACLAction$.inboundSchema).optional(),
            redisStoreTokenSet: z.array(ACLAction$.inboundSchema).optional(),
            blobStoreTokenSet: z.array(ACLAction$.inboundSchema).optional(),
            postgresStoreTokenSet: z.array(ACLAction$.inboundSchema).optional(),
            integrationStoreTokenSet: z.array(ACLAction$.inboundSchema).optional(),
            supportCase: z.array(ACLAction$.inboundSchema).optional(),
            supportCaseComment: z.array(ACLAction$.inboundSchema).optional(),
            dataCacheBillingSettings: z.array(ACLAction$.inboundSchema).optional(),
            team: z.array(ACLAction$.inboundSchema).optional(),
            teamAccessRequest: z.array(ACLAction$.inboundSchema).optional(),
            teamFellowMembership: z.array(ACLAction$.inboundSchema).optional(),
            teamInvite: z.array(ACLAction$.inboundSchema).optional(),
            teamInviteCode: z.array(ACLAction$.inboundSchema).optional(),
            teamJoin: z.array(ACLAction$.inboundSchema).optional(),
            teamOwnMembership: z.array(ACLAction$.inboundSchema).optional(),
            teamOwnMembershipDisconnectSAML: z.array(ACLAction$.inboundSchema).optional(),
            token: z.array(ACLAction$.inboundSchema).optional(),
            usage: z.array(ACLAction$.inboundSchema).optional(),
            usageCycle: z.array(ACLAction$.inboundSchema).optional(),
            user: z.array(ACLAction$.inboundSchema).optional(),
            userConnection: z.array(ACLAction$.inboundSchema).optional(),
            webAnalyticsPlan: z.array(ACLAction$.inboundSchema).optional(),
            webAuthn: z.array(ACLAction$.inboundSchema).optional(),
            edgeConfig: z.array(ACLAction$.inboundSchema).optional(),
            edgeConfigItem: z.array(ACLAction$.inboundSchema).optional(),
            edgeConfigSchema: z.array(ACLAction$.inboundSchema).optional(),
            edgeConfigToken: z.array(ACLAction$.inboundSchema).optional(),
            webhook: z.array(ACLAction$.inboundSchema).optional(),
            "webhook-event": z.array(ACLAction$.inboundSchema).optional(),
            endpointVerification: z.array(ACLAction$.inboundSchema).optional(),
            projectTransferIn: z.array(ACLAction$.inboundSchema).optional(),
            oauth2Application: z.array(ACLAction$.inboundSchema).optional(),
            aliasProject: z.array(ACLAction$.inboundSchema).optional(),
            aliasProtectionBypass: z.array(ACLAction$.inboundSchema).optional(),
            productionAliasProtectionBypass: z.array(ACLAction$.inboundSchema).optional(),
            connectConfigurationLink: z.array(ACLAction$.inboundSchema).optional(),
            dataCacheNamespace: z.array(ACLAction$.inboundSchema).optional(),
            deployment: z.array(ACLAction$.inboundSchema).optional(),
            deploymentCheck: z.array(ACLAction$.inboundSchema).optional(),
            deploymentCheckPreview: z.array(ACLAction$.inboundSchema).optional(),
            deploymentCheckReRunFromProductionBranch: z.array(ACLAction$.inboundSchema).optional(),
            deploymentProductionGit: z.array(ACLAction$.inboundSchema).optional(),
            deploymentPreview: z.array(ACLAction$.inboundSchema).optional(),
            deploymentPrivate: z.array(ACLAction$.inboundSchema).optional(),
            deploymentPromote: z.array(ACLAction$.inboundSchema).optional(),
            deploymentRollback: z.array(ACLAction$.inboundSchema).optional(),
            environments: z.array(ACLAction$.inboundSchema).optional(),
            logs: z.array(ACLAction$.inboundSchema).optional(),
            logsPreset: z.array(ACLAction$.inboundSchema).optional(),
            passwordProtection: z.array(ACLAction$.inboundSchema).optional(),
            optionsAllowlist: z.array(ACLAction$.inboundSchema).optional(),
            job: z.array(ACLAction$.inboundSchema).optional(),
            project: z.array(ACLAction$.inboundSchema).optional(),
            projectAccessGroup: z.array(ACLAction$.inboundSchema).optional(),
            projectAnalyticsSampling: z.array(ACLAction$.inboundSchema).optional(),
            projectDeploymentHook: z.array(ACLAction$.inboundSchema).optional(),
            projectDomain: z.array(ACLAction$.inboundSchema).optional(),
            projectDomainMove: z.array(ACLAction$.inboundSchema).optional(),
            projectDomainCheckConfig: z.array(ACLAction$.inboundSchema).optional(),
            projectEnvVars: z.array(ACLAction$.inboundSchema).optional(),
            projectEnvVarsProduction: z.array(ACLAction$.inboundSchema).optional(),
            projectEnvVarsUnownedByIntegration: z.array(ACLAction$.inboundSchema).optional(),
            projectId: z.array(ACLAction$.inboundSchema).optional(),
            projectIntegrationConfiguration: z.array(ACLAction$.inboundSchema).optional(),
            projectLink: z.array(ACLAction$.inboundSchema).optional(),
            projectMember: z.array(ACLAction$.inboundSchema).optional(),
            projectMonitoring: z.array(ACLAction$.inboundSchema).optional(),
            projectPermissions: z.array(ACLAction$.inboundSchema).optional(),
            projectProductionBranch: z.array(ACLAction$.inboundSchema).optional(),
            projectTransfer: z.array(ACLAction$.inboundSchema).optional(),
            projectTransferOut: z.array(ACLAction$.inboundSchema).optional(),
            projectProtectionBypass: z.array(ACLAction$.inboundSchema).optional(),
            projectUsage: z.array(ACLAction$.inboundSchema).optional(),
            projectAnalyticsUsage: z.array(ACLAction$.inboundSchema).optional(),
            projectSupportCase: z.array(ACLAction$.inboundSchema).optional(),
            projectSupportCaseComment: z.array(ACLAction$.inboundSchema).optional(),
            projectDeploymentExpiration: z.array(ACLAction$.inboundSchema).optional(),
            skewProtection: z.array(ACLAction$.inboundSchema).optional(),
            analytics: z.array(ACLAction$.inboundSchema).optional(),
            trustedIps: z.array(ACLAction$.inboundSchema).optional(),
            webAnalytics: z.array(ACLAction$.inboundSchema).optional(),
            sharedEnvVarConnection: z.array(ACLAction$.inboundSchema).optional(),
        })
        .transform((v) => {
            return remap$(v, {
                Monitoring: "monitoring",
                NotificationMonitoringAlert: "notificationMonitoringAlert",
                "webhook-event": "webhookEvent",
            });
        });

    export type Outbound = {
        accessGroup?: Array<string> | undefined;
        aliasGlobal?: Array<string> | undefined;
        analyticsSampling?: Array<string> | undefined;
        analyticsUsage?: Array<string> | undefined;
        auditLog?: Array<string> | undefined;
        billingAddress?: Array<string> | undefined;
        billingInformation?: Array<string> | undefined;
        billingInvoice?: Array<string> | undefined;
        billingInvoiceEmailRecipient?: Array<string> | undefined;
        billingInvoiceLanguage?: Array<string> | undefined;
        billingPlan?: Array<string> | undefined;
        billingPurchaseOrder?: Array<string> | undefined;
        billingTaxId?: Array<string> | undefined;
        blob?: Array<string> | undefined;
        budget?: Array<string> | undefined;
        cacheArtifact?: Array<string> | undefined;
        cacheArtifactUsageEvent?: Array<string> | undefined;
        codeChecks?: Array<string> | undefined;
        concurrentBuilds?: Array<string> | undefined;
        connect?: Array<string> | undefined;
        connectConfiguration?: Array<string> | undefined;
        domain?: Array<string> | undefined;
        domainAcceptDelegation?: Array<string> | undefined;
        domainAuthCodes?: Array<string> | undefined;
        domainCertificate?: Array<string> | undefined;
        domainCheckConfig?: Array<string> | undefined;
        domainMove?: Array<string> | undefined;
        domainPurchase?: Array<string> | undefined;
        domainRecord?: Array<string> | undefined;
        domainTransferIn?: Array<string> | undefined;
        event?: Array<string> | undefined;
        ownEvent?: Array<string> | undefined;
        sensitiveEnvironmentVariablePolicy?: Array<string> | undefined;
        fileUpload?: Array<string> | undefined;
        gitRepository?: Array<string> | undefined;
        ipBlocking?: Array<string> | undefined;
        integration?: Array<string> | undefined;
        integrationConfiguration?: Array<string> | undefined;
        integrationConfigurationTransfer?: Array<string> | undefined;
        integrationConfigurationProjects?: Array<string> | undefined;
        integrationVercelConfigurationOverride?: Array<string> | undefined;
        integrationStore?: Array<string> | undefined;
        integrationEvent?: Array<string> | undefined;
        integrationResourceSecrets?: Array<string> | undefined;
        marketplaceBillingData?: Array<string> | undefined;
        jobGlobal?: Array<string> | undefined;
        logDrain?: Array<string> | undefined;
        Monitoring?: Array<string> | undefined;
        monitoringSettings?: Array<string> | undefined;
        monitoringQuery?: Array<string> | undefined;
        monitoringChart?: Array<string> | undefined;
        monitoringAlert?: Array<string> | undefined;
        notificationDeploymentFailed?: Array<string> | undefined;
        notificationDomainConfiguration?: Array<string> | undefined;
        notificationDomainExpire?: Array<string> | undefined;
        notificationDomainMoved?: Array<string> | undefined;
        notificationDomainPurchase?: Array<string> | undefined;
        notificationDomainRenewal?: Array<string> | undefined;
        notificationDomainTransfer?: Array<string> | undefined;
        notificationDomainUnverified?: Array<string> | undefined;
        NotificationMonitoringAlert?: Array<string> | undefined;
        notificationPaymentFailed?: Array<string> | undefined;
        notificationUsageAlert?: Array<string> | undefined;
        notificationCustomerBudget?: Array<string> | undefined;
        notificationStatementOfReasons?: Array<string> | undefined;
        oauth2Connection?: Array<string> | undefined;
        openTelemetryEndpoint?: Array<string> | undefined;
        paymentMethod?: Array<string> | undefined;
        permissions?: Array<string> | undefined;
        postgres?: Array<string> | undefined;
        previewDeploymentSuffix?: Array<string> | undefined;
        proTrialOnboarding?: Array<string> | undefined;
        seawallConfig?: Array<string> | undefined;
        sharedEnvVars?: Array<string> | undefined;
        sharedEnvVarsProduction?: Array<string> | undefined;
        space?: Array<string> | undefined;
        spaceRun?: Array<string> | undefined;
        passwordProtectionInvoiceItem?: Array<string> | undefined;
        rateLimit?: Array<string> | undefined;
        redis?: Array<string> | undefined;
        repository?: Array<string> | undefined;
        remoteCaching?: Array<string> | undefined;
        samlConfig?: Array<string> | undefined;
        secret?: Array<string> | undefined;
        redisStoreTokenSet?: Array<string> | undefined;
        blobStoreTokenSet?: Array<string> | undefined;
        postgresStoreTokenSet?: Array<string> | undefined;
        integrationStoreTokenSet?: Array<string> | undefined;
        supportCase?: Array<string> | undefined;
        supportCaseComment?: Array<string> | undefined;
        dataCacheBillingSettings?: Array<string> | undefined;
        team?: Array<string> | undefined;
        teamAccessRequest?: Array<string> | undefined;
        teamFellowMembership?: Array<string> | undefined;
        teamInvite?: Array<string> | undefined;
        teamInviteCode?: Array<string> | undefined;
        teamJoin?: Array<string> | undefined;
        teamOwnMembership?: Array<string> | undefined;
        teamOwnMembershipDisconnectSAML?: Array<string> | undefined;
        token?: Array<string> | undefined;
        usage?: Array<string> | undefined;
        usageCycle?: Array<string> | undefined;
        user?: Array<string> | undefined;
        userConnection?: Array<string> | undefined;
        webAnalyticsPlan?: Array<string> | undefined;
        webAuthn?: Array<string> | undefined;
        edgeConfig?: Array<string> | undefined;
        edgeConfigItem?: Array<string> | undefined;
        edgeConfigSchema?: Array<string> | undefined;
        edgeConfigToken?: Array<string> | undefined;
        webhook?: Array<string> | undefined;
        "webhook-event"?: Array<string> | undefined;
        endpointVerification?: Array<string> | undefined;
        projectTransferIn?: Array<string> | undefined;
        oauth2Application?: Array<string> | undefined;
        aliasProject?: Array<string> | undefined;
        aliasProtectionBypass?: Array<string> | undefined;
        productionAliasProtectionBypass?: Array<string> | undefined;
        connectConfigurationLink?: Array<string> | undefined;
        dataCacheNamespace?: Array<string> | undefined;
        deployment?: Array<string> | undefined;
        deploymentCheck?: Array<string> | undefined;
        deploymentCheckPreview?: Array<string> | undefined;
        deploymentCheckReRunFromProductionBranch?: Array<string> | undefined;
        deploymentProductionGit?: Array<string> | undefined;
        deploymentPreview?: Array<string> | undefined;
        deploymentPrivate?: Array<string> | undefined;
        deploymentPromote?: Array<string> | undefined;
        deploymentRollback?: Array<string> | undefined;
        environments?: Array<string> | undefined;
        logs?: Array<string> | undefined;
        logsPreset?: Array<string> | undefined;
        passwordProtection?: Array<string> | undefined;
        optionsAllowlist?: Array<string> | undefined;
        job?: Array<string> | undefined;
        project?: Array<string> | undefined;
        projectAccessGroup?: Array<string> | undefined;
        projectAnalyticsSampling?: Array<string> | undefined;
        projectDeploymentHook?: Array<string> | undefined;
        projectDomain?: Array<string> | undefined;
        projectDomainMove?: Array<string> | undefined;
        projectDomainCheckConfig?: Array<string> | undefined;
        projectEnvVars?: Array<string> | undefined;
        projectEnvVarsProduction?: Array<string> | undefined;
        projectEnvVarsUnownedByIntegration?: Array<string> | undefined;
        projectId?: Array<string> | undefined;
        projectIntegrationConfiguration?: Array<string> | undefined;
        projectLink?: Array<string> | undefined;
        projectMember?: Array<string> | undefined;
        projectMonitoring?: Array<string> | undefined;
        projectPermissions?: Array<string> | undefined;
        projectProductionBranch?: Array<string> | undefined;
        projectTransfer?: Array<string> | undefined;
        projectTransferOut?: Array<string> | undefined;
        projectProtectionBypass?: Array<string> | undefined;
        projectUsage?: Array<string> | undefined;
        projectAnalyticsUsage?: Array<string> | undefined;
        projectSupportCase?: Array<string> | undefined;
        projectSupportCaseComment?: Array<string> | undefined;
        projectDeploymentExpiration?: Array<string> | undefined;
        skewProtection?: Array<string> | undefined;
        analytics?: Array<string> | undefined;
        trustedIps?: Array<string> | undefined;
        webAnalytics?: Array<string> | undefined;
        sharedEnvVarConnection?: Array<string> | undefined;
    };

    export const outboundSchema: z.ZodType<Outbound, z.ZodTypeDef, GetProjectsPermissions> = z
        .object({
            accessGroup: z.array(ACLAction$.outboundSchema).optional(),
            aliasGlobal: z.array(ACLAction$.outboundSchema).optional(),
            analyticsSampling: z.array(ACLAction$.outboundSchema).optional(),
            analyticsUsage: z.array(ACLAction$.outboundSchema).optional(),
            auditLog: z.array(ACLAction$.outboundSchema).optional(),
            billingAddress: z.array(ACLAction$.outboundSchema).optional(),
            billingInformation: z.array(ACLAction$.outboundSchema).optional(),
            billingInvoice: z.array(ACLAction$.outboundSchema).optional(),
            billingInvoiceEmailRecipient: z.array(ACLAction$.outboundSchema).optional(),
            billingInvoiceLanguage: z.array(ACLAction$.outboundSchema).optional(),
            billingPlan: z.array(ACLAction$.outboundSchema).optional(),
            billingPurchaseOrder: z.array(ACLAction$.outboundSchema).optional(),
            billingTaxId: z.array(ACLAction$.outboundSchema).optional(),
            blob: z.array(ACLAction$.outboundSchema).optional(),
            budget: z.array(ACLAction$.outboundSchema).optional(),
            cacheArtifact: z.array(ACLAction$.outboundSchema).optional(),
            cacheArtifactUsageEvent: z.array(ACLAction$.outboundSchema).optional(),
            codeChecks: z.array(ACLAction$.outboundSchema).optional(),
            concurrentBuilds: z.array(ACLAction$.outboundSchema).optional(),
            connect: z.array(ACLAction$.outboundSchema).optional(),
            connectConfiguration: z.array(ACLAction$.outboundSchema).optional(),
            domain: z.array(ACLAction$.outboundSchema).optional(),
            domainAcceptDelegation: z.array(ACLAction$.outboundSchema).optional(),
            domainAuthCodes: z.array(ACLAction$.outboundSchema).optional(),
            domainCertificate: z.array(ACLAction$.outboundSchema).optional(),
            domainCheckConfig: z.array(ACLAction$.outboundSchema).optional(),
            domainMove: z.array(ACLAction$.outboundSchema).optional(),
            domainPurchase: z.array(ACLAction$.outboundSchema).optional(),
            domainRecord: z.array(ACLAction$.outboundSchema).optional(),
            domainTransferIn: z.array(ACLAction$.outboundSchema).optional(),
            event: z.array(ACLAction$.outboundSchema).optional(),
            ownEvent: z.array(ACLAction$.outboundSchema).optional(),
            sensitiveEnvironmentVariablePolicy: z.array(ACLAction$.outboundSchema).optional(),
            fileUpload: z.array(ACLAction$.outboundSchema).optional(),
            gitRepository: z.array(ACLAction$.outboundSchema).optional(),
            ipBlocking: z.array(ACLAction$.outboundSchema).optional(),
            integration: z.array(ACLAction$.outboundSchema).optional(),
            integrationConfiguration: z.array(ACLAction$.outboundSchema).optional(),
            integrationConfigurationTransfer: z.array(ACLAction$.outboundSchema).optional(),
            integrationConfigurationProjects: z.array(ACLAction$.outboundSchema).optional(),
            integrationVercelConfigurationOverride: z.array(ACLAction$.outboundSchema).optional(),
            integrationStore: z.array(ACLAction$.outboundSchema).optional(),
            integrationEvent: z.array(ACLAction$.outboundSchema).optional(),
            integrationResourceSecrets: z.array(ACLAction$.outboundSchema).optional(),
            marketplaceBillingData: z.array(ACLAction$.outboundSchema).optional(),
            jobGlobal: z.array(ACLAction$.outboundSchema).optional(),
            logDrain: z.array(ACLAction$.outboundSchema).optional(),
            monitoring: z.array(ACLAction$.outboundSchema).optional(),
            monitoringSettings: z.array(ACLAction$.outboundSchema).optional(),
            monitoringQuery: z.array(ACLAction$.outboundSchema).optional(),
            monitoringChart: z.array(ACLAction$.outboundSchema).optional(),
            monitoringAlert: z.array(ACLAction$.outboundSchema).optional(),
            notificationDeploymentFailed: z.array(ACLAction$.outboundSchema).optional(),
            notificationDomainConfiguration: z.array(ACLAction$.outboundSchema).optional(),
            notificationDomainExpire: z.array(ACLAction$.outboundSchema).optional(),
            notificationDomainMoved: z.array(ACLAction$.outboundSchema).optional(),
            notificationDomainPurchase: z.array(ACLAction$.outboundSchema).optional(),
            notificationDomainRenewal: z.array(ACLAction$.outboundSchema).optional(),
            notificationDomainTransfer: z.array(ACLAction$.outboundSchema).optional(),
            notificationDomainUnverified: z.array(ACLAction$.outboundSchema).optional(),
            notificationMonitoringAlert: z.array(ACLAction$.outboundSchema).optional(),
            notificationPaymentFailed: z.array(ACLAction$.outboundSchema).optional(),
            notificationUsageAlert: z.array(ACLAction$.outboundSchema).optional(),
            notificationCustomerBudget: z.array(ACLAction$.outboundSchema).optional(),
            notificationStatementOfReasons: z.array(ACLAction$.outboundSchema).optional(),
            oauth2Connection: z.array(ACLAction$.outboundSchema).optional(),
            openTelemetryEndpoint: z.array(ACLAction$.outboundSchema).optional(),
            paymentMethod: z.array(ACLAction$.outboundSchema).optional(),
            permissions: z.array(ACLAction$.outboundSchema).optional(),
            postgres: z.array(ACLAction$.outboundSchema).optional(),
            previewDeploymentSuffix: z.array(ACLAction$.outboundSchema).optional(),
            proTrialOnboarding: z.array(ACLAction$.outboundSchema).optional(),
            seawallConfig: z.array(ACLAction$.outboundSchema).optional(),
            sharedEnvVars: z.array(ACLAction$.outboundSchema).optional(),
            sharedEnvVarsProduction: z.array(ACLAction$.outboundSchema).optional(),
            space: z.array(ACLAction$.outboundSchema).optional(),
            spaceRun: z.array(ACLAction$.outboundSchema).optional(),
            passwordProtectionInvoiceItem: z.array(ACLAction$.outboundSchema).optional(),
            rateLimit: z.array(ACLAction$.outboundSchema).optional(),
            redis: z.array(ACLAction$.outboundSchema).optional(),
            repository: z.array(ACLAction$.outboundSchema).optional(),
            remoteCaching: z.array(ACLAction$.outboundSchema).optional(),
            samlConfig: z.array(ACLAction$.outboundSchema).optional(),
            secret: z.array(ACLAction$.outboundSchema).optional(),
            redisStoreTokenSet: z.array(ACLAction$.outboundSchema).optional(),
            blobStoreTokenSet: z.array(ACLAction$.outboundSchema).optional(),
            postgresStoreTokenSet: z.array(ACLAction$.outboundSchema).optional(),
            integrationStoreTokenSet: z.array(ACLAction$.outboundSchema).optional(),
            supportCase: z.array(ACLAction$.outboundSchema).optional(),
            supportCaseComment: z.array(ACLAction$.outboundSchema).optional(),
            dataCacheBillingSettings: z.array(ACLAction$.outboundSchema).optional(),
            team: z.array(ACLAction$.outboundSchema).optional(),
            teamAccessRequest: z.array(ACLAction$.outboundSchema).optional(),
            teamFellowMembership: z.array(ACLAction$.outboundSchema).optional(),
            teamInvite: z.array(ACLAction$.outboundSchema).optional(),
            teamInviteCode: z.array(ACLAction$.outboundSchema).optional(),
            teamJoin: z.array(ACLAction$.outboundSchema).optional(),
            teamOwnMembership: z.array(ACLAction$.outboundSchema).optional(),
            teamOwnMembershipDisconnectSAML: z.array(ACLAction$.outboundSchema).optional(),
            token: z.array(ACLAction$.outboundSchema).optional(),
            usage: z.array(ACLAction$.outboundSchema).optional(),
            usageCycle: z.array(ACLAction$.outboundSchema).optional(),
            user: z.array(ACLAction$.outboundSchema).optional(),
            userConnection: z.array(ACLAction$.outboundSchema).optional(),
            webAnalyticsPlan: z.array(ACLAction$.outboundSchema).optional(),
            webAuthn: z.array(ACLAction$.outboundSchema).optional(),
            edgeConfig: z.array(ACLAction$.outboundSchema).optional(),
            edgeConfigItem: z.array(ACLAction$.outboundSchema).optional(),
            edgeConfigSchema: z.array(ACLAction$.outboundSchema).optional(),
            edgeConfigToken: z.array(ACLAction$.outboundSchema).optional(),
            webhook: z.array(ACLAction$.outboundSchema).optional(),
            webhookEvent: z.array(ACLAction$.outboundSchema).optional(),
            endpointVerification: z.array(ACLAction$.outboundSchema).optional(),
            projectTransferIn: z.array(ACLAction$.outboundSchema).optional(),
            oauth2Application: z.array(ACLAction$.outboundSchema).optional(),
            aliasProject: z.array(ACLAction$.outboundSchema).optional(),
            aliasProtectionBypass: z.array(ACLAction$.outboundSchema).optional(),
            productionAliasProtectionBypass: z.array(ACLAction$.outboundSchema).optional(),
            connectConfigurationLink: z.array(ACLAction$.outboundSchema).optional(),
            dataCacheNamespace: z.array(ACLAction$.outboundSchema).optional(),
            deployment: z.array(ACLAction$.outboundSchema).optional(),
            deploymentCheck: z.array(ACLAction$.outboundSchema).optional(),
            deploymentCheckPreview: z.array(ACLAction$.outboundSchema).optional(),
            deploymentCheckReRunFromProductionBranch: z.array(ACLAction$.outboundSchema).optional(),
            deploymentProductionGit: z.array(ACLAction$.outboundSchema).optional(),
            deploymentPreview: z.array(ACLAction$.outboundSchema).optional(),
            deploymentPrivate: z.array(ACLAction$.outboundSchema).optional(),
            deploymentPromote: z.array(ACLAction$.outboundSchema).optional(),
            deploymentRollback: z.array(ACLAction$.outboundSchema).optional(),
            environments: z.array(ACLAction$.outboundSchema).optional(),
            logs: z.array(ACLAction$.outboundSchema).optional(),
            logsPreset: z.array(ACLAction$.outboundSchema).optional(),
            passwordProtection: z.array(ACLAction$.outboundSchema).optional(),
            optionsAllowlist: z.array(ACLAction$.outboundSchema).optional(),
            job: z.array(ACLAction$.outboundSchema).optional(),
            project: z.array(ACLAction$.outboundSchema).optional(),
            projectAccessGroup: z.array(ACLAction$.outboundSchema).optional(),
            projectAnalyticsSampling: z.array(ACLAction$.outboundSchema).optional(),
            projectDeploymentHook: z.array(ACLAction$.outboundSchema).optional(),
            projectDomain: z.array(ACLAction$.outboundSchema).optional(),
            projectDomainMove: z.array(ACLAction$.outboundSchema).optional(),
            projectDomainCheckConfig: z.array(ACLAction$.outboundSchema).optional(),
            projectEnvVars: z.array(ACLAction$.outboundSchema).optional(),
            projectEnvVarsProduction: z.array(ACLAction$.outboundSchema).optional(),
            projectEnvVarsUnownedByIntegration: z.array(ACLAction$.outboundSchema).optional(),
            projectId: z.array(ACLAction$.outboundSchema).optional(),
            projectIntegrationConfiguration: z.array(ACLAction$.outboundSchema).optional(),
            projectLink: z.array(ACLAction$.outboundSchema).optional(),
            projectMember: z.array(ACLAction$.outboundSchema).optional(),
            projectMonitoring: z.array(ACLAction$.outboundSchema).optional(),
            projectPermissions: z.array(ACLAction$.outboundSchema).optional(),
            projectProductionBranch: z.array(ACLAction$.outboundSchema).optional(),
            projectTransfer: z.array(ACLAction$.outboundSchema).optional(),
            projectTransferOut: z.array(ACLAction$.outboundSchema).optional(),
            projectProtectionBypass: z.array(ACLAction$.outboundSchema).optional(),
            projectUsage: z.array(ACLAction$.outboundSchema).optional(),
            projectAnalyticsUsage: z.array(ACLAction$.outboundSchema).optional(),
            projectSupportCase: z.array(ACLAction$.outboundSchema).optional(),
            projectSupportCaseComment: z.array(ACLAction$.outboundSchema).optional(),
            projectDeploymentExpiration: z.array(ACLAction$.outboundSchema).optional(),
            skewProtection: z.array(ACLAction$.outboundSchema).optional(),
            analytics: z.array(ACLAction$.outboundSchema).optional(),
            trustedIps: z.array(ACLAction$.outboundSchema).optional(),
            webAnalytics: z.array(ACLAction$.outboundSchema).optional(),
            sharedEnvVarConnection: z.array(ACLAction$.outboundSchema).optional(),
        })
        .transform((v) => {
            return remap$(v, {
                monitoring: "Monitoring",
                notificationMonitoringAlert: "NotificationMonitoringAlert",
                webhookEvent: "webhook-event",
            });
        });
}

/** @internal */
export namespace GetProjectsLastRollbackTarget$ {
    export const inboundSchema: z.ZodType<GetProjectsLastRollbackTarget, z.ZodTypeDef, unknown> =
        z.object({});

    export type Outbound = {};

    export const outboundSchema: z.ZodType<Outbound, z.ZodTypeDef, GetProjectsLastRollbackTarget> =
        z.object({});
}

/** @internal */
export namespace GetProjectsJobStatus$ {
    export const inboundSchema = z.nativeEnum(GetProjectsJobStatus);
    export const outboundSchema = inboundSchema;
}

/** @internal */
export namespace GetProjectsProjectsResponseType$ {
    export const inboundSchema = z.nativeEnum(GetProjectsProjectsResponseType);
    export const outboundSchema = inboundSchema;
}

/** @internal */
export namespace GetProjectsLastAliasRequest$ {
    export const inboundSchema: z.ZodType<GetProjectsLastAliasRequest, z.ZodTypeDef, unknown> =
        z.object({
            fromDeploymentId: z.string(),
            toDeploymentId: z.string(),
            jobStatus: GetProjectsJobStatus$.inboundSchema,
            requestedAt: z.number(),
            type: GetProjectsProjectsResponseType$.inboundSchema,
        });

    export type Outbound = {
        fromDeploymentId: string;
        toDeploymentId: string;
        jobStatus: string;
        requestedAt: number;
        type: string;
    };

    export const outboundSchema: z.ZodType<Outbound, z.ZodTypeDef, GetProjectsLastAliasRequest> =
        z.object({
            fromDeploymentId: z.string(),
            toDeploymentId: z.string(),
            jobStatus: GetProjectsJobStatus$.outboundSchema,
            requestedAt: z.number(),
            type: GetProjectsProjectsResponseType$.outboundSchema,
        });
}

/** @internal */
export namespace GetProjectsScope$ {
    export const inboundSchema = z.nativeEnum(GetProjectsScope);
    export const outboundSchema = inboundSchema;
}

/** @internal */
export namespace GetProjectsProtectionBypass$ {
    export const inboundSchema: z.ZodType<GetProjectsProtectionBypass, z.ZodTypeDef, unknown> =
        z.object({
            createdAt: z.number(),
            createdBy: z.string(),
            scope: GetProjectsScope$.inboundSchema,
        });

    export type Outbound = {
        createdAt: number;
        createdBy: string;
        scope: string;
    };

    export const outboundSchema: z.ZodType<Outbound, z.ZodTypeDef, GetProjectsProtectionBypass> =
        z.object({
            createdAt: z.number(),
            createdBy: z.string(),
            scope: GetProjectsScope$.outboundSchema,
        });
}

/** @internal */
export namespace GetProjectsTrustedIpsProjectsDeploymentType$ {
    export const inboundSchema = z.nativeEnum(GetProjectsTrustedIpsProjectsDeploymentType);
    export const outboundSchema = inboundSchema;
}

/** @internal */
export namespace GetProjectsTrustedIps2$ {
    export const inboundSchema: z.ZodType<GetProjectsTrustedIps2, z.ZodTypeDef, unknown> = z.object(
        {
            deploymentType: GetProjectsTrustedIpsProjectsDeploymentType$.inboundSchema,
        }
    );

    export type Outbound = {
        deploymentType: string;
    };

    export const outboundSchema: z.ZodType<Outbound, z.ZodTypeDef, GetProjectsTrustedIps2> =
        z.object({
            deploymentType: GetProjectsTrustedIpsProjectsDeploymentType$.outboundSchema,
        });
}

/** @internal */
export namespace GetProjectsTrustedIpsDeploymentType$ {
    export const inboundSchema = z.nativeEnum(GetProjectsTrustedIpsDeploymentType);
    export const outboundSchema = inboundSchema;
}

/** @internal */
export namespace GetProjectsTrustedIpsAddresses$ {
    export const inboundSchema: z.ZodType<GetProjectsTrustedIpsAddresses, z.ZodTypeDef, unknown> =
        z.object({
            value: z.string(),
            note: z.string().optional(),
        });

    export type Outbound = {
        value: string;
        note?: string | undefined;
    };

    export const outboundSchema: z.ZodType<Outbound, z.ZodTypeDef, GetProjectsTrustedIpsAddresses> =
        z.object({
            value: z.string(),
            note: z.string().optional(),
        });
}

/** @internal */
export namespace GetProjectsTrustedIpsProtectionMode$ {
    export const inboundSchema = z.nativeEnum(GetProjectsTrustedIpsProtectionMode);
    export const outboundSchema = inboundSchema;
}

/** @internal */
export namespace GetProjectsTrustedIps1$ {
    export const inboundSchema: z.ZodType<GetProjectsTrustedIps1, z.ZodTypeDef, unknown> = z.object(
        {
            deploymentType: GetProjectsTrustedIpsDeploymentType$.inboundSchema,
            addresses: z.array(z.lazy(() => GetProjectsTrustedIpsAddresses$.inboundSchema)),
            protectionMode: GetProjectsTrustedIpsProtectionMode$.inboundSchema,
        }
    );

    export type Outbound = {
        deploymentType: string;
        addresses: Array<GetProjectsTrustedIpsAddresses$.Outbound>;
        protectionMode: string;
    };

    export const outboundSchema: z.ZodType<Outbound, z.ZodTypeDef, GetProjectsTrustedIps1> =
        z.object({
            deploymentType: GetProjectsTrustedIpsDeploymentType$.outboundSchema,
            addresses: z.array(z.lazy(() => GetProjectsTrustedIpsAddresses$.outboundSchema)),
            protectionMode: GetProjectsTrustedIpsProtectionMode$.outboundSchema,
        });
}

/** @internal */
export namespace GetProjectsTrustedIps$ {
    export const inboundSchema: z.ZodType<GetProjectsTrustedIps, z.ZodTypeDef, unknown> = z.union([
        z.lazy(() => GetProjectsTrustedIps2$.inboundSchema),
        z.lazy(() => GetProjectsTrustedIps1$.inboundSchema),
    ]);

    export type Outbound = GetProjectsTrustedIps2$.Outbound | GetProjectsTrustedIps1$.Outbound;
    export const outboundSchema: z.ZodType<Outbound, z.ZodTypeDef, GetProjectsTrustedIps> = z.union(
        [
            z.lazy(() => GetProjectsTrustedIps2$.outboundSchema),
            z.lazy(() => GetProjectsTrustedIps1$.outboundSchema),
        ]
    );
}

/** @internal */
export namespace GetProjectsGitComments$ {
    export const inboundSchema: z.ZodType<GetProjectsGitComments, z.ZodTypeDef, unknown> = z.object(
        {
            onPullRequest: z.boolean(),
            onCommit: z.boolean(),
        }
    );

    export type Outbound = {
        onPullRequest: boolean;
        onCommit: boolean;
    };

    export const outboundSchema: z.ZodType<Outbound, z.ZodTypeDef, GetProjectsGitComments> =
        z.object({
            onPullRequest: z.boolean(),
            onCommit: z.boolean(),
        });
}

/** @internal */
export namespace GetProjectsWebAnalytics$ {
    export const inboundSchema: z.ZodType<GetProjectsWebAnalytics, z.ZodTypeDef, unknown> =
        z.object({
            id: z.string(),
            disabledAt: z.number().optional(),
            canceledAt: z.number().optional(),
            enabledAt: z.number().optional(),
            hasData: z.boolean().optional(),
        });

    export type Outbound = {
        id: string;
        disabledAt?: number | undefined;
        canceledAt?: number | undefined;
        enabledAt?: number | undefined;
        hasData?: boolean | undefined;
    };

    export const outboundSchema: z.ZodType<Outbound, z.ZodTypeDef, GetProjectsWebAnalytics> =
        z.object({
            id: z.string(),
            disabledAt: z.number().optional(),
            canceledAt: z.number().optional(),
            enabledAt: z.number().optional(),
            hasData: z.boolean().optional(),
        });
}

/** @internal */
export namespace GetProjectsSrc2$ {
    export const inboundSchema: z.ZodType<GetProjectsSrc2, z.ZodTypeDef, unknown> = z.object({
        re: z.string().optional(),
        eq: z.string().optional(),
        neq: z.string().optional(),
        inc: z.array(z.string()).optional(),
        ninc: z.array(z.string()).optional(),
        pre: z.string().optional(),
        suf: z.string().optional(),
        gt: z.number().optional(),
        gte: z.number().optional(),
        lt: z.number().optional(),
        lte: z.number().optional(),
    });

    export type Outbound = {
        re?: string | undefined;
        eq?: string | undefined;
        neq?: string | undefined;
        inc?: Array<string> | undefined;
        ninc?: Array<string> | undefined;
        pre?: string | undefined;
        suf?: string | undefined;
        gt?: number | undefined;
        gte?: number | undefined;
        lt?: number | undefined;
        lte?: number | undefined;
    };

    export const outboundSchema: z.ZodType<Outbound, z.ZodTypeDef, GetProjectsSrc2> = z.object({
        re: z.string().optional(),
        eq: z.string().optional(),
        neq: z.string().optional(),
        inc: z.array(z.string()).optional(),
        ninc: z.array(z.string()).optional(),
        pre: z.string().optional(),
        suf: z.string().optional(),
        gt: z.number().optional(),
        gte: z.number().optional(),
        lt: z.number().optional(),
        lte: z.number().optional(),
    });
}

/** @internal */
export namespace GetProjectsSrc$ {
    export const inboundSchema: z.ZodType<GetProjectsSrc, z.ZodTypeDef, unknown> = z.union([
        z.lazy(() => GetProjectsSrc2$.inboundSchema),
        z.string(),
    ]);

    export type Outbound = GetProjectsSrc2$.Outbound | string;
    export const outboundSchema: z.ZodType<Outbound, z.ZodTypeDef, GetProjectsSrc> = z.union([
        z.lazy(() => GetProjectsSrc2$.outboundSchema),
        z.string(),
    ]);
}

/** @internal */
export namespace GetProjectsProjectsResponse200ApplicationJSONType$ {
    export const inboundSchema = z.nativeEnum(GetProjectsProjectsResponse200ApplicationJSONType);
    export const outboundSchema = inboundSchema;
}

/** @internal */
export namespace GetProjectsValue2$ {
    export const inboundSchema: z.ZodType<GetProjectsValue2, z.ZodTypeDef, unknown> = z.object({
        re: z.string().optional(),
        eq: z.string().optional(),
        neq: z.string().optional(),
        inc: z.array(z.string()).optional(),
        ninc: z.array(z.string()).optional(),
        pre: z.string().optional(),
        suf: z.string().optional(),
        gt: z.number().optional(),
        gte: z.number().optional(),
        lt: z.number().optional(),
        lte: z.number().optional(),
    });

    export type Outbound = {
        re?: string | undefined;
        eq?: string | undefined;
        neq?: string | undefined;
        inc?: Array<string> | undefined;
        ninc?: Array<string> | undefined;
        pre?: string | undefined;
        suf?: string | undefined;
        gt?: number | undefined;
        gte?: number | undefined;
        lt?: number | undefined;
        lte?: number | undefined;
    };

    export const outboundSchema: z.ZodType<Outbound, z.ZodTypeDef, GetProjectsValue2> = z.object({
        re: z.string().optional(),
        eq: z.string().optional(),
        neq: z.string().optional(),
        inc: z.array(z.string()).optional(),
        ninc: z.array(z.string()).optional(),
        pre: z.string().optional(),
        suf: z.string().optional(),
        gt: z.number().optional(),
        gte: z.number().optional(),
        lt: z.number().optional(),
        lte: z.number().optional(),
    });
}

/** @internal */
export namespace GetProjectsValue$ {
    export const inboundSchema: z.ZodType<GetProjectsValue, z.ZodTypeDef, unknown> = z.union([
        z.lazy(() => GetProjectsValue2$.inboundSchema),
        z.string(),
    ]);

    export type Outbound = GetProjectsValue2$.Outbound | string;
    export const outboundSchema: z.ZodType<Outbound, z.ZodTypeDef, GetProjectsValue> = z.union([
        z.lazy(() => GetProjectsValue2$.outboundSchema),
        z.string(),
    ]);
}

/** @internal */
export namespace GetProjectsHas$ {
    export const inboundSchema: z.ZodType<GetProjectsHas, z.ZodTypeDef, unknown> = z.object({
        type: GetProjectsProjectsResponse200ApplicationJSONType$.inboundSchema,
        key: z.string().optional(),
        value: z.union([z.lazy(() => GetProjectsValue2$.inboundSchema), z.string()]).optional(),
    });

    export type Outbound = {
        type: string;
        key?: string | undefined;
        value?: GetProjectsValue2$.Outbound | string | undefined;
    };

    export const outboundSchema: z.ZodType<Outbound, z.ZodTypeDef, GetProjectsHas> = z.object({
        type: GetProjectsProjectsResponse200ApplicationJSONType$.outboundSchema,
        key: z.string().optional(),
        value: z.union([z.lazy(() => GetProjectsValue2$.outboundSchema), z.string()]).optional(),
    });
}

/** @internal */
export namespace GetProjectsProjectsResponse200ApplicationJSONResponseBodyType$ {
    export const inboundSchema = z.nativeEnum(
        GetProjectsProjectsResponse200ApplicationJSONResponseBodyType
    );
    export const outboundSchema = inboundSchema;
}

/** @internal */
export namespace GetProjectsValueProjects2$ {
    export const inboundSchema: z.ZodType<GetProjectsValueProjects2, z.ZodTypeDef, unknown> =
        z.object({
            re: z.string().optional(),
            eq: z.string().optional(),
            neq: z.string().optional(),
            inc: z.array(z.string()).optional(),
            ninc: z.array(z.string()).optional(),
            pre: z.string().optional(),
            suf: z.string().optional(),
            gt: z.number().optional(),
            gte: z.number().optional(),
            lt: z.number().optional(),
            lte: z.number().optional(),
        });

    export type Outbound = {
        re?: string | undefined;
        eq?: string | undefined;
        neq?: string | undefined;
        inc?: Array<string> | undefined;
        ninc?: Array<string> | undefined;
        pre?: string | undefined;
        suf?: string | undefined;
        gt?: number | undefined;
        gte?: number | undefined;
        lt?: number | undefined;
        lte?: number | undefined;
    };

    export const outboundSchema: z.ZodType<Outbound, z.ZodTypeDef, GetProjectsValueProjects2> =
        z.object({
            re: z.string().optional(),
            eq: z.string().optional(),
            neq: z.string().optional(),
            inc: z.array(z.string()).optional(),
            ninc: z.array(z.string()).optional(),
            pre: z.string().optional(),
            suf: z.string().optional(),
            gt: z.number().optional(),
            gte: z.number().optional(),
            lt: z.number().optional(),
            lte: z.number().optional(),
        });
}

/** @internal */
export namespace GetProjectsProjectsValue$ {
    export const inboundSchema: z.ZodType<GetProjectsProjectsValue, z.ZodTypeDef, unknown> =
        z.union([z.lazy(() => GetProjectsValueProjects2$.inboundSchema), z.string()]);

    export type Outbound = GetProjectsValueProjects2$.Outbound | string;
    export const outboundSchema: z.ZodType<Outbound, z.ZodTypeDef, GetProjectsProjectsValue> =
        z.union([z.lazy(() => GetProjectsValueProjects2$.outboundSchema), z.string()]);
}

/** @internal */
export namespace GetProjectsMissing$ {
    export const inboundSchema: z.ZodType<GetProjectsMissing, z.ZodTypeDef, unknown> = z.object({
        type: GetProjectsProjectsResponse200ApplicationJSONResponseBodyType$.inboundSchema,
        key: z.string().optional(),
        value: z
            .union([z.lazy(() => GetProjectsValueProjects2$.inboundSchema), z.string()])
            .optional(),
    });

    export type Outbound = {
        type: string;
        key?: string | undefined;
        value?: GetProjectsValueProjects2$.Outbound | string | undefined;
    };

    export const outboundSchema: z.ZodType<Outbound, z.ZodTypeDef, GetProjectsMissing> = z.object({
        type: GetProjectsProjectsResponse200ApplicationJSONResponseBodyType$.outboundSchema,
        key: z.string().optional(),
        value: z
            .union([z.lazy(() => GetProjectsValueProjects2$.outboundSchema), z.string()])
            .optional(),
    });
}

/** @internal */
export namespace GetProjectsHandle$ {
    export const inboundSchema = z.nativeEnum(GetProjectsHandle);
    export const outboundSchema = inboundSchema;
}

/** @internal */
export namespace GetProjectsAction$ {
    export const inboundSchema = z.nativeEnum(GetProjectsAction);
    export const outboundSchema = inboundSchema;
}

/** @internal */
export namespace GetProjectsAlgo$ {
    export const inboundSchema = z.nativeEnum(GetProjectsAlgo);
    export const outboundSchema = inboundSchema;
}

/** @internal */
export namespace GetProjectsErl$ {
    export const inboundSchema: z.ZodType<GetProjectsErl, z.ZodTypeDef, unknown> = z.object({
        algo: GetProjectsAlgo$.inboundSchema,
        window: z.number(),
        limit: z.number(),
        keys: z.array(z.string()),
    });

    export type Outbound = {
        algo: string;
        window: number;
        limit: number;
        keys: Array<string>;
    };

    export const outboundSchema: z.ZodType<Outbound, z.ZodTypeDef, GetProjectsErl> = z.object({
        algo: GetProjectsAlgo$.outboundSchema,
        window: z.number(),
        limit: z.number(),
        keys: z.array(z.string()),
    });
}

/** @internal */
export namespace GetProjectsMitigate$ {
    export const inboundSchema: z.ZodType<GetProjectsMitigate, z.ZodTypeDef, unknown> = z
        .object({
            action: GetProjectsAction$.inboundSchema,
            rule_id: z.string(),
            erl: z.lazy(() => GetProjectsErl$.inboundSchema).optional(),
        })
        .transform((v) => {
            return remap$(v, {
                rule_id: "ruleId",
            });
        });

    export type Outbound = {
        action: string;
        rule_id: string;
        erl?: GetProjectsErl$.Outbound | undefined;
    };

    export const outboundSchema: z.ZodType<Outbound, z.ZodTypeDef, GetProjectsMitigate> = z
        .object({
            action: GetProjectsAction$.outboundSchema,
            ruleId: z.string(),
            erl: z.lazy(() => GetProjectsErl$.outboundSchema).optional(),
        })
        .transform((v) => {
            return remap$(v, {
                ruleId: "rule_id",
            });
        });
}

/** @internal */
export namespace GetProjectsFirewallRoutes$ {
    export const inboundSchema: z.ZodType<GetProjectsFirewallRoutes, z.ZodTypeDef, unknown> =
        z.object({
            src: z.union([z.lazy(() => GetProjectsSrc2$.inboundSchema), z.string()]).optional(),
            has: z.array(z.lazy(() => GetProjectsHas$.inboundSchema)).optional(),
            missing: z.array(z.lazy(() => GetProjectsMissing$.inboundSchema)).optional(),
            dest: z.string().optional(),
            status: z.number().optional(),
            handle: GetProjectsHandle$.inboundSchema.optional(),
            mitigate: z.lazy(() => GetProjectsMitigate$.inboundSchema).optional(),
        });

    export type Outbound = {
        src?: GetProjectsSrc2$.Outbound | string | undefined;
        has?: Array<GetProjectsHas$.Outbound> | undefined;
        missing?: Array<GetProjectsMissing$.Outbound> | undefined;
        dest?: string | undefined;
        status?: number | undefined;
        handle?: string | undefined;
        mitigate?: GetProjectsMitigate$.Outbound | undefined;
    };

    export const outboundSchema: z.ZodType<Outbound, z.ZodTypeDef, GetProjectsFirewallRoutes> =
        z.object({
            src: z.union([z.lazy(() => GetProjectsSrc2$.outboundSchema), z.string()]).optional(),
            has: z.array(z.lazy(() => GetProjectsHas$.outboundSchema)).optional(),
            missing: z.array(z.lazy(() => GetProjectsMissing$.outboundSchema)).optional(),
            dest: z.string().optional(),
            status: z.number().optional(),
            handle: GetProjectsHandle$.outboundSchema.optional(),
            mitigate: z.lazy(() => GetProjectsMitigate$.outboundSchema).optional(),
        });
}

/** @internal */
export namespace GetProjectsSecurity$ {
    export const inboundSchema: z.ZodType<GetProjectsSecurity, z.ZodTypeDef, unknown> = z.object({
        attackModeEnabled: z.boolean().optional(),
        attackModeUpdatedAt: z.number().optional(),
        firewallEnabled: z.boolean().optional(),
        firewallUpdatedAt: z.number().optional(),
        attackModeActiveUntil: z.nullable(z.number()).optional(),
        firewallConfigVersion: z.number().optional(),
        firewallRoutes: z.array(z.lazy(() => GetProjectsFirewallRoutes$.inboundSchema)).optional(),
        firewallSeawallEnabled: z.boolean().optional(),
        ja3Enabled: z.boolean().optional(),
        ja4Enabled: z.boolean().optional(),
    });

    export type Outbound = {
        attackModeEnabled?: boolean | undefined;
        attackModeUpdatedAt?: number | undefined;
        firewallEnabled?: boolean | undefined;
        firewallUpdatedAt?: number | undefined;
        attackModeActiveUntil?: number | null | undefined;
        firewallConfigVersion?: number | undefined;
        firewallRoutes?: Array<GetProjectsFirewallRoutes$.Outbound> | undefined;
        firewallSeawallEnabled?: boolean | undefined;
        ja3Enabled?: boolean | undefined;
        ja4Enabled?: boolean | undefined;
    };

    export const outboundSchema: z.ZodType<Outbound, z.ZodTypeDef, GetProjectsSecurity> = z.object({
        attackModeEnabled: z.boolean().optional(),
        attackModeUpdatedAt: z.number().optional(),
        firewallEnabled: z.boolean().optional(),
        firewallUpdatedAt: z.number().optional(),
        attackModeActiveUntil: z.nullable(z.number()).optional(),
        firewallConfigVersion: z.number().optional(),
        firewallRoutes: z.array(z.lazy(() => GetProjectsFirewallRoutes$.outboundSchema)).optional(),
        firewallSeawallEnabled: z.boolean().optional(),
        ja3Enabled: z.boolean().optional(),
        ja4Enabled: z.boolean().optional(),
    });
}

/** @internal */
export namespace GetProjectsOidcTokenConfig$ {
    export const inboundSchema: z.ZodType<GetProjectsOidcTokenConfig, z.ZodTypeDef, unknown> =
        z.object({
            enabled: z.boolean(),
        });

    export type Outbound = {
        enabled: boolean;
    };

    export const outboundSchema: z.ZodType<Outbound, z.ZodTypeDef, GetProjectsOidcTokenConfig> =
        z.object({
            enabled: z.boolean(),
        });
}

/** @internal */
export namespace GetProjectsProjects$ {
    export const inboundSchema: z.ZodType<GetProjectsProjects, z.ZodTypeDef, unknown> = z.object({
        accountId: z.string(),
        analytics: z.lazy(() => GetProjectsAnalytics$.inboundSchema).optional(),
        speedInsights: z.lazy(() => GetProjectsSpeedInsights$.inboundSchema).optional(),
        autoExposeSystemEnvs: z.boolean().optional(),
        autoAssignCustomDomains: z.boolean().optional(),
        autoAssignCustomDomainsUpdatedBy: z.string().optional(),
        buildCommand: z.nullable(z.string()).optional(),
        commandForIgnoringBuildStep: z.nullable(z.string()).optional(),
        connectConfigurationId: z.nullable(z.string()).optional(),
        connectBuildsEnabled: z.boolean().optional(),
        createdAt: z.number().optional(),
        customerSupportCodeVisibility: z.boolean().optional(),
        crons: z.lazy(() => GetProjectsCrons$.inboundSchema).optional(),
        dataCache: z.lazy(() => GetProjectsDataCache$.inboundSchema).optional(),
        devCommand: z.nullable(z.string()).optional(),
        directoryListing: z.boolean(),
        installCommand: z.nullable(z.string()).optional(),
        env: z.array(z.lazy(() => GetProjectsEnv$.inboundSchema)).optional(),
        framework: z.nullable(GetProjectsFramework$.inboundSchema).optional(),
        gitForkProtection: z.boolean().optional(),
        gitLFS: z.boolean().optional(),
        id: z.string(),
        latestDeployments: z
            .array(z.lazy(() => GetProjectsLatestDeployments$.inboundSchema))
            .optional(),
        link: z
            .union([
                z.lazy(() => GetProjectsLink1$.inboundSchema),
                z.lazy(() => GetProjectsLink2$.inboundSchema),
                z.lazy(() => GetProjectsLink3$.inboundSchema),
            ])
            .optional(),
        name: z.string(),
        nodeVersion: GetProjectsNodeVersion$.inboundSchema,
        optionsAllowlist: z
            .nullable(z.lazy(() => GetProjectsOptionsAllowlist$.inboundSchema))
            .optional(),
        outputDirectory: z.nullable(z.string()).optional(),
        passiveConnectConfigurationId: z.nullable(z.string()).optional(),
        passwordProtection: z
            .nullable(z.lazy(() => GetProjectsPasswordProtection$.inboundSchema))
            .optional(),
        productionDeploymentsFastLane: z.boolean().optional(),
        publicSource: z.nullable(z.boolean()).optional(),
        rootDirectory: z.nullable(z.string()).optional(),
        serverlessFunctionRegion: z.nullable(z.string()).optional(),
        serverlessFunctionZeroConfigFailover: z.boolean().optional(),
        skewProtectionBoundaryAt: z.number().optional(),
        skewProtectionMaxAge: z.number().optional(),
        skipGitConnectDuringLink: z.boolean().optional(),
        sourceFilesOutsideRootDirectory: z.boolean().optional(),
        ssoProtection: z.nullable(z.lazy(() => GetProjectsSsoProtection$.inboundSchema)).optional(),
        targets: z.record(z.union([z.string(), z.array(z.string())])).optional(),
        transferCompletedAt: z.number().optional(),
        transferStartedAt: z.number().optional(),
        transferToAccountId: z.string().optional(),
        transferredFromAccountId: z.string().optional(),
        updatedAt: z.number().optional(),
        live: z.boolean().optional(),
        enablePreviewFeedback: z.nullable(z.boolean()).optional(),
        permissions: z.lazy(() => GetProjectsPermissions$.inboundSchema).optional(),
        lastRollbackTarget: z
            .nullable(z.lazy(() => GetProjectsLastRollbackTarget$.inboundSchema))
            .optional(),
        lastAliasRequest: z
            .nullable(z.lazy(() => GetProjectsLastAliasRequest$.inboundSchema))
            .optional(),
        hasFloatingAliases: z.boolean().optional(),
        protectionBypass: z
            .record(z.lazy(() => GetProjectsProtectionBypass$.inboundSchema))
            .optional(),
        hasActiveBranches: z.boolean().optional(),
        trustedIps: z
            .nullable(
                z.union([
                    z.lazy(() => GetProjectsTrustedIps2$.inboundSchema),
                    z.lazy(() => GetProjectsTrustedIps1$.inboundSchema),
                ])
            )
            .optional(),
        gitComments: z.lazy(() => GetProjectsGitComments$.inboundSchema).optional(),
        paused: z.boolean().optional(),
        concurrencyBucketName: z.string().optional(),
        webAnalytics: z.lazy(() => GetProjectsWebAnalytics$.inboundSchema).optional(),
        security: z.lazy(() => GetProjectsSecurity$.inboundSchema).optional(),
        oidcTokenConfig: z.lazy(() => GetProjectsOidcTokenConfig$.inboundSchema).optional(),
    });

    export type Outbound = {
        accountId: string;
        analytics?: GetProjectsAnalytics$.Outbound | undefined;
        speedInsights?: GetProjectsSpeedInsights$.Outbound | undefined;
        autoExposeSystemEnvs?: boolean | undefined;
        autoAssignCustomDomains?: boolean | undefined;
        autoAssignCustomDomainsUpdatedBy?: string | undefined;
        buildCommand?: string | null | undefined;
        commandForIgnoringBuildStep?: string | null | undefined;
        connectConfigurationId?: string | null | undefined;
        connectBuildsEnabled?: boolean | undefined;
        createdAt?: number | undefined;
        customerSupportCodeVisibility?: boolean | undefined;
        crons?: GetProjectsCrons$.Outbound | undefined;
        dataCache?: GetProjectsDataCache$.Outbound | undefined;
        devCommand?: string | null | undefined;
        directoryListing: boolean;
        installCommand?: string | null | undefined;
        env?: Array<GetProjectsEnv$.Outbound> | undefined;
        framework?: string | null | undefined;
        gitForkProtection?: boolean | undefined;
        gitLFS?: boolean | undefined;
        id: string;
        latestDeployments?: Array<GetProjectsLatestDeployments$.Outbound> | undefined;
        link?:
            | GetProjectsLink1$.Outbound
            | GetProjectsLink2$.Outbound
            | GetProjectsLink3$.Outbound
            | undefined;
        name: string;
        nodeVersion: string;
        optionsAllowlist?: GetProjectsOptionsAllowlist$.Outbound | null | undefined;
        outputDirectory?: string | null | undefined;
        passiveConnectConfigurationId?: string | null | undefined;
        passwordProtection?: GetProjectsPasswordProtection$.Outbound | null | undefined;
        productionDeploymentsFastLane?: boolean | undefined;
        publicSource?: boolean | null | undefined;
        rootDirectory?: string | null | undefined;
        serverlessFunctionRegion?: string | null | undefined;
        serverlessFunctionZeroConfigFailover?: boolean | undefined;
        skewProtectionBoundaryAt?: number | undefined;
        skewProtectionMaxAge?: number | undefined;
        skipGitConnectDuringLink?: boolean | undefined;
        sourceFilesOutsideRootDirectory?: boolean | undefined;
        ssoProtection?: GetProjectsSsoProtection$.Outbound | null | undefined;
        targets?: { [k: string]: string | Array<string> } | undefined;
        transferCompletedAt?: number | undefined;
        transferStartedAt?: number | undefined;
        transferToAccountId?: string | undefined;
        transferredFromAccountId?: string | undefined;
        updatedAt?: number | undefined;
        live?: boolean | undefined;
        enablePreviewFeedback?: boolean | null | undefined;
        permissions?: GetProjectsPermissions$.Outbound | undefined;
        lastRollbackTarget?: GetProjectsLastRollbackTarget$.Outbound | null | undefined;
        lastAliasRequest?: GetProjectsLastAliasRequest$.Outbound | null | undefined;
        hasFloatingAliases?: boolean | undefined;
        protectionBypass?: { [k: string]: GetProjectsProtectionBypass$.Outbound } | undefined;
        hasActiveBranches?: boolean | undefined;
        trustedIps?:
            | GetProjectsTrustedIps2$.Outbound
            | GetProjectsTrustedIps1$.Outbound
            | null
            | undefined;
        gitComments?: GetProjectsGitComments$.Outbound | undefined;
        paused?: boolean | undefined;
        concurrencyBucketName?: string | undefined;
        webAnalytics?: GetProjectsWebAnalytics$.Outbound | undefined;
        security?: GetProjectsSecurity$.Outbound | undefined;
        oidcTokenConfig?: GetProjectsOidcTokenConfig$.Outbound | undefined;
    };

    export const outboundSchema: z.ZodType<Outbound, z.ZodTypeDef, GetProjectsProjects> = z.object({
        accountId: z.string(),
        analytics: z.lazy(() => GetProjectsAnalytics$.outboundSchema).optional(),
        speedInsights: z.lazy(() => GetProjectsSpeedInsights$.outboundSchema).optional(),
        autoExposeSystemEnvs: z.boolean().optional(),
        autoAssignCustomDomains: z.boolean().optional(),
        autoAssignCustomDomainsUpdatedBy: z.string().optional(),
        buildCommand: z.nullable(z.string()).optional(),
        commandForIgnoringBuildStep: z.nullable(z.string()).optional(),
        connectConfigurationId: z.nullable(z.string()).optional(),
        connectBuildsEnabled: z.boolean().optional(),
        createdAt: z.number().optional(),
        customerSupportCodeVisibility: z.boolean().optional(),
        crons: z.lazy(() => GetProjectsCrons$.outboundSchema).optional(),
        dataCache: z.lazy(() => GetProjectsDataCache$.outboundSchema).optional(),
        devCommand: z.nullable(z.string()).optional(),
        directoryListing: z.boolean(),
        installCommand: z.nullable(z.string()).optional(),
        env: z.array(z.lazy(() => GetProjectsEnv$.outboundSchema)).optional(),
        framework: z.nullable(GetProjectsFramework$.outboundSchema).optional(),
        gitForkProtection: z.boolean().optional(),
        gitLFS: z.boolean().optional(),
        id: z.string(),
        latestDeployments: z
            .array(z.lazy(() => GetProjectsLatestDeployments$.outboundSchema))
            .optional(),
        link: z
            .union([
                z.lazy(() => GetProjectsLink1$.outboundSchema),
                z.lazy(() => GetProjectsLink2$.outboundSchema),
                z.lazy(() => GetProjectsLink3$.outboundSchema),
            ])
            .optional(),
        name: z.string(),
        nodeVersion: GetProjectsNodeVersion$.outboundSchema,
        optionsAllowlist: z
            .nullable(z.lazy(() => GetProjectsOptionsAllowlist$.outboundSchema))
            .optional(),
        outputDirectory: z.nullable(z.string()).optional(),
        passiveConnectConfigurationId: z.nullable(z.string()).optional(),
        passwordProtection: z
            .nullable(z.lazy(() => GetProjectsPasswordProtection$.outboundSchema))
            .optional(),
        productionDeploymentsFastLane: z.boolean().optional(),
        publicSource: z.nullable(z.boolean()).optional(),
        rootDirectory: z.nullable(z.string()).optional(),
        serverlessFunctionRegion: z.nullable(z.string()).optional(),
        serverlessFunctionZeroConfigFailover: z.boolean().optional(),
        skewProtectionBoundaryAt: z.number().optional(),
        skewProtectionMaxAge: z.number().optional(),
        skipGitConnectDuringLink: z.boolean().optional(),
        sourceFilesOutsideRootDirectory: z.boolean().optional(),
        ssoProtection: z
            .nullable(z.lazy(() => GetProjectsSsoProtection$.outboundSchema))
            .optional(),
        targets: z.record(z.union([z.string(), z.array(z.string())])).optional(),
        transferCompletedAt: z.number().optional(),
        transferStartedAt: z.number().optional(),
        transferToAccountId: z.string().optional(),
        transferredFromAccountId: z.string().optional(),
        updatedAt: z.number().optional(),
        live: z.boolean().optional(),
        enablePreviewFeedback: z.nullable(z.boolean()).optional(),
        permissions: z.lazy(() => GetProjectsPermissions$.outboundSchema).optional(),
        lastRollbackTarget: z
            .nullable(z.lazy(() => GetProjectsLastRollbackTarget$.outboundSchema))
            .optional(),
        lastAliasRequest: z
            .nullable(z.lazy(() => GetProjectsLastAliasRequest$.outboundSchema))
            .optional(),
        hasFloatingAliases: z.boolean().optional(),
        protectionBypass: z
            .record(z.lazy(() => GetProjectsProtectionBypass$.outboundSchema))
            .optional(),
        hasActiveBranches: z.boolean().optional(),
        trustedIps: z
            .nullable(
                z.union([
                    z.lazy(() => GetProjectsTrustedIps2$.outboundSchema),
                    z.lazy(() => GetProjectsTrustedIps1$.outboundSchema),
                ])
            )
            .optional(),
        gitComments: z.lazy(() => GetProjectsGitComments$.outboundSchema).optional(),
        paused: z.boolean().optional(),
        concurrencyBucketName: z.string().optional(),
        webAnalytics: z.lazy(() => GetProjectsWebAnalytics$.outboundSchema).optional(),
        security: z.lazy(() => GetProjectsSecurity$.outboundSchema).optional(),
        oidcTokenConfig: z.lazy(() => GetProjectsOidcTokenConfig$.outboundSchema).optional(),
    });
}

/** @internal */
export namespace GetProjectsResponseBody$ {
    export const inboundSchema: z.ZodType<GetProjectsResponseBody, z.ZodTypeDef, unknown> =
        z.object({
            projects: z.array(z.lazy(() => GetProjectsProjects$.inboundSchema)),
            pagination: Pagination$.inboundSchema,
        });

    export type Outbound = {
        projects: Array<GetProjectsProjects$.Outbound>;
        pagination: Pagination$.Outbound;
    };

    export const outboundSchema: z.ZodType<Outbound, z.ZodTypeDef, GetProjectsResponseBody> =
        z.object({
            projects: z.array(z.lazy(() => GetProjectsProjects$.outboundSchema)),
            pagination: Pagination$.outboundSchema,
        });
}
