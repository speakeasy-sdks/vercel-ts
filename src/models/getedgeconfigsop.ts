/*
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

import * as z from "zod";

export type GetEdgeConfigsRequest = {
    /**
     * The Team identifier to perform the request on behalf of.
     */
    teamId?: string | undefined;
    /**
     * The Team slug to perform the request on behalf of.
     */
    slug?: string | undefined;
};

/**
 * Keeps track of the current state of the Edge Config while it gets transferred.
 */
export type Transfer = {
    fromAccountId: string;
    startedAt: number;
    doneAt: number | null;
};

export type Schema = {};

/**
 * List of all edge configs.
 */
export type GetEdgeConfigsResponseBody = {
    id?: string | undefined;
    createdAt?: number | undefined;
    ownerId?: string | undefined;
    /**
     * Name for the Edge Config Names are not unique. Must start with an alphabetic character and can contain only alphanumeric characters and underscores).
     */
    slug?: string | undefined;
    updatedAt?: number | undefined;
    digest?: string | undefined;
    /**
     * Keeps track of the current state of the Edge Config while it gets transferred.
     */
    transfer?: Transfer | undefined;
    schema?: Schema | undefined;
    sizeInBytes: number;
    itemCount: number;
};

/** @internal */
export namespace GetEdgeConfigsRequest$ {
    export const inboundSchema: z.ZodType<GetEdgeConfigsRequest, z.ZodTypeDef, unknown> = z.object({
        teamId: z.string().optional(),
        slug: z.string().optional(),
    });

    export type Outbound = {
        teamId?: string | undefined;
        slug?: string | undefined;
    };

    export const outboundSchema: z.ZodType<Outbound, z.ZodTypeDef, GetEdgeConfigsRequest> =
        z.object({
            teamId: z.string().optional(),
            slug: z.string().optional(),
        });
}

/** @internal */
export namespace Transfer$ {
    export const inboundSchema: z.ZodType<Transfer, z.ZodTypeDef, unknown> = z.object({
        fromAccountId: z.string(),
        startedAt: z.number(),
        doneAt: z.nullable(z.number()),
    });

    export type Outbound = {
        fromAccountId: string;
        startedAt: number;
        doneAt: number | null;
    };

    export const outboundSchema: z.ZodType<Outbound, z.ZodTypeDef, Transfer> = z.object({
        fromAccountId: z.string(),
        startedAt: z.number(),
        doneAt: z.nullable(z.number()),
    });
}

/** @internal */
export namespace Schema$ {
    export const inboundSchema: z.ZodType<Schema, z.ZodTypeDef, unknown> = z.object({});

    export type Outbound = {};

    export const outboundSchema: z.ZodType<Outbound, z.ZodTypeDef, Schema> = z.object({});
}

/** @internal */
export namespace GetEdgeConfigsResponseBody$ {
    export const inboundSchema: z.ZodType<GetEdgeConfigsResponseBody, z.ZodTypeDef, unknown> =
        z.object({
            id: z.string().optional(),
            createdAt: z.number().optional(),
            ownerId: z.string().optional(),
            slug: z.string().optional(),
            updatedAt: z.number().optional(),
            digest: z.string().optional(),
            transfer: z.lazy(() => Transfer$.inboundSchema).optional(),
            schema: z.lazy(() => Schema$.inboundSchema).optional(),
            sizeInBytes: z.number(),
            itemCount: z.number(),
        });

    export type Outbound = {
        id?: string | undefined;
        createdAt?: number | undefined;
        ownerId?: string | undefined;
        slug?: string | undefined;
        updatedAt?: number | undefined;
        digest?: string | undefined;
        transfer?: Transfer$.Outbound | undefined;
        schema?: Schema$.Outbound | undefined;
        sizeInBytes: number;
        itemCount: number;
    };

    export const outboundSchema: z.ZodType<Outbound, z.ZodTypeDef, GetEdgeConfigsResponseBody> =
        z.object({
            id: z.string().optional(),
            createdAt: z.number().optional(),
            ownerId: z.string().optional(),
            slug: z.string().optional(),
            updatedAt: z.number().optional(),
            digest: z.string().optional(),
            transfer: z.lazy(() => Transfer$.outboundSchema).optional(),
            schema: z.lazy(() => Schema$.outboundSchema).optional(),
            sizeInBytes: z.number(),
            itemCount: z.number(),
        });
}
