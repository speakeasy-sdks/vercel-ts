/*
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

import * as z from "zod";

export type DeleteDeploymentRequest = {
    /**
     * The ID of the deployment to be deleted
     */
    id: string;
    /**
     * A Deployment or Alias URL. In case it is passed, the ID will be ignored
     */
    url?: string | undefined;
    /**
     * The Team identifier to perform the request on behalf of.
     */
    teamId?: string | undefined;
    /**
     * The Team slug to perform the request on behalf of.
     */
    slug?: string | undefined;
};

/**
 * A constant with the final state of the deployment.
 */
export enum State {
    Deleted = "DELETED",
}

/**
 * The deployment was successfully deleted
 */
export type DeleteDeploymentResponseBody = {
    /**
     * The removed deployment ID.
     */
    uid: string;
    /**
     * A constant with the final state of the deployment.
     */
    state: State;
};

/** @internal */
export namespace DeleteDeploymentRequest$ {
    export const inboundSchema: z.ZodType<DeleteDeploymentRequest, z.ZodTypeDef, unknown> =
        z.object({
            id: z.string(),
            url: z.string().optional(),
            teamId: z.string().optional(),
            slug: z.string().optional(),
        });

    export type Outbound = {
        id: string;
        url?: string | undefined;
        teamId?: string | undefined;
        slug?: string | undefined;
    };

    export const outboundSchema: z.ZodType<Outbound, z.ZodTypeDef, DeleteDeploymentRequest> =
        z.object({
            id: z.string(),
            url: z.string().optional(),
            teamId: z.string().optional(),
            slug: z.string().optional(),
        });
}

/** @internal */
export namespace State$ {
    export const inboundSchema: z.ZodNativeEnum<typeof State> = z.nativeEnum(State);
    export const outboundSchema: z.ZodNativeEnum<typeof State> = inboundSchema;
}

/** @internal */
export namespace DeleteDeploymentResponseBody$ {
    export const inboundSchema: z.ZodType<DeleteDeploymentResponseBody, z.ZodTypeDef, unknown> =
        z.object({
            uid: z.string(),
            state: State$.inboundSchema,
        });

    export type Outbound = {
        uid: string;
        state: string;
    };

    export const outboundSchema: z.ZodType<Outbound, z.ZodTypeDef, DeleteDeploymentResponseBody> =
        z.object({
            uid: z.string(),
            state: State$.outboundSchema,
        });
}
