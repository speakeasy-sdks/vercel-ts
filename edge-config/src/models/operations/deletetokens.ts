/*
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

import * as components from "../components";
import * as z from "zod";

export type DeleteTokensRequestBody = {
    tokens: Array<string>;
};

export type DeleteTokensRequest = {
    edgeConfigId: string;
    /**
     * The Team identifier to perform the request on behalf of.
     */
    teamId?: string | undefined;
    /**
     * The Team slug to perform the request on behalf of.
     */
    slug?: string | undefined;
    requestBody?: DeleteTokensRequestBody | undefined;
};

export type DeleteTokensResponse = {
    httpMeta: components.HTTPMetadata;
};

/** @internal */
export namespace DeleteTokensRequestBody$ {
    export const inboundSchema: z.ZodType<DeleteTokensRequestBody, z.ZodTypeDef, unknown> = z
        .object({
            tokens: z.array(z.string()),
        })
        .transform((v) => {
            return {
                tokens: v.tokens,
            };
        });

    export type Outbound = {
        tokens: Array<string>;
    };

    export const outboundSchema: z.ZodType<Outbound, z.ZodTypeDef, DeleteTokensRequestBody> = z
        .object({
            tokens: z.array(z.string()),
        })
        .transform((v) => {
            return {
                tokens: v.tokens,
            };
        });
}

/** @internal */
export namespace DeleteTokensRequest$ {
    export const inboundSchema: z.ZodType<DeleteTokensRequest, z.ZodTypeDef, unknown> = z
        .object({
            edgeConfigId: z.string(),
            teamId: z.string().optional(),
            slug: z.string().optional(),
            RequestBody: z.lazy(() => DeleteTokensRequestBody$.inboundSchema).optional(),
        })
        .transform((v) => {
            return {
                edgeConfigId: v.edgeConfigId,
                ...(v.teamId === undefined ? null : { teamId: v.teamId }),
                ...(v.slug === undefined ? null : { slug: v.slug }),
                ...(v.RequestBody === undefined ? null : { requestBody: v.RequestBody }),
            };
        });

    export type Outbound = {
        edgeConfigId: string;
        teamId?: string | undefined;
        slug?: string | undefined;
        RequestBody?: DeleteTokensRequestBody$.Outbound | undefined;
    };

    export const outboundSchema: z.ZodType<Outbound, z.ZodTypeDef, DeleteTokensRequest> = z
        .object({
            edgeConfigId: z.string(),
            teamId: z.string().optional(),
            slug: z.string().optional(),
            requestBody: z.lazy(() => DeleteTokensRequestBody$.outboundSchema).optional(),
        })
        .transform((v) => {
            return {
                edgeConfigId: v.edgeConfigId,
                ...(v.teamId === undefined ? null : { teamId: v.teamId }),
                ...(v.slug === undefined ? null : { slug: v.slug }),
                ...(v.requestBody === undefined ? null : { RequestBody: v.requestBody }),
            };
        });
}

/** @internal */
export namespace DeleteTokensResponse$ {
    export const inboundSchema: z.ZodType<DeleteTokensResponse, z.ZodTypeDef, unknown> = z
        .object({
            HttpMeta: components.HTTPMetadata$.inboundSchema,
        })
        .transform((v) => {
            return {
                httpMeta: v.HttpMeta,
            };
        });

    export type Outbound = {
        HttpMeta: components.HTTPMetadata$.Outbound;
    };

    export const outboundSchema: z.ZodType<Outbound, z.ZodTypeDef, DeleteTokensResponse> = z
        .object({
            httpMeta: components.HTTPMetadata$.outboundSchema,
        })
        .transform((v) => {
            return {
                HttpMeta: v.httpMeta,
            };
        });
}
