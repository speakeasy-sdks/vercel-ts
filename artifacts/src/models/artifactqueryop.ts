/*
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

import * as z from "zod";

export type ArtifactQueryRequestBody = {
    /**
     * artifact hashes
     */
    hashes: Array<string>;
};

export type ArtifactQueryRequest = {
    /**
     * The Team identifier to perform the request on behalf of.
     */
    teamId?: string | undefined;
    /**
     * The Team slug to perform the request on behalf of.
     */
    slug?: string | undefined;
    requestBody?: ArtifactQueryRequestBody | undefined;
};

export type ErrorT = {
    message: string;
};

export type Two = {
    error: ErrorT;
};

export type One = {
    size: number;
    taskDurationMs: number;
    tag?: string | undefined;
};

export type ResponseBody = Two | One;

/** @internal */
export namespace ArtifactQueryRequestBody$ {
    export const inboundSchema: z.ZodType<ArtifactQueryRequestBody, z.ZodTypeDef, unknown> = z
        .object({
            hashes: z.array(z.string()),
        })
        .transform((v) => {
            return {
                hashes: v.hashes,
            };
        });

    export type Outbound = {
        hashes: Array<string>;
    };

    export const outboundSchema: z.ZodType<Outbound, z.ZodTypeDef, ArtifactQueryRequestBody> = z
        .object({
            hashes: z.array(z.string()),
        })
        .transform((v) => {
            return {
                hashes: v.hashes,
            };
        });
}

/** @internal */
export namespace ArtifactQueryRequest$ {
    export const inboundSchema: z.ZodType<ArtifactQueryRequest, z.ZodTypeDef, unknown> = z
        .object({
            teamId: z.string().optional(),
            slug: z.string().optional(),
            RequestBody: z.lazy(() => ArtifactQueryRequestBody$.inboundSchema).optional(),
        })
        .transform((v) => {
            return {
                ...(v.teamId === undefined ? null : { teamId: v.teamId }),
                ...(v.slug === undefined ? null : { slug: v.slug }),
                ...(v.RequestBody === undefined ? null : { requestBody: v.RequestBody }),
            };
        });

    export type Outbound = {
        teamId?: string | undefined;
        slug?: string | undefined;
        RequestBody?: ArtifactQueryRequestBody$.Outbound | undefined;
    };

    export const outboundSchema: z.ZodType<Outbound, z.ZodTypeDef, ArtifactQueryRequest> = z
        .object({
            teamId: z.string().optional(),
            slug: z.string().optional(),
            requestBody: z.lazy(() => ArtifactQueryRequestBody$.outboundSchema).optional(),
        })
        .transform((v) => {
            return {
                ...(v.teamId === undefined ? null : { teamId: v.teamId }),
                ...(v.slug === undefined ? null : { slug: v.slug }),
                ...(v.requestBody === undefined ? null : { RequestBody: v.requestBody }),
            };
        });
}

/** @internal */
export namespace ErrorT$ {
    export const inboundSchema: z.ZodType<ErrorT, z.ZodTypeDef, unknown> = z
        .object({
            message: z.string(),
        })
        .transform((v) => {
            return {
                message: v.message,
            };
        });

    export type Outbound = {
        message: string;
    };

    export const outboundSchema: z.ZodType<Outbound, z.ZodTypeDef, ErrorT> = z
        .object({
            message: z.string(),
        })
        .transform((v) => {
            return {
                message: v.message,
            };
        });
}

/** @internal */
export namespace Two$ {
    export const inboundSchema: z.ZodType<Two, z.ZodTypeDef, unknown> = z
        .object({
            error: z.lazy(() => ErrorT$.inboundSchema),
        })
        .transform((v) => {
            return {
                error: v.error,
            };
        });

    export type Outbound = {
        error: ErrorT$.Outbound;
    };

    export const outboundSchema: z.ZodType<Outbound, z.ZodTypeDef, Two> = z
        .object({
            error: z.lazy(() => ErrorT$.outboundSchema),
        })
        .transform((v) => {
            return {
                error: v.error,
            };
        });
}

/** @internal */
export namespace One$ {
    export const inboundSchema: z.ZodType<One, z.ZodTypeDef, unknown> = z
        .object({
            size: z.number(),
            taskDurationMs: z.number(),
            tag: z.string().optional(),
        })
        .transform((v) => {
            return {
                size: v.size,
                taskDurationMs: v.taskDurationMs,
                ...(v.tag === undefined ? null : { tag: v.tag }),
            };
        });

    export type Outbound = {
        size: number;
        taskDurationMs: number;
        tag?: string | undefined;
    };

    export const outboundSchema: z.ZodType<Outbound, z.ZodTypeDef, One> = z
        .object({
            size: z.number(),
            taskDurationMs: z.number(),
            tag: z.string().optional(),
        })
        .transform((v) => {
            return {
                size: v.size,
                taskDurationMs: v.taskDurationMs,
                ...(v.tag === undefined ? null : { tag: v.tag }),
            };
        });
}

/** @internal */
export namespace ResponseBody$ {
    export const inboundSchema: z.ZodType<ResponseBody, z.ZodTypeDef, unknown> = z.union([
        z.lazy(() => Two$.inboundSchema),
        z.lazy(() => One$.inboundSchema),
    ]);

    export type Outbound = Two$.Outbound | One$.Outbound;
    export const outboundSchema: z.ZodType<Outbound, z.ZodTypeDef, ResponseBody> = z.union([
        z.lazy(() => Two$.outboundSchema),
        z.lazy(() => One$.outboundSchema),
    ]);
}
