/*
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

import * as components from "../components";
import * as z from "zod";

/**
 * move-out
 */
export type RequestBody2 = {
    op?: string | undefined;
    /**
     * User or team to move domain to
     */
    destination?: string | undefined;
};

/**
 * update
 */
export type RequestBody1 = {
    op?: string | undefined;
    /**
     * Specifies whether domain should be renewed.
     */
    renew?: boolean | undefined;
    /**
     * The custom nameservers for this project.
     */
    customNameservers?: Array<string> | undefined;
    /**
     * Specifies whether this is a DNS zone that intends to use Vercel's nameservers.
     */
    zone?: boolean | undefined;
};

export type PatchDomainRequestBody = RequestBody2 | RequestBody1;

export type PatchDomainRequest = {
    domain: string;
    /**
     * The Team identifier to perform the request on behalf of.
     */
    teamId?: string | undefined;
    /**
     * The Team slug to perform the request on behalf of.
     */
    slug?: string | undefined;
    requestBody?: RequestBody2 | RequestBody1 | undefined;
};

export type ResponseBody3 = {
    renew?: boolean | undefined;
    customNameservers?: Array<string> | undefined;
    zone?: boolean | undefined;
};

export type ResponseBody2 = {
    moved: boolean;
    token: string;
};

export type ResponseBody1 = {
    moved: boolean;
};

export type PatchDomainResponseBody = ResponseBody1 | ResponseBody2 | ResponseBody3;

export type PatchDomainResponse = {
    httpMeta: components.HTTPMetadata;
    oneOf?: ResponseBody1 | ResponseBody2 | ResponseBody3 | undefined;
};

/** @internal */
export namespace RequestBody2$ {
    export const inboundSchema: z.ZodType<RequestBody2, z.ZodTypeDef, unknown> = z
        .object({
            op: z.string().optional(),
            destination: z.string().optional(),
        })
        .transform((v) => {
            return {
                ...(v.op === undefined ? null : { op: v.op }),
                ...(v.destination === undefined ? null : { destination: v.destination }),
            };
        });

    export type Outbound = {
        op?: string | undefined;
        destination?: string | undefined;
    };

    export const outboundSchema: z.ZodType<Outbound, z.ZodTypeDef, RequestBody2> = z
        .object({
            op: z.string().optional(),
            destination: z.string().optional(),
        })
        .transform((v) => {
            return {
                ...(v.op === undefined ? null : { op: v.op }),
                ...(v.destination === undefined ? null : { destination: v.destination }),
            };
        });
}

/** @internal */
export namespace RequestBody1$ {
    export const inboundSchema: z.ZodType<RequestBody1, z.ZodTypeDef, unknown> = z
        .object({
            op: z.string().optional(),
            renew: z.boolean().optional(),
            customNameservers: z.array(z.string()).optional(),
            zone: z.boolean().optional(),
        })
        .transform((v) => {
            return {
                ...(v.op === undefined ? null : { op: v.op }),
                ...(v.renew === undefined ? null : { renew: v.renew }),
                ...(v.customNameservers === undefined
                    ? null
                    : { customNameservers: v.customNameservers }),
                ...(v.zone === undefined ? null : { zone: v.zone }),
            };
        });

    export type Outbound = {
        op?: string | undefined;
        renew?: boolean | undefined;
        customNameservers?: Array<string> | undefined;
        zone?: boolean | undefined;
    };

    export const outboundSchema: z.ZodType<Outbound, z.ZodTypeDef, RequestBody1> = z
        .object({
            op: z.string().optional(),
            renew: z.boolean().optional(),
            customNameservers: z.array(z.string()).optional(),
            zone: z.boolean().optional(),
        })
        .transform((v) => {
            return {
                ...(v.op === undefined ? null : { op: v.op }),
                ...(v.renew === undefined ? null : { renew: v.renew }),
                ...(v.customNameservers === undefined
                    ? null
                    : { customNameservers: v.customNameservers }),
                ...(v.zone === undefined ? null : { zone: v.zone }),
            };
        });
}

/** @internal */
export namespace PatchDomainRequestBody$ {
    export const inboundSchema: z.ZodType<PatchDomainRequestBody, z.ZodTypeDef, unknown> = z.union([
        z.lazy(() => RequestBody2$.inboundSchema),
        z.lazy(() => RequestBody1$.inboundSchema),
    ]);

    export type Outbound = RequestBody2$.Outbound | RequestBody1$.Outbound;
    export const outboundSchema: z.ZodType<Outbound, z.ZodTypeDef, PatchDomainRequestBody> =
        z.union([
            z.lazy(() => RequestBody2$.outboundSchema),
            z.lazy(() => RequestBody1$.outboundSchema),
        ]);
}

/** @internal */
export namespace PatchDomainRequest$ {
    export const inboundSchema: z.ZodType<PatchDomainRequest, z.ZodTypeDef, unknown> = z
        .object({
            domain: z.string(),
            teamId: z.string().optional(),
            slug: z.string().optional(),
            RequestBody: z
                .union([
                    z.lazy(() => RequestBody2$.inboundSchema),
                    z.lazy(() => RequestBody1$.inboundSchema),
                ])
                .optional(),
        })
        .transform((v) => {
            return {
                domain: v.domain,
                ...(v.teamId === undefined ? null : { teamId: v.teamId }),
                ...(v.slug === undefined ? null : { slug: v.slug }),
                ...(v.RequestBody === undefined ? null : { requestBody: v.RequestBody }),
            };
        });

    export type Outbound = {
        domain: string;
        teamId?: string | undefined;
        slug?: string | undefined;
        RequestBody?: RequestBody2$.Outbound | RequestBody1$.Outbound | undefined;
    };

    export const outboundSchema: z.ZodType<Outbound, z.ZodTypeDef, PatchDomainRequest> = z
        .object({
            domain: z.string(),
            teamId: z.string().optional(),
            slug: z.string().optional(),
            requestBody: z
                .union([
                    z.lazy(() => RequestBody2$.outboundSchema),
                    z.lazy(() => RequestBody1$.outboundSchema),
                ])
                .optional(),
        })
        .transform((v) => {
            return {
                domain: v.domain,
                ...(v.teamId === undefined ? null : { teamId: v.teamId }),
                ...(v.slug === undefined ? null : { slug: v.slug }),
                ...(v.requestBody === undefined ? null : { RequestBody: v.requestBody }),
            };
        });
}

/** @internal */
export namespace ResponseBody3$ {
    export const inboundSchema: z.ZodType<ResponseBody3, z.ZodTypeDef, unknown> = z
        .object({
            renew: z.boolean().optional(),
            customNameservers: z.array(z.string()).optional(),
            zone: z.boolean().optional(),
        })
        .transform((v) => {
            return {
                ...(v.renew === undefined ? null : { renew: v.renew }),
                ...(v.customNameservers === undefined
                    ? null
                    : { customNameservers: v.customNameservers }),
                ...(v.zone === undefined ? null : { zone: v.zone }),
            };
        });

    export type Outbound = {
        renew?: boolean | undefined;
        customNameservers?: Array<string> | undefined;
        zone?: boolean | undefined;
    };

    export const outboundSchema: z.ZodType<Outbound, z.ZodTypeDef, ResponseBody3> = z
        .object({
            renew: z.boolean().optional(),
            customNameservers: z.array(z.string()).optional(),
            zone: z.boolean().optional(),
        })
        .transform((v) => {
            return {
                ...(v.renew === undefined ? null : { renew: v.renew }),
                ...(v.customNameservers === undefined
                    ? null
                    : { customNameservers: v.customNameservers }),
                ...(v.zone === undefined ? null : { zone: v.zone }),
            };
        });
}

/** @internal */
export namespace ResponseBody2$ {
    export const inboundSchema: z.ZodType<ResponseBody2, z.ZodTypeDef, unknown> = z
        .object({
            moved: z.boolean(),
            token: z.string(),
        })
        .transform((v) => {
            return {
                moved: v.moved,
                token: v.token,
            };
        });

    export type Outbound = {
        moved: boolean;
        token: string;
    };

    export const outboundSchema: z.ZodType<Outbound, z.ZodTypeDef, ResponseBody2> = z
        .object({
            moved: z.boolean(),
            token: z.string(),
        })
        .transform((v) => {
            return {
                moved: v.moved,
                token: v.token,
            };
        });
}

/** @internal */
export namespace ResponseBody1$ {
    export const inboundSchema: z.ZodType<ResponseBody1, z.ZodTypeDef, unknown> = z
        .object({
            moved: z.boolean(),
        })
        .transform((v) => {
            return {
                moved: v.moved,
            };
        });

    export type Outbound = {
        moved: boolean;
    };

    export const outboundSchema: z.ZodType<Outbound, z.ZodTypeDef, ResponseBody1> = z
        .object({
            moved: z.boolean(),
        })
        .transform((v) => {
            return {
                moved: v.moved,
            };
        });
}

/** @internal */
export namespace PatchDomainResponseBody$ {
    export const inboundSchema: z.ZodType<PatchDomainResponseBody, z.ZodTypeDef, unknown> = z.union(
        [
            z.lazy(() => ResponseBody1$.inboundSchema),
            z.lazy(() => ResponseBody2$.inboundSchema),
            z.lazy(() => ResponseBody3$.inboundSchema),
        ]
    );

    export type Outbound =
        | ResponseBody1$.Outbound
        | ResponseBody2$.Outbound
        | ResponseBody3$.Outbound;
    export const outboundSchema: z.ZodType<Outbound, z.ZodTypeDef, PatchDomainResponseBody> =
        z.union([
            z.lazy(() => ResponseBody1$.outboundSchema),
            z.lazy(() => ResponseBody2$.outboundSchema),
            z.lazy(() => ResponseBody3$.outboundSchema),
        ]);
}

/** @internal */
export namespace PatchDomainResponse$ {
    export const inboundSchema: z.ZodType<PatchDomainResponse, z.ZodTypeDef, unknown> = z
        .object({
            HttpMeta: components.HTTPMetadata$.inboundSchema,
            oneOf: z
                .union([
                    z.lazy(() => ResponseBody1$.inboundSchema),
                    z.lazy(() => ResponseBody2$.inboundSchema),
                    z.lazy(() => ResponseBody3$.inboundSchema),
                ])
                .optional(),
        })
        .transform((v) => {
            return {
                httpMeta: v.HttpMeta,
                ...(v.oneOf === undefined ? null : { oneOf: v.oneOf }),
            };
        });

    export type Outbound = {
        HttpMeta: components.HTTPMetadata$.Outbound;
        oneOf?:
            | ResponseBody1$.Outbound
            | ResponseBody2$.Outbound
            | ResponseBody3$.Outbound
            | undefined;
    };

    export const outboundSchema: z.ZodType<Outbound, z.ZodTypeDef, PatchDomainResponse> = z
        .object({
            httpMeta: components.HTTPMetadata$.outboundSchema,
            oneOf: z
                .union([
                    z.lazy(() => ResponseBody1$.outboundSchema),
                    z.lazy(() => ResponseBody2$.outboundSchema),
                    z.lazy(() => ResponseBody3$.outboundSchema),
                ])
                .optional(),
        })
        .transform((v) => {
            return {
                HttpMeta: v.httpMeta,
                ...(v.oneOf === undefined ? null : { oneOf: v.oneOf }),
            };
        });
}
