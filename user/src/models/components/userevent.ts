/*
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

import * as z from "zod";

/**
 * The type of entity.
 */
export enum Type {
    Author = "author",
    BitbucketLogin = "bitbucket_login",
    Bold = "bold",
    DeploymentHost = "deployment_host",
    DnsRecord = "dns_record",
    GitLink = "git_link",
    GithubLogin = "github_login",
    GitlabLogin = "gitlab_login",
    HookName = "hook_name",
    Integration = "integration",
    EdgeConfig = "edge-config",
    Link = "link",
    ProjectName = "project_name",
    ScalingRules = "scaling_rules",
    EnvVarName = "env_var_name",
    Target = "target",
    Store = "store",
    System = "system",
}

/**
 * A list of "entities" within the event `text`. Useful for enhancing the displayed text with additional styling and links.
 */
export type Entities = {
    /**
     * The type of entity.
     */
    type: Type;
    /**
     * The index of where the entity begins within the `text` (inclusive).
     */
    start: number;
    /**
     * The index of where the entity ends within the `text` (non-inclusive).
     */
    end: number;
};

/**
 * Metadata for the User who generated the event.
 */
export type User = {
    avatar: string;
    email: string;
    slug?: string | undefined;
    uid: string;
    username: string;
};

/**
 * Array of events generated by the User.
 */
export type UserEvent = {
    /**
     * The unique identifier of the Event.
     */
    id: string;
    /**
     * The human-readable text of the Event.
     */
    text: string;
    /**
     * A list of "entities" within the event `text`. Useful for enhancing the displayed text with additional styling and links.
     */
    entities: Array<Entities>;
    /**
     * Timestamp (in milliseconds) of when the event was generated.
     */
    createdAt: number;
    /**
     * Metadata for the User who generated the event.
     */
    user?: User | undefined;
    /**
     * The unique identifier of the User who generated the event.
     */
    userId: string;
};

/** @internal */
export namespace Type$ {
    export const inboundSchema = z.nativeEnum(Type);
    export const outboundSchema = inboundSchema;
}

/** @internal */
export namespace Entities$ {
    export const inboundSchema: z.ZodType<Entities, z.ZodTypeDef, unknown> = z
        .object({
            type: Type$.inboundSchema,
            start: z.number(),
            end: z.number(),
        })
        .transform((v) => {
            return {
                type: v.type,
                start: v.start,
                end: v.end,
            };
        });

    export type Outbound = {
        type: string;
        start: number;
        end: number;
    };

    export const outboundSchema: z.ZodType<Outbound, z.ZodTypeDef, Entities> = z
        .object({
            type: Type$.outboundSchema,
            start: z.number(),
            end: z.number(),
        })
        .transform((v) => {
            return {
                type: v.type,
                start: v.start,
                end: v.end,
            };
        });
}

/** @internal */
export namespace User$ {
    export const inboundSchema: z.ZodType<User, z.ZodTypeDef, unknown> = z
        .object({
            avatar: z.string(),
            email: z.string(),
            slug: z.string().optional(),
            uid: z.string(),
            username: z.string(),
        })
        .transform((v) => {
            return {
                avatar: v.avatar,
                email: v.email,
                ...(v.slug === undefined ? null : { slug: v.slug }),
                uid: v.uid,
                username: v.username,
            };
        });

    export type Outbound = {
        avatar: string;
        email: string;
        slug?: string | undefined;
        uid: string;
        username: string;
    };

    export const outboundSchema: z.ZodType<Outbound, z.ZodTypeDef, User> = z
        .object({
            avatar: z.string(),
            email: z.string(),
            slug: z.string().optional(),
            uid: z.string(),
            username: z.string(),
        })
        .transform((v) => {
            return {
                avatar: v.avatar,
                email: v.email,
                ...(v.slug === undefined ? null : { slug: v.slug }),
                uid: v.uid,
                username: v.username,
            };
        });
}

/** @internal */
export namespace UserEvent$ {
    export const inboundSchema: z.ZodType<UserEvent, z.ZodTypeDef, unknown> = z
        .object({
            id: z.string(),
            text: z.string(),
            entities: z.array(z.lazy(() => Entities$.inboundSchema)),
            createdAt: z.number(),
            user: z.lazy(() => User$.inboundSchema).optional(),
            userId: z.string(),
        })
        .transform((v) => {
            return {
                id: v.id,
                text: v.text,
                entities: v.entities,
                createdAt: v.createdAt,
                ...(v.user === undefined ? null : { user: v.user }),
                userId: v.userId,
            };
        });

    export type Outbound = {
        id: string;
        text: string;
        entities: Array<Entities$.Outbound>;
        createdAt: number;
        user?: User$.Outbound | undefined;
        userId: string;
    };

    export const outboundSchema: z.ZodType<Outbound, z.ZodTypeDef, UserEvent> = z
        .object({
            id: z.string(),
            text: z.string(),
            entities: z.array(z.lazy(() => Entities$.outboundSchema)),
            createdAt: z.number(),
            user: z.lazy(() => User$.outboundSchema).optional(),
            userId: z.string(),
        })
        .transform((v) => {
            return {
                id: v.id,
                text: v.text,
                entities: v.entities,
                createdAt: v.createdAt,
                ...(v.user === undefined ? null : { user: v.user }),
                userId: v.userId,
            };
        });
}
